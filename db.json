{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1732532129653},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1732532151337},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1732532151337},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1732532151124},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1732532151159},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1732532151152},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1732532151146},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1732532151160},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1732532151340},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1732532151324},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1732532151341},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1732532151341},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1732532151342},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1732532151342},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1732532151342},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1732532151163},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1732532151161},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1732532151341},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1732532151161},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1732532151136},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1732532151137},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1732532151139},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1732532151153},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1732532151158},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1732532151159},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1732532151160},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1732532151147},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1732532151154},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1732532151144},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1732532151150},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1732532151162},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1732532151163},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1732532151163},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1732532151156},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1732532151337},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1732532151133},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1732532151337},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1732532151337},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1732532151150},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1732532151162},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1732532151152},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1732532151153},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1732532151161},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1732532151164},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1732532151163},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1732532151338},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1732532151339},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1732532151336},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1732532151330},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1732532151324},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721746612000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1721746612000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1721746612000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1721746612000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1721746612000},{"_id":"themes/fluid/README_en.md","hash":"365184a73af40e7365504c3077f3d80dfee1d80e","modified":1721746612000},{"_id":"themes/fluid/package.json","hash":"7746460fc2eba7439b494c46aa9b5ded81370819","modified":1721746612000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1721746612000},{"_id":"themes/fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1721746612000},{"_id":"themes/fluid/_config.yml","hash":"e62d2e25cae57e8469e3f48c9d17be1fd284a969","modified":1721746612000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1721746612000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1721746612000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1721746612000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1721746612000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1721746612000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1721746612000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1721746612000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1721746612000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1721746612000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1721746612000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1721746612000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1721746612000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1721746612000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1721746612000},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1721746612000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1721746612000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1721746612000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1721746612000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1721746612000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1721746612000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1721746612000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1721746612000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1721746612000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1721746612000},{"_id":"themes/fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1721746612000},{"_id":"themes/fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1721746612000},{"_id":"themes/fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1721746612000},{"_id":"themes/fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1721746612000},{"_id":"themes/fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1721746612000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1721746612000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1721746612000},{"_id":"themes/fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1721746612000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1721746612000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1721746612000},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1721746612000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1721746612000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1721746612000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1721746612000},{"_id":"themes/fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1721746612000},{"_id":"themes/fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1721746612000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1721746612000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1721746612000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1721746612000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1721746612000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1721746612000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1721746612000},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1721746612000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1721746612000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1721746612000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1721746612000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1721746612000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1721746612000},{"_id":"themes/fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1721746612000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1721746612000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1721746612000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1721746612000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1721746612000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1721746612000},{"_id":"themes/fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1721746612000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1721746612000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1721746612000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1721746612000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1721746612000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1721746612000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1721746612000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1721746612000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1721746612000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1721746612000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1721746612000},{"_id":"source/about/index.md","hash":"a437c4b96a578a91e2714c0b7442ca6c05c9499b","modified":1732565535093},{"_id":"source/_posts/测试1.md","hash":"5e4a027bae4ba11f845c5f6493dca609d6e6598c","modified":1732566116221},{"_id":"source/_posts/测试.md","hash":"5ea66ee7ec462debc4109580e9fbb50d20e8516d","modified":1732567310101},{"_id":"public/local-search.xml","hash":"cac64ea81e61a93b22bf2a16b1a10f43fa5a6724","modified":1732743224400},{"_id":"public/about/index.html","hash":"869fdd5fbc49a772a54952752dd5f3c1045b0f2e","modified":1732743224400},{"_id":"public/archives/index.html","hash":"cf91dade9cfa01a34619c3a0e47f4830b94c2df5","modified":1732743224400},{"_id":"public/archives/page/2/index.html","hash":"cf680d72dad375210aa5f85bc6ad90fc5e120933","modified":1732743224400},{"_id":"public/archives/page/3/index.html","hash":"b7eb0a7fe5f68dbbb1a14394b1df4d4d2eb421d2","modified":1732743224400},{"_id":"public/archives/page/4/index.html","hash":"27c91807c4aa15f4594f6b3b1c51ac7c748f6743","modified":1732743224400},{"_id":"public/archives/page/5/index.html","hash":"84e3f039a65016f4ce6e0810aabf475f7ca60af0","modified":1732743224400},{"_id":"public/archives/2024/index.html","hash":"4674b3f55a0697fe5349515b345fd86d2e111c21","modified":1732743224400},{"_id":"public/archives/2024/page/2/index.html","hash":"b5243399c04dfdca8be2297dde1053625a982a9b","modified":1732743224400},{"_id":"public/archives/2024/page/3/index.html","hash":"e6b978c22c1b6b31925a745b98815ab763c5434e","modified":1732743224400},{"_id":"public/archives/2024/page/4/index.html","hash":"46ea44f3060bbca697ccaa7ed7db7e43fec70756","modified":1732743224400},{"_id":"public/archives/2024/page/5/index.html","hash":"ee8af5d21fff7be0c7cd4e37dfd09a455be46570","modified":1732743224400},{"_id":"public/archives/2024/05/index.html","hash":"9545f69710989bf79720cdb05b26392b8c67fc79","modified":1732743224400},{"_id":"public/archives/2024/07/index.html","hash":"4f772efe9c511ee10b25b6496f251feb06dbc587","modified":1732743224400},{"_id":"public/archives/2024/08/index.html","hash":"7de9915046cb85f9fece63621c9c9789198796fc","modified":1732743224400},{"_id":"public/archives/2024/09/index.html","hash":"31f64d2ee3b3cb102d76e77df22bd8fed7bcfcf3","modified":1732743224400},{"_id":"public/archives/2024/09/page/2/index.html","hash":"2a6e810ee78aee25719d61fe9f37ffe8af929673","modified":1732743224400},{"_id":"public/archives/2024/09/page/3/index.html","hash":"3fa9f84766466a1f12440e2d2700803ceeba2df4","modified":1732743224400},{"_id":"public/archives/2024/10/index.html","hash":"8f66d21dff29f5f7e7acb0f8f51cb9006b9c3d31","modified":1732743224400},{"_id":"public/archives/2024/11/index.html","hash":"393a3f8d12a4165f1e43dfa8b4563acce8fd4e14","modified":1732743224400},{"_id":"public/archives/2024/11/page/2/index.html","hash":"7ec64482d552344867713baa5bbdc3616e84144c","modified":1732743224400},{"_id":"public/tags/123/index.html","hash":"f604add5242146d7430bb2dfbabde444e9b7a322","modified":1732743224400},{"_id":"public/tags/哈哈/index.html","hash":"99fe8cd4f59dd99b3b96cea629c972ac6386ec5c","modified":1732743224400},{"_id":"public/404.html","hash":"1357dda0f33af64002a24a44b4af66cbdd328d78","modified":1732743224400},{"_id":"public/tags/index.html","hash":"b43672c77246f1309ddd5c549d5c043edcd65a56","modified":1732743224400},{"_id":"public/categories/index.html","hash":"57a1e4237c2c0c23fb945b61c2317c0c96903fe3","modified":1732743224400},{"_id":"public/links/index.html","hash":"88d7abfc7118fd9febd933e98a1a0cd6639e4bcd","modified":1732743224400},{"_id":"public/lyyy/测试/index.html","hash":"345fc0c4f4fc53cbfee7dc16c87062156bbcb19b","modified":1732743224400},{"_id":"public/lyyy/hello-world/index.html","hash":"16d791053329669df9ae1dc3d350bbea9a5d6be7","modified":1732743224400},{"_id":"public/lyyy/关于 Talkatone 保号和费用/index.html","hash":"8dd74b1237631f2975279d9f9de4f3058ac1113a","modified":1732743224400},{"_id":"public/lyyy/ 命令行工具 和 远程管理软件/index.html","hash":"2368bd4067364d81b55c35fe86c44606b26a94ff","modified":1732743224400},{"_id":"public/lyyy/CF-优选官方IP/index.html","hash":"639961461e215c26ab49f54abbf1c5eee9725fbf","modified":1732743224400},{"_id":"public/lyyy/常见协议比较/index.html","hash":"dfdb263ca955abe6d61300a63786bb626345645c","modified":1732743224400},{"_id":"public/lyyy/mca最常用终端命令/index.html","hash":"ad3ed998e96c4c27a5e9e906635c8c15acb8a05f","modified":1732743224400},{"_id":"public/lyyy/Python 和 Java 是两种流行的编程语言/index.html","hash":"908bdd47ebb4a6c71bbb63a3c0f9a3212b3c2336","modified":1732743224400},{"_id":"public/lyyy/substore OpenAPI/index.html","hash":"8feeb0165c04275fc6bdfa908786307eb7a33bcf","modified":1732743224400},{"_id":"public/lyyy/substore脚本操作/index.html","hash":"7604202006fbc55f53d11859cdf3354835bdd00b","modified":1732743224400},{"_id":"public/lyyy/ iOS 代理软件/index.html","hash":"ab281a38d527c1b26b94861edacfdcab2e92d950","modified":1732743224400},{"_id":"public/lyyy/在 Nginx 的 location 配置中path路径一篇搞定/index.html","hash":"e78536dec97e3907f392c53c66ef78f2d697c91b","modified":1732743224400},{"_id":"public/lyyy/【1】VI与VIM区别/index.html","hash":"51ff1098615b03c0b9fdf94a41d06a24628d2eb8","modified":1732743224400},{"_id":"public/lyyy/Linux命令大全(超详细版)/index.html","hash":"a271c3f70930faed132859ed6c00e232aaa3f636","modified":1732743224400},{"_id":"public/lyyy/docker镜像相关/index.html","hash":"9c6016420af24fab312de18b5fa13aafccfdf82b","modified":1732743224400},{"_id":"public/lyyy/nginx配置/index.html","hash":"a1fb11d8f3941d1b218f040254b5018661be20bf","modified":1732743224400},{"_id":"public/lyyy/docker挂载nginx失败解决/index.html","hash":"0e3e58cad590640ffbc4739480a072a218208fc3","modified":1732743224400},{"_id":"public/lyyy/macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：/index.html","hash":"f017c45af926e74f072fb5f0f57cc66e8e090980","modified":1732743224400},{"_id":"public/lyyy/tg注意事项及风控规则/index.html","hash":"3c4dfd87bb1d0f4c3cc4b0f75a6f6874752906d7","modified":1732743224400},{"_id":"public/lyyy/macOS Sequoia 15/index.html","hash":"5f02e95e68d56b1362255076bda1fa85cf87a4bc","modified":1732743224400},{"_id":"public/lyyy/QX 懒人配置/index.html","hash":"51beb7eada2db85701d9ecf60259470827926280","modified":1732743224400},{"_id":"public/lyyy/递归的思想模型/index.html","hash":"3c819be2ef09af4b30f2815edbf7ddb3135b6e6c","modified":1732743224400},{"_id":"public/lyyy/排序算法/index.html","hash":"b2044ae2dfad176718781a3ed264c538cd4b9603","modified":1732743224400},{"_id":"public/lyyy/彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析/index.html","hash":"876e8b92ef25e0c9d69e5d5dc9ab53f27df214b9","modified":1732743224400},{"_id":"public/lyyy/基本步骤/index.html","hash":"183c12af336328200fc1e71c30c140c8585a4b8d","modified":1732743224400},{"_id":"public/lyyy/Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2/index.html","hash":"86affabfc45025b790b2448047f85ece133a3824","modified":1732743224400},{"_id":"public/lyyy/Telegra.ph API 文档/index.html","hash":"5610c03c87087cf9fe1c5e32914912eb1d1e5808","modified":1732743224400},{"_id":"public/lyyy/免费好用的api hub大全/index.html","hash":"a9d68b72a720dd331d650da87297fc3147f1077b","modified":1732743224400},{"_id":"public/lyyy/什么是CDN？？？/index.html","hash":"74789bbec010744c0d93b7ef99bd17598f458fb0","modified":1732743224400},{"_id":"public/lyyy/Axios/index.html","hash":"2902f1afd0b1ff22a10d6410f4c91abad9db88ec","modified":1732743224400},{"_id":"public/lyyy/Telegraph API 概述/index.html","hash":"7107de988089685c58954748db22493d7042e7ee","modified":1732743224400},{"_id":"public/lyyy/Telegram Premium/index.html","hash":"5e6f8f191cd78b271e56c272f3b728023889c401","modified":1732743224400},{"_id":"public/lyyy/yaml语法/index.html","hash":"4934a610d25a5c3acced17fcdf5b8c02361f3a7a","modified":1732743224400},{"_id":"public/lyyy/提交网站到搜索引擎/index.html","hash":"184e6c02833deb2ea8cc1772f4d6c2f1ff525382","modified":1732743224400},{"_id":"public/lyyy/常见徽章平台和类型/index.html","hash":"59d05298478e2c6f43ac83376e4e0323f97001e7","modified":1732743224400},{"_id":"public/lyyy/Lyone/index.html","hash":"083947d53020ed8e8dd869b48ad210c56e3dc534","modified":1732743224400},{"_id":"public/lyyy/使用博客平台/index.html","hash":"ed53a25afcf7fdc443ebce27c6dd80337f2b44d1","modified":1732743224400},{"_id":"public/lyyy/Surge配置文件详解/index.html","hash":"799a264eafea5ded676ff1848b9fc7f71cf5b9d4","modified":1732743224400},{"_id":"public/lyyy/搜索技术，普通人变强的唯一外挂。全套详细宝藏教程/index.html","hash":"60749d12049997194004c6220763ed7558464346","modified":1732743224400},{"_id":"public/lyyy/java规划路线/index.html","hash":"360fe9f94e58c320a66cb9d18197118506e29350","modified":1732743224400},{"_id":"public/lyyy/《黑神话·悟空》导图拆解攻略：/index.html","hash":"e80ce8e96d716fdfc471d405c81e827de0d59ff2","modified":1732743224400},{"_id":"public/lyyy/Redis通用命令/index.html","hash":"8e6ac3978ff7e093fb4ec2e939754338a4e259c0","modified":1732743224400},{"_id":"public/lyyy/Java复习/index.html","hash":"8ff0c0efb5cf67674ee497104d40a585c286a992","modified":1732743224400},{"_id":"public/lyyy/axios封装request/index.html","hash":"ce01585ee9180d0446286696956bebaa0829a870","modified":1732743224400},{"_id":"public/lyyy/java/index.html","hash":"e9578ac3d8d642e082bfb7fa8bbd0738132f7451","modified":1732743224400},{"_id":"public/lyyy/Git命令/index.html","hash":"3dec5a5a6d4f87f81ed570620c80aeeef58131ce","modified":1732743224400},{"_id":"public/lyyy/神级IDEA插件/index.html","hash":"f7f8a37aa8343c578bd07171314c8c29776107b8","modified":1732743224400},{"_id":"public/index.html","hash":"e27bdfbd5723d3089248758a9a223d4eca534554","modified":1732743224400},{"_id":"public/page/2/index.html","hash":"739b816fcceb7d7f722d15c2c1122eeecb254a30","modified":1732743224400},{"_id":"public/page/3/index.html","hash":"276827920c8186278df9dc621a0c4bbced35f262","modified":1732743224400},{"_id":"public/page/4/index.html","hash":"dc175df5de16719d509b4f0f34aa62ff2ea2e836","modified":1732743224400},{"_id":"public/page/5/index.html","hash":"56a1af4d86e53708dd3fc4818acf14d5c44d00a4","modified":1732743224400},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1732743224400},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1732743224400},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1732743224400},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1732743224400},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1732743224400},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1732743224400},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1732743224400},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1732743224400},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1732743224400},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1732743224400},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1732743224400},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1732743224400},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1732743224400},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1732743224400},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1732743224400},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1732743224400},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1732743224400},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1732743224400},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1732743224400},{"_id":"public/css/style.css","hash":"4b65ba99401dce8b954f99a41762967e21eb40c7","modified":1732743224400},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1732743224400},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1732743224400},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1732743224400},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1732743224400},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1732743224400}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2024-11-25T20:11:56.000Z","_content":"这里写关于页的正文，支持 Markdown, HTML\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-11-26 04:11:56\n---\n这里写关于页的正文，支持 Markdown, HTML\n","updated":"2024-11-25T20:12:15.093Z","path":"about/index.html","_id":"cm3xgrwdv0000zws6enkiew8p","comments":1,"layout":"page","content":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n","excerpt":"","more":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-11-25T10:55:29.653Z","updated":"2024-11-25T10:55:29.653Z","comments":1,"layout":"post","photos":[],"_id":"cm3wxnze20000mbs66i0w3pkw","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Surge配置文件详解","date":"2024-09-05T03:09:20.087Z","_content":"# Surge配置文件详解\n\n> 本文主要介绍Surge的配置文件，带大家手撸配置文件，具体的懒人配置、用法移步 [懒人配置](https://raw.githubusercontent.com/lsimply/surge/main/surge.conf)。\n\n## Macos 和 iOS 相同的配置项\n\n------\n\n- loglevel\n\n```\nloglevel = notify\n```\n\n作用\n\n日志级别，不建议在日常使用中启用详细，因为这会显著降低性能。 可选参数：verbose, info, notify, warning\n\n------\n\n- ipv6\n\n```\nipv6 = false\n```\n\n作用\n\nIPv6协议, 启用完整的 IPv6 支持，具体来说，开启该选项后，访问域名时会查询该域名的AAAA记录。即使未启用此选项，也可以通过直接访问 IPv6 地址来访问 IPv6 站点。\n\n------\n\n- ipv6-vif\n\n```\nipv6-vif = false\n```\n\n作用\n\n允许 IPv6 通过 Surge VIF。当您希望 Surge 处理连接到 IPv6 地址的原始 TCP 连接时很有用。 off ：切勿使用 IPv6 设置 Surge VIF auto ：仅当本地网络具有有效的 IPv6 网络时，才使用 IPv6 设置 Surge VIF always ：始终使用 IPv6 设置 Surge VIF\n\n------\n\n- dns-server\n\n```\ndns-server = system, 223.5.5.5, 119.29.29.29, 1.1.1.1, 1.0.0.1, 8.8.8.8, 8.8.4.4, 9.9.9.9:995\n```\n\n作用\n\ndns服务器，上游DNS服务器的IP地址\n\n------\n\n- skip-proxy\n\n```\nskip-proxy = localhost, *.local, 0.0.0.0/8, 10.0.0.0/8, 17.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.168.0.0/16, 192.88.99.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32\n```\n\n作用\n\n跳过代理，在 iOS 版本中，此选项强制与这些域/IP 范围的连接由 Surge VIF 而不是 Surge 代理处理。在 macOS 版本中，当启用“设置为系统代理”时，这些设置将应用于系统。此选项用于修复某些应用的兼容性问题。 apple.com、*apple.com、192.168.2.* or 192.168.2.0/24 注意：如果输入 IP 地址或地址范围，则只有在使用该地址连接到该主机时才能绕过代理，而不能在通过解析为该地址的域名连接到主机时绕过代理。\n\n------\n\n- exclude-simple-hostnames\n\n```\nexclude-simple-hostnames = true\n```\n\n作用\n\n排除简单主机名，就像 skip-proxy 参数一样。此选项允许请求使用由 Surge VIF 而不是 Surge 代理处理的简单主机名（不带点）。 比如：mysql01、redis01\n\n------\n\n- external-controller-access\n\n```\nexternal-controller-access = mima1234@0.0.0.0:6166\n```\n\n作用\n\n外部控制器访问，此选项允许外部控制器控制 Surge，例如 Surge Dashboard （macOS） 和 Surge iOS 遥控器 （iOS）。例如：key@0.0.0.0:6166\n\n------\n\n- http-api-tls\n\n```\nhttp-api-tls = False\n```\n\n作用\n\n使用 HTTPS 协议而不是 HTTP必须先配置 MitM CA 证书。您需要在客户端设备上手动安装证书。\n\n------\n\n- http-api-web-dashboard\n\n```\nhttp-api-web-dashboard = false\n```\n\n作用\n\n启用此功能后，您可以通过 Web 浏览器控制 Surge。\n\n------\n\n- show-error-page-for-reject\n\n```\nshow-error-page-for-reject = true\n```\n\n作用\n\n显示错误页面拒绝，如果请求是纯 HTTP 请求，则显示 REJECT 策略的错误网页。\n\n------\n\n- tun-excluded-routes\n\n```\ntun-excluded-routes = 22.0.0.0/8\n```\n\n作用\n\nSurge VIF只能处理 TCP 和 UDP 协议。使用此选项可绕过特定 IP 范围，以允许所有流量通过。 注意：此选项仅适用于Surge VIF。Surge Proxy Server 处理的请求不受影响。合并 skip-proxy 并确保 tun-excluded-routes 特定 HTTP 流量绕过 Surge。\n\n------\n\n- tun-included-routes\n\n```\ntun-included-routes = 192.18.0.0/16\n```\n\n作用\n\n默认情况下，Surge VIF 接口将自身声明为默认路由。但是，由于 Wi-Fi 接口的路由较小，因此某些流量可能无法通过浪涌 VIF 接口。使用此选项可添加较小的路由。\n\n------\n\n- internet-test-url\n\n```\ninternet-test-url = http://223.6.6.6\n```\n\n作用\n\n国内Internet 连接测试的 URL, 以及，DIRECT 策略的测试 URL\n\n------\n\n- proxy-test-url\n\n```\nproxy-test-url = http://1.0.0.1/generate_204\n```\n\n作用\n\n代理、策略组的默认测试 URL\n\n------\n\n- test-timeout\n\n```\ntest-timeout = 5\n```\n\n作用\n\n连接测试超时（秒）\n\n------\n\n- always-real-ip\n\n```\nalways-real-ip = *.test.com\n```\n\n作用\n\n始终真实的 IP 此选项要求 Surge 在 Surge VIF 处理 DNS 问题时返回真实 IP 地址而不是虚假 IP 地址 DNS数据包将被转发到上游DNS服务器 此参数属于主机列表类型，详细规则请参见：https://manual.nssurge.com/others/host-list.html 1.使用前缀 - 排除主机名 2.支持通配符 * 和 ? 3.使用后缀 :port 匹配其他端口,如果未提供端口号，则 Surge 将自动为该参数附加标准端口号，就像 force-http-engine-hosts 参数一样，如果仅配置了主机名，则仅对端口 80 有效。对于 MITM 功能，它仅对端口 443 有效。 4.使用后缀 :0 以匹配所有端口 5.使用 直接使用 IPv4/IPv6 地址（而不是域）匹配所有主机名 eg: -*icloud*, -*.mzstatic.com, -*.facebook.com, -*.instagram.com, -*.twitter.com, -*dropbox*, -*apple*, -*.amazonaws.com, -, *\n\n------\n\n- hijack-dns\n\n```\nhijack-dns = *:53\n```\n\n作用\n\n劫持DNS,默认情况下，Surge 仅返回发送到 Surge DNS 地址 （198.18.0.2） 的 DNS 查询的虚假 IP 地址。发送到标准 DNS 的查询将被转发。某些设备或软件始终使用硬编码的 DNS 服务器。（例如，Google Speakers始终使用 8.8.8.8）。您可以使用此选项劫持查询以获取虚假地址。您可以使用 hijack-dns = *:53 劫持所有DNS查询\n\n------\n\n- force-http-engine-hosts\n\n```\nforce-http-engine-hosts = *.test.com\n```\n\n作用\n\n使 Surge 将 TCP 连接视为 HTTP 请求。Surge HTTP 引擎将处理请求，并且所有高级功能都将可用，例如捕获、重写和脚本编写。此参数属于主机列表类型，详细规则请参见：https://manual.nssurge.com/others/host-list.html\n\n------\n\n- encrypted-dns-follow-outbound-mode\n\n```\nencrypted-dns-follow-outbound-mode = true\n```\n\n作用\n\n加密 DNS 跟随出站模式,默认情况下，加密的 DNS 查找使用直接出站。启用该选项将使 DOH 遵循出站模式设置和规则。\n\n- encrypted-dns-server\n\n```\nencrypted-dns-server = \n```\n\n作用\n\n加密的 DNS 服务器,加密的 DNS 服务器的 URL。如果配置了加密 DNS，则传统 DNS 将仅用于测试连接并解析加密 DNS URL 中的域。\n\n------\n\n- encrypted-dns-skip-cert-verification\n\n```\nencrypted-dns-skip-cert-verification = false\n```\n\n作用\n\n跳过加密的DNS服务器证书验证，这是不安全的。\n\n- use-local-host-item-for-proxy\n\n```\nuse-local-host-item-for-proxy = true\n```\n\n作用\n\n使用本地主机代理,默认情况下，如果使用代理策略，则始终在远程服务器上执行 DNS 查找。启用此选项后，如果存在目标域的本地 DNS 映射结果，则 Surge 会使用 IP 地址而不是域来设置代理连接。\n\n------\n\n- geoip-maxmind-url\n\n```\ngeoip-maxmind-url = https://github.com/Hackl0us/GeoIP2-CN/raw/release/Country.mmdb\n```\n\n作用\n\n要更新的 GeoIP 数据库的 URL\n\n- disable-geoip-db-auto-update\n\n```\ndisable-geoip-db-auto-update = false\n```\n\n作用\n\n禁用 GeoIP 数据库的自动更新\n\n------\n\n- allow-dns-svcb\n\n```\nallow-dns-svcb = false\n```\n\n作用\n\niOS 系统可能会执行 SVCB 记录 DNS 查找，而不是标准 A 记录查找。这会导致 Surge 无法返回虚拟 IP 地址。因此，默认情况下，禁止 SVCB 记录查找，以强制系统执行 A 记录查找。\n\n------\n\n- udp-policy-not-supported-behaviour\n\n```\nudp-policy-not-supported-behaviour = REJECT\n```\n\n作用\n\nUDP 流量与不支持 UDP 中继的策略匹配时的回退行为,可能的值： DIRECT 、 REJECT, 如果没有代理服务器支持 UDP 转发，可修改为「 direct 」或注释下条，但需注意同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。\n\n------\n\n- proxy-test-udp\n\n```\nproxy-test-udp = apple.com@8.8.8.8\n```\n\n作用\n\n代理的默认 UDP 测试参数, 例如： apple.com@8.8.8.8\n\n------\n\n- udp-priority\n\n```\nudp-priority = false\n```\n\n作用\n\n当系统负载非常高且数据包处理延迟时，启用将优先处理 UDP 数据包。也称为游戏模式\n\n------\n\n- always-raw-tcp-hosts\n\n```\nalways-raw-tcp-hosts = *.baidu.com\n```\n\n作用\n\nSurge 将自动嗅探发送到端口 80 和 443 的 TCP 请求的协议，从而在优化性能的同时启用高级 HTTP/HTTPS 功能。但是，这可能会导致一些兼容性问题。如果遇到问题，可以在此处添加主机名，Surge 不会嗅探这些请求的协议。此参数属于主机列表类型，详细规则请参见：https://manual.nssurge.com/others/host-list.html\n\n------\n\n## iOS 独有的配置项\n\n- allow-wifi-access\n\n```\nallow-wifi-access = false\n```\n\n作用\n\n允许 wifi 访问,允许 Surge 代理服务从 LAN 中的其他设备访问。\n\n------\n\n- wifi-access-http-port\n\n```\nwifi-access-http-port = 6152\n```\n\n作用\n\nSurge HTTP 代理服务的端口号\n\n------\n\n- wifi-access-socks5-port\n\n```\nwifi-access-socks5-port = 6153\n```\n\n作用\n\nSurge SOCKS5 代理服务的端口号\n\n------\n\n- wifi-access-http-auth\n\n```\nwifi-access-http-auth = surge:mima1234\n```\n\n作用\n\n要求对 Surge HTTP 代理服务进行身份验证。例如：用户名：密码\n\n------\n\n- wifi-assist\n\n```\nwifi-assist = false\n```\n\n作用\n\n启用 Wi-Fi 助手 (在 Wi-Fi 网络不佳时尝试使用数据网络建立连接，请仅当使用不限量的数据流量时开启)\n\n------\n\n- hide-vpn-icon\n\n```\nhide-vpn-icon = false\n```\n\n作用\n\n隐藏状态栏中的 VPN 图标\n\n------\n\n- all-hybrid\n\n```\nall-hybrid = false\n```\n\n作用\n\n当 Wi-Fi 网络较差时，不要设置与蜂窝数据的连接，而是始终同时设置与 Wi-Fi 和蜂窝数据的连接 此选项可以在 Wi-Fi 较差或 Wi-Fi 网络切换时显著改善网络体验 此功能将应用于所有 TCP 连接和 DNS 查找。仅当您拥有无限的蜂窝数据计划时才启用它\n\n------\n\n- allow-hotspot-access\n\n```\nallow-hotspot-access = ture\n```\n\n作用\n\n允许在“个人热点”打开时从其他设备访问 Surge 代理服务\n\n------\n\n- include-all-networks\n\n```\ninclude-all-networks = false\n```\n\n作用\n\n包含所有网络,默认情况下，某些请求可能不会被 Surge 接管。例如，应用程序可以绑定到物理网络接口以绕过浪涌 VIF。启用“包括所有网络”选项，以确保所有请求都由 Surge 处理而不会泄漏。当您使用 Surge 作为防火墙时，此选项很有用。（需要 iOS 14.0 或以上版本）,启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。\n\n------\n\n- include-local-networks\n\n```\ninclude-local-networks = false\n```\n\n作用\n\n包含本地网络,启用此选项可使 Surge VIF 处理发送到 LAN 的请求。（需要 iOS 14.2 或更高版本）启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。必须与 include-all-networks=true 结合使用。\n\n------\n\n- include-apns\n\n```\ninclude-apns = false\n```\n\n作用\n\n启用此选项可使 Surge VIF 处理 Apple 推送通知服务 （APNs） 的网络流量。必须与 include-all-networks=true 结合使用。\n\n------\n\n- include-cellular-services\n\n```\ninclude-cellular-services = false\n```\n\n作用\n\n启用此选项可使 Surge VIF 处理蜂窝服务的 Internet 可路由网络流量。（VoLTE、Wi-Fi 通话、IMS、彩信、可视语音信箱等）.请注意，某些蜂窝运营商会绕过互联网，将蜂窝网络服务流量直接路由到运营商网络。此类蜂窝服务流量始终被排除在隧道之外。必须与 include-all-networks=true 结合使用。\n\n------\n\n- compatibility-mode\n\n```\ncompatibility-mode = 1\n```\n\n作用\n\n兼容性模式,此选项用于控制 Surge iOS 的工作模式。\n\n0：自动，在 5.8.0 之前的 Surge iOS 版本中，这相当于 1，从 5.8.0 开始，它相当于 3\n\n1：代理接管 + VIF，在此模式下，代理接管的优先级高于 VIF 接管，提供最佳性能，但某些应用程序可能会检查代理设置并拒绝工作。\n\n2：仅代理接管\n\n3：VIF Takeover Only：最新版本的默认工作模式。\n\n4：代理接管 + VIF，但代理使用 VIF 地址而不是环回地址。\n\n5：代理接管+VIF，但VIF路由使用多个较小的路由进行接管，没有配置默认路由，可以用来绕过一些特殊问题。（例如，HomeKit 安防摄像头）\n\n------\n\n## Macos 独有的配置\n\n- use-default-policy-if-wifi-not-primary\n\n```\nuse-default-policy-if-wifi-not-primary = false\n```\n\n作用\n\n如果禁用，即使 Wi-Fi 不是主网络接口，SSID/BSSID 模式仍可匹配。\n\n- read-etc-hosts\n\n```\nread-etc-hosts = true\n```\n\n作用\n\n遵循 /etc/hosts 中的本地 DNS 映射项\n\n------\n\n- http-listen\n\n```\nhttp-listen = 0.0.0.0\n```\n\n作用\n\nSurge HTTP 代理服务的端口号\n\n------\n\n- socks5-listen\n\n```\nsocks5-listen = 0.0.0.0\n```\n\n作用\n\nSurge SOCKS5 代理服务的端口号\n\n------\n\n- debug-cpu-usage\n\n```\ndebug-cpu-usage = false\n```\n\n作用\n\n启用 CPU 调试模式。这可能会降低性能\n\n------\n\n- debug-memory-usage\n\n```\ndebug-memory-usage = false\n```\n\n作用\n\n启用内存调试模式。这可能会降低性能\n\n------\n\n- vif-mode\n\n```\nvif-mode = v3\n```\n\n作用\n\nvif模式\n\nauto ：让Surge自动选择最合适的工作模式。\n\nv1 ：传统模式，TCP协议栈完全由Surge管理。由于 Surge 运行在用户空间中，这意味着每个数据包都需要从内核空间传输到用户空间进行处理。\n\nv2 ：在 5.0 版本中引入，它使用 macOS 中的数据包过滤器机制，利用 macOS 的 TCP 协议栈，从而避免了在内核空间和用户空间之间切换的开销，从而显着提高了性能。但是，由于它需要修改 pf 设置，因此它与虚拟机网络和网络共享功能不兼容。\n\nv3 ：在 5.2 版中引入，它绕过了数据包过滤器，并采用另一种技术来使用 macOS 的 TCP 协议栈。性能略低于 v2，但避免了因调整 pf 设置而导致的兼容性问题。","source":"_posts/Surge配置文件详解.md","raw":"---\ntitle: Surge配置文件详解\ndate: 2024-09-05T11:09:20.087Z\ntags: []\ncategories: []\n---\n# Surge配置文件详解\n\n> 本文主要介绍Surge的配置文件，带大家手撸配置文件，具体的懒人配置、用法移步 [懒人配置](https://raw.githubusercontent.com/lsimply/surge/main/surge.conf)。\n\n## Macos 和 iOS 相同的配置项\n\n------\n\n- loglevel\n\n```\nloglevel = notify\n```\n\n作用\n\n日志级别，不建议在日常使用中启用详细，因为这会显著降低性能。 可选参数：verbose, info, notify, warning\n\n------\n\n- ipv6\n\n```\nipv6 = false\n```\n\n作用\n\nIPv6协议, 启用完整的 IPv6 支持，具体来说，开启该选项后，访问域名时会查询该域名的AAAA记录。即使未启用此选项，也可以通过直接访问 IPv6 地址来访问 IPv6 站点。\n\n------\n\n- ipv6-vif\n\n```\nipv6-vif = false\n```\n\n作用\n\n允许 IPv6 通过 Surge VIF。当您希望 Surge 处理连接到 IPv6 地址的原始 TCP 连接时很有用。 off ：切勿使用 IPv6 设置 Surge VIF auto ：仅当本地网络具有有效的 IPv6 网络时，才使用 IPv6 设置 Surge VIF always ：始终使用 IPv6 设置 Surge VIF\n\n------\n\n- dns-server\n\n```\ndns-server = system, 223.5.5.5, 119.29.29.29, 1.1.1.1, 1.0.0.1, 8.8.8.8, 8.8.4.4, 9.9.9.9:995\n```\n\n作用\n\ndns服务器，上游DNS服务器的IP地址\n\n------\n\n- skip-proxy\n\n```\nskip-proxy = localhost, *.local, 0.0.0.0/8, 10.0.0.0/8, 17.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.168.0.0/16, 192.88.99.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32\n```\n\n作用\n\n跳过代理，在 iOS 版本中，此选项强制与这些域/IP 范围的连接由 Surge VIF 而不是 Surge 代理处理。在 macOS 版本中，当启用“设置为系统代理”时，这些设置将应用于系统。此选项用于修复某些应用的兼容性问题。 apple.com、*apple.com、192.168.2.* or 192.168.2.0/24 注意：如果输入 IP 地址或地址范围，则只有在使用该地址连接到该主机时才能绕过代理，而不能在通过解析为该地址的域名连接到主机时绕过代理。\n\n------\n\n- exclude-simple-hostnames\n\n```\nexclude-simple-hostnames = true\n```\n\n作用\n\n排除简单主机名，就像 skip-proxy 参数一样。此选项允许请求使用由 Surge VIF 而不是 Surge 代理处理的简单主机名（不带点）。 比如：mysql01、redis01\n\n------\n\n- external-controller-access\n\n```\nexternal-controller-access = mima1234@0.0.0.0:6166\n```\n\n作用\n\n外部控制器访问，此选项允许外部控制器控制 Surge，例如 Surge Dashboard （macOS） 和 Surge iOS 遥控器 （iOS）。例如：key@0.0.0.0:6166\n\n------\n\n- http-api-tls\n\n```\nhttp-api-tls = False\n```\n\n作用\n\n使用 HTTPS 协议而不是 HTTP必须先配置 MitM CA 证书。您需要在客户端设备上手动安装证书。\n\n------\n\n- http-api-web-dashboard\n\n```\nhttp-api-web-dashboard = false\n```\n\n作用\n\n启用此功能后，您可以通过 Web 浏览器控制 Surge。\n\n------\n\n- show-error-page-for-reject\n\n```\nshow-error-page-for-reject = true\n```\n\n作用\n\n显示错误页面拒绝，如果请求是纯 HTTP 请求，则显示 REJECT 策略的错误网页。\n\n------\n\n- tun-excluded-routes\n\n```\ntun-excluded-routes = 22.0.0.0/8\n```\n\n作用\n\nSurge VIF只能处理 TCP 和 UDP 协议。使用此选项可绕过特定 IP 范围，以允许所有流量通过。 注意：此选项仅适用于Surge VIF。Surge Proxy Server 处理的请求不受影响。合并 skip-proxy 并确保 tun-excluded-routes 特定 HTTP 流量绕过 Surge。\n\n------\n\n- tun-included-routes\n\n```\ntun-included-routes = 192.18.0.0/16\n```\n\n作用\n\n默认情况下，Surge VIF 接口将自身声明为默认路由。但是，由于 Wi-Fi 接口的路由较小，因此某些流量可能无法通过浪涌 VIF 接口。使用此选项可添加较小的路由。\n\n------\n\n- internet-test-url\n\n```\ninternet-test-url = http://223.6.6.6\n```\n\n作用\n\n国内Internet 连接测试的 URL, 以及，DIRECT 策略的测试 URL\n\n------\n\n- proxy-test-url\n\n```\nproxy-test-url = http://1.0.0.1/generate_204\n```\n\n作用\n\n代理、策略组的默认测试 URL\n\n------\n\n- test-timeout\n\n```\ntest-timeout = 5\n```\n\n作用\n\n连接测试超时（秒）\n\n------\n\n- always-real-ip\n\n```\nalways-real-ip = *.test.com\n```\n\n作用\n\n始终真实的 IP 此选项要求 Surge 在 Surge VIF 处理 DNS 问题时返回真实 IP 地址而不是虚假 IP 地址 DNS数据包将被转发到上游DNS服务器 此参数属于主机列表类型，详细规则请参见：https://manual.nssurge.com/others/host-list.html 1.使用前缀 - 排除主机名 2.支持通配符 * 和 ? 3.使用后缀 :port 匹配其他端口,如果未提供端口号，则 Surge 将自动为该参数附加标准端口号，就像 force-http-engine-hosts 参数一样，如果仅配置了主机名，则仅对端口 80 有效。对于 MITM 功能，它仅对端口 443 有效。 4.使用后缀 :0 以匹配所有端口 5.使用 直接使用 IPv4/IPv6 地址（而不是域）匹配所有主机名 eg: -*icloud*, -*.mzstatic.com, -*.facebook.com, -*.instagram.com, -*.twitter.com, -*dropbox*, -*apple*, -*.amazonaws.com, -, *\n\n------\n\n- hijack-dns\n\n```\nhijack-dns = *:53\n```\n\n作用\n\n劫持DNS,默认情况下，Surge 仅返回发送到 Surge DNS 地址 （198.18.0.2） 的 DNS 查询的虚假 IP 地址。发送到标准 DNS 的查询将被转发。某些设备或软件始终使用硬编码的 DNS 服务器。（例如，Google Speakers始终使用 8.8.8.8）。您可以使用此选项劫持查询以获取虚假地址。您可以使用 hijack-dns = *:53 劫持所有DNS查询\n\n------\n\n- force-http-engine-hosts\n\n```\nforce-http-engine-hosts = *.test.com\n```\n\n作用\n\n使 Surge 将 TCP 连接视为 HTTP 请求。Surge HTTP 引擎将处理请求，并且所有高级功能都将可用，例如捕获、重写和脚本编写。此参数属于主机列表类型，详细规则请参见：https://manual.nssurge.com/others/host-list.html\n\n------\n\n- encrypted-dns-follow-outbound-mode\n\n```\nencrypted-dns-follow-outbound-mode = true\n```\n\n作用\n\n加密 DNS 跟随出站模式,默认情况下，加密的 DNS 查找使用直接出站。启用该选项将使 DOH 遵循出站模式设置和规则。\n\n- encrypted-dns-server\n\n```\nencrypted-dns-server = \n```\n\n作用\n\n加密的 DNS 服务器,加密的 DNS 服务器的 URL。如果配置了加密 DNS，则传统 DNS 将仅用于测试连接并解析加密 DNS URL 中的域。\n\n------\n\n- encrypted-dns-skip-cert-verification\n\n```\nencrypted-dns-skip-cert-verification = false\n```\n\n作用\n\n跳过加密的DNS服务器证书验证，这是不安全的。\n\n- use-local-host-item-for-proxy\n\n```\nuse-local-host-item-for-proxy = true\n```\n\n作用\n\n使用本地主机代理,默认情况下，如果使用代理策略，则始终在远程服务器上执行 DNS 查找。启用此选项后，如果存在目标域的本地 DNS 映射结果，则 Surge 会使用 IP 地址而不是域来设置代理连接。\n\n------\n\n- geoip-maxmind-url\n\n```\ngeoip-maxmind-url = https://github.com/Hackl0us/GeoIP2-CN/raw/release/Country.mmdb\n```\n\n作用\n\n要更新的 GeoIP 数据库的 URL\n\n- disable-geoip-db-auto-update\n\n```\ndisable-geoip-db-auto-update = false\n```\n\n作用\n\n禁用 GeoIP 数据库的自动更新\n\n------\n\n- allow-dns-svcb\n\n```\nallow-dns-svcb = false\n```\n\n作用\n\niOS 系统可能会执行 SVCB 记录 DNS 查找，而不是标准 A 记录查找。这会导致 Surge 无法返回虚拟 IP 地址。因此，默认情况下，禁止 SVCB 记录查找，以强制系统执行 A 记录查找。\n\n------\n\n- udp-policy-not-supported-behaviour\n\n```\nudp-policy-not-supported-behaviour = REJECT\n```\n\n作用\n\nUDP 流量与不支持 UDP 中继的策略匹配时的回退行为,可能的值： DIRECT 、 REJECT, 如果没有代理服务器支持 UDP 转发，可修改为「 direct 」或注释下条，但需注意同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。\n\n------\n\n- proxy-test-udp\n\n```\nproxy-test-udp = apple.com@8.8.8.8\n```\n\n作用\n\n代理的默认 UDP 测试参数, 例如： apple.com@8.8.8.8\n\n------\n\n- udp-priority\n\n```\nudp-priority = false\n```\n\n作用\n\n当系统负载非常高且数据包处理延迟时，启用将优先处理 UDP 数据包。也称为游戏模式\n\n------\n\n- always-raw-tcp-hosts\n\n```\nalways-raw-tcp-hosts = *.baidu.com\n```\n\n作用\n\nSurge 将自动嗅探发送到端口 80 和 443 的 TCP 请求的协议，从而在优化性能的同时启用高级 HTTP/HTTPS 功能。但是，这可能会导致一些兼容性问题。如果遇到问题，可以在此处添加主机名，Surge 不会嗅探这些请求的协议。此参数属于主机列表类型，详细规则请参见：https://manual.nssurge.com/others/host-list.html\n\n------\n\n## iOS 独有的配置项\n\n- allow-wifi-access\n\n```\nallow-wifi-access = false\n```\n\n作用\n\n允许 wifi 访问,允许 Surge 代理服务从 LAN 中的其他设备访问。\n\n------\n\n- wifi-access-http-port\n\n```\nwifi-access-http-port = 6152\n```\n\n作用\n\nSurge HTTP 代理服务的端口号\n\n------\n\n- wifi-access-socks5-port\n\n```\nwifi-access-socks5-port = 6153\n```\n\n作用\n\nSurge SOCKS5 代理服务的端口号\n\n------\n\n- wifi-access-http-auth\n\n```\nwifi-access-http-auth = surge:mima1234\n```\n\n作用\n\n要求对 Surge HTTP 代理服务进行身份验证。例如：用户名：密码\n\n------\n\n- wifi-assist\n\n```\nwifi-assist = false\n```\n\n作用\n\n启用 Wi-Fi 助手 (在 Wi-Fi 网络不佳时尝试使用数据网络建立连接，请仅当使用不限量的数据流量时开启)\n\n------\n\n- hide-vpn-icon\n\n```\nhide-vpn-icon = false\n```\n\n作用\n\n隐藏状态栏中的 VPN 图标\n\n------\n\n- all-hybrid\n\n```\nall-hybrid = false\n```\n\n作用\n\n当 Wi-Fi 网络较差时，不要设置与蜂窝数据的连接，而是始终同时设置与 Wi-Fi 和蜂窝数据的连接 此选项可以在 Wi-Fi 较差或 Wi-Fi 网络切换时显著改善网络体验 此功能将应用于所有 TCP 连接和 DNS 查找。仅当您拥有无限的蜂窝数据计划时才启用它\n\n------\n\n- allow-hotspot-access\n\n```\nallow-hotspot-access = ture\n```\n\n作用\n\n允许在“个人热点”打开时从其他设备访问 Surge 代理服务\n\n------\n\n- include-all-networks\n\n```\ninclude-all-networks = false\n```\n\n作用\n\n包含所有网络,默认情况下，某些请求可能不会被 Surge 接管。例如，应用程序可以绑定到物理网络接口以绕过浪涌 VIF。启用“包括所有网络”选项，以确保所有请求都由 Surge 处理而不会泄漏。当您使用 Surge 作为防火墙时，此选项很有用。（需要 iOS 14.0 或以上版本）,启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。\n\n------\n\n- include-local-networks\n\n```\ninclude-local-networks = false\n```\n\n作用\n\n包含本地网络,启用此选项可使 Surge VIF 处理发送到 LAN 的请求。（需要 iOS 14.2 或更高版本）启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。必须与 include-all-networks=true 结合使用。\n\n------\n\n- include-apns\n\n```\ninclude-apns = false\n```\n\n作用\n\n启用此选项可使 Surge VIF 处理 Apple 推送通知服务 （APNs） 的网络流量。必须与 include-all-networks=true 结合使用。\n\n------\n\n- include-cellular-services\n\n```\ninclude-cellular-services = false\n```\n\n作用\n\n启用此选项可使 Surge VIF 处理蜂窝服务的 Internet 可路由网络流量。（VoLTE、Wi-Fi 通话、IMS、彩信、可视语音信箱等）.请注意，某些蜂窝运营商会绕过互联网，将蜂窝网络服务流量直接路由到运营商网络。此类蜂窝服务流量始终被排除在隧道之外。必须与 include-all-networks=true 结合使用。\n\n------\n\n- compatibility-mode\n\n```\ncompatibility-mode = 1\n```\n\n作用\n\n兼容性模式,此选项用于控制 Surge iOS 的工作模式。\n\n0：自动，在 5.8.0 之前的 Surge iOS 版本中，这相当于 1，从 5.8.0 开始，它相当于 3\n\n1：代理接管 + VIF，在此模式下，代理接管的优先级高于 VIF 接管，提供最佳性能，但某些应用程序可能会检查代理设置并拒绝工作。\n\n2：仅代理接管\n\n3：VIF Takeover Only：最新版本的默认工作模式。\n\n4：代理接管 + VIF，但代理使用 VIF 地址而不是环回地址。\n\n5：代理接管+VIF，但VIF路由使用多个较小的路由进行接管，没有配置默认路由，可以用来绕过一些特殊问题。（例如，HomeKit 安防摄像头）\n\n------\n\n## Macos 独有的配置\n\n- use-default-policy-if-wifi-not-primary\n\n```\nuse-default-policy-if-wifi-not-primary = false\n```\n\n作用\n\n如果禁用，即使 Wi-Fi 不是主网络接口，SSID/BSSID 模式仍可匹配。\n\n- read-etc-hosts\n\n```\nread-etc-hosts = true\n```\n\n作用\n\n遵循 /etc/hosts 中的本地 DNS 映射项\n\n------\n\n- http-listen\n\n```\nhttp-listen = 0.0.0.0\n```\n\n作用\n\nSurge HTTP 代理服务的端口号\n\n------\n\n- socks5-listen\n\n```\nsocks5-listen = 0.0.0.0\n```\n\n作用\n\nSurge SOCKS5 代理服务的端口号\n\n------\n\n- debug-cpu-usage\n\n```\ndebug-cpu-usage = false\n```\n\n作用\n\n启用 CPU 调试模式。这可能会降低性能\n\n------\n\n- debug-memory-usage\n\n```\ndebug-memory-usage = false\n```\n\n作用\n\n启用内存调试模式。这可能会降低性能\n\n------\n\n- vif-mode\n\n```\nvif-mode = v3\n```\n\n作用\n\nvif模式\n\nauto ：让Surge自动选择最合适的工作模式。\n\nv1 ：传统模式，TCP协议栈完全由Surge管理。由于 Surge 运行在用户空间中，这意味着每个数据包都需要从内核空间传输到用户空间进行处理。\n\nv2 ：在 5.0 版本中引入，它使用 macOS 中的数据包过滤器机制，利用 macOS 的 TCP 协议栈，从而避免了在内核空间和用户空间之间切换的开销，从而显着提高了性能。但是，由于它需要修改 pf 设置，因此它与虚拟机网络和网络共享功能不兼容。\n\nv3 ：在 5.2 版中引入，它绕过了数据包过滤器，并采用另一种技术来使用 macOS 的 TCP 协议栈。性能略低于 v2，但避免了因调整 pf 设置而导致的兼容性问题。","slug":"Surge配置文件详解","published":1,"updated":"2024-11-25T11:44:04.436Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsch0028mbs6e6jr8ayi","content":"<h1 id=\"Surge配置文件详解\"><a href=\"#Surge配置文件详解\" class=\"headerlink\" title=\"Surge配置文件详解\"></a>Surge配置文件详解</h1><blockquote>\n<p>本文主要介绍Surge的配置文件，带大家手撸配置文件，具体的懒人配置、用法移步 <a href=\"https://raw.githubusercontent.com/lsimply/surge/main/surge.conf\">懒人配置</a>。</p>\n</blockquote>\n<h2 id=\"Macos-和-iOS-相同的配置项\"><a href=\"#Macos-和-iOS-相同的配置项\" class=\"headerlink\" title=\"Macos 和 iOS 相同的配置项\"></a>Macos 和 iOS 相同的配置项</h2><hr>\n<ul>\n<li>loglevel</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loglevel = notify</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>日志级别，不建议在日常使用中启用详细，因为这会显著降低性能。 可选参数：verbose, info, notify, warning</p>\n<hr>\n<ul>\n<li>ipv6</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv6 = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>IPv6协议, 启用完整的 IPv6 支持，具体来说，开启该选项后，访问域名时会查询该域名的AAAA记录。即使未启用此选项，也可以通过直接访问 IPv6 地址来访问 IPv6 站点。</p>\n<hr>\n<ul>\n<li>ipv6-vif</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv6-vif = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>允许 IPv6 通过 Surge VIF。当您希望 Surge 处理连接到 IPv6 地址的原始 TCP 连接时很有用。 off ：切勿使用 IPv6 设置 Surge VIF auto ：仅当本地网络具有有效的 IPv6 网络时，才使用 IPv6 设置 Surge VIF always ：始终使用 IPv6 设置 Surge VIF</p>\n<hr>\n<ul>\n<li>dns-server</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dns-server = system, 223.5.5.5, 119.29.29.29, 1.1.1.1, 1.0.0.1, 8.8.8.8, 8.8.4.4, 9.9.9.9:995</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>dns服务器，上游DNS服务器的IP地址</p>\n<hr>\n<ul>\n<li>skip-proxy</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip-proxy = localhost, *.local, 0.0.0.0/8, 10.0.0.0/8, 17.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.168.0.0/16, 192.88.99.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>跳过代理，在 iOS 版本中，此选项强制与这些域&#x2F;IP 范围的连接由 Surge VIF 而不是 Surge 代理处理。在 macOS 版本中，当启用“设置为系统代理”时，这些设置将应用于系统。此选项用于修复某些应用的兼容性问题。 apple.com、<em>apple.com、192.168.2.</em> or 192.168.2.0&#x2F;24 注意：如果输入 IP 地址或地址范围，则只有在使用该地址连接到该主机时才能绕过代理，而不能在通过解析为该地址的域名连接到主机时绕过代理。</p>\n<hr>\n<ul>\n<li>exclude-simple-hostnames</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exclude-simple-hostnames = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>排除简单主机名，就像 skip-proxy 参数一样。此选项允许请求使用由 Surge VIF 而不是 Surge 代理处理的简单主机名（不带点）。 比如：mysql01、redis01</p>\n<hr>\n<ul>\n<li>external-controller-access</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external-controller-access = mima1234@0.0.0.0:6166</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>外部控制器访问，此选项允许外部控制器控制 Surge，例如 Surge Dashboard （macOS） 和 Surge iOS 遥控器 （iOS）。例如：<a href=\"mailto:&#107;&#101;&#121;&#64;&#48;&#46;&#48;&#x2e;&#x30;&#x2e;&#x30;\">&#107;&#101;&#121;&#64;&#48;&#46;&#48;&#x2e;&#x30;&#x2e;&#x30;</a>:6166</p>\n<hr>\n<ul>\n<li>http-api-tls</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-api-tls = False</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>使用 HTTPS 协议而不是 HTTP必须先配置 MitM CA 证书。您需要在客户端设备上手动安装证书。</p>\n<hr>\n<ul>\n<li>http-api-web-dashboard</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-api-web-dashboard = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用此功能后，您可以通过 Web 浏览器控制 Surge。</p>\n<hr>\n<ul>\n<li>show-error-page-for-reject</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show-error-page-for-reject = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>显示错误页面拒绝，如果请求是纯 HTTP 请求，则显示 REJECT 策略的错误网页。</p>\n<hr>\n<ul>\n<li>tun-excluded-routes</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tun-excluded-routes = 22.0.0.0/8</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge VIF只能处理 TCP 和 UDP 协议。使用此选项可绕过特定 IP 范围，以允许所有流量通过。 注意：此选项仅适用于Surge VIF。Surge Proxy Server 处理的请求不受影响。合并 skip-proxy 并确保 tun-excluded-routes 特定 HTTP 流量绕过 Surge。</p>\n<hr>\n<ul>\n<li>tun-included-routes</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tun-included-routes = 192.18.0.0/16</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>默认情况下，Surge VIF 接口将自身声明为默认路由。但是，由于 Wi-Fi 接口的路由较小，因此某些流量可能无法通过浪涌 VIF 接口。使用此选项可添加较小的路由。</p>\n<hr>\n<ul>\n<li>internet-test-url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">internet-test-url = http://223.6.6.6</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>国内Internet 连接测试的 URL, 以及，DIRECT 策略的测试 URL</p>\n<hr>\n<ul>\n<li>proxy-test-url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy-test-url = http://1.0.0.1/generate_204</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>代理、策略组的默认测试 URL</p>\n<hr>\n<ul>\n<li>test-timeout</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test-timeout = 5</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>连接测试超时（秒）</p>\n<hr>\n<ul>\n<li>always-real-ip</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">always-real-ip = *.test.com</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>始终真实的 IP 此选项要求 Surge 在 Surge VIF 处理 DNS 问题时返回真实 IP 地址而不是虚假 IP 地址 DNS数据包将被转发到上游DNS服务器 此参数属于主机列表类型，详细规则请参见：<a href=\"https://manual.nssurge.com/others/host-list.html\">https://manual.nssurge.com/others/host-list.html</a> 1.使用前缀 - 排除主机名 2.支持通配符 * 和 ? 3.使用后缀 :port 匹配其他端口,如果未提供端口号，则 Surge 将自动为该参数附加标准端口号，就像 force-http-engine-hosts 参数一样，如果仅配置了主机名，则仅对端口 80 有效。对于 MITM 功能，它仅对端口 443 有效。 4.使用后缀 :0 以匹配所有端口 5.使用 直接使用 IPv4&#x2F;IPv6 地址（而不是域）匹配所有主机名 eg: -<em>icloud</em>, -<em>.mzstatic.com, -</em>.facebook.com, -<em>.instagram.com, -</em>.twitter.com, -<em>dropbox</em>, -<em>apple</em>, -*.amazonaws.com, -, *</p>\n<hr>\n<ul>\n<li>hijack-dns</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hijack-dns = *:53</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>劫持DNS,默认情况下，Surge 仅返回发送到 Surge DNS 地址 （198.18.0.2） 的 DNS 查询的虚假 IP 地址。发送到标准 DNS 的查询将被转发。某些设备或软件始终使用硬编码的 DNS 服务器。（例如，Google Speakers始终使用 8.8.8.8）。您可以使用此选项劫持查询以获取虚假地址。您可以使用 hijack-dns &#x3D; *:53 劫持所有DNS查询</p>\n<hr>\n<ul>\n<li>force-http-engine-hosts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">force-http-engine-hosts = *.test.com</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>使 Surge 将 TCP 连接视为 HTTP 请求。Surge HTTP 引擎将处理请求，并且所有高级功能都将可用，例如捕获、重写和脚本编写。此参数属于主机列表类型，详细规则请参见：<a href=\"https://manual.nssurge.com/others/host-list.html\">https://manual.nssurge.com/others/host-list.html</a></p>\n<hr>\n<ul>\n<li>encrypted-dns-follow-outbound-mode</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encrypted-dns-follow-outbound-mode = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>加密 DNS 跟随出站模式,默认情况下，加密的 DNS 查找使用直接出站。启用该选项将使 DOH 遵循出站模式设置和规则。</p>\n<ul>\n<li>encrypted-dns-server</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encrypted-dns-server = </span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>加密的 DNS 服务器,加密的 DNS 服务器的 URL。如果配置了加密 DNS，则传统 DNS 将仅用于测试连接并解析加密 DNS URL 中的域。</p>\n<hr>\n<ul>\n<li>encrypted-dns-skip-cert-verification</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encrypted-dns-skip-cert-verification = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>跳过加密的DNS服务器证书验证，这是不安全的。</p>\n<ul>\n<li>use-local-host-item-for-proxy</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use-local-host-item-for-proxy = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>使用本地主机代理,默认情况下，如果使用代理策略，则始终在远程服务器上执行 DNS 查找。启用此选项后，如果存在目标域的本地 DNS 映射结果，则 Surge 会使用 IP 地址而不是域来设置代理连接。</p>\n<hr>\n<ul>\n<li>geoip-maxmind-url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geoip-maxmind-url = https://github.com/Hackl0us/GeoIP2-CN/raw/release/Country.mmdb</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>要更新的 GeoIP 数据库的 URL</p>\n<ul>\n<li>disable-geoip-db-auto-update</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable-geoip-db-auto-update = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>禁用 GeoIP 数据库的自动更新</p>\n<hr>\n<ul>\n<li>allow-dns-svcb</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow-dns-svcb = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>iOS 系统可能会执行 SVCB 记录 DNS 查找，而不是标准 A 记录查找。这会导致 Surge 无法返回虚拟 IP 地址。因此，默认情况下，禁止 SVCB 记录查找，以强制系统执行 A 记录查找。</p>\n<hr>\n<ul>\n<li>udp-policy-not-supported-behaviour</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp-policy-not-supported-behaviour = REJECT</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>UDP 流量与不支持 UDP 中继的策略匹配时的回退行为,可能的值： DIRECT 、 REJECT, 如果没有代理服务器支持 UDP 转发，可修改为「 direct 」或注释下条，但需注意同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。</p>\n<hr>\n<ul>\n<li>proxy-test-udp</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy-test-udp = apple.com@8.8.8.8</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>代理的默认 UDP 测试参数, 例如： <a href=\"mailto:&#97;&#112;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;&#64;&#56;&#x2e;&#x38;&#46;&#x38;&#x2e;&#56;\">&#97;&#112;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;&#64;&#56;&#x2e;&#x38;&#46;&#x38;&#x2e;&#56;</a></p>\n<hr>\n<ul>\n<li>udp-priority</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp-priority = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>当系统负载非常高且数据包处理延迟时，启用将优先处理 UDP 数据包。也称为游戏模式</p>\n<hr>\n<ul>\n<li>always-raw-tcp-hosts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">always-raw-tcp-hosts = *.baidu.com</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge 将自动嗅探发送到端口 80 和 443 的 TCP 请求的协议，从而在优化性能的同时启用高级 HTTP&#x2F;HTTPS 功能。但是，这可能会导致一些兼容性问题。如果遇到问题，可以在此处添加主机名，Surge 不会嗅探这些请求的协议。此参数属于主机列表类型，详细规则请参见：<a href=\"https://manual.nssurge.com/others/host-list.html\">https://manual.nssurge.com/others/host-list.html</a></p>\n<hr>\n<h2 id=\"iOS-独有的配置项\"><a href=\"#iOS-独有的配置项\" class=\"headerlink\" title=\"iOS 独有的配置项\"></a>iOS 独有的配置项</h2><ul>\n<li>allow-wifi-access</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow-wifi-access = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>允许 wifi 访问,允许 Surge 代理服务从 LAN 中的其他设备访问。</p>\n<hr>\n<ul>\n<li>wifi-access-http-port</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-access-http-port = 6152</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge HTTP 代理服务的端口号</p>\n<hr>\n<ul>\n<li>wifi-access-socks5-port</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-access-socks5-port = 6153</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge SOCKS5 代理服务的端口号</p>\n<hr>\n<ul>\n<li>wifi-access-http-auth</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-access-http-auth = surge:mima1234</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>要求对 Surge HTTP 代理服务进行身份验证。例如：用户名：密码</p>\n<hr>\n<ul>\n<li>wifi-assist</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-assist = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用 Wi-Fi 助手 (在 Wi-Fi 网络不佳时尝试使用数据网络建立连接，请仅当使用不限量的数据流量时开启)</p>\n<hr>\n<ul>\n<li>hide-vpn-icon</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hide-vpn-icon = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>隐藏状态栏中的 VPN 图标</p>\n<hr>\n<ul>\n<li>all-hybrid</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all-hybrid = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>当 Wi-Fi 网络较差时，不要设置与蜂窝数据的连接，而是始终同时设置与 Wi-Fi 和蜂窝数据的连接 此选项可以在 Wi-Fi 较差或 Wi-Fi 网络切换时显著改善网络体验 此功能将应用于所有 TCP 连接和 DNS 查找。仅当您拥有无限的蜂窝数据计划时才启用它</p>\n<hr>\n<ul>\n<li>allow-hotspot-access</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow-hotspot-access = ture</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>允许在“个人热点”打开时从其他设备访问 Surge 代理服务</p>\n<hr>\n<ul>\n<li>include-all-networks</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-all-networks = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>包含所有网络,默认情况下，某些请求可能不会被 Surge 接管。例如，应用程序可以绑定到物理网络接口以绕过浪涌 VIF。启用“包括所有网络”选项，以确保所有请求都由 Surge 处理而不会泄漏。当您使用 Surge 作为防火墙时，此选项很有用。（需要 iOS 14.0 或以上版本）,启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。</p>\n<hr>\n<ul>\n<li>include-local-networks</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-local-networks = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>包含本地网络,启用此选项可使 Surge VIF 处理发送到 LAN 的请求。（需要 iOS 14.2 或更高版本）启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。必须与 include-all-networks&#x3D;true 结合使用。</p>\n<hr>\n<ul>\n<li>include-apns</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-apns = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用此选项可使 Surge VIF 处理 Apple 推送通知服务 （APNs） 的网络流量。必须与 include-all-networks&#x3D;true 结合使用。</p>\n<hr>\n<ul>\n<li>include-cellular-services</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-cellular-services = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用此选项可使 Surge VIF 处理蜂窝服务的 Internet 可路由网络流量。（VoLTE、Wi-Fi 通话、IMS、彩信、可视语音信箱等）.请注意，某些蜂窝运营商会绕过互联网，将蜂窝网络服务流量直接路由到运营商网络。此类蜂窝服务流量始终被排除在隧道之外。必须与 include-all-networks&#x3D;true 结合使用。</p>\n<hr>\n<ul>\n<li>compatibility-mode</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compatibility-mode = 1</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>兼容性模式,此选项用于控制 Surge iOS 的工作模式。</p>\n<p>0：自动，在 5.8.0 之前的 Surge iOS 版本中，这相当于 1，从 5.8.0 开始，它相当于 3</p>\n<p>1：代理接管 + VIF，在此模式下，代理接管的优先级高于 VIF 接管，提供最佳性能，但某些应用程序可能会检查代理设置并拒绝工作。</p>\n<p>2：仅代理接管</p>\n<p>3：VIF Takeover Only：最新版本的默认工作模式。</p>\n<p>4：代理接管 + VIF，但代理使用 VIF 地址而不是环回地址。</p>\n<p>5：代理接管+VIF，但VIF路由使用多个较小的路由进行接管，没有配置默认路由，可以用来绕过一些特殊问题。（例如，HomeKit 安防摄像头）</p>\n<hr>\n<h2 id=\"Macos-独有的配置\"><a href=\"#Macos-独有的配置\" class=\"headerlink\" title=\"Macos 独有的配置\"></a>Macos 独有的配置</h2><ul>\n<li>use-default-policy-if-wifi-not-primary</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use-default-policy-if-wifi-not-primary = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>如果禁用，即使 Wi-Fi 不是主网络接口，SSID&#x2F;BSSID 模式仍可匹配。</p>\n<ul>\n<li>read-etc-hosts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read-etc-hosts = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>遵循 &#x2F;etc&#x2F;hosts 中的本地 DNS 映射项</p>\n<hr>\n<ul>\n<li>http-listen</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-listen = 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge HTTP 代理服务的端口号</p>\n<hr>\n<ul>\n<li>socks5-listen</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socks5-listen = 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge SOCKS5 代理服务的端口号</p>\n<hr>\n<ul>\n<li>debug-cpu-usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debug-cpu-usage = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用 CPU 调试模式。这可能会降低性能</p>\n<hr>\n<ul>\n<li>debug-memory-usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debug-memory-usage = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用内存调试模式。这可能会降低性能</p>\n<hr>\n<ul>\n<li>vif-mode</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vif-mode = v3</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>vif模式</p>\n<p>auto ：让Surge自动选择最合适的工作模式。</p>\n<p>v1 ：传统模式，TCP协议栈完全由Surge管理。由于 Surge 运行在用户空间中，这意味着每个数据包都需要从内核空间传输到用户空间进行处理。</p>\n<p>v2 ：在 5.0 版本中引入，它使用 macOS 中的数据包过滤器机制，利用 macOS 的 TCP 协议栈，从而避免了在内核空间和用户空间之间切换的开销，从而显着提高了性能。但是，由于它需要修改 pf 设置，因此它与虚拟机网络和网络共享功能不兼容。</p>\n<p>v3 ：在 5.2 版中引入，它绕过了数据包过滤器，并采用另一种技术来使用 macOS 的 TCP 协议栈。性能略低于 v2，但避免了因调整 pf 设置而导致的兼容性问题。</p>\n","excerpt":"","more":"<h1 id=\"Surge配置文件详解\"><a href=\"#Surge配置文件详解\" class=\"headerlink\" title=\"Surge配置文件详解\"></a>Surge配置文件详解</h1><blockquote>\n<p>本文主要介绍Surge的配置文件，带大家手撸配置文件，具体的懒人配置、用法移步 <a href=\"https://raw.githubusercontent.com/lsimply/surge/main/surge.conf\">懒人配置</a>。</p>\n</blockquote>\n<h2 id=\"Macos-和-iOS-相同的配置项\"><a href=\"#Macos-和-iOS-相同的配置项\" class=\"headerlink\" title=\"Macos 和 iOS 相同的配置项\"></a>Macos 和 iOS 相同的配置项</h2><hr>\n<ul>\n<li>loglevel</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loglevel = notify</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>日志级别，不建议在日常使用中启用详细，因为这会显著降低性能。 可选参数：verbose, info, notify, warning</p>\n<hr>\n<ul>\n<li>ipv6</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv6 = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>IPv6协议, 启用完整的 IPv6 支持，具体来说，开启该选项后，访问域名时会查询该域名的AAAA记录。即使未启用此选项，也可以通过直接访问 IPv6 地址来访问 IPv6 站点。</p>\n<hr>\n<ul>\n<li>ipv6-vif</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv6-vif = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>允许 IPv6 通过 Surge VIF。当您希望 Surge 处理连接到 IPv6 地址的原始 TCP 连接时很有用。 off ：切勿使用 IPv6 设置 Surge VIF auto ：仅当本地网络具有有效的 IPv6 网络时，才使用 IPv6 设置 Surge VIF always ：始终使用 IPv6 设置 Surge VIF</p>\n<hr>\n<ul>\n<li>dns-server</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dns-server = system, 223.5.5.5, 119.29.29.29, 1.1.1.1, 1.0.0.1, 8.8.8.8, 8.8.4.4, 9.9.9.9:995</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>dns服务器，上游DNS服务器的IP地址</p>\n<hr>\n<ul>\n<li>skip-proxy</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip-proxy = localhost, *.local, 0.0.0.0/8, 10.0.0.0/8, 17.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.168.0.0/16, 192.88.99.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>跳过代理，在 iOS 版本中，此选项强制与这些域&#x2F;IP 范围的连接由 Surge VIF 而不是 Surge 代理处理。在 macOS 版本中，当启用“设置为系统代理”时，这些设置将应用于系统。此选项用于修复某些应用的兼容性问题。 apple.com、<em>apple.com、192.168.2.</em> or 192.168.2.0&#x2F;24 注意：如果输入 IP 地址或地址范围，则只有在使用该地址连接到该主机时才能绕过代理，而不能在通过解析为该地址的域名连接到主机时绕过代理。</p>\n<hr>\n<ul>\n<li>exclude-simple-hostnames</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exclude-simple-hostnames = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>排除简单主机名，就像 skip-proxy 参数一样。此选项允许请求使用由 Surge VIF 而不是 Surge 代理处理的简单主机名（不带点）。 比如：mysql01、redis01</p>\n<hr>\n<ul>\n<li>external-controller-access</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external-controller-access = mima1234@0.0.0.0:6166</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>外部控制器访问，此选项允许外部控制器控制 Surge，例如 Surge Dashboard （macOS） 和 Surge iOS 遥控器 （iOS）。例如：<a href=\"mailto:&#107;&#101;&#121;&#64;&#48;&#46;&#48;&#x2e;&#x30;&#x2e;&#x30;\">&#107;&#101;&#121;&#64;&#48;&#46;&#48;&#x2e;&#x30;&#x2e;&#x30;</a>:6166</p>\n<hr>\n<ul>\n<li>http-api-tls</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-api-tls = False</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>使用 HTTPS 协议而不是 HTTP必须先配置 MitM CA 证书。您需要在客户端设备上手动安装证书。</p>\n<hr>\n<ul>\n<li>http-api-web-dashboard</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-api-web-dashboard = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用此功能后，您可以通过 Web 浏览器控制 Surge。</p>\n<hr>\n<ul>\n<li>show-error-page-for-reject</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show-error-page-for-reject = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>显示错误页面拒绝，如果请求是纯 HTTP 请求，则显示 REJECT 策略的错误网页。</p>\n<hr>\n<ul>\n<li>tun-excluded-routes</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tun-excluded-routes = 22.0.0.0/8</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge VIF只能处理 TCP 和 UDP 协议。使用此选项可绕过特定 IP 范围，以允许所有流量通过。 注意：此选项仅适用于Surge VIF。Surge Proxy Server 处理的请求不受影响。合并 skip-proxy 并确保 tun-excluded-routes 特定 HTTP 流量绕过 Surge。</p>\n<hr>\n<ul>\n<li>tun-included-routes</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tun-included-routes = 192.18.0.0/16</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>默认情况下，Surge VIF 接口将自身声明为默认路由。但是，由于 Wi-Fi 接口的路由较小，因此某些流量可能无法通过浪涌 VIF 接口。使用此选项可添加较小的路由。</p>\n<hr>\n<ul>\n<li>internet-test-url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">internet-test-url = http://223.6.6.6</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>国内Internet 连接测试的 URL, 以及，DIRECT 策略的测试 URL</p>\n<hr>\n<ul>\n<li>proxy-test-url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy-test-url = http://1.0.0.1/generate_204</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>代理、策略组的默认测试 URL</p>\n<hr>\n<ul>\n<li>test-timeout</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test-timeout = 5</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>连接测试超时（秒）</p>\n<hr>\n<ul>\n<li>always-real-ip</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">always-real-ip = *.test.com</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>始终真实的 IP 此选项要求 Surge 在 Surge VIF 处理 DNS 问题时返回真实 IP 地址而不是虚假 IP 地址 DNS数据包将被转发到上游DNS服务器 此参数属于主机列表类型，详细规则请参见：<a href=\"https://manual.nssurge.com/others/host-list.html\">https://manual.nssurge.com/others/host-list.html</a> 1.使用前缀 - 排除主机名 2.支持通配符 * 和 ? 3.使用后缀 :port 匹配其他端口,如果未提供端口号，则 Surge 将自动为该参数附加标准端口号，就像 force-http-engine-hosts 参数一样，如果仅配置了主机名，则仅对端口 80 有效。对于 MITM 功能，它仅对端口 443 有效。 4.使用后缀 :0 以匹配所有端口 5.使用 直接使用 IPv4&#x2F;IPv6 地址（而不是域）匹配所有主机名 eg: -<em>icloud</em>, -<em>.mzstatic.com, -</em>.facebook.com, -<em>.instagram.com, -</em>.twitter.com, -<em>dropbox</em>, -<em>apple</em>, -*.amazonaws.com, -, *</p>\n<hr>\n<ul>\n<li>hijack-dns</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hijack-dns = *:53</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>劫持DNS,默认情况下，Surge 仅返回发送到 Surge DNS 地址 （198.18.0.2） 的 DNS 查询的虚假 IP 地址。发送到标准 DNS 的查询将被转发。某些设备或软件始终使用硬编码的 DNS 服务器。（例如，Google Speakers始终使用 8.8.8.8）。您可以使用此选项劫持查询以获取虚假地址。您可以使用 hijack-dns &#x3D; *:53 劫持所有DNS查询</p>\n<hr>\n<ul>\n<li>force-http-engine-hosts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">force-http-engine-hosts = *.test.com</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>使 Surge 将 TCP 连接视为 HTTP 请求。Surge HTTP 引擎将处理请求，并且所有高级功能都将可用，例如捕获、重写和脚本编写。此参数属于主机列表类型，详细规则请参见：<a href=\"https://manual.nssurge.com/others/host-list.html\">https://manual.nssurge.com/others/host-list.html</a></p>\n<hr>\n<ul>\n<li>encrypted-dns-follow-outbound-mode</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encrypted-dns-follow-outbound-mode = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>加密 DNS 跟随出站模式,默认情况下，加密的 DNS 查找使用直接出站。启用该选项将使 DOH 遵循出站模式设置和规则。</p>\n<ul>\n<li>encrypted-dns-server</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encrypted-dns-server = </span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>加密的 DNS 服务器,加密的 DNS 服务器的 URL。如果配置了加密 DNS，则传统 DNS 将仅用于测试连接并解析加密 DNS URL 中的域。</p>\n<hr>\n<ul>\n<li>encrypted-dns-skip-cert-verification</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encrypted-dns-skip-cert-verification = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>跳过加密的DNS服务器证书验证，这是不安全的。</p>\n<ul>\n<li>use-local-host-item-for-proxy</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use-local-host-item-for-proxy = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>使用本地主机代理,默认情况下，如果使用代理策略，则始终在远程服务器上执行 DNS 查找。启用此选项后，如果存在目标域的本地 DNS 映射结果，则 Surge 会使用 IP 地址而不是域来设置代理连接。</p>\n<hr>\n<ul>\n<li>geoip-maxmind-url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geoip-maxmind-url = https://github.com/Hackl0us/GeoIP2-CN/raw/release/Country.mmdb</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>要更新的 GeoIP 数据库的 URL</p>\n<ul>\n<li>disable-geoip-db-auto-update</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable-geoip-db-auto-update = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>禁用 GeoIP 数据库的自动更新</p>\n<hr>\n<ul>\n<li>allow-dns-svcb</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow-dns-svcb = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>iOS 系统可能会执行 SVCB 记录 DNS 查找，而不是标准 A 记录查找。这会导致 Surge 无法返回虚拟 IP 地址。因此，默认情况下，禁止 SVCB 记录查找，以强制系统执行 A 记录查找。</p>\n<hr>\n<ul>\n<li>udp-policy-not-supported-behaviour</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp-policy-not-supported-behaviour = REJECT</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>UDP 流量与不支持 UDP 中继的策略匹配时的回退行为,可能的值： DIRECT 、 REJECT, 如果没有代理服务器支持 UDP 转发，可修改为「 direct 」或注释下条，但需注意同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。</p>\n<hr>\n<ul>\n<li>proxy-test-udp</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy-test-udp = apple.com@8.8.8.8</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>代理的默认 UDP 测试参数, 例如： <a href=\"mailto:&#97;&#112;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;&#64;&#56;&#x2e;&#x38;&#46;&#x38;&#x2e;&#56;\">&#97;&#112;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;&#64;&#56;&#x2e;&#x38;&#46;&#x38;&#x2e;&#56;</a></p>\n<hr>\n<ul>\n<li>udp-priority</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp-priority = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>当系统负载非常高且数据包处理延迟时，启用将优先处理 UDP 数据包。也称为游戏模式</p>\n<hr>\n<ul>\n<li>always-raw-tcp-hosts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">always-raw-tcp-hosts = *.baidu.com</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge 将自动嗅探发送到端口 80 和 443 的 TCP 请求的协议，从而在优化性能的同时启用高级 HTTP&#x2F;HTTPS 功能。但是，这可能会导致一些兼容性问题。如果遇到问题，可以在此处添加主机名，Surge 不会嗅探这些请求的协议。此参数属于主机列表类型，详细规则请参见：<a href=\"https://manual.nssurge.com/others/host-list.html\">https://manual.nssurge.com/others/host-list.html</a></p>\n<hr>\n<h2 id=\"iOS-独有的配置项\"><a href=\"#iOS-独有的配置项\" class=\"headerlink\" title=\"iOS 独有的配置项\"></a>iOS 独有的配置项</h2><ul>\n<li>allow-wifi-access</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow-wifi-access = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>允许 wifi 访问,允许 Surge 代理服务从 LAN 中的其他设备访问。</p>\n<hr>\n<ul>\n<li>wifi-access-http-port</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-access-http-port = 6152</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge HTTP 代理服务的端口号</p>\n<hr>\n<ul>\n<li>wifi-access-socks5-port</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-access-socks5-port = 6153</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge SOCKS5 代理服务的端口号</p>\n<hr>\n<ul>\n<li>wifi-access-http-auth</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-access-http-auth = surge:mima1234</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>要求对 Surge HTTP 代理服务进行身份验证。例如：用户名：密码</p>\n<hr>\n<ul>\n<li>wifi-assist</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wifi-assist = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用 Wi-Fi 助手 (在 Wi-Fi 网络不佳时尝试使用数据网络建立连接，请仅当使用不限量的数据流量时开启)</p>\n<hr>\n<ul>\n<li>hide-vpn-icon</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hide-vpn-icon = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>隐藏状态栏中的 VPN 图标</p>\n<hr>\n<ul>\n<li>all-hybrid</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all-hybrid = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>当 Wi-Fi 网络较差时，不要设置与蜂窝数据的连接，而是始终同时设置与 Wi-Fi 和蜂窝数据的连接 此选项可以在 Wi-Fi 较差或 Wi-Fi 网络切换时显著改善网络体验 此功能将应用于所有 TCP 连接和 DNS 查找。仅当您拥有无限的蜂窝数据计划时才启用它</p>\n<hr>\n<ul>\n<li>allow-hotspot-access</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow-hotspot-access = ture</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>允许在“个人热点”打开时从其他设备访问 Surge 代理服务</p>\n<hr>\n<ul>\n<li>include-all-networks</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-all-networks = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>包含所有网络,默认情况下，某些请求可能不会被 Surge 接管。例如，应用程序可以绑定到物理网络接口以绕过浪涌 VIF。启用“包括所有网络”选项，以确保所有请求都由 Surge 处理而不会泄漏。当您使用 Surge 作为防火墙时，此选项很有用。（需要 iOS 14.0 或以上版本）,启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。</p>\n<hr>\n<ul>\n<li>include-local-networks</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-local-networks = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>包含本地网络,启用此选项可使 Surge VIF 处理发送到 LAN 的请求。（需要 iOS 14.2 或更高版本）启用此选项可能会导致 AirDrop 和 Xcode 调试问题、通过 USB 的 Surge Dashboard 无法正常工作以及其他意外的副作用。请谨慎使用。必须与 include-all-networks&#x3D;true 结合使用。</p>\n<hr>\n<ul>\n<li>include-apns</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-apns = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用此选项可使 Surge VIF 处理 Apple 推送通知服务 （APNs） 的网络流量。必须与 include-all-networks&#x3D;true 结合使用。</p>\n<hr>\n<ul>\n<li>include-cellular-services</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include-cellular-services = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用此选项可使 Surge VIF 处理蜂窝服务的 Internet 可路由网络流量。（VoLTE、Wi-Fi 通话、IMS、彩信、可视语音信箱等）.请注意，某些蜂窝运营商会绕过互联网，将蜂窝网络服务流量直接路由到运营商网络。此类蜂窝服务流量始终被排除在隧道之外。必须与 include-all-networks&#x3D;true 结合使用。</p>\n<hr>\n<ul>\n<li>compatibility-mode</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compatibility-mode = 1</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>兼容性模式,此选项用于控制 Surge iOS 的工作模式。</p>\n<p>0：自动，在 5.8.0 之前的 Surge iOS 版本中，这相当于 1，从 5.8.0 开始，它相当于 3</p>\n<p>1：代理接管 + VIF，在此模式下，代理接管的优先级高于 VIF 接管，提供最佳性能，但某些应用程序可能会检查代理设置并拒绝工作。</p>\n<p>2：仅代理接管</p>\n<p>3：VIF Takeover Only：最新版本的默认工作模式。</p>\n<p>4：代理接管 + VIF，但代理使用 VIF 地址而不是环回地址。</p>\n<p>5：代理接管+VIF，但VIF路由使用多个较小的路由进行接管，没有配置默认路由，可以用来绕过一些特殊问题。（例如，HomeKit 安防摄像头）</p>\n<hr>\n<h2 id=\"Macos-独有的配置\"><a href=\"#Macos-独有的配置\" class=\"headerlink\" title=\"Macos 独有的配置\"></a>Macos 独有的配置</h2><ul>\n<li>use-default-policy-if-wifi-not-primary</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use-default-policy-if-wifi-not-primary = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>如果禁用，即使 Wi-Fi 不是主网络接口，SSID&#x2F;BSSID 模式仍可匹配。</p>\n<ul>\n<li>read-etc-hosts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read-etc-hosts = true</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>遵循 &#x2F;etc&#x2F;hosts 中的本地 DNS 映射项</p>\n<hr>\n<ul>\n<li>http-listen</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-listen = 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge HTTP 代理服务的端口号</p>\n<hr>\n<ul>\n<li>socks5-listen</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socks5-listen = 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>Surge SOCKS5 代理服务的端口号</p>\n<hr>\n<ul>\n<li>debug-cpu-usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debug-cpu-usage = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用 CPU 调试模式。这可能会降低性能</p>\n<hr>\n<ul>\n<li>debug-memory-usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debug-memory-usage = false</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>启用内存调试模式。这可能会降低性能</p>\n<hr>\n<ul>\n<li>vif-mode</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vif-mode = v3</span><br></pre></td></tr></table></figure>\n\n<p>作用</p>\n<p>vif模式</p>\n<p>auto ：让Surge自动选择最合适的工作模式。</p>\n<p>v1 ：传统模式，TCP协议栈完全由Surge管理。由于 Surge 运行在用户空间中，这意味着每个数据包都需要从内核空间传输到用户空间进行处理。</p>\n<p>v2 ：在 5.0 版本中引入，它使用 macOS 中的数据包过滤器机制，利用 macOS 的 TCP 协议栈，从而避免了在内核空间和用户空间之间切换的开销，从而显着提高了性能。但是，由于它需要修改 pf 设置，因此它与虚拟机网络和网络共享功能不兼容。</p>\n<p>v3 ：在 5.2 版中引入，它绕过了数据包过滤器，并采用另一种技术来使用 macOS 的 TCP 协议栈。性能略低于 v2，但避免了因调整 pf 设置而导致的兼容性问题。</p>\n"},{"title":"yaml语法","date":"2024-09-06T06:40:49.697Z","_content":"YAML（YAML Ain't Markup Language）是一种简洁、可读性高的数据序列化格式。它常用于配置文件和数据交换。YAML 的语法非常灵活且易于理解。\n\n以下是 YAML 的基本语法和结构：\n\n### 1. **基本语法规则**\n- **大小写敏感**。\n- **使用缩进表示层级关系**，通常使用两个空格（不能使用 Tab 键）。\n- **键值对格式**：`key: value`。\n- **注释** 使用 `#`，后面的内容将被忽略。\n\n### 2. **数据类型**\nYAML 支持多种常见的数据类型：\n\n#### 2.1 **字符串（Strings）**\n字符串可以不使用引号，也可以使用单引号或双引号包裹。\n\n```yaml\nname: John Doe        # 不带引号的字符串\nsingle_quote: 'John'  # 单引号\ndouble_quote: \"Doe\"   # 双引号\n```\n\n#### 2.2 **数字（Numbers）**\nYAML 支持整数和浮点数。\n\n```yaml\nage: 30\nheight: 1.75\n```\n\n#### 2.3 **布尔值（Booleans）**\n布尔值为 `true` 或 `false`，也可以使用 `yes`/`no`。\n\n```yaml\nis_student: true\nis_employed: no\n```\n\n#### 2.4 **空值（Null）**\n可以使用 `null` 或 `~` 表示空值。\n\n```yaml\nmiddle_name: null\nnickname: ~\n```\n\n### 3. **复杂数据类型**\n\n#### 3.1 **列表（Lists）**\n使用 `-` 表示列表中的元素，每个元素占一行。\n\n```yaml\nfruits:\n  - Apple\n  - Orange\n  - Banana\n```\n\n或者可以写成单行形式：\n```yaml\nfruits: [Apple, Orange, Banana]\n```\n\n#### 3.2 **字典（Dictionaries / Mappings）**\n键值对用 `:` 分隔，可以嵌套字典。\n\n```yaml\nperson:\n  name: John Doe\n  age: 30\n  address:\n    street: 123 Main St\n    city: New York\n```\n\n#### 3.3 **列表嵌套字典**\n列表中的每个元素都可以是一个字典。\n\n```yaml\npeople:\n  - name: John Doe\n    age: 30\n  - name: Jane Doe\n    age: 25\n```\n\n#### 3.4 **字典嵌套列表**\n字典的某个值可以是一个列表。\n\n```yaml\ncompany:\n  name: Tech Corp\n  employees:\n    - John Doe\n    - Jane Smith\n    - Alice Brown\n```\n\n### 4. **引用与别名**\nYAML 支持引用和别名来避免重复定义数据。\n\n```yaml\ndefaults: &defaults\n  adapter: postgres\n  host: localhost\n\ndevelopment:\n  <<: *defaults\n  database: dev_db\n\nproduction:\n  <<: *defaults\n  database: prod_db\n```\n\n上面的 `<<: *defaults` 是一种引用，它表示 `development` 和 `production` 将继承 `defaults` 中定义的内容。\n\n### 5. **多行字符串**\n使用 `|` 或 `>` 来表示多行字符串。\n\n- `|` 保留换行符。\n- `>` 将换行符替换为空格。\n\n```yaml\ndescription: |\n  This is a \n  multi-line string.\n\nsummary: >\n  This is a long\n  string that will be \n  folded into a single line.\n```\n\n### 6. **YAML 示例**\n\n```yaml\n# 一个简单的 YAML 文件\nname: \"My Project\"\nversion: 1.0\nlicense: MIT\n\n# 列表\nlanguages:\n  - JavaScript\n  - Python\n  - Java\n\n# 嵌套结构\nauthor:\n  name: John Doe\n  email: john.doe@example.com\n\n# 布尔值和数字\nis_active: true\ncontributors: 3\n\n# 多行字符串\ndescription: |\n  This project is designed to demonstrate YAML syntax.\n  It contains multiple examples of data types.\n\n# 引用和别名\ndefault_settings: &default_settings\n  host: localhost\n  port: 8080\n\ndevelopment:\n  <<: *default_settings\n  mode: debug\n\nproduction:\n  <<: *default_settings\n  mode: release\n```\n\n### 小结\nYAML 语法简单易读，尤其适合用来做配置文件。了解其缩进、列表、字典等规则可以让你更好地掌握它。在使用 YAML 时，记得保持一致的缩进，并遵循基本的语法规则。","source":"_posts/yaml语法.md","raw":"---\ntitle: yaml语法\ndate: 2024-09-06T14:40:49.697Z\ntags: []\ncategories: []\n---\nYAML（YAML Ain't Markup Language）是一种简洁、可读性高的数据序列化格式。它常用于配置文件和数据交换。YAML 的语法非常灵活且易于理解。\n\n以下是 YAML 的基本语法和结构：\n\n### 1. **基本语法规则**\n- **大小写敏感**。\n- **使用缩进表示层级关系**，通常使用两个空格（不能使用 Tab 键）。\n- **键值对格式**：`key: value`。\n- **注释** 使用 `#`，后面的内容将被忽略。\n\n### 2. **数据类型**\nYAML 支持多种常见的数据类型：\n\n#### 2.1 **字符串（Strings）**\n字符串可以不使用引号，也可以使用单引号或双引号包裹。\n\n```yaml\nname: John Doe        # 不带引号的字符串\nsingle_quote: 'John'  # 单引号\ndouble_quote: \"Doe\"   # 双引号\n```\n\n#### 2.2 **数字（Numbers）**\nYAML 支持整数和浮点数。\n\n```yaml\nage: 30\nheight: 1.75\n```\n\n#### 2.3 **布尔值（Booleans）**\n布尔值为 `true` 或 `false`，也可以使用 `yes`/`no`。\n\n```yaml\nis_student: true\nis_employed: no\n```\n\n#### 2.4 **空值（Null）**\n可以使用 `null` 或 `~` 表示空值。\n\n```yaml\nmiddle_name: null\nnickname: ~\n```\n\n### 3. **复杂数据类型**\n\n#### 3.1 **列表（Lists）**\n使用 `-` 表示列表中的元素，每个元素占一行。\n\n```yaml\nfruits:\n  - Apple\n  - Orange\n  - Banana\n```\n\n或者可以写成单行形式：\n```yaml\nfruits: [Apple, Orange, Banana]\n```\n\n#### 3.2 **字典（Dictionaries / Mappings）**\n键值对用 `:` 分隔，可以嵌套字典。\n\n```yaml\nperson:\n  name: John Doe\n  age: 30\n  address:\n    street: 123 Main St\n    city: New York\n```\n\n#### 3.3 **列表嵌套字典**\n列表中的每个元素都可以是一个字典。\n\n```yaml\npeople:\n  - name: John Doe\n    age: 30\n  - name: Jane Doe\n    age: 25\n```\n\n#### 3.4 **字典嵌套列表**\n字典的某个值可以是一个列表。\n\n```yaml\ncompany:\n  name: Tech Corp\n  employees:\n    - John Doe\n    - Jane Smith\n    - Alice Brown\n```\n\n### 4. **引用与别名**\nYAML 支持引用和别名来避免重复定义数据。\n\n```yaml\ndefaults: &defaults\n  adapter: postgres\n  host: localhost\n\ndevelopment:\n  <<: *defaults\n  database: dev_db\n\nproduction:\n  <<: *defaults\n  database: prod_db\n```\n\n上面的 `<<: *defaults` 是一种引用，它表示 `development` 和 `production` 将继承 `defaults` 中定义的内容。\n\n### 5. **多行字符串**\n使用 `|` 或 `>` 来表示多行字符串。\n\n- `|` 保留换行符。\n- `>` 将换行符替换为空格。\n\n```yaml\ndescription: |\n  This is a \n  multi-line string.\n\nsummary: >\n  This is a long\n  string that will be \n  folded into a single line.\n```\n\n### 6. **YAML 示例**\n\n```yaml\n# 一个简单的 YAML 文件\nname: \"My Project\"\nversion: 1.0\nlicense: MIT\n\n# 列表\nlanguages:\n  - JavaScript\n  - Python\n  - Java\n\n# 嵌套结构\nauthor:\n  name: John Doe\n  email: john.doe@example.com\n\n# 布尔值和数字\nis_active: true\ncontributors: 3\n\n# 多行字符串\ndescription: |\n  This project is designed to demonstrate YAML syntax.\n  It contains multiple examples of data types.\n\n# 引用和别名\ndefault_settings: &default_settings\n  host: localhost\n  port: 8080\n\ndevelopment:\n  <<: *default_settings\n  mode: debug\n\nproduction:\n  <<: *default_settings\n  mode: release\n```\n\n### 小结\nYAML 语法简单易读，尤其适合用来做配置文件。了解其缩进、列表、字典等规则可以让你更好地掌握它。在使用 YAML 时，记得保持一致的缩进，并遵循基本的语法规则。","slug":"yaml语法","published":1,"updated":"2024-11-25T11:44:04.441Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscj0029mbs6dslfel5z","content":"<p>YAML（YAML Ain’t Markup Language）是一种简洁、可读性高的数据序列化格式。它常用于配置文件和数据交换。YAML 的语法非常灵活且易于理解。</p>\n<p>以下是 YAML 的基本语法和结构：</p>\n<h3 id=\"1-基本语法规则\"><a href=\"#1-基本语法规则\" class=\"headerlink\" title=\"1. 基本语法规则\"></a>1. <strong>基本语法规则</strong></h3><ul>\n<li><strong>大小写敏感</strong>。</li>\n<li><strong>使用缩进表示层级关系</strong>，通常使用两个空格（不能使用 Tab 键）。</li>\n<li><strong>键值对格式</strong>：<code>key: value</code>。</li>\n<li><strong>注释</strong> 使用 <code>#</code>，后面的内容将被忽略。</li>\n</ul>\n<h3 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. <strong>数据类型</strong></h3><p>YAML 支持多种常见的数据类型：</p>\n<h4 id=\"2-1-字符串（Strings）\"><a href=\"#2-1-字符串（Strings）\" class=\"headerlink\" title=\"2.1 字符串（Strings）\"></a>2.1 <strong>字符串（Strings）</strong></h4><p>字符串可以不使用引号，也可以使用单引号或双引号包裹。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span>        <span class=\"comment\"># 不带引号的字符串</span></span><br><span class=\"line\"><span class=\"attr\">single_quote:</span> <span class=\"string\">&#x27;John&#x27;</span>  <span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">double_quote:</span> <span class=\"string\">&quot;Doe&quot;</span>   <span class=\"comment\"># 双引号</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-数字（Numbers）\"><a href=\"#2-2-数字（Numbers）\" class=\"headerlink\" title=\"2.2 数字（Numbers）\"></a>2.2 <strong>数字（Numbers）</strong></h4><p>YAML 支持整数和浮点数。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">height:</span> <span class=\"number\">1.75</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-布尔值（Booleans）\"><a href=\"#2-3-布尔值（Booleans）\" class=\"headerlink\" title=\"2.3 布尔值（Booleans）\"></a>2.3 <strong>布尔值（Booleans）</strong></h4><p>布尔值为 <code>true</code> 或 <code>false</code>，也可以使用 <code>yes</code>&#x2F;<code>no</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">is_student:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">is_employed:</span> <span class=\"literal\">no</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-空值（Null）\"><a href=\"#2-4-空值（Null）\" class=\"headerlink\" title=\"2.4 空值（Null）\"></a>2.4 <strong>空值（Null）</strong></h4><p>可以使用 <code>null</code> 或 <code>~</code> 表示空值。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">middle_name:</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"attr\">nickname:</span> <span class=\"string\">~</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-复杂数据类型\"><a href=\"#3-复杂数据类型\" class=\"headerlink\" title=\"3. 复杂数据类型\"></a>3. <strong>复杂数据类型</strong></h3><h4 id=\"3-1-列表（Lists）\"><a href=\"#3-1-列表（Lists）\" class=\"headerlink\" title=\"3.1 列表（Lists）\"></a>3.1 <strong>列表（Lists）</strong></h4><p>使用 <code>-</code> 表示列表中的元素，每个元素占一行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fruits:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Apple</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Orange</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Banana</span></span><br></pre></td></tr></table></figure>\n\n<p>或者可以写成单行形式：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fruits:</span> [<span class=\"string\">Apple</span>, <span class=\"string\">Orange</span>, <span class=\"string\">Banana</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-字典（Dictionaries-Mappings）\"><a href=\"#3-2-字典（Dictionaries-Mappings）\" class=\"headerlink\" title=\"3.2 字典（Dictionaries &#x2F; Mappings）\"></a>3.2 <strong>字典（Dictionaries &#x2F; Mappings）</strong></h4><p>键值对用 <code>:</code> 分隔，可以嵌套字典。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span></span><br><span class=\"line\">    <span class=\"attr\">street:</span> <span class=\"number\">123</span> <span class=\"string\">Main</span> <span class=\"string\">St</span></span><br><span class=\"line\">    <span class=\"attr\">city:</span> <span class=\"string\">New</span> <span class=\"string\">York</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-列表嵌套字典\"><a href=\"#3-3-列表嵌套字典\" class=\"headerlink\" title=\"3.3 列表嵌套字典\"></a>3.3 <strong>列表嵌套字典</strong></h4><p>列表中的每个元素都可以是一个字典。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">people:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Jane</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-字典嵌套列表\"><a href=\"#3-4-字典嵌套列表\" class=\"headerlink\" title=\"3.4 字典嵌套列表\"></a>3.4 <strong>字典嵌套列表</strong></h4><p>字典的某个值可以是一个列表。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">company:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">Tech</span> <span class=\"string\">Corp</span></span><br><span class=\"line\">  <span class=\"attr\">employees:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Jane</span> <span class=\"string\">Smith</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Alice</span> <span class=\"string\">Brown</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-引用与别名\"><a href=\"#4-引用与别名\" class=\"headerlink\" title=\"4. 引用与别名\"></a>4. <strong>引用与别名</strong></h3><p>YAML 支持引用和别名来避免重复定义数据。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">defaults:</span> <span class=\"meta\">&amp;defaults</span></span><br><span class=\"line\">  <span class=\"attr\">adapter:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">development:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*defaults</span></span><br><span class=\"line\">  <span class=\"attr\">database:</span> <span class=\"string\">dev_db</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">production:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*defaults</span></span><br><span class=\"line\">  <span class=\"attr\">database:</span> <span class=\"string\">prod_db</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 <code>&lt;&lt;: *defaults</code> 是一种引用，它表示 <code>development</code> 和 <code>production</code> 将继承 <code>defaults</code> 中定义的内容。</p>\n<h3 id=\"5-多行字符串\"><a href=\"#5-多行字符串\" class=\"headerlink\" title=\"5. 多行字符串\"></a>5. <strong>多行字符串</strong></h3><p>使用 <code>|</code> 或 <code>&gt;</code> 来表示多行字符串。</p>\n<ul>\n<li><code>|</code> 保留换行符。</li>\n<li><code>&gt;</code> 将换行符替换为空格。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  This is a </span></span><br><span class=\"line\"><span class=\"string\">  multi-line string.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">  This is a long</span></span><br><span class=\"line\"><span class=\"string\">  string that will be </span></span><br><span class=\"line\"><span class=\"string\">  folded into a single line.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-YAML-示例\"><a href=\"#6-YAML-示例\" class=\"headerlink\" title=\"6. YAML 示例\"></a>6. <strong>YAML 示例</strong></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一个简单的 YAML 文件</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">&quot;My Project&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"attr\">license:</span> <span class=\"string\">MIT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">JavaScript</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Python</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 嵌套结构</span></span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">  <span class=\"attr\">email:</span> <span class=\"string\">john.doe@example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 布尔值和数字</span></span><br><span class=\"line\"><span class=\"attr\">is_active:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">contributors:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行字符串</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  This project is designed to demonstrate YAML syntax.</span></span><br><span class=\"line\"><span class=\"string\">  It contains multiple examples of data types.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"comment\"># 引用和别名</span></span><br><span class=\"line\"><span class=\"attr\">default_settings:</span> <span class=\"meta\">&amp;default_settings</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">development:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*default_settings</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">debug</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">production:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*default_settings</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">release</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>YAML 语法简单易读，尤其适合用来做配置文件。了解其缩进、列表、字典等规则可以让你更好地掌握它。在使用 YAML 时，记得保持一致的缩进，并遵循基本的语法规则。</p>\n","excerpt":"","more":"<p>YAML（YAML Ain’t Markup Language）是一种简洁、可读性高的数据序列化格式。它常用于配置文件和数据交换。YAML 的语法非常灵活且易于理解。</p>\n<p>以下是 YAML 的基本语法和结构：</p>\n<h3 id=\"1-基本语法规则\"><a href=\"#1-基本语法规则\" class=\"headerlink\" title=\"1. 基本语法规则\"></a>1. <strong>基本语法规则</strong></h3><ul>\n<li><strong>大小写敏感</strong>。</li>\n<li><strong>使用缩进表示层级关系</strong>，通常使用两个空格（不能使用 Tab 键）。</li>\n<li><strong>键值对格式</strong>：<code>key: value</code>。</li>\n<li><strong>注释</strong> 使用 <code>#</code>，后面的内容将被忽略。</li>\n</ul>\n<h3 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. <strong>数据类型</strong></h3><p>YAML 支持多种常见的数据类型：</p>\n<h4 id=\"2-1-字符串（Strings）\"><a href=\"#2-1-字符串（Strings）\" class=\"headerlink\" title=\"2.1 字符串（Strings）\"></a>2.1 <strong>字符串（Strings）</strong></h4><p>字符串可以不使用引号，也可以使用单引号或双引号包裹。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span>        <span class=\"comment\"># 不带引号的字符串</span></span><br><span class=\"line\"><span class=\"attr\">single_quote:</span> <span class=\"string\">&#x27;John&#x27;</span>  <span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">double_quote:</span> <span class=\"string\">&quot;Doe&quot;</span>   <span class=\"comment\"># 双引号</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-数字（Numbers）\"><a href=\"#2-2-数字（Numbers）\" class=\"headerlink\" title=\"2.2 数字（Numbers）\"></a>2.2 <strong>数字（Numbers）</strong></h4><p>YAML 支持整数和浮点数。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">height:</span> <span class=\"number\">1.75</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-布尔值（Booleans）\"><a href=\"#2-3-布尔值（Booleans）\" class=\"headerlink\" title=\"2.3 布尔值（Booleans）\"></a>2.3 <strong>布尔值（Booleans）</strong></h4><p>布尔值为 <code>true</code> 或 <code>false</code>，也可以使用 <code>yes</code>&#x2F;<code>no</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">is_student:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">is_employed:</span> <span class=\"literal\">no</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-空值（Null）\"><a href=\"#2-4-空值（Null）\" class=\"headerlink\" title=\"2.4 空值（Null）\"></a>2.4 <strong>空值（Null）</strong></h4><p>可以使用 <code>null</code> 或 <code>~</code> 表示空值。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">middle_name:</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"attr\">nickname:</span> <span class=\"string\">~</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-复杂数据类型\"><a href=\"#3-复杂数据类型\" class=\"headerlink\" title=\"3. 复杂数据类型\"></a>3. <strong>复杂数据类型</strong></h3><h4 id=\"3-1-列表（Lists）\"><a href=\"#3-1-列表（Lists）\" class=\"headerlink\" title=\"3.1 列表（Lists）\"></a>3.1 <strong>列表（Lists）</strong></h4><p>使用 <code>-</code> 表示列表中的元素，每个元素占一行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fruits:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Apple</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Orange</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Banana</span></span><br></pre></td></tr></table></figure>\n\n<p>或者可以写成单行形式：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fruits:</span> [<span class=\"string\">Apple</span>, <span class=\"string\">Orange</span>, <span class=\"string\">Banana</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-字典（Dictionaries-Mappings）\"><a href=\"#3-2-字典（Dictionaries-Mappings）\" class=\"headerlink\" title=\"3.2 字典（Dictionaries &#x2F; Mappings）\"></a>3.2 <strong>字典（Dictionaries &#x2F; Mappings）</strong></h4><p>键值对用 <code>:</code> 分隔，可以嵌套字典。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span></span><br><span class=\"line\">    <span class=\"attr\">street:</span> <span class=\"number\">123</span> <span class=\"string\">Main</span> <span class=\"string\">St</span></span><br><span class=\"line\">    <span class=\"attr\">city:</span> <span class=\"string\">New</span> <span class=\"string\">York</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-列表嵌套字典\"><a href=\"#3-3-列表嵌套字典\" class=\"headerlink\" title=\"3.3 列表嵌套字典\"></a>3.3 <strong>列表嵌套字典</strong></h4><p>列表中的每个元素都可以是一个字典。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">people:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Jane</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-字典嵌套列表\"><a href=\"#3-4-字典嵌套列表\" class=\"headerlink\" title=\"3.4 字典嵌套列表\"></a>3.4 <strong>字典嵌套列表</strong></h4><p>字典的某个值可以是一个列表。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">company:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">Tech</span> <span class=\"string\">Corp</span></span><br><span class=\"line\">  <span class=\"attr\">employees:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Jane</span> <span class=\"string\">Smith</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Alice</span> <span class=\"string\">Brown</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-引用与别名\"><a href=\"#4-引用与别名\" class=\"headerlink\" title=\"4. 引用与别名\"></a>4. <strong>引用与别名</strong></h3><p>YAML 支持引用和别名来避免重复定义数据。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">defaults:</span> <span class=\"meta\">&amp;defaults</span></span><br><span class=\"line\">  <span class=\"attr\">adapter:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">development:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*defaults</span></span><br><span class=\"line\">  <span class=\"attr\">database:</span> <span class=\"string\">dev_db</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">production:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*defaults</span></span><br><span class=\"line\">  <span class=\"attr\">database:</span> <span class=\"string\">prod_db</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 <code>&lt;&lt;: *defaults</code> 是一种引用，它表示 <code>development</code> 和 <code>production</code> 将继承 <code>defaults</code> 中定义的内容。</p>\n<h3 id=\"5-多行字符串\"><a href=\"#5-多行字符串\" class=\"headerlink\" title=\"5. 多行字符串\"></a>5. <strong>多行字符串</strong></h3><p>使用 <code>|</code> 或 <code>&gt;</code> 来表示多行字符串。</p>\n<ul>\n<li><code>|</code> 保留换行符。</li>\n<li><code>&gt;</code> 将换行符替换为空格。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  This is a </span></span><br><span class=\"line\"><span class=\"string\">  multi-line string.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">  This is a long</span></span><br><span class=\"line\"><span class=\"string\">  string that will be </span></span><br><span class=\"line\"><span class=\"string\">  folded into a single line.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-YAML-示例\"><a href=\"#6-YAML-示例\" class=\"headerlink\" title=\"6. YAML 示例\"></a>6. <strong>YAML 示例</strong></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一个简单的 YAML 文件</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">&quot;My Project&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"attr\">license:</span> <span class=\"string\">MIT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">JavaScript</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Python</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 嵌套结构</span></span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">John</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">  <span class=\"attr\">email:</span> <span class=\"string\">john.doe@example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 布尔值和数字</span></span><br><span class=\"line\"><span class=\"attr\">is_active:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">contributors:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行字符串</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  This project is designed to demonstrate YAML syntax.</span></span><br><span class=\"line\"><span class=\"string\">  It contains multiple examples of data types.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"comment\"># 引用和别名</span></span><br><span class=\"line\"><span class=\"attr\">default_settings:</span> <span class=\"meta\">&amp;default_settings</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">development:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*default_settings</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">debug</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">production:</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*default_settings</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">release</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>YAML 语法简单易读，尤其适合用来做配置文件。了解其缩进、列表、字典等规则可以让你更好地掌握它。在使用 YAML 时，记得保持一致的缩进，并遵循基本的语法规则。</p>\n"},{"title":"Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2","date":"2024-09-06T23:24:35.935Z","_content":"Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2.0（以集中化平台为主）相对。Web3 的主要特点包括：\n\n1. **去中心化**：Web3 强调去中心化，意味着数据和控制权不再集中在少数大型企业或组织手中，而是分散在网络中的各个节点上。\n2. **区块链**：Web3 利用区块链技术来确保数据的透明性和不可篡改性。区块链是一种分布式账本技术，它记录所有的交易和数据更改，并确保数据的安全性。\n3. **智能合约**：智能合约是一种自动执行合同条款的程序代码，它可以在区块链上运行，减少了对中介的依赖。\n4. **去中心化应用（DApps）**：DApps 是运行在区块链上的应用程序，它们不依赖于传统的服务器或中心化数据库。\n\nUSDT（Tether）是一种加密货币，它是一种稳定币（stablecoin），旨在保持相对稳定的价值。USDT 的价值通常与美元挂钩，1 USDT 大约等于 1 美元。它的主要特点包括：\n\n1. **稳定性**：USDT 的设计目的是在加密货币市场中提供一种稳定的货币形式，以减少价格波动带来的风险。\n2. **备兑储备**：Tether 公司承诺，USDT 的每个代币都由等值的美元或等值的资产储备支持。这意味着理论上你可以将 USDT 兑换回等值的美元。\n3. **广泛使用**：USDT 在加密货币交易所中被广泛使用，作为交易对的一种常见货币，帮助交易者在不同的加密货币之间进行交易时减少波动风险。\n\n这两个概念在加密货币和区块链技术的背景下有着重要的作用。Web3 代表了互联网未来的发展方向，而 USDT 则在现有的加密货币市场中扮演着稳定和桥梁的角色。\n\n\n\n**Web3** is a concept for the next generation of the internet, characterized by decentralization and blockchain technology. It represents a shift from the traditional Web2.0, which is dominated by centralized platforms, to a more decentralized model. Key features of Web3 include:\n\n1. **Decentralization**: Unlike Web2.0, where data and control are concentrated in a few large organizations, Web3 aims to distribute control and data across a network of nodes.\n2. **Blockchain**: Web3 leverages blockchain technology to ensure transparency and immutability of data. Blockchain is a distributed ledger that records all transactions and changes to data, ensuring security and trust.\n3. **Smart Contracts**: These are self-executing contracts with the terms directly written into code. They run on the blockchain and automate contract execution, reducing reliance on intermediaries.\n4. **Decentralized Applications (DApps)**: These applications run on a blockchain and do not rely on traditional servers or centralized databases.\n\n**USDT (Tether)** is a type of cryptocurrency known as a stablecoin, designed to maintain a stable value. USDT is typically pegged to the value of the US dollar, meaning 1 USDT is approximately equal to 1 USD. Key aspects of USDT include:\n\n1. **Stability**: USDT aims to provide a stable form of currency in the cryptocurrency market, reducing the risk of price volatility.\n2. **Backing Reserves**: Tether Ltd. promises that each USDT is backed by an equivalent amount of US dollars or assets, allowing for theoretical conversion of USDT back to USD.\n3. **Widespread Use**: USDT is commonly used on cryptocurrency exchanges as a trading pair, helping traders to move between different cryptocurrencies while mitigating volatility risks.\n\nBoth concepts play significant roles in the context of cryptocurrency and blockchain technology. Web3 represents the future direction of the internet, while USDT provides stability and serves as a bridge in the current cryptocurrency market.","source":"_posts/Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2.md","raw":"---\ntitle: Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2\ndate: 2024-09-07T07:24:35.935Z\ntags: []\ncategories: []\n---\nWeb3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2.0（以集中化平台为主）相对。Web3 的主要特点包括：\n\n1. **去中心化**：Web3 强调去中心化，意味着数据和控制权不再集中在少数大型企业或组织手中，而是分散在网络中的各个节点上。\n2. **区块链**：Web3 利用区块链技术来确保数据的透明性和不可篡改性。区块链是一种分布式账本技术，它记录所有的交易和数据更改，并确保数据的安全性。\n3. **智能合约**：智能合约是一种自动执行合同条款的程序代码，它可以在区块链上运行，减少了对中介的依赖。\n4. **去中心化应用（DApps）**：DApps 是运行在区块链上的应用程序，它们不依赖于传统的服务器或中心化数据库。\n\nUSDT（Tether）是一种加密货币，它是一种稳定币（stablecoin），旨在保持相对稳定的价值。USDT 的价值通常与美元挂钩，1 USDT 大约等于 1 美元。它的主要特点包括：\n\n1. **稳定性**：USDT 的设计目的是在加密货币市场中提供一种稳定的货币形式，以减少价格波动带来的风险。\n2. **备兑储备**：Tether 公司承诺，USDT 的每个代币都由等值的美元或等值的资产储备支持。这意味着理论上你可以将 USDT 兑换回等值的美元。\n3. **广泛使用**：USDT 在加密货币交易所中被广泛使用，作为交易对的一种常见货币，帮助交易者在不同的加密货币之间进行交易时减少波动风险。\n\n这两个概念在加密货币和区块链技术的背景下有着重要的作用。Web3 代表了互联网未来的发展方向，而 USDT 则在现有的加密货币市场中扮演着稳定和桥梁的角色。\n\n\n\n**Web3** is a concept for the next generation of the internet, characterized by decentralization and blockchain technology. It represents a shift from the traditional Web2.0, which is dominated by centralized platforms, to a more decentralized model. Key features of Web3 include:\n\n1. **Decentralization**: Unlike Web2.0, where data and control are concentrated in a few large organizations, Web3 aims to distribute control and data across a network of nodes.\n2. **Blockchain**: Web3 leverages blockchain technology to ensure transparency and immutability of data. Blockchain is a distributed ledger that records all transactions and changes to data, ensuring security and trust.\n3. **Smart Contracts**: These are self-executing contracts with the terms directly written into code. They run on the blockchain and automate contract execution, reducing reliance on intermediaries.\n4. **Decentralized Applications (DApps)**: These applications run on a blockchain and do not rely on traditional servers or centralized databases.\n\n**USDT (Tether)** is a type of cryptocurrency known as a stablecoin, designed to maintain a stable value. USDT is typically pegged to the value of the US dollar, meaning 1 USDT is approximately equal to 1 USD. Key aspects of USDT include:\n\n1. **Stability**: USDT aims to provide a stable form of currency in the cryptocurrency market, reducing the risk of price volatility.\n2. **Backing Reserves**: Tether Ltd. promises that each USDT is backed by an equivalent amount of US dollars or assets, allowing for theoretical conversion of USDT back to USD.\n3. **Widespread Use**: USDT is commonly used on cryptocurrency exchanges as a trading pair, helping traders to move between different cryptocurrencies while mitigating volatility risks.\n\nBoth concepts play significant roles in the context of cryptocurrency and blockchain technology. Web3 represents the future direction of the internet, while USDT provides stability and serves as a bridge in the current cryptocurrency market.","slug":"Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2","published":1,"updated":"2024-11-25T11:44:04.445Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscj002ambs67fpkgfgu","content":"<p>Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2.0（以集中化平台为主）相对。Web3 的主要特点包括：</p>\n<ol>\n<li><strong>去中心化</strong>：Web3 强调去中心化，意味着数据和控制权不再集中在少数大型企业或组织手中，而是分散在网络中的各个节点上。</li>\n<li><strong>区块链</strong>：Web3 利用区块链技术来确保数据的透明性和不可篡改性。区块链是一种分布式账本技术，它记录所有的交易和数据更改，并确保数据的安全性。</li>\n<li><strong>智能合约</strong>：智能合约是一种自动执行合同条款的程序代码，它可以在区块链上运行，减少了对中介的依赖。</li>\n<li><strong>去中心化应用（DApps）</strong>：DApps 是运行在区块链上的应用程序，它们不依赖于传统的服务器或中心化数据库。</li>\n</ol>\n<p>USDT（Tether）是一种加密货币，它是一种稳定币（stablecoin），旨在保持相对稳定的价值。USDT 的价值通常与美元挂钩，1 USDT 大约等于 1 美元。它的主要特点包括：</p>\n<ol>\n<li><strong>稳定性</strong>：USDT 的设计目的是在加密货币市场中提供一种稳定的货币形式，以减少价格波动带来的风险。</li>\n<li><strong>备兑储备</strong>：Tether 公司承诺，USDT 的每个代币都由等值的美元或等值的资产储备支持。这意味着理论上你可以将 USDT 兑换回等值的美元。</li>\n<li><strong>广泛使用</strong>：USDT 在加密货币交易所中被广泛使用，作为交易对的一种常见货币，帮助交易者在不同的加密货币之间进行交易时减少波动风险。</li>\n</ol>\n<p>这两个概念在加密货币和区块链技术的背景下有着重要的作用。Web3 代表了互联网未来的发展方向，而 USDT 则在现有的加密货币市场中扮演着稳定和桥梁的角色。</p>\n<p><strong>Web3</strong> is a concept for the next generation of the internet, characterized by decentralization and blockchain technology. It represents a shift from the traditional Web2.0, which is dominated by centralized platforms, to a more decentralized model. Key features of Web3 include:</p>\n<ol>\n<li><strong>Decentralization</strong>: Unlike Web2.0, where data and control are concentrated in a few large organizations, Web3 aims to distribute control and data across a network of nodes.</li>\n<li><strong>Blockchain</strong>: Web3 leverages blockchain technology to ensure transparency and immutability of data. Blockchain is a distributed ledger that records all transactions and changes to data, ensuring security and trust.</li>\n<li><strong>Smart Contracts</strong>: These are self-executing contracts with the terms directly written into code. They run on the blockchain and automate contract execution, reducing reliance on intermediaries.</li>\n<li><strong>Decentralized Applications (DApps)</strong>: These applications run on a blockchain and do not rely on traditional servers or centralized databases.</li>\n</ol>\n<p><strong>USDT (Tether)</strong> is a type of cryptocurrency known as a stablecoin, designed to maintain a stable value. USDT is typically pegged to the value of the US dollar, meaning 1 USDT is approximately equal to 1 USD. Key aspects of USDT include:</p>\n<ol>\n<li><strong>Stability</strong>: USDT aims to provide a stable form of currency in the cryptocurrency market, reducing the risk of price volatility.</li>\n<li><strong>Backing Reserves</strong>: Tether Ltd. promises that each USDT is backed by an equivalent amount of US dollars or assets, allowing for theoretical conversion of USDT back to USD.</li>\n<li><strong>Widespread Use</strong>: USDT is commonly used on cryptocurrency exchanges as a trading pair, helping traders to move between different cryptocurrencies while mitigating volatility risks.</li>\n</ol>\n<p>Both concepts play significant roles in the context of cryptocurrency and blockchain technology. Web3 represents the future direction of the internet, while USDT provides stability and serves as a bridge in the current cryptocurrency market.</p>\n","excerpt":"","more":"<p>Web3 是一种基于区块链技术的互联网发展理念。它旨在通过去中心化的方式重新定义互联网的运作方式，与传统的Web2.0（以集中化平台为主）相对。Web3 的主要特点包括：</p>\n<ol>\n<li><strong>去中心化</strong>：Web3 强调去中心化，意味着数据和控制权不再集中在少数大型企业或组织手中，而是分散在网络中的各个节点上。</li>\n<li><strong>区块链</strong>：Web3 利用区块链技术来确保数据的透明性和不可篡改性。区块链是一种分布式账本技术，它记录所有的交易和数据更改，并确保数据的安全性。</li>\n<li><strong>智能合约</strong>：智能合约是一种自动执行合同条款的程序代码，它可以在区块链上运行，减少了对中介的依赖。</li>\n<li><strong>去中心化应用（DApps）</strong>：DApps 是运行在区块链上的应用程序，它们不依赖于传统的服务器或中心化数据库。</li>\n</ol>\n<p>USDT（Tether）是一种加密货币，它是一种稳定币（stablecoin），旨在保持相对稳定的价值。USDT 的价值通常与美元挂钩，1 USDT 大约等于 1 美元。它的主要特点包括：</p>\n<ol>\n<li><strong>稳定性</strong>：USDT 的设计目的是在加密货币市场中提供一种稳定的货币形式，以减少价格波动带来的风险。</li>\n<li><strong>备兑储备</strong>：Tether 公司承诺，USDT 的每个代币都由等值的美元或等值的资产储备支持。这意味着理论上你可以将 USDT 兑换回等值的美元。</li>\n<li><strong>广泛使用</strong>：USDT 在加密货币交易所中被广泛使用，作为交易对的一种常见货币，帮助交易者在不同的加密货币之间进行交易时减少波动风险。</li>\n</ol>\n<p>这两个概念在加密货币和区块链技术的背景下有着重要的作用。Web3 代表了互联网未来的发展方向，而 USDT 则在现有的加密货币市场中扮演着稳定和桥梁的角色。</p>\n<p><strong>Web3</strong> is a concept for the next generation of the internet, characterized by decentralization and blockchain technology. It represents a shift from the traditional Web2.0, which is dominated by centralized platforms, to a more decentralized model. Key features of Web3 include:</p>\n<ol>\n<li><strong>Decentralization</strong>: Unlike Web2.0, where data and control are concentrated in a few large organizations, Web3 aims to distribute control and data across a network of nodes.</li>\n<li><strong>Blockchain</strong>: Web3 leverages blockchain technology to ensure transparency and immutability of data. Blockchain is a distributed ledger that records all transactions and changes to data, ensuring security and trust.</li>\n<li><strong>Smart Contracts</strong>: These are self-executing contracts with the terms directly written into code. They run on the blockchain and automate contract execution, reducing reliance on intermediaries.</li>\n<li><strong>Decentralized Applications (DApps)</strong>: These applications run on a blockchain and do not rely on traditional servers or centralized databases.</li>\n</ol>\n<p><strong>USDT (Tether)</strong> is a type of cryptocurrency known as a stablecoin, designed to maintain a stable value. USDT is typically pegged to the value of the US dollar, meaning 1 USDT is approximately equal to 1 USD. Key aspects of USDT include:</p>\n<ol>\n<li><strong>Stability</strong>: USDT aims to provide a stable form of currency in the cryptocurrency market, reducing the risk of price volatility.</li>\n<li><strong>Backing Reserves</strong>: Tether Ltd. promises that each USDT is backed by an equivalent amount of US dollars or assets, allowing for theoretical conversion of USDT back to USD.</li>\n<li><strong>Widespread Use</strong>: USDT is commonly used on cryptocurrency exchanges as a trading pair, helping traders to move between different cryptocurrencies while mitigating volatility risks.</li>\n</ol>\n<p>Both concepts play significant roles in the context of cryptocurrency and blockchain technology. Web3 represents the future direction of the internet, while USDT provides stability and serves as a bridge in the current cryptocurrency market.</p>\n"},{"title":"Telegraph API 概述","date":"2024-09-06T11:24:07.993Z","_content":"### Telegraph API 概述\n\n**Telegra.ph** 是一个简约的发布工具，允许用户快速创建格式丰富的文章，并将其推送到网络上。Telegraph 文章在 Telegram 上也能生成美观的 Instant View 页面。\n\n#### 主要功能\n- **@Telegraph Bot**：用于管理文章和获取页面浏览统计信息。\n- **开放 API**：任何开发者都可以利用 Telegraph API 创建类似 @Telegraph 的机器人，适用于其他平台或独立接口。\n\n#### API 请求\n所有 API 请求必须通过 HTTPS 进行，格式为 `https://api.telegra.ph/%method%`。\n\n### 可用方法\n1. **createAccount**：创建新账户。\n2. **createPage**：创建新页面。\n3. **editAccountInfo**：更新账户信息。\n4. **editPage**：编辑现有页面。\n5. **getAccountInfo**：获取账户信息。\n6. **getPage**：获取指定页面。\n7. **getPageList**：获取账户下所有页面列表。\n8. **getViews**：获取文章的浏览次数。\n9. **revokeAccessToken**：撤销访问令牌。\n\n### 数据格式\nAPI 响应为 JSON 对象，包含 `ok` 字段以指示请求成功与否。\n\n### 账户对象\n- **short_name**：账户名。\n- **author_name**：默认作者名。\n- **author_url**：作者链接。\n- **access_token**：账户的访问令牌。\n\n### 页面对象\n- **path**：页面路径。\n- **url**：页面链接。\n- **title**：页面标题。\n- **content**：页面内容。\n\n### 示例请求\n- 创建账户示例：\n  ```\n  https://api.telegra.ph/createAccount?short_name=Sandbox&author_name=Anonymous\n  ```\n- 创建页面示例：\n  ```\n  https://api.telegra.ph/createPage?access_token=YOUR_ACCESS_TOKEN&title=Sample+Page&content=[{\"tag\":\"p\",\"children\":[\"Hello, world!\"]}]\n  ```\n\n### 内容格式\nTelegraph API 使用基于 DOM 的格式表示页面内容，支持多种 HTML 标签。\n\n#### 结论\nTelegraph API 提供了一个简单易用的接口，适合需要快速发布内容的用户和开发者。通过该 API，可以轻松管理和创建文章，适用于多种应用场景。\n\n\n\n\n\n>[!tip]\n>上面学会继续看下下面\n\n## 详细介绍\n\nTelegra.ph 提供了一个简单的 API，允许用户通过程序化方式发布文章、获取文章信息等操作。以下是 Telegra.ph API 的总结，帮助你快速入门，并注意一些关键点。\n\n### Telegra.ph API 概览\n\n1. **API 端点**: \n   API 基本端点是 `https://api.telegra.ph`。\n\n2. **常用方法**：\n   - **创建帐户**: `createAccount`\n   - **获取页面**: `getPage`\n   - **创建/编辑页面**: `createPage`、`editPage`\n   - **获取帐户信息**: `getAccountInfo`\n\n### 1. **创建账号（createAccount）**\n这是使用 Telegra.ph API 的第一步，你需要创建一个匿名账户。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/createAccount\n```\n**参数**：\n- `short_name`: 帐户名称（短名，必填）。\n- `author_name`: 作者姓名（选填）。\n- `author_url`: 作者的个人网址（选填）。\n\n**示例响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"SampleAccount\",\n    \"author_name\": \"Author\",\n    \"author_url\": \"https://example.com\",\n    \"access_token\": \"xxxxxx\",\n    \"auth_url\": \"https://telegra.ph/auth/...\"\n  }\n}\n```\n\n- **注意**：保存好返回的 `access_token`，它用于后续的 API 请求。\n\n### 2. **创建页面（createPage）**\n使用你获得的 `access_token` 来创建新页面。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/createPage\n```\n**参数**：\n- `access_token`: 使用 `createAccount` 时返回的 token。\n- `title`: 页面标题。\n- `author_name`: 作者姓名（选填）。\n- `author_url`: 作者网址（选填）。\n- `content`: 文章内容，支持 HTML 格式的内容。\n\n**示例响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"Sample-Page-12-10\",\n    \"url\": \"http://telegra.ph/Sample-Page-12-10\",\n    \"title\": \"Sample Page\",\n    \"description\": \"This is a sample page...\"\n  }\n}\n```\n\n- **注意**：`content` 参数的值是一个 JSON 数组，里面可以包含多种格式的文本、图片等。\n\n### 3. **编辑页面（editPage）**\n编辑已发布的页面，需要 `access_token` 和页面的 `path`。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/editPage\n```\n**参数**：\n- `access_token`: 发布时的 token。\n- `path`: 页面路径，例如 `Sample-Page-12-10`。\n- `title`: 新的标题。\n- `content`: 新的内容。\n\n### 4. **获取页面信息（getPage）**\n通过页面的 `path` 获取页面详细信息。\n\n#### 请求\n```bash\nGET https://api.telegra.ph/getPage/{path}\n```\n**参数**：\n- `path`: 文章的路径。\n\n**示例响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"Sample-Page-12-10\",\n    \"url\": \"http://telegra.ph/Sample-Page-12-10\",\n    \"title\": \"Sample Page\",\n    \"author_name\": \"Author\",\n    \"author_url\": \"https://example.com\",\n    \"content\": [...],\n    \"views\": 123\n  }\n}\n```\n\n- **注意**：此方法不需要 `access_token`，公开的 Telegra.ph 页面都可以通过这个方法获取信息。\n\n### 5. **获取帐户信息（getAccountInfo）**\n你可以通过 `access_token` 获取帐户详细信息。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/getAccountInfo\n```\n**参数**：\n- `access_token`: 创建帐户时获得的 token。\n\n**响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"SampleAccount\",\n    \"author_name\": \"Author\",\n    \"author_url\": \"https://example.com\"\n  }\n}\n```\n\n### 你需要注意的几点：\n\n1. **Token 管理**：\n   - 每次创建帐户后会得到一个 `access_token`，这个 token 对于管理文章和帐户是必需的。确保保存并保护好它，因为它相当于你的身份认证。\n   - 一旦丢失或删除浏览器缓存，可能会失去对发布文章的编辑权限。\n\n2. **文章内容的格式**：\n   - `content` 参数以 JSON 数组的形式发送，支持 HTML 标签如 `<p>`、`<b>` 等。要确保文章内容符合 API 规定的格式，避免因格式错误导致请求失败。\n\n3. **文章路径**：\n   - 每个发布的文章都有一个唯一的 `path`，比如 `Sample-Page-12-10`，它用于通过 API 获取、编辑或删除该页面。\n\n4. **限流与性能**：\n   - Telegra.ph API 是简洁的，但并没有详细说明关于限流等问题。确保遵循最佳实践，不频繁发送请求，以免被系统暂时屏蔽。\n\n5. **无登录的限制**：\n   - Telegra.ph 不需要登录账户，但是因为使用 `access_token` 管理帐户和页面，一旦遗失 token，可能无法恢复访问权限。\n\n6. **隐私和匿名性**：\n   - 发布的内容是公开的，没有用户隐私保障。平台允许匿名发布文章，但内容的访问是公开的，因此需要对内容的发布和分享保持谨慎。\n\n### 示例代码（Node.js）\n\n```javascript\nconst axios = require('axios');\n\n// 创建帐户\naxios.post('https://api.telegra.ph/createAccount', {\n    short_name: 'SampleAccount',\n    author_name: 'John Doe',\n    author_url: 'https://example.com'\n}).then(response => {\n    console.log(response.data);\n}).catch(error => {\n    console.log(error);\n});\n```\n\n通过学习这些内容，你应该能理解如何使用 Telegra.ph 的 API 进行文章发布和管理，注意保存好 `access_token` 并正确处理 API 请求返回的数据。\n\n\n\n","source":"_posts/Telegraph API 概述.md","raw":"---\ntitle: Telegraph API 概述\ndate: 2024-09-06T19:24:07.993Z\ntags: []\ncategories: []\n---\n### Telegraph API 概述\n\n**Telegra.ph** 是一个简约的发布工具，允许用户快速创建格式丰富的文章，并将其推送到网络上。Telegraph 文章在 Telegram 上也能生成美观的 Instant View 页面。\n\n#### 主要功能\n- **@Telegraph Bot**：用于管理文章和获取页面浏览统计信息。\n- **开放 API**：任何开发者都可以利用 Telegraph API 创建类似 @Telegraph 的机器人，适用于其他平台或独立接口。\n\n#### API 请求\n所有 API 请求必须通过 HTTPS 进行，格式为 `https://api.telegra.ph/%method%`。\n\n### 可用方法\n1. **createAccount**：创建新账户。\n2. **createPage**：创建新页面。\n3. **editAccountInfo**：更新账户信息。\n4. **editPage**：编辑现有页面。\n5. **getAccountInfo**：获取账户信息。\n6. **getPage**：获取指定页面。\n7. **getPageList**：获取账户下所有页面列表。\n8. **getViews**：获取文章的浏览次数。\n9. **revokeAccessToken**：撤销访问令牌。\n\n### 数据格式\nAPI 响应为 JSON 对象，包含 `ok` 字段以指示请求成功与否。\n\n### 账户对象\n- **short_name**：账户名。\n- **author_name**：默认作者名。\n- **author_url**：作者链接。\n- **access_token**：账户的访问令牌。\n\n### 页面对象\n- **path**：页面路径。\n- **url**：页面链接。\n- **title**：页面标题。\n- **content**：页面内容。\n\n### 示例请求\n- 创建账户示例：\n  ```\n  https://api.telegra.ph/createAccount?short_name=Sandbox&author_name=Anonymous\n  ```\n- 创建页面示例：\n  ```\n  https://api.telegra.ph/createPage?access_token=YOUR_ACCESS_TOKEN&title=Sample+Page&content=[{\"tag\":\"p\",\"children\":[\"Hello, world!\"]}]\n  ```\n\n### 内容格式\nTelegraph API 使用基于 DOM 的格式表示页面内容，支持多种 HTML 标签。\n\n#### 结论\nTelegraph API 提供了一个简单易用的接口，适合需要快速发布内容的用户和开发者。通过该 API，可以轻松管理和创建文章，适用于多种应用场景。\n\n\n\n\n\n>[!tip]\n>上面学会继续看下下面\n\n## 详细介绍\n\nTelegra.ph 提供了一个简单的 API，允许用户通过程序化方式发布文章、获取文章信息等操作。以下是 Telegra.ph API 的总结，帮助你快速入门，并注意一些关键点。\n\n### Telegra.ph API 概览\n\n1. **API 端点**: \n   API 基本端点是 `https://api.telegra.ph`。\n\n2. **常用方法**：\n   - **创建帐户**: `createAccount`\n   - **获取页面**: `getPage`\n   - **创建/编辑页面**: `createPage`、`editPage`\n   - **获取帐户信息**: `getAccountInfo`\n\n### 1. **创建账号（createAccount）**\n这是使用 Telegra.ph API 的第一步，你需要创建一个匿名账户。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/createAccount\n```\n**参数**：\n- `short_name`: 帐户名称（短名，必填）。\n- `author_name`: 作者姓名（选填）。\n- `author_url`: 作者的个人网址（选填）。\n\n**示例响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"SampleAccount\",\n    \"author_name\": \"Author\",\n    \"author_url\": \"https://example.com\",\n    \"access_token\": \"xxxxxx\",\n    \"auth_url\": \"https://telegra.ph/auth/...\"\n  }\n}\n```\n\n- **注意**：保存好返回的 `access_token`，它用于后续的 API 请求。\n\n### 2. **创建页面（createPage）**\n使用你获得的 `access_token` 来创建新页面。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/createPage\n```\n**参数**：\n- `access_token`: 使用 `createAccount` 时返回的 token。\n- `title`: 页面标题。\n- `author_name`: 作者姓名（选填）。\n- `author_url`: 作者网址（选填）。\n- `content`: 文章内容，支持 HTML 格式的内容。\n\n**示例响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"Sample-Page-12-10\",\n    \"url\": \"http://telegra.ph/Sample-Page-12-10\",\n    \"title\": \"Sample Page\",\n    \"description\": \"This is a sample page...\"\n  }\n}\n```\n\n- **注意**：`content` 参数的值是一个 JSON 数组，里面可以包含多种格式的文本、图片等。\n\n### 3. **编辑页面（editPage）**\n编辑已发布的页面，需要 `access_token` 和页面的 `path`。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/editPage\n```\n**参数**：\n- `access_token`: 发布时的 token。\n- `path`: 页面路径，例如 `Sample-Page-12-10`。\n- `title`: 新的标题。\n- `content`: 新的内容。\n\n### 4. **获取页面信息（getPage）**\n通过页面的 `path` 获取页面详细信息。\n\n#### 请求\n```bash\nGET https://api.telegra.ph/getPage/{path}\n```\n**参数**：\n- `path`: 文章的路径。\n\n**示例响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"Sample-Page-12-10\",\n    \"url\": \"http://telegra.ph/Sample-Page-12-10\",\n    \"title\": \"Sample Page\",\n    \"author_name\": \"Author\",\n    \"author_url\": \"https://example.com\",\n    \"content\": [...],\n    \"views\": 123\n  }\n}\n```\n\n- **注意**：此方法不需要 `access_token`，公开的 Telegra.ph 页面都可以通过这个方法获取信息。\n\n### 5. **获取帐户信息（getAccountInfo）**\n你可以通过 `access_token` 获取帐户详细信息。\n\n#### 请求\n```bash\nPOST https://api.telegra.ph/getAccountInfo\n```\n**参数**：\n- `access_token`: 创建帐户时获得的 token。\n\n**响应**：\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"SampleAccount\",\n    \"author_name\": \"Author\",\n    \"author_url\": \"https://example.com\"\n  }\n}\n```\n\n### 你需要注意的几点：\n\n1. **Token 管理**：\n   - 每次创建帐户后会得到一个 `access_token`，这个 token 对于管理文章和帐户是必需的。确保保存并保护好它，因为它相当于你的身份认证。\n   - 一旦丢失或删除浏览器缓存，可能会失去对发布文章的编辑权限。\n\n2. **文章内容的格式**：\n   - `content` 参数以 JSON 数组的形式发送，支持 HTML 标签如 `<p>`、`<b>` 等。要确保文章内容符合 API 规定的格式，避免因格式错误导致请求失败。\n\n3. **文章路径**：\n   - 每个发布的文章都有一个唯一的 `path`，比如 `Sample-Page-12-10`，它用于通过 API 获取、编辑或删除该页面。\n\n4. **限流与性能**：\n   - Telegra.ph API 是简洁的，但并没有详细说明关于限流等问题。确保遵循最佳实践，不频繁发送请求，以免被系统暂时屏蔽。\n\n5. **无登录的限制**：\n   - Telegra.ph 不需要登录账户，但是因为使用 `access_token` 管理帐户和页面，一旦遗失 token，可能无法恢复访问权限。\n\n6. **隐私和匿名性**：\n   - 发布的内容是公开的，没有用户隐私保障。平台允许匿名发布文章，但内容的访问是公开的，因此需要对内容的发布和分享保持谨慎。\n\n### 示例代码（Node.js）\n\n```javascript\nconst axios = require('axios');\n\n// 创建帐户\naxios.post('https://api.telegra.ph/createAccount', {\n    short_name: 'SampleAccount',\n    author_name: 'John Doe',\n    author_url: 'https://example.com'\n}).then(response => {\n    console.log(response.data);\n}).catch(error => {\n    console.log(error);\n});\n```\n\n通过学习这些内容，你应该能理解如何使用 Telegra.ph 的 API 进行文章发布和管理，注意保存好 `access_token` 并正确处理 API 请求返回的数据。\n\n\n\n","slug":"Telegraph API 概述","published":1,"updated":"2024-11-25T11:44:04.451Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsck002bmbs62vjcd1gh","content":"<h3 id=\"Telegraph-API-概述\"><a href=\"#Telegraph-API-概述\" class=\"headerlink\" title=\"Telegraph API 概述\"></a>Telegraph API 概述</h3><p><strong>Telegra.ph</strong> 是一个简约的发布工具，允许用户快速创建格式丰富的文章，并将其推送到网络上。Telegraph 文章在 Telegram 上也能生成美观的 Instant View 页面。</p>\n<h4 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h4><ul>\n<li><strong>@Telegraph Bot</strong>：用于管理文章和获取页面浏览统计信息。</li>\n<li><strong>开放 API</strong>：任何开发者都可以利用 Telegraph API 创建类似 @Telegraph 的机器人，适用于其他平台或独立接口。</li>\n</ul>\n<h4 id=\"API-请求\"><a href=\"#API-请求\" class=\"headerlink\" title=\"API 请求\"></a>API 请求</h4><p>所有 API 请求必须通过 HTTPS 进行，格式为 <code>https://api.telegra.ph/%method%</code>。</p>\n<h3 id=\"可用方法\"><a href=\"#可用方法\" class=\"headerlink\" title=\"可用方法\"></a>可用方法</h3><ol>\n<li><strong>createAccount</strong>：创建新账户。</li>\n<li><strong>createPage</strong>：创建新页面。</li>\n<li><strong>editAccountInfo</strong>：更新账户信息。</li>\n<li><strong>editPage</strong>：编辑现有页面。</li>\n<li><strong>getAccountInfo</strong>：获取账户信息。</li>\n<li><strong>getPage</strong>：获取指定页面。</li>\n<li><strong>getPageList</strong>：获取账户下所有页面列表。</li>\n<li><strong>getViews</strong>：获取文章的浏览次数。</li>\n<li><strong>revokeAccessToken</strong>：撤销访问令牌。</li>\n</ol>\n<h3 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><p>API 响应为 JSON 对象，包含 <code>ok</code> 字段以指示请求成功与否。</p>\n<h3 id=\"账户对象\"><a href=\"#账户对象\" class=\"headerlink\" title=\"账户对象\"></a>账户对象</h3><ul>\n<li><strong>short_name</strong>：账户名。</li>\n<li><strong>author_name</strong>：默认作者名。</li>\n<li><strong>author_url</strong>：作者链接。</li>\n<li><strong>access_token</strong>：账户的访问令牌。</li>\n</ul>\n<h3 id=\"页面对象\"><a href=\"#页面对象\" class=\"headerlink\" title=\"页面对象\"></a>页面对象</h3><ul>\n<li><strong>path</strong>：页面路径。</li>\n<li><strong>url</strong>：页面链接。</li>\n<li><strong>title</strong>：页面标题。</li>\n<li><strong>content</strong>：页面内容。</li>\n</ul>\n<h3 id=\"示例请求\"><a href=\"#示例请求\" class=\"headerlink\" title=\"示例请求\"></a>示例请求</h3><ul>\n<li>创建账户示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.telegra.ph/createAccount?short_name=Sandbox&amp;author_name=Anonymous</span><br></pre></td></tr></table></figure></li>\n<li>创建页面示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.telegra.ph/createPage?access_token=YOUR_ACCESS_TOKEN&amp;title=Sample+Page&amp;content=[&#123;&quot;tag&quot;:&quot;p&quot;,&quot;children&quot;:[&quot;Hello, world!&quot;]&#125;]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"内容格式\"><a href=\"#内容格式\" class=\"headerlink\" title=\"内容格式\"></a>内容格式</h3><p>Telegraph API 使用基于 DOM 的格式表示页面内容，支持多种 HTML 标签。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>Telegraph API 提供了一个简单易用的接口，适合需要快速发布内容的用户和开发者。通过该 API，可以轻松管理和创建文章，适用于多种应用场景。</p>\n<blockquote>\n<p>[!tip]<br>上面学会继续看下下面</p>\n</blockquote>\n<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><p>Telegra.ph 提供了一个简单的 API，允许用户通过程序化方式发布文章、获取文章信息等操作。以下是 Telegra.ph API 的总结，帮助你快速入门，并注意一些关键点。</p>\n<h3 id=\"Telegra-ph-API-概览\"><a href=\"#Telegra-ph-API-概览\" class=\"headerlink\" title=\"Telegra.ph API 概览\"></a>Telegra.ph API 概览</h3><ol>\n<li><p><strong>API 端点</strong>:<br>API 基本端点是 <code>https://api.telegra.ph</code>。</p>\n</li>\n<li><p><strong>常用方法</strong>：</p>\n<ul>\n<li><strong>创建帐户</strong>: <code>createAccount</code></li>\n<li><strong>获取页面</strong>: <code>getPage</code></li>\n<li><strong>创建&#x2F;编辑页面</strong>: <code>createPage</code>、<code>editPage</code></li>\n<li><strong>获取帐户信息</strong>: <code>getAccountInfo</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-创建账号（createAccount）\"><a href=\"#1-创建账号（createAccount）\" class=\"headerlink\" title=\"1. 创建账号（createAccount）\"></a>1. <strong>创建账号（createAccount）</strong></h3><p>这是使用 Telegra.ph API 的第一步，你需要创建一个匿名账户。</p>\n<h4 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/createAccount</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>short_name</code>: 帐户名称（短名，必填）。</li>\n<li><code>author_name</code>: 作者姓名（选填）。</li>\n<li><code>author_url</code>: 作者的个人网址（选填）。</li>\n</ul>\n<p><strong>示例响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SampleAccount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Author&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://example.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xxxxxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/...&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：保存好返回的 <code>access_token</code>，它用于后续的 API 请求。</li>\n</ul>\n<h3 id=\"2-创建页面（createPage）\"><a href=\"#2-创建页面（createPage）\" class=\"headerlink\" title=\"2. 创建页面（createPage）\"></a>2. <strong>创建页面（createPage）</strong></h3><p>使用你获得的 <code>access_token</code> 来创建新页面。</p>\n<h4 id=\"请求-1\"><a href=\"#请求-1\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/createPage</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>access_token</code>: 使用 <code>createAccount</code> 时返回的 token。</li>\n<li><code>title</code>: 页面标题。</li>\n<li><code>author_name</code>: 作者姓名（选填）。</li>\n<li><code>author_url</code>: 作者网址（选填）。</li>\n<li><code>content</code>: 文章内容，支持 HTML 格式的内容。</li>\n</ul>\n<p><strong>示例响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample Page&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This is a sample page...&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：<code>content</code> 参数的值是一个 JSON 数组，里面可以包含多种格式的文本、图片等。</li>\n</ul>\n<h3 id=\"3-编辑页面（editPage）\"><a href=\"#3-编辑页面（editPage）\" class=\"headerlink\" title=\"3. 编辑页面（editPage）\"></a>3. <strong>编辑页面（editPage）</strong></h3><p>编辑已发布的页面，需要 <code>access_token</code> 和页面的 <code>path</code>。</p>\n<h4 id=\"请求-2\"><a href=\"#请求-2\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/editPage</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>access_token</code>: 发布时的 token。</li>\n<li><code>path</code>: 页面路径，例如 <code>Sample-Page-12-10</code>。</li>\n<li><code>title</code>: 新的标题。</li>\n<li><code>content</code>: 新的内容。</li>\n</ul>\n<h3 id=\"4-获取页面信息（getPage）\"><a href=\"#4-获取页面信息（getPage）\" class=\"headerlink\" title=\"4. 获取页面信息（getPage）\"></a>4. <strong>获取页面信息（getPage）</strong></h3><p>通过页面的 <code>path</code> 获取页面详细信息。</p>\n<h4 id=\"请求-3\"><a href=\"#请求-3\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https://api.telegra.ph/getPage/&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>path</code>: 文章的路径。</li>\n</ul>\n<p><strong>示例响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample Page&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Author&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://example.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>...<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;views&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">123</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：此方法不需要 <code>access_token</code>，公开的 Telegra.ph 页面都可以通过这个方法获取信息。</li>\n</ul>\n<h3 id=\"5-获取帐户信息（getAccountInfo）\"><a href=\"#5-获取帐户信息（getAccountInfo）\" class=\"headerlink\" title=\"5. 获取帐户信息（getAccountInfo）\"></a>5. <strong>获取帐户信息（getAccountInfo）</strong></h3><p>你可以通过 <code>access_token</code> 获取帐户详细信息。</p>\n<h4 id=\"请求-4\"><a href=\"#请求-4\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/getAccountInfo</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>access_token</code>: 创建帐户时获得的 token。</li>\n</ul>\n<p><strong>响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SampleAccount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Author&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://example.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"你需要注意的几点：\"><a href=\"#你需要注意的几点：\" class=\"headerlink\" title=\"你需要注意的几点：\"></a>你需要注意的几点：</h3><ol>\n<li><p><strong>Token 管理</strong>：</p>\n<ul>\n<li>每次创建帐户后会得到一个 <code>access_token</code>，这个 token 对于管理文章和帐户是必需的。确保保存并保护好它，因为它相当于你的身份认证。</li>\n<li>一旦丢失或删除浏览器缓存，可能会失去对发布文章的编辑权限。</li>\n</ul>\n</li>\n<li><p><strong>文章内容的格式</strong>：</p>\n<ul>\n<li><code>content</code> 参数以 JSON 数组的形式发送，支持 HTML 标签如 <code>&lt;p&gt;</code>、<code>&lt;b&gt;</code> 等。要确保文章内容符合 API 规定的格式，避免因格式错误导致请求失败。</li>\n</ul>\n</li>\n<li><p><strong>文章路径</strong>：</p>\n<ul>\n<li>每个发布的文章都有一个唯一的 <code>path</code>，比如 <code>Sample-Page-12-10</code>，它用于通过 API 获取、编辑或删除该页面。</li>\n</ul>\n</li>\n<li><p><strong>限流与性能</strong>：</p>\n<ul>\n<li>Telegra.ph API 是简洁的，但并没有详细说明关于限流等问题。确保遵循最佳实践，不频繁发送请求，以免被系统暂时屏蔽。</li>\n</ul>\n</li>\n<li><p><strong>无登录的限制</strong>：</p>\n<ul>\n<li>Telegra.ph 不需要登录账户，但是因为使用 <code>access_token</code> 管理帐户和页面，一旦遗失 token，可能无法恢复访问权限。</li>\n</ul>\n</li>\n<li><p><strong>隐私和匿名性</strong>：</p>\n<ul>\n<li>发布的内容是公开的，没有用户隐私保障。平台允许匿名发布文章，但内容的访问是公开的，因此需要对内容的发布和分享保持谨慎。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例代码（Node-js）\"><a href=\"#示例代码（Node-js）\" class=\"headerlink\" title=\"示例代码（Node.js）\"></a>示例代码（Node.js）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建帐户</span></span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;https://api.telegra.ph/createAccount&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">short_name</span>: <span class=\"string\">&#x27;SampleAccount&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author_name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author_url</span>: <span class=\"string\">&#x27;https://example.com&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过学习这些内容，你应该能理解如何使用 Telegra.ph 的 API 进行文章发布和管理，注意保存好 <code>access_token</code> 并正确处理 API 请求返回的数据。</p>\n","excerpt":"","more":"<h3 id=\"Telegraph-API-概述\"><a href=\"#Telegraph-API-概述\" class=\"headerlink\" title=\"Telegraph API 概述\"></a>Telegraph API 概述</h3><p><strong>Telegra.ph</strong> 是一个简约的发布工具，允许用户快速创建格式丰富的文章，并将其推送到网络上。Telegraph 文章在 Telegram 上也能生成美观的 Instant View 页面。</p>\n<h4 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h4><ul>\n<li><strong>@Telegraph Bot</strong>：用于管理文章和获取页面浏览统计信息。</li>\n<li><strong>开放 API</strong>：任何开发者都可以利用 Telegraph API 创建类似 @Telegraph 的机器人，适用于其他平台或独立接口。</li>\n</ul>\n<h4 id=\"API-请求\"><a href=\"#API-请求\" class=\"headerlink\" title=\"API 请求\"></a>API 请求</h4><p>所有 API 请求必须通过 HTTPS 进行，格式为 <code>https://api.telegra.ph/%method%</code>。</p>\n<h3 id=\"可用方法\"><a href=\"#可用方法\" class=\"headerlink\" title=\"可用方法\"></a>可用方法</h3><ol>\n<li><strong>createAccount</strong>：创建新账户。</li>\n<li><strong>createPage</strong>：创建新页面。</li>\n<li><strong>editAccountInfo</strong>：更新账户信息。</li>\n<li><strong>editPage</strong>：编辑现有页面。</li>\n<li><strong>getAccountInfo</strong>：获取账户信息。</li>\n<li><strong>getPage</strong>：获取指定页面。</li>\n<li><strong>getPageList</strong>：获取账户下所有页面列表。</li>\n<li><strong>getViews</strong>：获取文章的浏览次数。</li>\n<li><strong>revokeAccessToken</strong>：撤销访问令牌。</li>\n</ol>\n<h3 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><p>API 响应为 JSON 对象，包含 <code>ok</code> 字段以指示请求成功与否。</p>\n<h3 id=\"账户对象\"><a href=\"#账户对象\" class=\"headerlink\" title=\"账户对象\"></a>账户对象</h3><ul>\n<li><strong>short_name</strong>：账户名。</li>\n<li><strong>author_name</strong>：默认作者名。</li>\n<li><strong>author_url</strong>：作者链接。</li>\n<li><strong>access_token</strong>：账户的访问令牌。</li>\n</ul>\n<h3 id=\"页面对象\"><a href=\"#页面对象\" class=\"headerlink\" title=\"页面对象\"></a>页面对象</h3><ul>\n<li><strong>path</strong>：页面路径。</li>\n<li><strong>url</strong>：页面链接。</li>\n<li><strong>title</strong>：页面标题。</li>\n<li><strong>content</strong>：页面内容。</li>\n</ul>\n<h3 id=\"示例请求\"><a href=\"#示例请求\" class=\"headerlink\" title=\"示例请求\"></a>示例请求</h3><ul>\n<li>创建账户示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.telegra.ph/createAccount?short_name=Sandbox&amp;author_name=Anonymous</span><br></pre></td></tr></table></figure></li>\n<li>创建页面示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.telegra.ph/createPage?access_token=YOUR_ACCESS_TOKEN&amp;title=Sample+Page&amp;content=[&#123;&quot;tag&quot;:&quot;p&quot;,&quot;children&quot;:[&quot;Hello, world!&quot;]&#125;]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"内容格式\"><a href=\"#内容格式\" class=\"headerlink\" title=\"内容格式\"></a>内容格式</h3><p>Telegraph API 使用基于 DOM 的格式表示页面内容，支持多种 HTML 标签。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>Telegraph API 提供了一个简单易用的接口，适合需要快速发布内容的用户和开发者。通过该 API，可以轻松管理和创建文章，适用于多种应用场景。</p>\n<blockquote>\n<p>[!tip]<br>上面学会继续看下下面</p>\n</blockquote>\n<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><p>Telegra.ph 提供了一个简单的 API，允许用户通过程序化方式发布文章、获取文章信息等操作。以下是 Telegra.ph API 的总结，帮助你快速入门，并注意一些关键点。</p>\n<h3 id=\"Telegra-ph-API-概览\"><a href=\"#Telegra-ph-API-概览\" class=\"headerlink\" title=\"Telegra.ph API 概览\"></a>Telegra.ph API 概览</h3><ol>\n<li><p><strong>API 端点</strong>:<br>API 基本端点是 <code>https://api.telegra.ph</code>。</p>\n</li>\n<li><p><strong>常用方法</strong>：</p>\n<ul>\n<li><strong>创建帐户</strong>: <code>createAccount</code></li>\n<li><strong>获取页面</strong>: <code>getPage</code></li>\n<li><strong>创建&#x2F;编辑页面</strong>: <code>createPage</code>、<code>editPage</code></li>\n<li><strong>获取帐户信息</strong>: <code>getAccountInfo</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-创建账号（createAccount）\"><a href=\"#1-创建账号（createAccount）\" class=\"headerlink\" title=\"1. 创建账号（createAccount）\"></a>1. <strong>创建账号（createAccount）</strong></h3><p>这是使用 Telegra.ph API 的第一步，你需要创建一个匿名账户。</p>\n<h4 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/createAccount</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>short_name</code>: 帐户名称（短名，必填）。</li>\n<li><code>author_name</code>: 作者姓名（选填）。</li>\n<li><code>author_url</code>: 作者的个人网址（选填）。</li>\n</ul>\n<p><strong>示例响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SampleAccount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Author&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://example.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xxxxxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/...&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：保存好返回的 <code>access_token</code>，它用于后续的 API 请求。</li>\n</ul>\n<h3 id=\"2-创建页面（createPage）\"><a href=\"#2-创建页面（createPage）\" class=\"headerlink\" title=\"2. 创建页面（createPage）\"></a>2. <strong>创建页面（createPage）</strong></h3><p>使用你获得的 <code>access_token</code> 来创建新页面。</p>\n<h4 id=\"请求-1\"><a href=\"#请求-1\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/createPage</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>access_token</code>: 使用 <code>createAccount</code> 时返回的 token。</li>\n<li><code>title</code>: 页面标题。</li>\n<li><code>author_name</code>: 作者姓名（选填）。</li>\n<li><code>author_url</code>: 作者网址（选填）。</li>\n<li><code>content</code>: 文章内容，支持 HTML 格式的内容。</li>\n</ul>\n<p><strong>示例响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample Page&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This is a sample page...&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：<code>content</code> 参数的值是一个 JSON 数组，里面可以包含多种格式的文本、图片等。</li>\n</ul>\n<h3 id=\"3-编辑页面（editPage）\"><a href=\"#3-编辑页面（editPage）\" class=\"headerlink\" title=\"3. 编辑页面（editPage）\"></a>3. <strong>编辑页面（editPage）</strong></h3><p>编辑已发布的页面，需要 <code>access_token</code> 和页面的 <code>path</code>。</p>\n<h4 id=\"请求-2\"><a href=\"#请求-2\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/editPage</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>access_token</code>: 发布时的 token。</li>\n<li><code>path</code>: 页面路径，例如 <code>Sample-Page-12-10</code>。</li>\n<li><code>title</code>: 新的标题。</li>\n<li><code>content</code>: 新的内容。</li>\n</ul>\n<h3 id=\"4-获取页面信息（getPage）\"><a href=\"#4-获取页面信息（getPage）\" class=\"headerlink\" title=\"4. 获取页面信息（getPage）\"></a>4. <strong>获取页面信息（getPage）</strong></h3><p>通过页面的 <code>path</code> 获取页面详细信息。</p>\n<h4 id=\"请求-3\"><a href=\"#请求-3\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https://api.telegra.ph/getPage/&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>path</code>: 文章的路径。</li>\n</ul>\n<p><strong>示例响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/Sample-Page-12-10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Sample Page&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Author&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://example.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>...<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;views&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">123</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：此方法不需要 <code>access_token</code>，公开的 Telegra.ph 页面都可以通过这个方法获取信息。</li>\n</ul>\n<h3 id=\"5-获取帐户信息（getAccountInfo）\"><a href=\"#5-获取帐户信息（getAccountInfo）\" class=\"headerlink\" title=\"5. 获取帐户信息（getAccountInfo）\"></a>5. <strong>获取帐户信息（getAccountInfo）</strong></h3><p>你可以通过 <code>access_token</code> 获取帐户详细信息。</p>\n<h4 id=\"请求-4\"><a href=\"#请求-4\" class=\"headerlink\" title=\"请求\"></a>请求</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST https://api.telegra.ph/getAccountInfo</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><code>access_token</code>: 创建帐户时获得的 token。</li>\n</ul>\n<p><strong>响应</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SampleAccount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Author&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://example.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"你需要注意的几点：\"><a href=\"#你需要注意的几点：\" class=\"headerlink\" title=\"你需要注意的几点：\"></a>你需要注意的几点：</h3><ol>\n<li><p><strong>Token 管理</strong>：</p>\n<ul>\n<li>每次创建帐户后会得到一个 <code>access_token</code>，这个 token 对于管理文章和帐户是必需的。确保保存并保护好它，因为它相当于你的身份认证。</li>\n<li>一旦丢失或删除浏览器缓存，可能会失去对发布文章的编辑权限。</li>\n</ul>\n</li>\n<li><p><strong>文章内容的格式</strong>：</p>\n<ul>\n<li><code>content</code> 参数以 JSON 数组的形式发送，支持 HTML 标签如 <code>&lt;p&gt;</code>、<code>&lt;b&gt;</code> 等。要确保文章内容符合 API 规定的格式，避免因格式错误导致请求失败。</li>\n</ul>\n</li>\n<li><p><strong>文章路径</strong>：</p>\n<ul>\n<li>每个发布的文章都有一个唯一的 <code>path</code>，比如 <code>Sample-Page-12-10</code>，它用于通过 API 获取、编辑或删除该页面。</li>\n</ul>\n</li>\n<li><p><strong>限流与性能</strong>：</p>\n<ul>\n<li>Telegra.ph API 是简洁的，但并没有详细说明关于限流等问题。确保遵循最佳实践，不频繁发送请求，以免被系统暂时屏蔽。</li>\n</ul>\n</li>\n<li><p><strong>无登录的限制</strong>：</p>\n<ul>\n<li>Telegra.ph 不需要登录账户，但是因为使用 <code>access_token</code> 管理帐户和页面，一旦遗失 token，可能无法恢复访问权限。</li>\n</ul>\n</li>\n<li><p><strong>隐私和匿名性</strong>：</p>\n<ul>\n<li>发布的内容是公开的，没有用户隐私保障。平台允许匿名发布文章，但内容的访问是公开的，因此需要对内容的发布和分享保持谨慎。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例代码（Node-js）\"><a href=\"#示例代码（Node-js）\" class=\"headerlink\" title=\"示例代码（Node.js）\"></a>示例代码（Node.js）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建帐户</span></span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;https://api.telegra.ph/createAccount&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">short_name</span>: <span class=\"string\">&#x27;SampleAccount&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author_name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">author_url</span>: <span class=\"string\">&#x27;https://example.com&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过学习这些内容，你应该能理解如何使用 Telegra.ph 的 API 进行文章发布和管理，注意保存好 <code>access_token</code> 并正确处理 API 请求返回的数据。</p>\n"},{"title":"Telegram Premium","date":"2024-09-06T10:35:32.546Z","_content":"## Telegram Premium\n\n- **费用**:每月 $4.99（约合人民币 ¥33.00）。\n- **主要功能**:**无广告**: 会员用户在使用时不会看到广告。\n- **更快的下载速度**: 提供更高的文件下载速度。\n- **更大的文件上传限制**: 用户可以上传高达 4 GB 的文件。\n- **动态表情和头像**: 会员可以使用动态表情和头像。\n- **语音消息转文本**: 自动将语音消息转换为文本。\n- **高级对话管理**: 提供更好的管理聊天的功能。\n- **上传更大文件**: 允许上传更大的文件，满足高需求用户的需要。\n- **其他特权**: 包括无限的表情回应、Premium 贴纸等。\n\n\n\n\n\n## Telegram 会员类型\n\nTelegram 目前有两种主要的会员类型:\n\n1. **Telegram Premium**\n   - 2022年6月推出的付费会员服务\n   - 价格:每月4.99美元\n   - 主要功能:\n     - 上传文件无大小限制(标准用户2.5GB)\n     - 下载速度提升2-3倍\n     - 移除频率限制(标准用户每秒200条消息)\n     - 获得独家贴纸和反应\n     - 优先获得客户支持\n\n2. **Telegram Business API**\n   - 为有开发能力的企业提供的免费API\n   - 可集成CRM、ERP、AI聊天机器人、自动化、对话支付等功能\n   - 通过API可以创建Telegram Business账号\n   - 主要用于企业与客户的商业交流\n\n总的来说,Telegram Premium是面向个人用户的付费会员,提供了更多实用功能。而Telegram Business API则是面向企业的工具,可以开发出更多商业应用。两者都是Telegram为了满足不同用户需求而推出的会员服务。\n\n","source":"_posts/Telegram Premium.md","raw":"---\ntitle: Telegram Premium\ndate: 2024-09-06T18:35:32.546Z\ntags: []\ncategories: []\n---\n## Telegram Premium\n\n- **费用**:每月 $4.99（约合人民币 ¥33.00）。\n- **主要功能**:**无广告**: 会员用户在使用时不会看到广告。\n- **更快的下载速度**: 提供更高的文件下载速度。\n- **更大的文件上传限制**: 用户可以上传高达 4 GB 的文件。\n- **动态表情和头像**: 会员可以使用动态表情和头像。\n- **语音消息转文本**: 自动将语音消息转换为文本。\n- **高级对话管理**: 提供更好的管理聊天的功能。\n- **上传更大文件**: 允许上传更大的文件，满足高需求用户的需要。\n- **其他特权**: 包括无限的表情回应、Premium 贴纸等。\n\n\n\n\n\n## Telegram 会员类型\n\nTelegram 目前有两种主要的会员类型:\n\n1. **Telegram Premium**\n   - 2022年6月推出的付费会员服务\n   - 价格:每月4.99美元\n   - 主要功能:\n     - 上传文件无大小限制(标准用户2.5GB)\n     - 下载速度提升2-3倍\n     - 移除频率限制(标准用户每秒200条消息)\n     - 获得独家贴纸和反应\n     - 优先获得客户支持\n\n2. **Telegram Business API**\n   - 为有开发能力的企业提供的免费API\n   - 可集成CRM、ERP、AI聊天机器人、自动化、对话支付等功能\n   - 通过API可以创建Telegram Business账号\n   - 主要用于企业与客户的商业交流\n\n总的来说,Telegram Premium是面向个人用户的付费会员,提供了更多实用功能。而Telegram Business API则是面向企业的工具,可以开发出更多商业应用。两者都是Telegram为了满足不同用户需求而推出的会员服务。\n\n","slug":"Telegram Premium","published":1,"updated":"2024-11-25T11:44:04.455Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsck002cmbs65e6g3mcm","content":"<h2 id=\"Telegram-Premium\"><a href=\"#Telegram-Premium\" class=\"headerlink\" title=\"Telegram Premium\"></a>Telegram Premium</h2><ul>\n<li><strong>费用</strong>:每月 $4.99（约合人民币 ¥33.00）。</li>\n<li><strong>主要功能</strong>:<strong>无广告</strong>: 会员用户在使用时不会看到广告。</li>\n<li><strong>更快的下载速度</strong>: 提供更高的文件下载速度。</li>\n<li><strong>更大的文件上传限制</strong>: 用户可以上传高达 4 GB 的文件。</li>\n<li><strong>动态表情和头像</strong>: 会员可以使用动态表情和头像。</li>\n<li><strong>语音消息转文本</strong>: 自动将语音消息转换为文本。</li>\n<li><strong>高级对话管理</strong>: 提供更好的管理聊天的功能。</li>\n<li><strong>上传更大文件</strong>: 允许上传更大的文件，满足高需求用户的需要。</li>\n<li><strong>其他特权</strong>: 包括无限的表情回应、Premium 贴纸等。</li>\n</ul>\n<h2 id=\"Telegram-会员类型\"><a href=\"#Telegram-会员类型\" class=\"headerlink\" title=\"Telegram 会员类型\"></a>Telegram 会员类型</h2><p>Telegram 目前有两种主要的会员类型:</p>\n<ol>\n<li><p><strong>Telegram Premium</strong></p>\n<ul>\n<li>2022年6月推出的付费会员服务</li>\n<li>价格:每月4.99美元</li>\n<li>主要功能:<ul>\n<li>上传文件无大小限制(标准用户2.5GB)</li>\n<li>下载速度提升2-3倍</li>\n<li>移除频率限制(标准用户每秒200条消息)</li>\n<li>获得独家贴纸和反应</li>\n<li>优先获得客户支持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Telegram Business API</strong></p>\n<ul>\n<li>为有开发能力的企业提供的免费API</li>\n<li>可集成CRM、ERP、AI聊天机器人、自动化、对话支付等功能</li>\n<li>通过API可以创建Telegram Business账号</li>\n<li>主要用于企业与客户的商业交流</li>\n</ul>\n</li>\n</ol>\n<p>总的来说,Telegram Premium是面向个人用户的付费会员,提供了更多实用功能。而Telegram Business API则是面向企业的工具,可以开发出更多商业应用。两者都是Telegram为了满足不同用户需求而推出的会员服务。</p>\n","excerpt":"","more":"<h2 id=\"Telegram-Premium\"><a href=\"#Telegram-Premium\" class=\"headerlink\" title=\"Telegram Premium\"></a>Telegram Premium</h2><ul>\n<li><strong>费用</strong>:每月 $4.99（约合人民币 ¥33.00）。</li>\n<li><strong>主要功能</strong>:<strong>无广告</strong>: 会员用户在使用时不会看到广告。</li>\n<li><strong>更快的下载速度</strong>: 提供更高的文件下载速度。</li>\n<li><strong>更大的文件上传限制</strong>: 用户可以上传高达 4 GB 的文件。</li>\n<li><strong>动态表情和头像</strong>: 会员可以使用动态表情和头像。</li>\n<li><strong>语音消息转文本</strong>: 自动将语音消息转换为文本。</li>\n<li><strong>高级对话管理</strong>: 提供更好的管理聊天的功能。</li>\n<li><strong>上传更大文件</strong>: 允许上传更大的文件，满足高需求用户的需要。</li>\n<li><strong>其他特权</strong>: 包括无限的表情回应、Premium 贴纸等。</li>\n</ul>\n<h2 id=\"Telegram-会员类型\"><a href=\"#Telegram-会员类型\" class=\"headerlink\" title=\"Telegram 会员类型\"></a>Telegram 会员类型</h2><p>Telegram 目前有两种主要的会员类型:</p>\n<ol>\n<li><p><strong>Telegram Premium</strong></p>\n<ul>\n<li>2022年6月推出的付费会员服务</li>\n<li>价格:每月4.99美元</li>\n<li>主要功能:<ul>\n<li>上传文件无大小限制(标准用户2.5GB)</li>\n<li>下载速度提升2-3倍</li>\n<li>移除频率限制(标准用户每秒200条消息)</li>\n<li>获得独家贴纸和反应</li>\n<li>优先获得客户支持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Telegram Business API</strong></p>\n<ul>\n<li>为有开发能力的企业提供的免费API</li>\n<li>可集成CRM、ERP、AI聊天机器人、自动化、对话支付等功能</li>\n<li>通过API可以创建Telegram Business账号</li>\n<li>主要用于企业与客户的商业交流</li>\n</ul>\n</li>\n</ol>\n<p>总的来说,Telegram Premium是面向个人用户的付费会员,提供了更多实用功能。而Telegram Business API则是面向企业的工具,可以开发出更多商业应用。两者都是Telegram为了满足不同用户需求而推出的会员服务。</p>\n"},{"title":"tg注意事项及风控规则","date":"2024-09-24T06:04:54.270Z","_content":"## 注意事项及风控规则\n\n在使用Telegram时，尤其是新号的管理和操作，需特别注意以下几点，以避免账号被封禁或限制：\n\n**1. 新号的养成与使用**\n- **养号阶段**：新注册的账号需要经过一段时间的养成，建议在注册后的一周内减少频繁的私聊和加群活动，以降低被举报的风险[2][4].\n- **邀请用户**：对于新建群组，建议每天邀请不超过20名活跃用户，逐步增加至100名，避免短时间内大量添加活跃用户，这样会增加被举报的风险[1][4].\n\n**2. 活跃度与举报风险**\n- 被邀请用户的活跃度越高，被举报的风险也越大。建议在新群创建后的14天内谨慎邀请活跃用户[4].\n- 每个群组在一周内收到的举报数量应控制在总人数的10%以内，例如一个1000人的群组，举报数量不应超过100[1].\n\n**3. 操作频率与内容**\n- 避免频繁发送消息、撤回消息或发送带有链接和特殊符号的内容，这些行为可能被判定为广告，从而导致封号[4].\n- 使用纯文本内容，并保持发送频率较低，可以降低被系统识别为垃圾信息的风险[4].\n\n**4. IP地址与设备管理**\n- 确保使用干净的IP地址进行操作，避免频繁更换IP或使用同一IP登录多个账号，这样会增加被封禁的可能性\n- 如果需要使用多个账号，建议分配到不同的代理IP上，以减少关联风险[4].\n\n**5. 处理封禁**\n- 如果账号被封禁，可以尝试联系Telegram支持团队进行申诉，但在解封后应保持低调，不要立即恢复频繁操作，以免再次被封[2][5].\n\n遵循上述注意事项，将有助于降低Telegram账号被封禁的风险，并确保群组和频道能够平稳运营。\n\n","source":"_posts/tg注意事项及风控规则.md","raw":"---\ntitle: tg注意事项及风控规则\ndate: 2024-09-24T14:04:54.270Z\ntags: []\ncategories: []\n---\n## 注意事项及风控规则\n\n在使用Telegram时，尤其是新号的管理和操作，需特别注意以下几点，以避免账号被封禁或限制：\n\n**1. 新号的养成与使用**\n- **养号阶段**：新注册的账号需要经过一段时间的养成，建议在注册后的一周内减少频繁的私聊和加群活动，以降低被举报的风险[2][4].\n- **邀请用户**：对于新建群组，建议每天邀请不超过20名活跃用户，逐步增加至100名，避免短时间内大量添加活跃用户，这样会增加被举报的风险[1][4].\n\n**2. 活跃度与举报风险**\n- 被邀请用户的活跃度越高，被举报的风险也越大。建议在新群创建后的14天内谨慎邀请活跃用户[4].\n- 每个群组在一周内收到的举报数量应控制在总人数的10%以内，例如一个1000人的群组，举报数量不应超过100[1].\n\n**3. 操作频率与内容**\n- 避免频繁发送消息、撤回消息或发送带有链接和特殊符号的内容，这些行为可能被判定为广告，从而导致封号[4].\n- 使用纯文本内容，并保持发送频率较低，可以降低被系统识别为垃圾信息的风险[4].\n\n**4. IP地址与设备管理**\n- 确保使用干净的IP地址进行操作，避免频繁更换IP或使用同一IP登录多个账号，这样会增加被封禁的可能性\n- 如果需要使用多个账号，建议分配到不同的代理IP上，以减少关联风险[4].\n\n**5. 处理封禁**\n- 如果账号被封禁，可以尝试联系Telegram支持团队进行申诉，但在解封后应保持低调，不要立即恢复频繁操作，以免再次被封[2][5].\n\n遵循上述注意事项，将有助于降低Telegram账号被封禁的风险，并确保群组和频道能够平稳运营。\n\n","slug":"tg注意事项及风控规则","published":1,"updated":"2024-11-25T11:44:04.448Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsck002dmbs61zl20rga","content":"<h2 id=\"注意事项及风控规则\"><a href=\"#注意事项及风控规则\" class=\"headerlink\" title=\"注意事项及风控规则\"></a>注意事项及风控规则</h2><p>在使用Telegram时，尤其是新号的管理和操作，需特别注意以下几点，以避免账号被封禁或限制：</p>\n<p><strong>1. 新号的养成与使用</strong></p>\n<ul>\n<li><strong>养号阶段</strong>：新注册的账号需要经过一段时间的养成，建议在注册后的一周内减少频繁的私聊和加群活动，以降低被举报的风险[2][4].</li>\n<li><strong>邀请用户</strong>：对于新建群组，建议每天邀请不超过20名活跃用户，逐步增加至100名，避免短时间内大量添加活跃用户，这样会增加被举报的风险[1][4].</li>\n</ul>\n<p><strong>2. 活跃度与举报风险</strong></p>\n<ul>\n<li>被邀请用户的活跃度越高，被举报的风险也越大。建议在新群创建后的14天内谨慎邀请活跃用户[4].</li>\n<li>每个群组在一周内收到的举报数量应控制在总人数的10%以内，例如一个1000人的群组，举报数量不应超过100[1].</li>\n</ul>\n<p><strong>3. 操作频率与内容</strong></p>\n<ul>\n<li>避免频繁发送消息、撤回消息或发送带有链接和特殊符号的内容，这些行为可能被判定为广告，从而导致封号[4].</li>\n<li>使用纯文本内容，并保持发送频率较低，可以降低被系统识别为垃圾信息的风险[4].</li>\n</ul>\n<p><strong>4. IP地址与设备管理</strong></p>\n<ul>\n<li>确保使用干净的IP地址进行操作，避免频繁更换IP或使用同一IP登录多个账号，这样会增加被封禁的可能性</li>\n<li>如果需要使用多个账号，建议分配到不同的代理IP上，以减少关联风险[4].</li>\n</ul>\n<p><strong>5. 处理封禁</strong></p>\n<ul>\n<li>如果账号被封禁，可以尝试联系Telegram支持团队进行申诉，但在解封后应保持低调，不要立即恢复频繁操作，以免再次被封[2][5].</li>\n</ul>\n<p>遵循上述注意事项，将有助于降低Telegram账号被封禁的风险，并确保群组和频道能够平稳运营。</p>\n","excerpt":"","more":"<h2 id=\"注意事项及风控规则\"><a href=\"#注意事项及风控规则\" class=\"headerlink\" title=\"注意事项及风控规则\"></a>注意事项及风控规则</h2><p>在使用Telegram时，尤其是新号的管理和操作，需特别注意以下几点，以避免账号被封禁或限制：</p>\n<p><strong>1. 新号的养成与使用</strong></p>\n<ul>\n<li><strong>养号阶段</strong>：新注册的账号需要经过一段时间的养成，建议在注册后的一周内减少频繁的私聊和加群活动，以降低被举报的风险[2][4].</li>\n<li><strong>邀请用户</strong>：对于新建群组，建议每天邀请不超过20名活跃用户，逐步增加至100名，避免短时间内大量添加活跃用户，这样会增加被举报的风险[1][4].</li>\n</ul>\n<p><strong>2. 活跃度与举报风险</strong></p>\n<ul>\n<li>被邀请用户的活跃度越高，被举报的风险也越大。建议在新群创建后的14天内谨慎邀请活跃用户[4].</li>\n<li>每个群组在一周内收到的举报数量应控制在总人数的10%以内，例如一个1000人的群组，举报数量不应超过100[1].</li>\n</ul>\n<p><strong>3. 操作频率与内容</strong></p>\n<ul>\n<li>避免频繁发送消息、撤回消息或发送带有链接和特殊符号的内容，这些行为可能被判定为广告，从而导致封号[4].</li>\n<li>使用纯文本内容，并保持发送频率较低，可以降低被系统识别为垃圾信息的风险[4].</li>\n</ul>\n<p><strong>4. IP地址与设备管理</strong></p>\n<ul>\n<li>确保使用干净的IP地址进行操作，避免频繁更换IP或使用同一IP登录多个账号，这样会增加被封禁的可能性</li>\n<li>如果需要使用多个账号，建议分配到不同的代理IP上，以减少关联风险[4].</li>\n</ul>\n<p><strong>5. 处理封禁</strong></p>\n<ul>\n<li>如果账号被封禁，可以尝试联系Telegram支持团队进行申诉，但在解封后应保持低调，不要立即恢复频繁操作，以免再次被封[2][5].</li>\n</ul>\n<p>遵循上述注意事项，将有助于降低Telegram账号被封禁的风险，并确保群组和频道能够平稳运营。</p>\n"},{"title":"Telegra.ph API 文档","date":"2024-09-06T21:09:28.814Z","_content":"以下是 Telegra.ph API 文档的全参版本，按照你要求的格式进行书写：\n\n---\n\n### 1. `createAccount`\n\n#### 请求方法\n`POST https://api.telegra.ph/createAccount`\n\n#### 请求参数\n\n| 参数名      | 类型   | 是否必填 | 描述                                             | 示例值              |\n| ----------- | ------ | -------- | ------------------------------------------------ | ------------------- |\n| short_name  | string | 必填     | 帐户的简短名称，1-32 个字符。                    | \"XiaoYang\"          |\n| author_name | string | 可选     | 作者名字，显示在页面的作者信息中，0-128 个字符。 | \"Xiao Yang\"         |\n| author_url  | string | 可选     | 作者的个人页面或社交媒体链接，0-512 个字符。     | \"https://lyone.xyz\" |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"XiaoYang\",\n    \"author_name\": \"Xiao Yang\",\n    \"author_url\": \"https://lyone.xyz\",\n    \"access_token\": \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\",\n    \"auth_url\": \"https://telegra.ph/auth/XXXXXX\"\n  }\n}\n```\n\n---\n\n### 2. `revokeAccessToken`\n\n#### 请求方法\n`POST https://api.telegra.ph/revokeAccessToken`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                 | 示例值                                                       |\n| ------------ | ------ | -------- | -------------------- | ------------------------------------------------------------ |\n| access_token | string | 必填     | 当前帐户的访问令牌。 | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"access_token\": \"new_access_token\",\n    \"auth_url\": \"https://telegra.ph/auth/new_access_token\"\n  }\n}\n```\n\n---\n\n### 3. `editAccountInfo`\n\n#### 请求方法\n`POST https://api.telegra.ph/editAccountInfo`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                                       | 示例值                                                       |\n| ------------ | ------ | -------- | ------------------------------------------ | ------------------------------------------------------------ |\n| access_token | string | 必填     | 帐户的访问令牌。                           | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| short_name   | string | 可选     | 更新后的简短名称，1-32 个字符。            | \"XiaoYangNew\"                                                |\n| author_name  | string | 可选     | 更新后的作者名字，0-128 个字符。           | \"New Xiao Yang\"                                              |\n| author_url   | string | 可选     | 更新后的作者的个人页面链接，0-512 个字符。 | \"https://new-lyone.xyz\"                                      |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"XiaoYangNew\",\n    \"author_name\": \"New Xiao Yang\",\n    \"author_url\": \"https://new-lyone.xyz\"\n  }\n}\n```\n\n---\n\n### 4. `getAccountInfo`\n\n#### 请求方法\n`POST https://api.telegra.ph/getAccountInfo`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                                 | 示例值                                                       |\n| ------------ | ------ | -------- | ------------------------------------ | ------------------------------------------------------------ |\n| access_token | string | 必填     | 帐户的访问令牌。                     | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| fields       | string | 可选     | 返回字段列表，以 JSON 数组格式传递。 | `[\"short_name\",\"page_count\"]`                                |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"XiaoYang\",\n    \"author_name\": \"Xiao Yang\",\n    \"author_url\": \"https://lyone.xyz\",\n    \"auth_url\": \"https://telegra.ph/auth/XXXXXX\"\n  }\n}\n```\n\n---\n\n### 5. `createPage`\n\n#### 请求方法\n`POST https://api.telegra.ph/createPage`\n\n#### 请求参数\n\n| 参数名         | 类型   | 是否必填 | 描述                                       | 示例值                                                       |\n| -------------- | ------ | -------- | ------------------------------------------ | ------------------------------------------------------------ |\n| access_token   | string | 必填     | 帐户的访问令牌。                           | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| title          | string | 必填     | 文章标题，1-256 个字符。                   | \"我的第一篇文章\"                                             |\n| content        | string | 必填     | 文章内容，格式为 JSON 编码的节点对象数组。 | `[{ \"tag\": \"p\", \"children\": [\"Hello world!\"] }]`             |\n| author_name    | string | 可选     | 覆盖帐户默认的作者名字。                   | \"Xiao Yang\"                                                  |\n| author_url     | string | 可选     | 覆盖帐户默认的作者链接。                   | \"https://lyone.xyz\"                                          |\n| return_content | bool   | 可选     | 如果为 `true`，返回文章的内容。            | true                                                         |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"My-First-Article-09-05\",\n    \"url\": \"http://telegra.ph/My-First-Article-09-05\",\n    \"title\": \"我的第一篇文章\",\n    \"content\": [\n      { \"tag\": \"p\", \"children\": [\"Hello world!\"] }\n    ]\n  }\n}\n```\n\n---\n\n### 6. `editPage`\n\n#### 请求方法\n`POST https://api.telegra.ph/editPage`\n\n#### 请求参数\n\n| 参数名         | 类型   | 是否必填 | 描述                                               | 示例值                                                       |\n| -------------- | ------ | -------- | -------------------------------------------------- | ------------------------------------------------------------ |\n| access_token   | string | 必填     | 帐户的访问令牌。                                   | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| path           | string | 必填     | 页面路径。                                         | \"My-First-Article-09-05\"                                     |\n| title          | string | 必填     | 更新后的文章标题，1-256 个字符。                   | \"我的修改后的文章\"                                           |\n| content        | string | 必填     | 更新后的文章内容，格式为 JSON 编码的节点对象数组。 | `[{ \"tag\": \"p\", \"children\": [\"Updated content.\"] }]`         |\n| author_name    | string | 可选     | 覆盖帐户默认的作者名字。                           | \"New Xiao Yang\"                                              |\n| author_url     | string | 可选     | 覆盖帐户默认的作者链接。                           | \"https://new-lyone.xyz\"                                      |\n| return_content | bool   | 可选     | 如果为 `true`，返回更新后的文章内容。              | true                                                         |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"My-First-Article-09-05\",\n    \"url\": \"http://telegra.ph/My-First-Article-09-05\",\n    \"title\": \"我的修改后的文章\",\n    \"content\": [\n      { \"tag\": \"p\", \"children\": [\"Updated content.\"] }\n    ]\n  }\n}\n```\n\n---\n\n### 7. `getPageList`\n\n#### 请求方法\n`POST https://api.telegra.ph/getPageList`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                           | 示例值                                                       |\n| ------------ | ------ | -------- | ------------------------------ | ------------------------------------------------------------ |\n| access_token | string | 必填     | 帐户的访问令牌。               | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| offset       | int    | 可选     | 从第几个页面开始返回（分页）。 | 0                                                            |\n| limit        | int    | 可选     | 返回的页面数量（分页）。       | 10                                                           |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"total_count\": 3,\n    \"pages\": [\n      {\n        \"path\": \"My-First-Article-09-05\",\n        \"title\": \"我的第一篇文章\",\n        \"url\": \"http://telegra.ph/My-First-Article-09-05\",\n        \"views\": 100\n      },\n      {\n        \"path","source":"_posts/Telegra.ph API 文档.md","raw":"---\ntitle: Telegra.ph API 文档\ndate: 2024-09-07T05:09:28.814Z\ntags: []\ncategories: []\n---\n以下是 Telegra.ph API 文档的全参版本，按照你要求的格式进行书写：\n\n---\n\n### 1. `createAccount`\n\n#### 请求方法\n`POST https://api.telegra.ph/createAccount`\n\n#### 请求参数\n\n| 参数名      | 类型   | 是否必填 | 描述                                             | 示例值              |\n| ----------- | ------ | -------- | ------------------------------------------------ | ------------------- |\n| short_name  | string | 必填     | 帐户的简短名称，1-32 个字符。                    | \"XiaoYang\"          |\n| author_name | string | 可选     | 作者名字，显示在页面的作者信息中，0-128 个字符。 | \"Xiao Yang\"         |\n| author_url  | string | 可选     | 作者的个人页面或社交媒体链接，0-512 个字符。     | \"https://lyone.xyz\" |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"XiaoYang\",\n    \"author_name\": \"Xiao Yang\",\n    \"author_url\": \"https://lyone.xyz\",\n    \"access_token\": \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\",\n    \"auth_url\": \"https://telegra.ph/auth/XXXXXX\"\n  }\n}\n```\n\n---\n\n### 2. `revokeAccessToken`\n\n#### 请求方法\n`POST https://api.telegra.ph/revokeAccessToken`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                 | 示例值                                                       |\n| ------------ | ------ | -------- | -------------------- | ------------------------------------------------------------ |\n| access_token | string | 必填     | 当前帐户的访问令牌。 | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"access_token\": \"new_access_token\",\n    \"auth_url\": \"https://telegra.ph/auth/new_access_token\"\n  }\n}\n```\n\n---\n\n### 3. `editAccountInfo`\n\n#### 请求方法\n`POST https://api.telegra.ph/editAccountInfo`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                                       | 示例值                                                       |\n| ------------ | ------ | -------- | ------------------------------------------ | ------------------------------------------------------------ |\n| access_token | string | 必填     | 帐户的访问令牌。                           | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| short_name   | string | 可选     | 更新后的简短名称，1-32 个字符。            | \"XiaoYangNew\"                                                |\n| author_name  | string | 可选     | 更新后的作者名字，0-128 个字符。           | \"New Xiao Yang\"                                              |\n| author_url   | string | 可选     | 更新后的作者的个人页面链接，0-512 个字符。 | \"https://new-lyone.xyz\"                                      |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"XiaoYangNew\",\n    \"author_name\": \"New Xiao Yang\",\n    \"author_url\": \"https://new-lyone.xyz\"\n  }\n}\n```\n\n---\n\n### 4. `getAccountInfo`\n\n#### 请求方法\n`POST https://api.telegra.ph/getAccountInfo`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                                 | 示例值                                                       |\n| ------------ | ------ | -------- | ------------------------------------ | ------------------------------------------------------------ |\n| access_token | string | 必填     | 帐户的访问令牌。                     | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| fields       | string | 可选     | 返回字段列表，以 JSON 数组格式传递。 | `[\"short_name\",\"page_count\"]`                                |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"short_name\": \"XiaoYang\",\n    \"author_name\": \"Xiao Yang\",\n    \"author_url\": \"https://lyone.xyz\",\n    \"auth_url\": \"https://telegra.ph/auth/XXXXXX\"\n  }\n}\n```\n\n---\n\n### 5. `createPage`\n\n#### 请求方法\n`POST https://api.telegra.ph/createPage`\n\n#### 请求参数\n\n| 参数名         | 类型   | 是否必填 | 描述                                       | 示例值                                                       |\n| -------------- | ------ | -------- | ------------------------------------------ | ------------------------------------------------------------ |\n| access_token   | string | 必填     | 帐户的访问令牌。                           | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| title          | string | 必填     | 文章标题，1-256 个字符。                   | \"我的第一篇文章\"                                             |\n| content        | string | 必填     | 文章内容，格式为 JSON 编码的节点对象数组。 | `[{ \"tag\": \"p\", \"children\": [\"Hello world!\"] }]`             |\n| author_name    | string | 可选     | 覆盖帐户默认的作者名字。                   | \"Xiao Yang\"                                                  |\n| author_url     | string | 可选     | 覆盖帐户默认的作者链接。                   | \"https://lyone.xyz\"                                          |\n| return_content | bool   | 可选     | 如果为 `true`，返回文章的内容。            | true                                                         |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"My-First-Article-09-05\",\n    \"url\": \"http://telegra.ph/My-First-Article-09-05\",\n    \"title\": \"我的第一篇文章\",\n    \"content\": [\n      { \"tag\": \"p\", \"children\": [\"Hello world!\"] }\n    ]\n  }\n}\n```\n\n---\n\n### 6. `editPage`\n\n#### 请求方法\n`POST https://api.telegra.ph/editPage`\n\n#### 请求参数\n\n| 参数名         | 类型   | 是否必填 | 描述                                               | 示例值                                                       |\n| -------------- | ------ | -------- | -------------------------------------------------- | ------------------------------------------------------------ |\n| access_token   | string | 必填     | 帐户的访问令牌。                                   | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| path           | string | 必填     | 页面路径。                                         | \"My-First-Article-09-05\"                                     |\n| title          | string | 必填     | 更新后的文章标题，1-256 个字符。                   | \"我的修改后的文章\"                                           |\n| content        | string | 必填     | 更新后的文章内容，格式为 JSON 编码的节点对象数组。 | `[{ \"tag\": \"p\", \"children\": [\"Updated content.\"] }]`         |\n| author_name    | string | 可选     | 覆盖帐户默认的作者名字。                           | \"New Xiao Yang\"                                              |\n| author_url     | string | 可选     | 覆盖帐户默认的作者链接。                           | \"https://new-lyone.xyz\"                                      |\n| return_content | bool   | 可选     | 如果为 `true`，返回更新后的文章内容。              | true                                                         |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"path\": \"My-First-Article-09-05\",\n    \"url\": \"http://telegra.ph/My-First-Article-09-05\",\n    \"title\": \"我的修改后的文章\",\n    \"content\": [\n      { \"tag\": \"p\", \"children\": [\"Updated content.\"] }\n    ]\n  }\n}\n```\n\n---\n\n### 7. `getPageList`\n\n#### 请求方法\n`POST https://api.telegra.ph/getPageList`\n\n#### 请求参数\n\n| 参数名       | 类型   | 是否必填 | 描述                           | 示例值                                                       |\n| ------------ | ------ | -------- | ------------------------------ | ------------------------------------------------------------ |\n| access_token | string | 必填     | 帐户的访问令牌。               | \"d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722\" |\n| offset       | int    | 可选     | 从第几个页面开始返回（分页）。 | 0                                                            |\n| limit        | int    | 可选     | 返回的页面数量（分页）。       | 10                                                           |\n\n#### 响应示例\n```json\n{\n  \"ok\": true,\n  \"result\": {\n    \"total_count\": 3,\n    \"pages\": [\n      {\n        \"path\": \"My-First-Article-09-05\",\n        \"title\": \"我的第一篇文章\",\n        \"url\": \"http://telegra.ph/My-First-Article-09-05\",\n        \"views\": 100\n      },\n      {\n        \"path","slug":"Telegra.ph API 文档","published":1,"updated":"2024-11-25T11:44:04.458Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscl002embs67kivd7r9","content":"<p>以下是 Telegra.ph API 文档的全参版本，按照你要求的格式进行书写：</p>\n<hr>\n<h3 id=\"1-createAccount\"><a href=\"#1-createAccount\" class=\"headerlink\" title=\"1. createAccount\"></a>1. <code>createAccount</code></h3><h4 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/createAccount</code></p>\n<h4 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short_name</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的简短名称，1-32 个字符。</td>\n<td>“XiaoYang”</td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>作者名字，显示在页面的作者信息中，0-128 个字符。</td>\n<td>“Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>作者的个人页面或社交媒体链接，0-512 个字符。</td>\n<td>“<a href=\"https://lyone.xyz/\">https://lyone.xyz</a>“</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例\"><a href=\"#响应示例\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;XiaoYang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Xiao Yang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://lyone.xyz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/XXXXXX&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-revokeAccessToken\"><a href=\"#2-revokeAccessToken\" class=\"headerlink\" title=\"2. revokeAccessToken\"></a>2. <code>revokeAccessToken</code></h3><h4 id=\"请求方法-1\"><a href=\"#请求方法-1\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/revokeAccessToken</code></p>\n<h4 id=\"请求参数-1\"><a href=\"#请求参数-1\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>当前帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-1\"><a href=\"#响应示例-1\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;new_access_token&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/new_access_token&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-editAccountInfo\"><a href=\"#3-editAccountInfo\" class=\"headerlink\" title=\"3. editAccountInfo\"></a>3. <code>editAccountInfo</code></h3><h4 id=\"请求方法-2\"><a href=\"#请求方法-2\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/editAccountInfo</code></p>\n<h4 id=\"请求参数-2\"><a href=\"#请求参数-2\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>short_name</td>\n<td>string</td>\n<td>可选</td>\n<td>更新后的简短名称，1-32 个字符。</td>\n<td>“XiaoYangNew”</td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>更新后的作者名字，0-128 个字符。</td>\n<td>“New Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>更新后的作者的个人页面链接，0-512 个字符。</td>\n<td>“<a href=\"https://new-lyone.xyz/\">https://new-lyone.xyz</a>“</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-2\"><a href=\"#响应示例-2\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;XiaoYangNew&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New Xiao Yang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://new-lyone.xyz&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-getAccountInfo\"><a href=\"#4-getAccountInfo\" class=\"headerlink\" title=\"4. getAccountInfo\"></a>4. <code>getAccountInfo</code></h3><h4 id=\"请求方法-3\"><a href=\"#请求方法-3\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/getAccountInfo</code></p>\n<h4 id=\"请求参数-3\"><a href=\"#请求参数-3\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>fields</td>\n<td>string</td>\n<td>可选</td>\n<td>返回字段列表，以 JSON 数组格式传递。</td>\n<td><code>[&quot;short_name&quot;,&quot;page_count&quot;]</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-3\"><a href=\"#响应示例-3\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;XiaoYang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Xiao Yang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://lyone.xyz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/XXXXXX&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-createPage\"><a href=\"#5-createPage\" class=\"headerlink\" title=\"5. createPage\"></a>5. <code>createPage</code></h3><h4 id=\"请求方法-4\"><a href=\"#请求方法-4\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/createPage</code></p>\n<h4 id=\"请求参数-4\"><a href=\"#请求参数-4\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string</td>\n<td>必填</td>\n<td>文章标题，1-256 个字符。</td>\n<td>“我的第一篇文章”</td>\n</tr>\n<tr>\n<td>content</td>\n<td>string</td>\n<td>必填</td>\n<td>文章内容，格式为 JSON 编码的节点对象数组。</td>\n<td><code>[&#123; &quot;tag&quot;: &quot;p&quot;, &quot;children&quot;: [&quot;Hello world!&quot;] &#125;]</code></td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者名字。</td>\n<td>“Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者链接。</td>\n<td>“<a href=\"https://lyone.xyz/\">https://lyone.xyz</a>“</td>\n</tr>\n<tr>\n<td>return_content</td>\n<td>bool</td>\n<td>可选</td>\n<td>如果为 <code>true</code>，返回文章的内容。</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-4\"><a href=\"#响应示例-4\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我的第一篇文章&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;tag&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;p&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;children&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Hello world!&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-editPage\"><a href=\"#6-editPage\" class=\"headerlink\" title=\"6. editPage\"></a>6. <code>editPage</code></h3><h4 id=\"请求方法-5\"><a href=\"#请求方法-5\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/editPage</code></p>\n<h4 id=\"请求参数-5\"><a href=\"#请求参数-5\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>path</td>\n<td>string</td>\n<td>必填</td>\n<td>页面路径。</td>\n<td>“My-First-Article-09-05”</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string</td>\n<td>必填</td>\n<td>更新后的文章标题，1-256 个字符。</td>\n<td>“我的修改后的文章”</td>\n</tr>\n<tr>\n<td>content</td>\n<td>string</td>\n<td>必填</td>\n<td>更新后的文章内容，格式为 JSON 编码的节点对象数组。</td>\n<td><code>[&#123; &quot;tag&quot;: &quot;p&quot;, &quot;children&quot;: [&quot;Updated content.&quot;] &#125;]</code></td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者名字。</td>\n<td>“New Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者链接。</td>\n<td>“<a href=\"https://new-lyone.xyz/\">https://new-lyone.xyz</a>“</td>\n</tr>\n<tr>\n<td>return_content</td>\n<td>bool</td>\n<td>可选</td>\n<td>如果为 <code>true</code>，返回更新后的文章内容。</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-5\"><a href=\"#响应示例-5\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我的修改后的文章&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;tag&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;p&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;children&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Updated content.&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"7-getPageList\"><a href=\"#7-getPageList\" class=\"headerlink\" title=\"7. getPageList\"></a>7. <code>getPageList</code></h3><h4 id=\"请求方法-6\"><a href=\"#请求方法-6\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/getPageList</code></p>\n<h4 id=\"请求参数-6\"><a href=\"#请求参数-6\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>offset</td>\n<td>int</td>\n<td>可选</td>\n<td>从第几个页面开始返回（分页）。</td>\n<td>0</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>int</td>\n<td>可选</td>\n<td>返回的页面数量（分页）。</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-6\"><a href=\"#响应示例-6\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><pre><code class=\"json\">&#123;\n  &quot;ok&quot;: true,\n  &quot;result&quot;: &#123;\n    &quot;total_count&quot;: 3,\n    &quot;pages&quot;: [\n      &#123;\n        &quot;path&quot;: &quot;My-First-Article-09-05&quot;,\n        &quot;title&quot;: &quot;我的第一篇文章&quot;,\n        &quot;url&quot;: &quot;http://telegra.ph/My-First-Article-09-05&quot;,\n        &quot;views&quot;: 100\n      &#125;,\n      &#123;\n        &quot;path\n</code></pre>\n","excerpt":"","more":"<p>以下是 Telegra.ph API 文档的全参版本，按照你要求的格式进行书写：</p>\n<hr>\n<h3 id=\"1-createAccount\"><a href=\"#1-createAccount\" class=\"headerlink\" title=\"1. createAccount\"></a>1. <code>createAccount</code></h3><h4 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/createAccount</code></p>\n<h4 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short_name</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的简短名称，1-32 个字符。</td>\n<td>“XiaoYang”</td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>作者名字，显示在页面的作者信息中，0-128 个字符。</td>\n<td>“Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>作者的个人页面或社交媒体链接，0-512 个字符。</td>\n<td>“<a href=\"https://lyone.xyz/\">https://lyone.xyz</a>“</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例\"><a href=\"#响应示例\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;XiaoYang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Xiao Yang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://lyone.xyz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/XXXXXX&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-revokeAccessToken\"><a href=\"#2-revokeAccessToken\" class=\"headerlink\" title=\"2. revokeAccessToken\"></a>2. <code>revokeAccessToken</code></h3><h4 id=\"请求方法-1\"><a href=\"#请求方法-1\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/revokeAccessToken</code></p>\n<h4 id=\"请求参数-1\"><a href=\"#请求参数-1\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>当前帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-1\"><a href=\"#响应示例-1\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;new_access_token&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/new_access_token&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-editAccountInfo\"><a href=\"#3-editAccountInfo\" class=\"headerlink\" title=\"3. editAccountInfo\"></a>3. <code>editAccountInfo</code></h3><h4 id=\"请求方法-2\"><a href=\"#请求方法-2\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/editAccountInfo</code></p>\n<h4 id=\"请求参数-2\"><a href=\"#请求参数-2\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>short_name</td>\n<td>string</td>\n<td>可选</td>\n<td>更新后的简短名称，1-32 个字符。</td>\n<td>“XiaoYangNew”</td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>更新后的作者名字，0-128 个字符。</td>\n<td>“New Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>更新后的作者的个人页面链接，0-512 个字符。</td>\n<td>“<a href=\"https://new-lyone.xyz/\">https://new-lyone.xyz</a>“</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-2\"><a href=\"#响应示例-2\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;XiaoYangNew&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New Xiao Yang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://new-lyone.xyz&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-getAccountInfo\"><a href=\"#4-getAccountInfo\" class=\"headerlink\" title=\"4. getAccountInfo\"></a>4. <code>getAccountInfo</code></h3><h4 id=\"请求方法-3\"><a href=\"#请求方法-3\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/getAccountInfo</code></p>\n<h4 id=\"请求参数-3\"><a href=\"#请求参数-3\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>fields</td>\n<td>string</td>\n<td>可选</td>\n<td>返回字段列表，以 JSON 数组格式传递。</td>\n<td><code>[&quot;short_name&quot;,&quot;page_count&quot;]</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-3\"><a href=\"#响应示例-3\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;XiaoYang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Xiao Yang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://lyone.xyz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;auth_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://telegra.ph/auth/XXXXXX&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-createPage\"><a href=\"#5-createPage\" class=\"headerlink\" title=\"5. createPage\"></a>5. <code>createPage</code></h3><h4 id=\"请求方法-4\"><a href=\"#请求方法-4\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/createPage</code></p>\n<h4 id=\"请求参数-4\"><a href=\"#请求参数-4\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string</td>\n<td>必填</td>\n<td>文章标题，1-256 个字符。</td>\n<td>“我的第一篇文章”</td>\n</tr>\n<tr>\n<td>content</td>\n<td>string</td>\n<td>必填</td>\n<td>文章内容，格式为 JSON 编码的节点对象数组。</td>\n<td><code>[&#123; &quot;tag&quot;: &quot;p&quot;, &quot;children&quot;: [&quot;Hello world!&quot;] &#125;]</code></td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者名字。</td>\n<td>“Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者链接。</td>\n<td>“<a href=\"https://lyone.xyz/\">https://lyone.xyz</a>“</td>\n</tr>\n<tr>\n<td>return_content</td>\n<td>bool</td>\n<td>可选</td>\n<td>如果为 <code>true</code>，返回文章的内容。</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-4\"><a href=\"#响应示例-4\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我的第一篇文章&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;tag&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;p&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;children&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Hello world!&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-editPage\"><a href=\"#6-editPage\" class=\"headerlink\" title=\"6. editPage\"></a>6. <code>editPage</code></h3><h4 id=\"请求方法-5\"><a href=\"#请求方法-5\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/editPage</code></p>\n<h4 id=\"请求参数-5\"><a href=\"#请求参数-5\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>path</td>\n<td>string</td>\n<td>必填</td>\n<td>页面路径。</td>\n<td>“My-First-Article-09-05”</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string</td>\n<td>必填</td>\n<td>更新后的文章标题，1-256 个字符。</td>\n<td>“我的修改后的文章”</td>\n</tr>\n<tr>\n<td>content</td>\n<td>string</td>\n<td>必填</td>\n<td>更新后的文章内容，格式为 JSON 编码的节点对象数组。</td>\n<td><code>[&#123; &quot;tag&quot;: &quot;p&quot;, &quot;children&quot;: [&quot;Updated content.&quot;] &#125;]</code></td>\n</tr>\n<tr>\n<td>author_name</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者名字。</td>\n<td>“New Xiao Yang”</td>\n</tr>\n<tr>\n<td>author_url</td>\n<td>string</td>\n<td>可选</td>\n<td>覆盖帐户默认的作者链接。</td>\n<td>“<a href=\"https://new-lyone.xyz/\">https://new-lyone.xyz</a>“</td>\n</tr>\n<tr>\n<td>return_content</td>\n<td>bool</td>\n<td>可选</td>\n<td>如果为 <code>true</code>，返回更新后的文章内容。</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-5\"><a href=\"#响应示例-5\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;result&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://telegra.ph/My-First-Article-09-05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我的修改后的文章&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;tag&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;p&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;children&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Updated content.&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"7-getPageList\"><a href=\"#7-getPageList\" class=\"headerlink\" title=\"7. getPageList\"></a>7. <code>getPageList</code></h3><h4 id=\"请求方法-6\"><a href=\"#请求方法-6\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p><code>POST https://api.telegra.ph/getPageList</code></p>\n<h4 id=\"请求参数-6\"><a href=\"#请求参数-6\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>string</td>\n<td>必填</td>\n<td>帐户的访问令牌。</td>\n<td>“d3b25feccb89e508a9114afb82aa421fe2a9712b963b387cc5ad71e58722”</td>\n</tr>\n<tr>\n<td>offset</td>\n<td>int</td>\n<td>可选</td>\n<td>从第几个页面开始返回（分页）。</td>\n<td>0</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>int</td>\n<td>可选</td>\n<td>返回的页面数量（分页）。</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应示例-6\"><a href=\"#响应示例-6\" class=\"headerlink\" title=\"响应示例\"></a>响应示例</h4><pre><code class=\"json\">&#123;\n  &quot;ok&quot;: true,\n  &quot;result&quot;: &#123;\n    &quot;total_count&quot;: 3,\n    &quot;pages&quot;: [\n      &#123;\n        &quot;path&quot;: &quot;My-First-Article-09-05&quot;,\n        &quot;title&quot;: &quot;我的第一篇文章&quot;,\n        &quot;url&quot;: &quot;http://telegra.ph/My-First-Article-09-05&quot;,\n        &quot;views&quot;: 100\n      &#125;,\n      &#123;\n        &quot;path\n</code></pre>\n"},{"title":"substore脚本操作","date":"2024-11-03T11:03:20.320Z","_content":"```js\nfunction operator(proxies = [], targetPlatform, context) {\n  // 支持快捷操作 不一定要写一个 function\n  // 可参考 https://t.me/zhetengsha/970\n  // https://t.me/zhetengsha/1009\n\n  // proxies 为传入的内部节点数组\n  // 可在预览界面点击节点查看 JSON 结构 或查看 `target=JSON` 的通用订阅\n  // 0. 结构大致参考了 Clash.Meta(mihomo), 可参考 mihomo 的文档, 例如 `xudp`, `smux` 都可以自己设置. 但是有私货, 下面是我能想起来的一些私货\n  // 1. `_no-resolve` 为不解析域名\n  // 2. 域名解析后 会多一个 `_resolved` 字段, 表示是否解析成功\n  // 3. 域名解析后会有`_IPv4`, `_IPv6`, `_IP`(若有多个步骤, 只取第一次成功的 v4 或 v6 数据), `_IP4P`(若解析类型为 IPv6 且符合 IP4P 类型, 将自动转换), `_domain` 字段, `_resolved_ips` 为解析出的所有 IP\n  // 4. 节点字段 `exec` 为 `ssr-local` 路径, 默认 `/usr/local/bin/ssr-local`; 端口从 10000 开始递增(暂不支持配置)\n  // 5. `_subName` 为单条订阅名, `_subDisplayName` 为单条订阅显示名\n  // 6. `_collectionName` 为组合订阅名, `_collectionDisplayName` 为组合订阅显示名\n  // 7. `tls-fingerprint` 为 tls 指纹\n  // 8. `underlying-proxy` 为前置代理\n  // 9. `trojan`, `tuic`, `hysteria`, `hysteria2`, `juicity` 会在解析时设置 `tls`: true (会使用 tls 类协议的通用逻辑),  输出时删除\n  // 10. `sni` 在某些协议里会自动与 `servername` 转换\n  // 11. 读取节点的 ca-str 和 _ca (后端文件路径) 字段, 自动计算 fingerprint (参考 https://t.me/zhetengsha/1512)\n  // 12. 以 Surge 为例, 最新的参数一般我都会跟进, 以 Surge 文档为例, 一些常用的: TUIC/Hysteria 2 的 `ecn`, Snell 的 `reuse` 连接复用, QUIC 策略 block-quic`, Hysteria 2 下载带宽 `down`\n  // 13. `test-url` 为测延迟链接, `test-timeout` 为测延迟超时\n  // 14. `ports` 为端口跳跃, `hop-interval` 变换端口号的时间间隔\n  // 15. `ip-version` 设置节点使用 IP 版本，可选：dual，ipv4，ipv6，ipv4-prefer，ipv6-prefer. 会进行内部转换, 若无法匹配则使用原始值\n\n  // require 为 Node.js 的 require, 在 Node.js 运行环境下 可以用来引入模块\n\n  // $arguments 为传入的脚本参数\n\n  // $options 为通过链接传入的参数\n  // 例如: { arg1: 'a', arg2: 'b' }\n  // 可这样传:\n  // 先这样处理 encodeURIComponent(JSON.stringify({ arg1: 'a', arg2: 'b' }))\n  // /api/file/foo?$options=%7B%22arg1%22%3A%22a%22%2C%22arg2%22%3A%22b%22%7D\n  // 或这样传:\n  // 先这样处理 encodeURIComponent('arg1=a&arg2=b')\n  // /api/file/foo?$options=arg1%3Da%26arg2%3Db\n\n  // console.log($options)\n\n  // targetPlatform 为输出的目标平台\n\n  // lodash\n\n  // $substore 为 OpenAPI\n  // 参考 https://github.com/Peng-YM/QuanX/blob/master/Tools/OpenAPI/README.md\n\n  // scriptResourceCache 缓存\n  // 可参考 https://t.me/zhetengsha/1003\n  // const cache = scriptResourceCache\n  // cache.set(id, data)\n  // cache.get(id)\n\n  // ProxyUtils 为节点处理工具\n  // 可参考 https://t.me/zhetengsha/1066\n  // const ProxyUtils = {\n  //     parse, // 订阅解析\n  //     process, // 节点操作/文件操作\n  //     produce, // 输出订阅\n  //     getRandomPort, // 获取随机端口(参考 ports 端口跳跃的格式 443,8443,5000-6000)\n  //     ipAddress, // https://github.com/beaugunderson/ip-address\n  //     isIPv4,\n  //     isIPv6,\n  //     isIP,\n  //     yaml, // yaml 解析和生成\n  //     getFlag, // 获取 emoji 旗帜\n  //     removeFlag, // 移除 emoji 旗帜\n  //     getISO, // 获取 ISO 3166-1 alpha-2 代码\n  //     Gist, // Gist 类\n  //     download, // 内部的下载方法, 见 backend/src/utils/download.js\n  //     MMDB, // Node.js 环境 可用于模拟 Surge/Loon 的 $utils.ipasn, $utils.ipaso, $utils.geoip. 具体见 https://t.me/zhetengsha/1269\n  // }\n\n  // 如果只是为了快速修改或者筛选 可以参考 脚本操作支持节点快捷脚本 https://t.me/zhetengsha/970 和 脚本筛选支持节点快捷脚本 https://t.me/zhetengsha/1009\n  // ⚠️ 注意: 函数式(即本文件这样的 function operator() {}) 和快捷操作(下面使用 $server) 只能二选一\n  // 示例: 给节点名添加前缀\n  // $server.name = `[${ProxyUtils.getISO($server.name)}] ${$server.name}`\n  // 示例: 给节点名添加旗帜\n  // $server.name = `[${ProxyUtils.getFlag($server.name).replace(/🇹🇼/g, '🇼🇸')}] ${ProxyUtils.removeFlag($server.name)}`\n\n  // 示例: 从 sni 文件中读取内容并进行节点操作\n  // const sni = await produceArtifact({\n  //     type: 'file',\n  //     name: 'sni' // 文件名\n  // });\n  // $server.sni = sni\n\n  // 1. Surge 输出 WireGuard 完整配置\n\n  // let proxies = await produceArtifact({\n  //   type: 'subscription',\n  //   name: 'sub',\n  //   platform: 'Surge',\n  //   produceOpts: {\n  //     'include-unsupported-proxy': true,\n  //   }\n  // })\n  // $content = proxies\n\n  // 2. sing-box\n\n  // 但是一般不需要这样用, 可参考\n  // 1. https://t.me/zhetengsha/1111\n  // 2. https://t.me/zhetengsha/1070\n  // 3. https://t.me/zhetengsha/1241\n\n  // let singboxProxies = await produceArtifact({\n  //     type: 'subscription', // type: 'subscription' 或 'collection'\n  //     name: 'sub', // subscription name\n  //     platform: 'sing-box', // target platform\n  //     produceType: 'internal' // 'internal' produces an Array, otherwise produces a String( JSON.parse('JSON String') )\n  // })\n\n  // // JSON\n  // $content = JSON.stringify({}, null, 2)\n\n  // 3. clash.meta\n\n  // 但是一般不需要这样用, 可参考\n  // 1. https://t.me/zhetengsha/1111\n  // 2. https://t.me/zhetengsha/1070\n  // 3. https://t.me/zhetengsha/1234\n\n  // let clashMetaProxies = await produceArtifact({\n  //     type: 'subscription',\n  //     name: 'sub',\n  //     platform: 'ClashMeta',\n  //     produceType: 'internal' // 'internal' produces an Array, otherwise produces a String( ProxyUtils.yaml.safeLoad('YAML String').proxies )\n  // })\n\n  // 4. 一个比较折腾的方案: 在脚本操作中, 把内容同步到另一个 gist\n  // 见 https://t.me/zhetengsha/1428\n  //\n  // const content = ProxyUtils.produce([...proxies], platform)\n\n  // // YAML\n  // ProxyUtils.yaml.load('YAML String')\n  // ProxyUtils.yaml.safeLoad('YAML String')\n  // $content = ProxyUtils.yaml.safeDump({})\n  // $content = ProxyUtils.yaml.dump({})\n\n  // 一个往文件里插入本地节点的例子:\n  // const yaml = ProxyUtils.yaml.safeLoad($content ?? $files[0])\n  // let clashMetaProxies = await produceArtifact({\n  //     type: 'collection',\n  //     name: '机场',\n  //     platform: 'ClashMeta',\n  //     produceType: 'internal'\n  // })\n  // yaml.proxies.unshift(...clashMetaProxies)\n  // $content = ProxyUtils.yaml.dump(yaml)\n\n  // { $content, $files, $options } will be passed to the next operator\n  // $content is the final content of the file\n\n  // flowUtils 为机场订阅流量信息处理工具\n  // 可参考:\n  // 1. https://t.me/zhetengsha/948\n\n  // context 为传入的上下文\n  // 其中 source 为 订阅和组合订阅的数据, 有三种情况, 按需判断 (若只需要取订阅/组合订阅名称 直接用 `_subName` `_subDisplayName` `_collectionName` `_collectionDisplayName` 即可)\n\n  // 若存在 `source._collection` 且 `source._collection.subscriptions` 中的 key 在 `source` 上也存在, 说明输出结果为组合订阅, 但是脚本设置在单条订阅上\n\n  // 若存在 `source._collection` 但 `source._collection.subscriptions` 中的 key 在 `source` 上不存在, 说明输出结果为组合订阅, 脚本设置在组合订阅上\n\n  // 若不存在 `source._collection`, 说明输出结果为单条订阅, 脚本设置在此单条订阅上\n\n  // 1. 输出单条订阅 sub-1 时, 该单条订阅中的脚本上下文为:\n  // {\n  //   \"source\": {\n  //     \"sub-1\": {\n  //       \"name\": \"sub-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": true,\n  //       \"process\": [],\n  //       \"icon\": \"\",\n  //       \"source\": \"local\",\n  //       \"url\": \"\",\n  //       \"content\": \"\",\n  //       \"ua\": \"\",\n  //       \"display-name\": \"\",\n  //       \"useCacheForFailedRemoteSub\": false\n  //     }\n  //   },\n  //   \"backend\": \"Node\",\n  //   \"version\": \"2.14.198\"\n  // }\n  // 2. 输出组合订阅 collection-1 时, 该组合订阅中的脚本上下文为:\n  // {\n  //   \"source\": {\n  //     \"_collection\": {\n  //       \"name\": \"collection-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": false,\n  //       \"icon\": \"\",\n  //       \"process\": [],\n  //       \"subscriptions\": [\n  //         \"sub-1\"\n  //       ],\n  //       \"display-name\": \"\"\n  //     }\n  //   },\n  //   \"backend\": \"Node\",\n  //   \"version\": \"2.14.198\"\n  // }\n  // 3. 输出组合订阅 collection-1 时, 该组合订阅中的单条订阅 sub-1 中的某个脚本上下文为:\n  // {\n  //   \"source\": {\n  //     \"sub-1\": {\n  //       \"name\": \"sub-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": true,\n  //       \"icon\": \"\",\n  //       \"process\": [],\n  //       \"source\": \"local\",\n  //       \"url\": \"\",\n  //       \"content\": \"\",\n  //       \"ua\": \"\",\n  //       \"display-name\": \"\",\n  //       \"useCacheForFailedRemoteSub\": false\n  //     },\n  //     \"_collection\": {\n  //       \"name\": \"collection-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": false,\n  //       \"icon\": \"\",\n  //       \"process\": [],\n  //       \"subscriptions\": [\n  //         \"sub-1\"\n  //       ],\n  //       \"display-name\": \"\"\n  //     }\n  //   },\n  //   \"backend\": \"Node\",\n  //   \"version\": \"2.14.198\"\n  // }\n\n  // 参数说明\n  // 可参考 https://github.com/sub-store-org/Sub-Store/wiki/%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\n\n  console.log(JSON.stringify(context, null, 2));\n\n  return proxies;\n}\n```\n\n","source":"_posts/substore脚本操作.md","raw":"---\ntitle: substore脚本操作\ndate: 2024-11-03T19:03:20.320Z\ntags: []\ncategories: []\n---\n```js\nfunction operator(proxies = [], targetPlatform, context) {\n  // 支持快捷操作 不一定要写一个 function\n  // 可参考 https://t.me/zhetengsha/970\n  // https://t.me/zhetengsha/1009\n\n  // proxies 为传入的内部节点数组\n  // 可在预览界面点击节点查看 JSON 结构 或查看 `target=JSON` 的通用订阅\n  // 0. 结构大致参考了 Clash.Meta(mihomo), 可参考 mihomo 的文档, 例如 `xudp`, `smux` 都可以自己设置. 但是有私货, 下面是我能想起来的一些私货\n  // 1. `_no-resolve` 为不解析域名\n  // 2. 域名解析后 会多一个 `_resolved` 字段, 表示是否解析成功\n  // 3. 域名解析后会有`_IPv4`, `_IPv6`, `_IP`(若有多个步骤, 只取第一次成功的 v4 或 v6 数据), `_IP4P`(若解析类型为 IPv6 且符合 IP4P 类型, 将自动转换), `_domain` 字段, `_resolved_ips` 为解析出的所有 IP\n  // 4. 节点字段 `exec` 为 `ssr-local` 路径, 默认 `/usr/local/bin/ssr-local`; 端口从 10000 开始递增(暂不支持配置)\n  // 5. `_subName` 为单条订阅名, `_subDisplayName` 为单条订阅显示名\n  // 6. `_collectionName` 为组合订阅名, `_collectionDisplayName` 为组合订阅显示名\n  // 7. `tls-fingerprint` 为 tls 指纹\n  // 8. `underlying-proxy` 为前置代理\n  // 9. `trojan`, `tuic`, `hysteria`, `hysteria2`, `juicity` 会在解析时设置 `tls`: true (会使用 tls 类协议的通用逻辑),  输出时删除\n  // 10. `sni` 在某些协议里会自动与 `servername` 转换\n  // 11. 读取节点的 ca-str 和 _ca (后端文件路径) 字段, 自动计算 fingerprint (参考 https://t.me/zhetengsha/1512)\n  // 12. 以 Surge 为例, 最新的参数一般我都会跟进, 以 Surge 文档为例, 一些常用的: TUIC/Hysteria 2 的 `ecn`, Snell 的 `reuse` 连接复用, QUIC 策略 block-quic`, Hysteria 2 下载带宽 `down`\n  // 13. `test-url` 为测延迟链接, `test-timeout` 为测延迟超时\n  // 14. `ports` 为端口跳跃, `hop-interval` 变换端口号的时间间隔\n  // 15. `ip-version` 设置节点使用 IP 版本，可选：dual，ipv4，ipv6，ipv4-prefer，ipv6-prefer. 会进行内部转换, 若无法匹配则使用原始值\n\n  // require 为 Node.js 的 require, 在 Node.js 运行环境下 可以用来引入模块\n\n  // $arguments 为传入的脚本参数\n\n  // $options 为通过链接传入的参数\n  // 例如: { arg1: 'a', arg2: 'b' }\n  // 可这样传:\n  // 先这样处理 encodeURIComponent(JSON.stringify({ arg1: 'a', arg2: 'b' }))\n  // /api/file/foo?$options=%7B%22arg1%22%3A%22a%22%2C%22arg2%22%3A%22b%22%7D\n  // 或这样传:\n  // 先这样处理 encodeURIComponent('arg1=a&arg2=b')\n  // /api/file/foo?$options=arg1%3Da%26arg2%3Db\n\n  // console.log($options)\n\n  // targetPlatform 为输出的目标平台\n\n  // lodash\n\n  // $substore 为 OpenAPI\n  // 参考 https://github.com/Peng-YM/QuanX/blob/master/Tools/OpenAPI/README.md\n\n  // scriptResourceCache 缓存\n  // 可参考 https://t.me/zhetengsha/1003\n  // const cache = scriptResourceCache\n  // cache.set(id, data)\n  // cache.get(id)\n\n  // ProxyUtils 为节点处理工具\n  // 可参考 https://t.me/zhetengsha/1066\n  // const ProxyUtils = {\n  //     parse, // 订阅解析\n  //     process, // 节点操作/文件操作\n  //     produce, // 输出订阅\n  //     getRandomPort, // 获取随机端口(参考 ports 端口跳跃的格式 443,8443,5000-6000)\n  //     ipAddress, // https://github.com/beaugunderson/ip-address\n  //     isIPv4,\n  //     isIPv6,\n  //     isIP,\n  //     yaml, // yaml 解析和生成\n  //     getFlag, // 获取 emoji 旗帜\n  //     removeFlag, // 移除 emoji 旗帜\n  //     getISO, // 获取 ISO 3166-1 alpha-2 代码\n  //     Gist, // Gist 类\n  //     download, // 内部的下载方法, 见 backend/src/utils/download.js\n  //     MMDB, // Node.js 环境 可用于模拟 Surge/Loon 的 $utils.ipasn, $utils.ipaso, $utils.geoip. 具体见 https://t.me/zhetengsha/1269\n  // }\n\n  // 如果只是为了快速修改或者筛选 可以参考 脚本操作支持节点快捷脚本 https://t.me/zhetengsha/970 和 脚本筛选支持节点快捷脚本 https://t.me/zhetengsha/1009\n  // ⚠️ 注意: 函数式(即本文件这样的 function operator() {}) 和快捷操作(下面使用 $server) 只能二选一\n  // 示例: 给节点名添加前缀\n  // $server.name = `[${ProxyUtils.getISO($server.name)}] ${$server.name}`\n  // 示例: 给节点名添加旗帜\n  // $server.name = `[${ProxyUtils.getFlag($server.name).replace(/🇹🇼/g, '🇼🇸')}] ${ProxyUtils.removeFlag($server.name)}`\n\n  // 示例: 从 sni 文件中读取内容并进行节点操作\n  // const sni = await produceArtifact({\n  //     type: 'file',\n  //     name: 'sni' // 文件名\n  // });\n  // $server.sni = sni\n\n  // 1. Surge 输出 WireGuard 完整配置\n\n  // let proxies = await produceArtifact({\n  //   type: 'subscription',\n  //   name: 'sub',\n  //   platform: 'Surge',\n  //   produceOpts: {\n  //     'include-unsupported-proxy': true,\n  //   }\n  // })\n  // $content = proxies\n\n  // 2. sing-box\n\n  // 但是一般不需要这样用, 可参考\n  // 1. https://t.me/zhetengsha/1111\n  // 2. https://t.me/zhetengsha/1070\n  // 3. https://t.me/zhetengsha/1241\n\n  // let singboxProxies = await produceArtifact({\n  //     type: 'subscription', // type: 'subscription' 或 'collection'\n  //     name: 'sub', // subscription name\n  //     platform: 'sing-box', // target platform\n  //     produceType: 'internal' // 'internal' produces an Array, otherwise produces a String( JSON.parse('JSON String') )\n  // })\n\n  // // JSON\n  // $content = JSON.stringify({}, null, 2)\n\n  // 3. clash.meta\n\n  // 但是一般不需要这样用, 可参考\n  // 1. https://t.me/zhetengsha/1111\n  // 2. https://t.me/zhetengsha/1070\n  // 3. https://t.me/zhetengsha/1234\n\n  // let clashMetaProxies = await produceArtifact({\n  //     type: 'subscription',\n  //     name: 'sub',\n  //     platform: 'ClashMeta',\n  //     produceType: 'internal' // 'internal' produces an Array, otherwise produces a String( ProxyUtils.yaml.safeLoad('YAML String').proxies )\n  // })\n\n  // 4. 一个比较折腾的方案: 在脚本操作中, 把内容同步到另一个 gist\n  // 见 https://t.me/zhetengsha/1428\n  //\n  // const content = ProxyUtils.produce([...proxies], platform)\n\n  // // YAML\n  // ProxyUtils.yaml.load('YAML String')\n  // ProxyUtils.yaml.safeLoad('YAML String')\n  // $content = ProxyUtils.yaml.safeDump({})\n  // $content = ProxyUtils.yaml.dump({})\n\n  // 一个往文件里插入本地节点的例子:\n  // const yaml = ProxyUtils.yaml.safeLoad($content ?? $files[0])\n  // let clashMetaProxies = await produceArtifact({\n  //     type: 'collection',\n  //     name: '机场',\n  //     platform: 'ClashMeta',\n  //     produceType: 'internal'\n  // })\n  // yaml.proxies.unshift(...clashMetaProxies)\n  // $content = ProxyUtils.yaml.dump(yaml)\n\n  // { $content, $files, $options } will be passed to the next operator\n  // $content is the final content of the file\n\n  // flowUtils 为机场订阅流量信息处理工具\n  // 可参考:\n  // 1. https://t.me/zhetengsha/948\n\n  // context 为传入的上下文\n  // 其中 source 为 订阅和组合订阅的数据, 有三种情况, 按需判断 (若只需要取订阅/组合订阅名称 直接用 `_subName` `_subDisplayName` `_collectionName` `_collectionDisplayName` 即可)\n\n  // 若存在 `source._collection` 且 `source._collection.subscriptions` 中的 key 在 `source` 上也存在, 说明输出结果为组合订阅, 但是脚本设置在单条订阅上\n\n  // 若存在 `source._collection` 但 `source._collection.subscriptions` 中的 key 在 `source` 上不存在, 说明输出结果为组合订阅, 脚本设置在组合订阅上\n\n  // 若不存在 `source._collection`, 说明输出结果为单条订阅, 脚本设置在此单条订阅上\n\n  // 1. 输出单条订阅 sub-1 时, 该单条订阅中的脚本上下文为:\n  // {\n  //   \"source\": {\n  //     \"sub-1\": {\n  //       \"name\": \"sub-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": true,\n  //       \"process\": [],\n  //       \"icon\": \"\",\n  //       \"source\": \"local\",\n  //       \"url\": \"\",\n  //       \"content\": \"\",\n  //       \"ua\": \"\",\n  //       \"display-name\": \"\",\n  //       \"useCacheForFailedRemoteSub\": false\n  //     }\n  //   },\n  //   \"backend\": \"Node\",\n  //   \"version\": \"2.14.198\"\n  // }\n  // 2. 输出组合订阅 collection-1 时, 该组合订阅中的脚本上下文为:\n  // {\n  //   \"source\": {\n  //     \"_collection\": {\n  //       \"name\": \"collection-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": false,\n  //       \"icon\": \"\",\n  //       \"process\": [],\n  //       \"subscriptions\": [\n  //         \"sub-1\"\n  //       ],\n  //       \"display-name\": \"\"\n  //     }\n  //   },\n  //   \"backend\": \"Node\",\n  //   \"version\": \"2.14.198\"\n  // }\n  // 3. 输出组合订阅 collection-1 时, 该组合订阅中的单条订阅 sub-1 中的某个脚本上下文为:\n  // {\n  //   \"source\": {\n  //     \"sub-1\": {\n  //       \"name\": \"sub-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": true,\n  //       \"icon\": \"\",\n  //       \"process\": [],\n  //       \"source\": \"local\",\n  //       \"url\": \"\",\n  //       \"content\": \"\",\n  //       \"ua\": \"\",\n  //       \"display-name\": \"\",\n  //       \"useCacheForFailedRemoteSub\": false\n  //     },\n  //     \"_collection\": {\n  //       \"name\": \"collection-1\",\n  //       \"displayName\": \"\",\n  //       \"mergeSources\": \"\",\n  //       \"ignoreFailedRemoteSub\": false,\n  //       \"icon\": \"\",\n  //       \"process\": [],\n  //       \"subscriptions\": [\n  //         \"sub-1\"\n  //       ],\n  //       \"display-name\": \"\"\n  //     }\n  //   },\n  //   \"backend\": \"Node\",\n  //   \"version\": \"2.14.198\"\n  // }\n\n  // 参数说明\n  // 可参考 https://github.com/sub-store-org/Sub-Store/wiki/%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\n\n  console.log(JSON.stringify(context, null, 2));\n\n  return proxies;\n}\n```\n\n","slug":"substore脚本操作","published":1,"updated":"2024-11-25T11:44:04.462Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscl002fmbs66xj14gzo","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operator</span>(<span class=\"params\">proxies = [], targetPlatform, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 支持快捷操作 不一定要写一个 function</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://t.me/zhetengsha/970</span></span><br><span class=\"line\">  <span class=\"comment\">// https://t.me/zhetengsha/1009</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// proxies 为传入的内部节点数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 可在预览界面点击节点查看 JSON 结构 或查看 `target=JSON` 的通用订阅</span></span><br><span class=\"line\">  <span class=\"comment\">// 0. 结构大致参考了 Clash.Meta(mihomo), 可参考 mihomo 的文档, 例如 `xudp`, `smux` 都可以自己设置. 但是有私货, 下面是我能想起来的一些私货</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. `_no-resolve` 为不解析域名</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 域名解析后 会多一个 `_resolved` 字段, 表示是否解析成功</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 域名解析后会有`_IPv4`, `_IPv6`, `_IP`(若有多个步骤, 只取第一次成功的 v4 或 v6 数据), `_IP4P`(若解析类型为 IPv6 且符合 IP4P 类型, 将自动转换), `_domain` 字段, `_resolved_ips` 为解析出的所有 IP</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 节点字段 `exec` 为 `ssr-local` 路径, 默认 `/usr/local/bin/ssr-local`; 端口从 10000 开始递增(暂不支持配置)</span></span><br><span class=\"line\">  <span class=\"comment\">// 5. `_subName` 为单条订阅名, `_subDisplayName` 为单条订阅显示名</span></span><br><span class=\"line\">  <span class=\"comment\">// 6. `_collectionName` 为组合订阅名, `_collectionDisplayName` 为组合订阅显示名</span></span><br><span class=\"line\">  <span class=\"comment\">// 7. `tls-fingerprint` 为 tls 指纹</span></span><br><span class=\"line\">  <span class=\"comment\">// 8. `underlying-proxy` 为前置代理</span></span><br><span class=\"line\">  <span class=\"comment\">// 9. `trojan`, `tuic`, `hysteria`, `hysteria2`, `juicity` 会在解析时设置 `tls`: true (会使用 tls 类协议的通用逻辑),  输出时删除</span></span><br><span class=\"line\">  <span class=\"comment\">// 10. `sni` 在某些协议里会自动与 `servername` 转换</span></span><br><span class=\"line\">  <span class=\"comment\">// 11. 读取节点的 ca-str 和 _ca (后端文件路径) 字段, 自动计算 fingerprint (参考 https://t.me/zhetengsha/1512)</span></span><br><span class=\"line\">  <span class=\"comment\">// 12. 以 Surge 为例, 最新的参数一般我都会跟进, 以 Surge 文档为例, 一些常用的: TUIC/Hysteria 2 的 `ecn`, Snell 的 `reuse` 连接复用, QUIC 策略 block-quic`, Hysteria 2 下载带宽 `down`</span></span><br><span class=\"line\">  <span class=\"comment\">// 13. `test-url` 为测延迟链接, `test-timeout` 为测延迟超时</span></span><br><span class=\"line\">  <span class=\"comment\">// 14. `ports` 为端口跳跃, `hop-interval` 变换端口号的时间间隔</span></span><br><span class=\"line\">  <span class=\"comment\">// 15. `ip-version` 设置节点使用 IP 版本，可选：dual，ipv4，ipv6，ipv4-prefer，ipv6-prefer. 会进行内部转换, 若无法匹配则使用原始值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// require 为 Node.js 的 require, 在 Node.js 运行环境下 可以用来引入模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $arguments 为传入的脚本参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $options 为通过链接传入的参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 例如: &#123; arg1: &#x27;a&#x27;, arg2: &#x27;b&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 可这样传:</span></span><br><span class=\"line\">  <span class=\"comment\">// 先这样处理 encodeURIComponent(JSON.stringify(&#123; arg1: &#x27;a&#x27;, arg2: &#x27;b&#x27; &#125;))</span></span><br><span class=\"line\">  <span class=\"comment\">// /api/file/foo?$options=%7B%22arg1%22%3A%22a%22%2C%22arg2%22%3A%22b%22%7D</span></span><br><span class=\"line\">  <span class=\"comment\">// 或这样传:</span></span><br><span class=\"line\">  <span class=\"comment\">// 先这样处理 encodeURIComponent(&#x27;arg1=a&amp;arg2=b&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// /api/file/foo?$options=arg1%3Da%26arg2%3Db</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// console.log($options)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// targetPlatform 为输出的目标平台</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// lodash</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $substore 为 OpenAPI</span></span><br><span class=\"line\">  <span class=\"comment\">// 参考 https://github.com/Peng-YM/QuanX/blob/master/Tools/OpenAPI/README.md</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// scriptResourceCache 缓存</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://t.me/zhetengsha/1003</span></span><br><span class=\"line\">  <span class=\"comment\">// const cache = scriptResourceCache</span></span><br><span class=\"line\">  <span class=\"comment\">// cache.set(id, data)</span></span><br><span class=\"line\">  <span class=\"comment\">// cache.get(id)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ProxyUtils 为节点处理工具</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://t.me/zhetengsha/1066</span></span><br><span class=\"line\">  <span class=\"comment\">// const ProxyUtils = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     parse, // 订阅解析</span></span><br><span class=\"line\">  <span class=\"comment\">//     process, // 节点操作/文件操作</span></span><br><span class=\"line\">  <span class=\"comment\">//     produce, // 输出订阅</span></span><br><span class=\"line\">  <span class=\"comment\">//     getRandomPort, // 获取随机端口(参考 ports 端口跳跃的格式 443,8443,5000-6000)</span></span><br><span class=\"line\">  <span class=\"comment\">//     ipAddress, // https://github.com/beaugunderson/ip-address</span></span><br><span class=\"line\">  <span class=\"comment\">//     isIPv4,</span></span><br><span class=\"line\">  <span class=\"comment\">//     isIPv6,</span></span><br><span class=\"line\">  <span class=\"comment\">//     isIP,</span></span><br><span class=\"line\">  <span class=\"comment\">//     yaml, // yaml 解析和生成</span></span><br><span class=\"line\">  <span class=\"comment\">//     getFlag, // 获取 emoji 旗帜</span></span><br><span class=\"line\">  <span class=\"comment\">//     removeFlag, // 移除 emoji 旗帜</span></span><br><span class=\"line\">  <span class=\"comment\">//     getISO, // 获取 ISO 3166-1 alpha-2 代码</span></span><br><span class=\"line\">  <span class=\"comment\">//     Gist, // Gist 类</span></span><br><span class=\"line\">  <span class=\"comment\">//     download, // 内部的下载方法, 见 backend/src/utils/download.js</span></span><br><span class=\"line\">  <span class=\"comment\">//     MMDB, // Node.js 环境 可用于模拟 Surge/Loon 的 $utils.ipasn, $utils.ipaso, $utils.geoip. 具体见 https://t.me/zhetengsha/1269</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果只是为了快速修改或者筛选 可以参考 脚本操作支持节点快捷脚本 https://t.me/zhetengsha/970 和 脚本筛选支持节点快捷脚本 https://t.me/zhetengsha/1009</span></span><br><span class=\"line\">  <span class=\"comment\">// ⚠️ 注意: 函数式(即本文件这样的 function operator() &#123;&#125;) 和快捷操作(下面使用 $server) 只能二选一</span></span><br><span class=\"line\">  <span class=\"comment\">// 示例: 给节点名添加前缀</span></span><br><span class=\"line\">  <span class=\"comment\">// $server.name = `[$&#123;ProxyUtils.getISO($server.name)&#125;] $&#123;$server.name&#125;`</span></span><br><span class=\"line\">  <span class=\"comment\">// 示例: 给节点名添加旗帜</span></span><br><span class=\"line\">  <span class=\"comment\">// $server.name = `[$&#123;ProxyUtils.getFlag($server.name).replace(/🇹🇼/g, &#x27;🇼🇸&#x27;)&#125;] $&#123;ProxyUtils.removeFlag($server.name)&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 示例: 从 sni 文件中读取内容并进行节点操作</span></span><br><span class=\"line\">  <span class=\"comment\">// const sni = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;file&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;sni&#x27; // 文件名</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">// $server.sni = sni</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. Surge 输出 WireGuard 完整配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let proxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   type: &#x27;subscription&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   name: &#x27;sub&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   platform: &#x27;Surge&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   produceOpts: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#x27;include-unsupported-proxy&#x27;: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = proxies</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. sing-box</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 但是一般不需要这样用, 可参考</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. https://t.me/zhetengsha/1111</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. https://t.me/zhetengsha/1070</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. https://t.me/zhetengsha/1241</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let singboxProxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;subscription&#x27;, // type: &#x27;subscription&#x27; 或 &#x27;collection&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;sub&#x27;, // subscription name</span></span><br><span class=\"line\">  <span class=\"comment\">//     platform: &#x27;sing-box&#x27;, // target platform</span></span><br><span class=\"line\">  <span class=\"comment\">//     produceType: &#x27;internal&#x27; // &#x27;internal&#x27; produces an Array, otherwise produces a String( JSON.parse(&#x27;JSON String&#x27;) )</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// // JSON</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = JSON.stringify(&#123;&#125;, null, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. clash.meta</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 但是一般不需要这样用, 可参考</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. https://t.me/zhetengsha/1111</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. https://t.me/zhetengsha/1070</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. https://t.me/zhetengsha/1234</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let clashMetaProxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;subscription&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;sub&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     platform: &#x27;ClashMeta&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     produceType: &#x27;internal&#x27; // &#x27;internal&#x27; produces an Array, otherwise produces a String( ProxyUtils.yaml.safeLoad(&#x27;YAML String&#x27;).proxies )</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 一个比较折腾的方案: 在脚本操作中, 把内容同步到另一个 gist</span></span><br><span class=\"line\">  <span class=\"comment\">// 见 https://t.me/zhetengsha/1428</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// const content = ProxyUtils.produce([...proxies], platform)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// // YAML</span></span><br><span class=\"line\">  <span class=\"comment\">// ProxyUtils.yaml.load(&#x27;YAML String&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// ProxyUtils.yaml.safeLoad(&#x27;YAML String&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = ProxyUtils.yaml.safeDump(&#123;&#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = ProxyUtils.yaml.dump(&#123;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个往文件里插入本地节点的例子:</span></span><br><span class=\"line\">  <span class=\"comment\">// const yaml = ProxyUtils.yaml.safeLoad($content ?? $files[0])</span></span><br><span class=\"line\">  <span class=\"comment\">// let clashMetaProxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;collection&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;机场&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     platform: &#x27;ClashMeta&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     produceType: &#x27;internal&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// yaml.proxies.unshift(...clashMetaProxies)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = ProxyUtils.yaml.dump(yaml)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#123; $content, $files, $options &#125; will be passed to the next operator</span></span><br><span class=\"line\">  <span class=\"comment\">// $content is the final content of the file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// flowUtils 为机场订阅流量信息处理工具</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. https://t.me/zhetengsha/948</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// context 为传入的上下文</span></span><br><span class=\"line\">  <span class=\"comment\">// 其中 source 为 订阅和组合订阅的数据, 有三种情况, 按需判断 (若只需要取订阅/组合订阅名称 直接用 `_subName` `_subDisplayName` `_collectionName` `_collectionDisplayName` 即可)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若存在 `source._collection` 且 `source._collection.subscriptions` 中的 key 在 `source` 上也存在, 说明输出结果为组合订阅, 但是脚本设置在单条订阅上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若存在 `source._collection` 但 `source._collection.subscriptions` 中的 key 在 `source` 上不存在, 说明输出结果为组合订阅, 脚本设置在组合订阅上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若不存在 `source._collection`, 说明输出结果为单条订阅, 脚本设置在此单条订阅上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. 输出单条订阅 sub-1 时, 该单条订阅中的脚本上下文为:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;source&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;sub-1&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;sub-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;source&quot;: &quot;local&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;url&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;content&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ua&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;useCacheForFailedRemoteSub&quot;: false</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;backend&quot;: &quot;Node&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;version&quot;: &quot;2.14.198&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 输出组合订阅 collection-1 时, 该组合订阅中的脚本上下文为:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;source&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;_collection&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;collection-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;subscriptions&quot;: [</span></span><br><span class=\"line\">  <span class=\"comment\">//         &quot;sub-1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//       ],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;backend&quot;: &quot;Node&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;version&quot;: &quot;2.14.198&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 输出组合订阅 collection-1 时, 该组合订阅中的单条订阅 sub-1 中的某个脚本上下文为:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;source&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;sub-1&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;sub-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;source&quot;: &quot;local&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;url&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;content&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ua&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;useCacheForFailedRemoteSub&quot;: false</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;_collection&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;collection-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;subscriptions&quot;: [</span></span><br><span class=\"line\">  <span class=\"comment\">//         &quot;sub-1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//       ],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;backend&quot;: &quot;Node&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;version&quot;: &quot;2.14.198&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 参数说明</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://github.com/sub-store-org/Sub-Store/wiki/%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(context, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxies;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operator</span>(<span class=\"params\">proxies = [], targetPlatform, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 支持快捷操作 不一定要写一个 function</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://t.me/zhetengsha/970</span></span><br><span class=\"line\">  <span class=\"comment\">// https://t.me/zhetengsha/1009</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// proxies 为传入的内部节点数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 可在预览界面点击节点查看 JSON 结构 或查看 `target=JSON` 的通用订阅</span></span><br><span class=\"line\">  <span class=\"comment\">// 0. 结构大致参考了 Clash.Meta(mihomo), 可参考 mihomo 的文档, 例如 `xudp`, `smux` 都可以自己设置. 但是有私货, 下面是我能想起来的一些私货</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. `_no-resolve` 为不解析域名</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 域名解析后 会多一个 `_resolved` 字段, 表示是否解析成功</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 域名解析后会有`_IPv4`, `_IPv6`, `_IP`(若有多个步骤, 只取第一次成功的 v4 或 v6 数据), `_IP4P`(若解析类型为 IPv6 且符合 IP4P 类型, 将自动转换), `_domain` 字段, `_resolved_ips` 为解析出的所有 IP</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 节点字段 `exec` 为 `ssr-local` 路径, 默认 `/usr/local/bin/ssr-local`; 端口从 10000 开始递增(暂不支持配置)</span></span><br><span class=\"line\">  <span class=\"comment\">// 5. `_subName` 为单条订阅名, `_subDisplayName` 为单条订阅显示名</span></span><br><span class=\"line\">  <span class=\"comment\">// 6. `_collectionName` 为组合订阅名, `_collectionDisplayName` 为组合订阅显示名</span></span><br><span class=\"line\">  <span class=\"comment\">// 7. `tls-fingerprint` 为 tls 指纹</span></span><br><span class=\"line\">  <span class=\"comment\">// 8. `underlying-proxy` 为前置代理</span></span><br><span class=\"line\">  <span class=\"comment\">// 9. `trojan`, `tuic`, `hysteria`, `hysteria2`, `juicity` 会在解析时设置 `tls`: true (会使用 tls 类协议的通用逻辑),  输出时删除</span></span><br><span class=\"line\">  <span class=\"comment\">// 10. `sni` 在某些协议里会自动与 `servername` 转换</span></span><br><span class=\"line\">  <span class=\"comment\">// 11. 读取节点的 ca-str 和 _ca (后端文件路径) 字段, 自动计算 fingerprint (参考 https://t.me/zhetengsha/1512)</span></span><br><span class=\"line\">  <span class=\"comment\">// 12. 以 Surge 为例, 最新的参数一般我都会跟进, 以 Surge 文档为例, 一些常用的: TUIC/Hysteria 2 的 `ecn`, Snell 的 `reuse` 连接复用, QUIC 策略 block-quic`, Hysteria 2 下载带宽 `down`</span></span><br><span class=\"line\">  <span class=\"comment\">// 13. `test-url` 为测延迟链接, `test-timeout` 为测延迟超时</span></span><br><span class=\"line\">  <span class=\"comment\">// 14. `ports` 为端口跳跃, `hop-interval` 变换端口号的时间间隔</span></span><br><span class=\"line\">  <span class=\"comment\">// 15. `ip-version` 设置节点使用 IP 版本，可选：dual，ipv4，ipv6，ipv4-prefer，ipv6-prefer. 会进行内部转换, 若无法匹配则使用原始值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// require 为 Node.js 的 require, 在 Node.js 运行环境下 可以用来引入模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $arguments 为传入的脚本参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $options 为通过链接传入的参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 例如: &#123; arg1: &#x27;a&#x27;, arg2: &#x27;b&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 可这样传:</span></span><br><span class=\"line\">  <span class=\"comment\">// 先这样处理 encodeURIComponent(JSON.stringify(&#123; arg1: &#x27;a&#x27;, arg2: &#x27;b&#x27; &#125;))</span></span><br><span class=\"line\">  <span class=\"comment\">// /api/file/foo?$options=%7B%22arg1%22%3A%22a%22%2C%22arg2%22%3A%22b%22%7D</span></span><br><span class=\"line\">  <span class=\"comment\">// 或这样传:</span></span><br><span class=\"line\">  <span class=\"comment\">// 先这样处理 encodeURIComponent(&#x27;arg1=a&amp;arg2=b&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// /api/file/foo?$options=arg1%3Da%26arg2%3Db</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// console.log($options)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// targetPlatform 为输出的目标平台</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// lodash</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $substore 为 OpenAPI</span></span><br><span class=\"line\">  <span class=\"comment\">// 参考 https://github.com/Peng-YM/QuanX/blob/master/Tools/OpenAPI/README.md</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// scriptResourceCache 缓存</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://t.me/zhetengsha/1003</span></span><br><span class=\"line\">  <span class=\"comment\">// const cache = scriptResourceCache</span></span><br><span class=\"line\">  <span class=\"comment\">// cache.set(id, data)</span></span><br><span class=\"line\">  <span class=\"comment\">// cache.get(id)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ProxyUtils 为节点处理工具</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://t.me/zhetengsha/1066</span></span><br><span class=\"line\">  <span class=\"comment\">// const ProxyUtils = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     parse, // 订阅解析</span></span><br><span class=\"line\">  <span class=\"comment\">//     process, // 节点操作/文件操作</span></span><br><span class=\"line\">  <span class=\"comment\">//     produce, // 输出订阅</span></span><br><span class=\"line\">  <span class=\"comment\">//     getRandomPort, // 获取随机端口(参考 ports 端口跳跃的格式 443,8443,5000-6000)</span></span><br><span class=\"line\">  <span class=\"comment\">//     ipAddress, // https://github.com/beaugunderson/ip-address</span></span><br><span class=\"line\">  <span class=\"comment\">//     isIPv4,</span></span><br><span class=\"line\">  <span class=\"comment\">//     isIPv6,</span></span><br><span class=\"line\">  <span class=\"comment\">//     isIP,</span></span><br><span class=\"line\">  <span class=\"comment\">//     yaml, // yaml 解析和生成</span></span><br><span class=\"line\">  <span class=\"comment\">//     getFlag, // 获取 emoji 旗帜</span></span><br><span class=\"line\">  <span class=\"comment\">//     removeFlag, // 移除 emoji 旗帜</span></span><br><span class=\"line\">  <span class=\"comment\">//     getISO, // 获取 ISO 3166-1 alpha-2 代码</span></span><br><span class=\"line\">  <span class=\"comment\">//     Gist, // Gist 类</span></span><br><span class=\"line\">  <span class=\"comment\">//     download, // 内部的下载方法, 见 backend/src/utils/download.js</span></span><br><span class=\"line\">  <span class=\"comment\">//     MMDB, // Node.js 环境 可用于模拟 Surge/Loon 的 $utils.ipasn, $utils.ipaso, $utils.geoip. 具体见 https://t.me/zhetengsha/1269</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果只是为了快速修改或者筛选 可以参考 脚本操作支持节点快捷脚本 https://t.me/zhetengsha/970 和 脚本筛选支持节点快捷脚本 https://t.me/zhetengsha/1009</span></span><br><span class=\"line\">  <span class=\"comment\">// ⚠️ 注意: 函数式(即本文件这样的 function operator() &#123;&#125;) 和快捷操作(下面使用 $server) 只能二选一</span></span><br><span class=\"line\">  <span class=\"comment\">// 示例: 给节点名添加前缀</span></span><br><span class=\"line\">  <span class=\"comment\">// $server.name = `[$&#123;ProxyUtils.getISO($server.name)&#125;] $&#123;$server.name&#125;`</span></span><br><span class=\"line\">  <span class=\"comment\">// 示例: 给节点名添加旗帜</span></span><br><span class=\"line\">  <span class=\"comment\">// $server.name = `[$&#123;ProxyUtils.getFlag($server.name).replace(/🇹🇼/g, &#x27;🇼🇸&#x27;)&#125;] $&#123;ProxyUtils.removeFlag($server.name)&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 示例: 从 sni 文件中读取内容并进行节点操作</span></span><br><span class=\"line\">  <span class=\"comment\">// const sni = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;file&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;sni&#x27; // 文件名</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">// $server.sni = sni</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. Surge 输出 WireGuard 完整配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let proxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   type: &#x27;subscription&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   name: &#x27;sub&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   platform: &#x27;Surge&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   produceOpts: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#x27;include-unsupported-proxy&#x27;: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = proxies</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. sing-box</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 但是一般不需要这样用, 可参考</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. https://t.me/zhetengsha/1111</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. https://t.me/zhetengsha/1070</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. https://t.me/zhetengsha/1241</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let singboxProxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;subscription&#x27;, // type: &#x27;subscription&#x27; 或 &#x27;collection&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;sub&#x27;, // subscription name</span></span><br><span class=\"line\">  <span class=\"comment\">//     platform: &#x27;sing-box&#x27;, // target platform</span></span><br><span class=\"line\">  <span class=\"comment\">//     produceType: &#x27;internal&#x27; // &#x27;internal&#x27; produces an Array, otherwise produces a String( JSON.parse(&#x27;JSON String&#x27;) )</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// // JSON</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = JSON.stringify(&#123;&#125;, null, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. clash.meta</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 但是一般不需要这样用, 可参考</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. https://t.me/zhetengsha/1111</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. https://t.me/zhetengsha/1070</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. https://t.me/zhetengsha/1234</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let clashMetaProxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;subscription&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;sub&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     platform: &#x27;ClashMeta&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     produceType: &#x27;internal&#x27; // &#x27;internal&#x27; produces an Array, otherwise produces a String( ProxyUtils.yaml.safeLoad(&#x27;YAML String&#x27;).proxies )</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 一个比较折腾的方案: 在脚本操作中, 把内容同步到另一个 gist</span></span><br><span class=\"line\">  <span class=\"comment\">// 见 https://t.me/zhetengsha/1428</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// const content = ProxyUtils.produce([...proxies], platform)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// // YAML</span></span><br><span class=\"line\">  <span class=\"comment\">// ProxyUtils.yaml.load(&#x27;YAML String&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// ProxyUtils.yaml.safeLoad(&#x27;YAML String&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = ProxyUtils.yaml.safeDump(&#123;&#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = ProxyUtils.yaml.dump(&#123;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个往文件里插入本地节点的例子:</span></span><br><span class=\"line\">  <span class=\"comment\">// const yaml = ProxyUtils.yaml.safeLoad($content ?? $files[0])</span></span><br><span class=\"line\">  <span class=\"comment\">// let clashMetaProxies = await produceArtifact(&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     type: &#x27;collection&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     name: &#x27;机场&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     platform: &#x27;ClashMeta&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     produceType: &#x27;internal&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// yaml.proxies.unshift(...clashMetaProxies)</span></span><br><span class=\"line\">  <span class=\"comment\">// $content = ProxyUtils.yaml.dump(yaml)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#123; $content, $files, $options &#125; will be passed to the next operator</span></span><br><span class=\"line\">  <span class=\"comment\">// $content is the final content of the file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// flowUtils 为机场订阅流量信息处理工具</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. https://t.me/zhetengsha/948</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// context 为传入的上下文</span></span><br><span class=\"line\">  <span class=\"comment\">// 其中 source 为 订阅和组合订阅的数据, 有三种情况, 按需判断 (若只需要取订阅/组合订阅名称 直接用 `_subName` `_subDisplayName` `_collectionName` `_collectionDisplayName` 即可)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若存在 `source._collection` 且 `source._collection.subscriptions` 中的 key 在 `source` 上也存在, 说明输出结果为组合订阅, 但是脚本设置在单条订阅上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若存在 `source._collection` 但 `source._collection.subscriptions` 中的 key 在 `source` 上不存在, 说明输出结果为组合订阅, 脚本设置在组合订阅上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若不存在 `source._collection`, 说明输出结果为单条订阅, 脚本设置在此单条订阅上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. 输出单条订阅 sub-1 时, 该单条订阅中的脚本上下文为:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;source&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;sub-1&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;sub-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;source&quot;: &quot;local&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;url&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;content&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ua&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;useCacheForFailedRemoteSub&quot;: false</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;backend&quot;: &quot;Node&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;version&quot;: &quot;2.14.198&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 输出组合订阅 collection-1 时, 该组合订阅中的脚本上下文为:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;source&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;_collection&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;collection-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;subscriptions&quot;: [</span></span><br><span class=\"line\">  <span class=\"comment\">//         &quot;sub-1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//       ],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;backend&quot;: &quot;Node&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;version&quot;: &quot;2.14.198&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 输出组合订阅 collection-1 时, 该组合订阅中的单条订阅 sub-1 中的某个脚本上下文为:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;source&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;sub-1&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;sub-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;source&quot;: &quot;local&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;url&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;content&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ua&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;useCacheForFailedRemoteSub&quot;: false</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &quot;_collection&quot;: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;name&quot;: &quot;collection-1&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;displayName&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;mergeSources&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;ignoreFailedRemoteSub&quot;: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;icon&quot;: &quot;&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;process&quot;: [],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;subscriptions&quot;: [</span></span><br><span class=\"line\">  <span class=\"comment\">//         &quot;sub-1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//       ],</span></span><br><span class=\"line\">  <span class=\"comment\">//       &quot;display-name&quot;: &quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;backend&quot;: &quot;Node&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &quot;version&quot;: &quot;2.14.198&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 参数说明</span></span><br><span class=\"line\">  <span class=\"comment\">// 可参考 https://github.com/sub-store-org/Sub-Store/wiki/%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(context, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxies;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"substore OpenAPI","date":"2024-11-03T11:03:33.525Z","_content":"# OpenAPI\n\n优雅的跨平台脚本API，一种代码，同时支持Quantumult X, Loon, Surge, JSBox 和Node JS。让开发者更轻松在Node平台调试代码。\n\n## 示例\n\n### 开始使用\n\n将`api-minified.js`内容复制到js脚本下方。\n\n```javascript\nconst $ = API(\"weather\"); // 创建一个名字为weather的脚本。默认为product环境，抑制所有log输出，保持error信息。。\nconst $ = API(\"weather\", true); // 打开debug环境，打开所有log输出\n```\n\n### Log\n\n```javascript\n$.log(\"Something\"); // 如果debug设置为false, log不会有任何输出。\n$.info(\"Some important thing\"); // 需要展示给用户的info信息，不受debug影响。\n$.error(\"Some error message\"); // 错误信息，不受debug影响。\n```\n\n### 环境判断\n\n```javascript\n$.env.isQX;\n$.env.isSurge;\n$.env.isLoon;\n$.env.isNode;\n$.env.isJSBox;\n```\n\n### 通知\n\n```javascript\n$.notify(\"title\", \"subtitle\", \"content\"); // 简单标题\n// URL标题\n\n$.notify(\"title\", \"subtitle\", \"content\", {\"open-url\": \"https://www.bing.com\"})\n// 多媒体标题，QX >= build 316, 其他平台不会显示多媒体内容。\n$.notify(\"title\", \"subtitle\", \"content\", {\"media-url\": \"https://avatars2.githubusercontent.com/u/21050064?s=460&u=40a74913dd0a3d00670d05148c3a08c787470021&v=4\"}) \n```\n\n### HTTP\n\nHTTP接口在Node使用request实现，需要用npm安装request。推荐通过如下操作安装到全局，并link。\n\n```bash\nnpm install -g request\n# 在工作目录\nnpm link request\n```\n\nOpenAPI提供了全部HTTP方法，包括`[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\"]`，\n统一通过`$.http`调用：\n\n```javascript\n// GET\n// 简单的请求一个URL\n$.http.get(\"https://postman-echo.com/get?foo1=bar1&foo2=bar2\").then(resp => {\n  // do something\n});\n\n// PUT\n// 请求加入一些自定义参数\n$.http.put({\n    url: \"https://postman-echo.com/put\",\n    body: \"HELLO\", // 设置请求body\n    headers: {\n      'content-type': 'text/plain'\n    }, // 设置请求头\n    timeout: 200 // 设置请求超时为200ms,\n    // 一些钩子函数\n    events: {\n      onRequest: (method, options) => {\n        // 请求之前可以做一些操作，比如log，注意method和options无法修改\n      },\n      onResponse: (resp) => {\n        // 请求之后可以对resp做修改，记得返回resp！\n        resp.body = JSON.parse(resp.body);\n        return resp;\n      },\n      onTimeout: () => {\n        // timeout的处理，比如可以退出APP\n        $.done();\n      }\n    }\n}).then(response => {\n  // do something\n});\n```\n\n或者你可以使用自定义参数的HTTP对象，实现一些自定义的配置。例如我们可以这样设置默认的baseURL以及默认的请求参数，比如：\n\n- headers\n- timeout\n- events\n\n\n\n```javascript\n$.http = HTTP({\n  baseURL: \"https://www.baidu.com\",\n  timeout: 500,\n  headers: {\n    \"User-Agent\": \"OpenAPI\"\n  },\n  events: {\n    onTimeout: () => $.error(\"OH NO!\")\n  }\n});\n```\n\n\n```javascript\n// 设置默认的baseURL为api.github.com，并设置鉴权token\n$.http = HTTP({\n  baseURL: \"https://api.github.com\", \n  headers: {\n    Authorization: `token MY_TOKEN`,\n    \"User-Agent\":\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36\"\n  }\n})\n\n$.http.get(\"/gists\").then(resp => {\n  // do something\n})\n```\n\n### 持久化\n\n```javascript\n$.write(\"VALUE\", \"KEY\"); // 将VALUE保存到KEY中\n$.read(\"KEY\"); // 将KEY的值取出\n$.delete(\"KEY\"); // 删除KEY的值\n$.cache; // 当前脚本所有的缓存\n$.done();\n```\n\n持久化在OpenAPI中得到了巨大改进，在不同环境下，其表现如下：\n\n#### 1. QX & Loon & Surge\n\n整个API对象共用一个`cache`，所以`$.write(\"VALUE\", \"KEY\")`其实只是把值保存到`cache`中。然后`cache`会被以`name`属性作为key保存到`$prefs`或者`$persistentStore`中。这形成了每个脚本独自的缓存空间，避免key碰撞的情况产生。\n\n```javascript\nconst $1 = API(\"APP1\");\nconst $2 = API(\"APP2\");\n\n// 这是安全的！\n$1.write(\"data\", \"key\");\n$2.write(\"data\", \"key\");\n```\n\n#### 2. Node & JSBox (2.0+)\n\nNode环境中，`cache`会被保存到和脚本同级目录下的`name.json`中。\n\n**如果希望在脚本里直接存取`$prefs`或者`$persistentStore`里面的缓存，可以通过在`KEY`前面加`#`号实现：**\n\n```javascript\n$.read(\"#KEY\");\n$.write(value, \"#KEY\");\n```\n\n### 其他\n\n#### 延时\n\n```javascript\n$.wait(1000).then(()=>{\n\t// 等待1000毫秒之后执行\n})\n\n// 在任何Promise后面可以自定义delay\n$.get(\"http://www.baidu.com\")\n.delay(1000) // 延迟1000毫秒\n.then(resp => {\n  // do something with response.\n})\n```\n\n更全面的用法请查看`example.js`。","source":"_posts/substore OpenAPI.md","raw":"---\ntitle: substore OpenAPI\ndate: 2024-11-03T19:03:33.525Z\ntags: []\ncategories: []\n---\n# OpenAPI\n\n优雅的跨平台脚本API，一种代码，同时支持Quantumult X, Loon, Surge, JSBox 和Node JS。让开发者更轻松在Node平台调试代码。\n\n## 示例\n\n### 开始使用\n\n将`api-minified.js`内容复制到js脚本下方。\n\n```javascript\nconst $ = API(\"weather\"); // 创建一个名字为weather的脚本。默认为product环境，抑制所有log输出，保持error信息。。\nconst $ = API(\"weather\", true); // 打开debug环境，打开所有log输出\n```\n\n### Log\n\n```javascript\n$.log(\"Something\"); // 如果debug设置为false, log不会有任何输出。\n$.info(\"Some important thing\"); // 需要展示给用户的info信息，不受debug影响。\n$.error(\"Some error message\"); // 错误信息，不受debug影响。\n```\n\n### 环境判断\n\n```javascript\n$.env.isQX;\n$.env.isSurge;\n$.env.isLoon;\n$.env.isNode;\n$.env.isJSBox;\n```\n\n### 通知\n\n```javascript\n$.notify(\"title\", \"subtitle\", \"content\"); // 简单标题\n// URL标题\n\n$.notify(\"title\", \"subtitle\", \"content\", {\"open-url\": \"https://www.bing.com\"})\n// 多媒体标题，QX >= build 316, 其他平台不会显示多媒体内容。\n$.notify(\"title\", \"subtitle\", \"content\", {\"media-url\": \"https://avatars2.githubusercontent.com/u/21050064?s=460&u=40a74913dd0a3d00670d05148c3a08c787470021&v=4\"}) \n```\n\n### HTTP\n\nHTTP接口在Node使用request实现，需要用npm安装request。推荐通过如下操作安装到全局，并link。\n\n```bash\nnpm install -g request\n# 在工作目录\nnpm link request\n```\n\nOpenAPI提供了全部HTTP方法，包括`[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\"]`，\n统一通过`$.http`调用：\n\n```javascript\n// GET\n// 简单的请求一个URL\n$.http.get(\"https://postman-echo.com/get?foo1=bar1&foo2=bar2\").then(resp => {\n  // do something\n});\n\n// PUT\n// 请求加入一些自定义参数\n$.http.put({\n    url: \"https://postman-echo.com/put\",\n    body: \"HELLO\", // 设置请求body\n    headers: {\n      'content-type': 'text/plain'\n    }, // 设置请求头\n    timeout: 200 // 设置请求超时为200ms,\n    // 一些钩子函数\n    events: {\n      onRequest: (method, options) => {\n        // 请求之前可以做一些操作，比如log，注意method和options无法修改\n      },\n      onResponse: (resp) => {\n        // 请求之后可以对resp做修改，记得返回resp！\n        resp.body = JSON.parse(resp.body);\n        return resp;\n      },\n      onTimeout: () => {\n        // timeout的处理，比如可以退出APP\n        $.done();\n      }\n    }\n}).then(response => {\n  // do something\n});\n```\n\n或者你可以使用自定义参数的HTTP对象，实现一些自定义的配置。例如我们可以这样设置默认的baseURL以及默认的请求参数，比如：\n\n- headers\n- timeout\n- events\n\n\n\n```javascript\n$.http = HTTP({\n  baseURL: \"https://www.baidu.com\",\n  timeout: 500,\n  headers: {\n    \"User-Agent\": \"OpenAPI\"\n  },\n  events: {\n    onTimeout: () => $.error(\"OH NO!\")\n  }\n});\n```\n\n\n```javascript\n// 设置默认的baseURL为api.github.com，并设置鉴权token\n$.http = HTTP({\n  baseURL: \"https://api.github.com\", \n  headers: {\n    Authorization: `token MY_TOKEN`,\n    \"User-Agent\":\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36\"\n  }\n})\n\n$.http.get(\"/gists\").then(resp => {\n  // do something\n})\n```\n\n### 持久化\n\n```javascript\n$.write(\"VALUE\", \"KEY\"); // 将VALUE保存到KEY中\n$.read(\"KEY\"); // 将KEY的值取出\n$.delete(\"KEY\"); // 删除KEY的值\n$.cache; // 当前脚本所有的缓存\n$.done();\n```\n\n持久化在OpenAPI中得到了巨大改进，在不同环境下，其表现如下：\n\n#### 1. QX & Loon & Surge\n\n整个API对象共用一个`cache`，所以`$.write(\"VALUE\", \"KEY\")`其实只是把值保存到`cache`中。然后`cache`会被以`name`属性作为key保存到`$prefs`或者`$persistentStore`中。这形成了每个脚本独自的缓存空间，避免key碰撞的情况产生。\n\n```javascript\nconst $1 = API(\"APP1\");\nconst $2 = API(\"APP2\");\n\n// 这是安全的！\n$1.write(\"data\", \"key\");\n$2.write(\"data\", \"key\");\n```\n\n#### 2. Node & JSBox (2.0+)\n\nNode环境中，`cache`会被保存到和脚本同级目录下的`name.json`中。\n\n**如果希望在脚本里直接存取`$prefs`或者`$persistentStore`里面的缓存，可以通过在`KEY`前面加`#`号实现：**\n\n```javascript\n$.read(\"#KEY\");\n$.write(value, \"#KEY\");\n```\n\n### 其他\n\n#### 延时\n\n```javascript\n$.wait(1000).then(()=>{\n\t// 等待1000毫秒之后执行\n})\n\n// 在任何Promise后面可以自定义delay\n$.get(\"http://www.baidu.com\")\n.delay(1000) // 延迟1000毫秒\n.then(resp => {\n  // do something with response.\n})\n```\n\n更全面的用法请查看`example.js`。","slug":"substore OpenAPI","published":1,"updated":"2024-11-25T11:44:04.464Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscl002gmbs62i5j5ott","content":"<h1 id=\"OpenAPI\"><a href=\"#OpenAPI\" class=\"headerlink\" title=\"OpenAPI\"></a>OpenAPI</h1><p>优雅的跨平台脚本API，一种代码，同时支持Quantumult X, Loon, Surge, JSBox 和Node JS。让开发者更轻松在Node平台调试代码。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>将<code>api-minified.js</code>内容复制到js脚本下方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $ = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;weather&quot;</span>); <span class=\"comment\">// 创建一个名字为weather的脚本。默认为product环境，抑制所有log输出，保持error信息。。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;weather&quot;</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 打开debug环境，打开所有log输出</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"Log\"></a>Log</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Something&quot;</span>); <span class=\"comment\">// 如果debug设置为false, log不会有任何输出。</span></span><br><span class=\"line\">$.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;Some important thing&quot;</span>); <span class=\"comment\">// 需要展示给用户的info信息，不受debug影响。</span></span><br><span class=\"line\">$.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Some error message&quot;</span>); <span class=\"comment\">// 错误信息，不受debug影响。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环境判断\"><a href=\"#环境判断\" class=\"headerlink\" title=\"环境判断\"></a>环境判断</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.env.<span class=\"property\">isQX</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isSurge</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isLoon</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isNode</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isJSBox</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">notify</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;subtitle&quot;</span>, <span class=\"string\">&quot;content&quot;</span>); <span class=\"comment\">// 简单标题</span></span><br><span class=\"line\"><span class=\"comment\">// URL标题</span></span><br><span class=\"line\"></span><br><span class=\"line\">$.<span class=\"title function_\">notify</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;subtitle&quot;</span>, <span class=\"string\">&quot;content&quot;</span>, &#123;<span class=\"string\">&quot;open-url&quot;</span>: <span class=\"string\">&quot;https://www.bing.com&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 多媒体标题，QX &gt;= build 316, 其他平台不会显示多媒体内容。</span></span><br><span class=\"line\">$.<span class=\"title function_\">notify</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;subtitle&quot;</span>, <span class=\"string\">&quot;content&quot;</span>, &#123;<span class=\"string\">&quot;media-url&quot;</span>: <span class=\"string\">&quot;https://avatars2.githubusercontent.com/u/21050064?s=460&amp;u=40a74913dd0a3d00670d05148c3a08c787470021&amp;v=4&quot;</span>&#125;) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>HTTP接口在Node使用request实现，需要用npm安装request。推荐通过如下操作安装到全局，并link。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g request</span><br><span class=\"line\"><span class=\"comment\"># 在工作目录</span></span><br><span class=\"line\">npm <span class=\"built_in\">link</span> request</span><br></pre></td></tr></table></figure>\n\n<p>OpenAPI提供了全部HTTP方法，包括<code>[&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;, &quot;PATCH&quot;]</code>，<br>统一通过<code>$.http</code>调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET</span></span><br><span class=\"line\"><span class=\"comment\">// 简单的请求一个URL</span></span><br><span class=\"line\">$.http.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;https://postman-echo.com/get?foo1=bar1&amp;foo2=bar2&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PUT</span></span><br><span class=\"line\"><span class=\"comment\">// 请求加入一些自定义参数</span></span><br><span class=\"line\">$.http.<span class=\"title function_\">put</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://postman-echo.com/put&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&quot;HELLO&quot;</span>, <span class=\"comment\">// 设置请求body</span></span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;text/plain&#x27;</span></span><br><span class=\"line\">    &#125;, <span class=\"comment\">// 设置请求头</span></span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">200</span> <span class=\"comment\">// 设置请求超时为200ms,</span></span><br><span class=\"line\">    <span class=\"comment\">// 一些钩子函数</span></span><br><span class=\"line\">    <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">onRequest</span>: <span class=\"function\">(<span class=\"params\">method, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求之前可以做一些操作，比如log，注意method和options无法修改</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">onResponse</span>: <span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求之后可以对resp做修改，记得返回resp！</span></span><br><span class=\"line\">        resp.<span class=\"property\">body</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(resp.<span class=\"property\">body</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resp;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">onTimeout</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// timeout的处理，比如可以退出APP</span></span><br><span class=\"line\">        $.<span class=\"title function_\">done</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以使用自定义参数的HTTP对象，实现一些自定义的配置。例如我们可以这样设置默认的baseURL以及默认的请求参数，比如：</p>\n<ul>\n<li>headers</li>\n<li>timeout</li>\n<li>events</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.http = <span class=\"title function_\">HTTP</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&quot;https://www.baidu.com&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;OpenAPI&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">onTimeout</span>: <span class=\"function\">() =&gt;</span> $.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;OH NO!&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置默认的baseURL为api.github.com，并设置鉴权token</span></span><br><span class=\"line\">$.http = <span class=\"title function_\">HTTP</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&quot;https://api.github.com&quot;</span>, </span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Authorization</span>: <span class=\"string\">`token MY_TOKEN`</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$.http.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/gists&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;VALUE&quot;</span>, <span class=\"string\">&quot;KEY&quot;</span>); <span class=\"comment\">// 将VALUE保存到KEY中</span></span><br><span class=\"line\">$.<span class=\"title function_\">read</span>(<span class=\"string\">&quot;KEY&quot;</span>); <span class=\"comment\">// 将KEY的值取出</span></span><br><span class=\"line\">$.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;KEY&quot;</span>); <span class=\"comment\">// 删除KEY的值</span></span><br><span class=\"line\">$.cache; <span class=\"comment\">// 当前脚本所有的缓存</span></span><br><span class=\"line\">$.<span class=\"title function_\">done</span>();</span><br></pre></td></tr></table></figure>\n\n<p>持久化在OpenAPI中得到了巨大改进，在不同环境下，其表现如下：</p>\n<h4 id=\"1-QX-Loon-Surge\"><a href=\"#1-QX-Loon-Surge\" class=\"headerlink\" title=\"1. QX &amp; Loon &amp; Surge\"></a>1. QX &amp; Loon &amp; Surge</h4><p>整个API对象共用一个<code>cache</code>，所以<code>$.write(&quot;VALUE&quot;, &quot;KEY&quot;)</code>其实只是把值保存到<code>cache</code>中。然后<code>cache</code>会被以<code>name</code>属性作为key保存到<code>$prefs</code>或者<code>$persistentStore</code>中。这形成了每个脚本独自的缓存空间，避免key碰撞的情况产生。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $1 = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;APP1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> $2 = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;APP2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是安全的！</span></span><br><span class=\"line\">$1.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\">$2.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Node-JSBox-2-0\"><a href=\"#2-Node-JSBox-2-0\" class=\"headerlink\" title=\"2. Node &amp; JSBox (2.0+)\"></a>2. Node &amp; JSBox (2.0+)</h4><p>Node环境中，<code>cache</code>会被保存到和脚本同级目录下的<code>name.json</code>中。</p>\n<p><strong>如果希望在脚本里直接存取<code>$prefs</code>或者<code>$persistentStore</code>里面的缓存，可以通过在<code>KEY</code>前面加<code>#</code>号实现：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">read</span>(<span class=\"string\">&quot;#KEY&quot;</span>);</span><br><span class=\"line\">$.<span class=\"title function_\">write</span>(value, <span class=\"string\">&quot;#KEY&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"延时\"><a href=\"#延时\" class=\"headerlink\" title=\"延时\"></a>延时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">wait</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待1000毫秒之后执行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在任何Promise后面可以自定义delay</span></span><br><span class=\"line\">$.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>) <span class=\"comment\">// 延迟1000毫秒</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with response.</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>更全面的用法请查看<code>example.js</code>。</p>\n","excerpt":"","more":"<h1 id=\"OpenAPI\"><a href=\"#OpenAPI\" class=\"headerlink\" title=\"OpenAPI\"></a>OpenAPI</h1><p>优雅的跨平台脚本API，一种代码，同时支持Quantumult X, Loon, Surge, JSBox 和Node JS。让开发者更轻松在Node平台调试代码。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>将<code>api-minified.js</code>内容复制到js脚本下方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $ = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;weather&quot;</span>); <span class=\"comment\">// 创建一个名字为weather的脚本。默认为product环境，抑制所有log输出，保持error信息。。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;weather&quot;</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 打开debug环境，打开所有log输出</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"Log\"></a>Log</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Something&quot;</span>); <span class=\"comment\">// 如果debug设置为false, log不会有任何输出。</span></span><br><span class=\"line\">$.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;Some important thing&quot;</span>); <span class=\"comment\">// 需要展示给用户的info信息，不受debug影响。</span></span><br><span class=\"line\">$.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Some error message&quot;</span>); <span class=\"comment\">// 错误信息，不受debug影响。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环境判断\"><a href=\"#环境判断\" class=\"headerlink\" title=\"环境判断\"></a>环境判断</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.env.<span class=\"property\">isQX</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isSurge</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isLoon</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isNode</span>;</span><br><span class=\"line\">$.env.<span class=\"property\">isJSBox</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">notify</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;subtitle&quot;</span>, <span class=\"string\">&quot;content&quot;</span>); <span class=\"comment\">// 简单标题</span></span><br><span class=\"line\"><span class=\"comment\">// URL标题</span></span><br><span class=\"line\"></span><br><span class=\"line\">$.<span class=\"title function_\">notify</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;subtitle&quot;</span>, <span class=\"string\">&quot;content&quot;</span>, &#123;<span class=\"string\">&quot;open-url&quot;</span>: <span class=\"string\">&quot;https://www.bing.com&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 多媒体标题，QX &gt;= build 316, 其他平台不会显示多媒体内容。</span></span><br><span class=\"line\">$.<span class=\"title function_\">notify</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;subtitle&quot;</span>, <span class=\"string\">&quot;content&quot;</span>, &#123;<span class=\"string\">&quot;media-url&quot;</span>: <span class=\"string\">&quot;https://avatars2.githubusercontent.com/u/21050064?s=460&amp;u=40a74913dd0a3d00670d05148c3a08c787470021&amp;v=4&quot;</span>&#125;) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>HTTP接口在Node使用request实现，需要用npm安装request。推荐通过如下操作安装到全局，并link。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g request</span><br><span class=\"line\"><span class=\"comment\"># 在工作目录</span></span><br><span class=\"line\">npm <span class=\"built_in\">link</span> request</span><br></pre></td></tr></table></figure>\n\n<p>OpenAPI提供了全部HTTP方法，包括<code>[&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;, &quot;PATCH&quot;]</code>，<br>统一通过<code>$.http</code>调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET</span></span><br><span class=\"line\"><span class=\"comment\">// 简单的请求一个URL</span></span><br><span class=\"line\">$.http.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;https://postman-echo.com/get?foo1=bar1&amp;foo2=bar2&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PUT</span></span><br><span class=\"line\"><span class=\"comment\">// 请求加入一些自定义参数</span></span><br><span class=\"line\">$.http.<span class=\"title function_\">put</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://postman-echo.com/put&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&quot;HELLO&quot;</span>, <span class=\"comment\">// 设置请求body</span></span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;text/plain&#x27;</span></span><br><span class=\"line\">    &#125;, <span class=\"comment\">// 设置请求头</span></span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">200</span> <span class=\"comment\">// 设置请求超时为200ms,</span></span><br><span class=\"line\">    <span class=\"comment\">// 一些钩子函数</span></span><br><span class=\"line\">    <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">onRequest</span>: <span class=\"function\">(<span class=\"params\">method, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求之前可以做一些操作，比如log，注意method和options无法修改</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">onResponse</span>: <span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求之后可以对resp做修改，记得返回resp！</span></span><br><span class=\"line\">        resp.<span class=\"property\">body</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(resp.<span class=\"property\">body</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resp;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">onTimeout</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// timeout的处理，比如可以退出APP</span></span><br><span class=\"line\">        $.<span class=\"title function_\">done</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以使用自定义参数的HTTP对象，实现一些自定义的配置。例如我们可以这样设置默认的baseURL以及默认的请求参数，比如：</p>\n<ul>\n<li>headers</li>\n<li>timeout</li>\n<li>events</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.http = <span class=\"title function_\">HTTP</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&quot;https://www.baidu.com&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;OpenAPI&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">onTimeout</span>: <span class=\"function\">() =&gt;</span> $.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;OH NO!&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置默认的baseURL为api.github.com，并设置鉴权token</span></span><br><span class=\"line\">$.http = <span class=\"title function_\">HTTP</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&quot;https://api.github.com&quot;</span>, </span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Authorization</span>: <span class=\"string\">`token MY_TOKEN`</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$.http.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/gists&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;VALUE&quot;</span>, <span class=\"string\">&quot;KEY&quot;</span>); <span class=\"comment\">// 将VALUE保存到KEY中</span></span><br><span class=\"line\">$.<span class=\"title function_\">read</span>(<span class=\"string\">&quot;KEY&quot;</span>); <span class=\"comment\">// 将KEY的值取出</span></span><br><span class=\"line\">$.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;KEY&quot;</span>); <span class=\"comment\">// 删除KEY的值</span></span><br><span class=\"line\">$.cache; <span class=\"comment\">// 当前脚本所有的缓存</span></span><br><span class=\"line\">$.<span class=\"title function_\">done</span>();</span><br></pre></td></tr></table></figure>\n\n<p>持久化在OpenAPI中得到了巨大改进，在不同环境下，其表现如下：</p>\n<h4 id=\"1-QX-Loon-Surge\"><a href=\"#1-QX-Loon-Surge\" class=\"headerlink\" title=\"1. QX &amp; Loon &amp; Surge\"></a>1. QX &amp; Loon &amp; Surge</h4><p>整个API对象共用一个<code>cache</code>，所以<code>$.write(&quot;VALUE&quot;, &quot;KEY&quot;)</code>其实只是把值保存到<code>cache</code>中。然后<code>cache</code>会被以<code>name</code>属性作为key保存到<code>$prefs</code>或者<code>$persistentStore</code>中。这形成了每个脚本独自的缓存空间，避免key碰撞的情况产生。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $1 = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;APP1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> $2 = <span class=\"title function_\">API</span>(<span class=\"string\">&quot;APP2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是安全的！</span></span><br><span class=\"line\">$1.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\">$2.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Node-JSBox-2-0\"><a href=\"#2-Node-JSBox-2-0\" class=\"headerlink\" title=\"2. Node &amp; JSBox (2.0+)\"></a>2. Node &amp; JSBox (2.0+)</h4><p>Node环境中，<code>cache</code>会被保存到和脚本同级目录下的<code>name.json</code>中。</p>\n<p><strong>如果希望在脚本里直接存取<code>$prefs</code>或者<code>$persistentStore</code>里面的缓存，可以通过在<code>KEY</code>前面加<code>#</code>号实现：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">read</span>(<span class=\"string\">&quot;#KEY&quot;</span>);</span><br><span class=\"line\">$.<span class=\"title function_\">write</span>(value, <span class=\"string\">&quot;#KEY&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"延时\"><a href=\"#延时\" class=\"headerlink\" title=\"延时\"></a>延时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">wait</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待1000毫秒之后执行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在任何Promise后面可以自定义delay</span></span><br><span class=\"line\">$.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>) <span class=\"comment\">// 延迟1000毫秒</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with response.</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>更全面的用法请查看<code>example.js</code>。</p>\n"},{"title":"Redis通用命令","date":"2024-08-07T22:41:06.497Z","_content":"## Redis通用命令**\n\n1、Redis默认有16个数据库，切换到第2个数据库\n\n```cobol\nselect 1\n```\n\n2、查看当前数据库key的数量\n\n```undefined\nDBSIZE\n```\n\n3、设置一个key为username，值为mike的数据\n\n```csharp\nset username mike\n```\n\n4、获取key为username的值\n\n```csharp\nget username\n```\n\n5、获取所有的key\n\n```perl\nkeys *\n```\n\n6、清除当前数据库\n\n```undefined\nflushdb\n```\n\n7、清楚所有数据库\n\n```undefined\nflushall\n```\n\n## 四、Redis基本命令\n\n1、查询key为username是否存在\n\n```perl\nexists username\n```\n\n2、指定key为username移动到1号数据库\n\n```cobol\nmove username 1\n```\n\n3、指定key为username10s后过期\n\n```cobol\nexpire username 10\n```\n\n4、查看key为username还有多久过期\n\n```undefined\n ttl username\n```\n\n5、查看key为username是什么类型\n\n```haskell\ntype username\n```\n\n## 五、五种数据结构类型\n\n### 5.1、String类型\n\n1、设置key为name的值为htt\n\n```delphi\nset name htt\n```\n\n2、获取key为name的值\n\n```csharp\nget name\n```\n\n3、拼接key为name的值：httstudy\n\n```perl\nappend name study\n```\n\n 4、获取key为name的值的长度\n\n```delphi\nstrlen name\n```\n\n5、设置key为view的值加1 \n\n```sql\nincr view\n```\n\n6、设置key为view的值减1\n\n```sql\ndecr view\n```\n\n7、设置key为view的值加10\n\n```sql\nincrby view 10\n```\n\n8、设置key为view的值减10\n\n```sql\ndecrby view 10\n```\n\n9、截取下标为0-3之间的字符串，例如：abcdef，截取后abcd\n\n```cobol\ngetrange name 0 3\n```\n\n10、从下标为1进行替换字符串，例如：abcdef，替换后a000efg\n\n```cobol\nsetrange name 1 000\n```\n\n11、设置key为name的值为hello，10s后过期\n\n```delphi\nsetex name 10 hello\n```\n\n12、如果不存在key为title的，值设置为redis，如果存在，则set失败\n\n```undefined\nsetnx title redis\n```\n\n13、一次性设置多个值\n\n```cobol\nmset k1 v1 k2 v2 k3 v3\nmset user:1:name htt user:1:age 2\n```\n\n14、一次性获取多个值\n\n```cobol\nmget k1 k2 k3\nmget user:1:name user:1:age\n```\n\n15、如果k1已经存在，则k1，k4全部设置失败，参考事务的原子性操作\n\n```cobol\nmsetnx k1 v1 k4 v4\n```\n\n16、如果不存在key为username的值，则返回nil，然后set进去；如果存在值，则获取原来的值并设置新的值\n\n```undefined\ngetset username htt\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/e5a4df2685ab4e754729c900d20eb091.png)\n\n看了图会更好理解一些！\n\n### 5.2、List集合类型\n\n1、将一个值或者多个值插入到列表的头部\n\n```cobol\nlpush list 1\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/3155e007b4575f8219d2cd6523e98546.png)\n\n2、将一个值或者多个值插入到列表的尾部\n\n```cobol\nrpush list 4\n```\n\n ![img](https://i-blog.csdnimg.cn/blog_migrate/07cd8fccca0df00a3dbc616e09eb82c9.png)\n\n3、通过区间获取具体的值\n\n```cobol\nlrange list 0 -1\n```\n\n4、移除list的第一个元素：3\n\n```undefined\nlpop list\n```\n\n5、移除list的最后一个元素：4\n\n```undefined\nrpop list\n```\n\n6、通过下标获得list当中的某一个值\n\n```cobol\nlindex list 0\n```\n\n7、获取list的长度\n\n```undefined\nllen list\n```\n\n 8、移除list集合指定个数的value，移除1个值为2的，精确匹配\n\n```cobol\nlrem list 1 2\n```\n\n9、截取list集合中下标为1到下标为2之间的元素集合，并覆盖原来的list集合\n\n```cobol\nltrim list 1 2\n```\n\n 10、更新list集合当中下标为0的值为bbb，如果下标0的值不存在，则报错\n\n```cobol\nlset list 0 bbb\n```\n\n11、将一个某一个具体的值插入到某一个具体元素（默认第一个）的前面或者后面\n\n```cobol\nlinsert list BEFORE kkk aaa\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/7d526e10e25e532e7cc8acb731afa3ac.png)\n\n```cobol\nlinsert list AFTER kkk aaa\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/b44ff342b1e4221f85e06b9b48c606fb.png)\n\n### 5.3、Set集合类型\n\n1、往set集合中添加一个元素\n\n```csharp\nsadd set hello\n```\n\n2、查看set集合中所有元素\n\n```csharp\n smembers set\n```\n\n3、 查看set集合中是否存在某元素\n\n```csharp\nsismember set world\n```\n\n 4、随机抽取出1个元素\n\n```csharp\nsrandmember set\n```\n\n5、随机抽取出2个元素\n\n```cobol\n srandmember set 2\n```\n\n6、随机删除set集合中某个元素\n\n```csharp\nspop set\n```\n\n7、移动set集合中的world元素到set2集合中\n\n```cobol\nsmove set set2 world\n```\n\n8、作set2集合减去set集合的差集\n\n```cobol\nsdiff set2 set\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/8450fe8ff2015fec9784754d9b460b3c.png)\n\n9、set和set2的交集\n\n```cobol\nsinter set set2\n```\n\n10、set和set2作并集并去重\n\n```cobol\nsunion set set2\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/5e3992493fbcd74ad3bb9ad33a3a6bd5.png)\n\n### 5.4、Hash集合类型\n\n1、往hash集合中存放键值对数据\n\n```bash\nhset hash username mike\n```\n\n2、从hash集合中获取数据\n\n```bash\nhget hash username\n```\n\n3、同时往hash集合中添加多个值\n\n```bash\nhmset hash username jack age 2\n```\n\n4、同时往hash集合中获取多个值\n\n```bash\nhmget hash username age\n```\n\n5、获取hash集合中所有的键值对\n\n```bash\nhgetall hash\n```\n\n6、删除hash集合中指定的key字段\n\n```bash\nhdel hash username\n```\n\n7、获取hash集合的长度\n\n```bash\nhlen hash\n```\n\n8、判断hash集合中指定字段是否存在\n\n```bash\nhexists hash username\n```\n\n9、获取hash集合中所有的key\n\n```bash\nhvals hash\n```\n\n10、获取hash集合中所有的值\n\n```bash\nhkeys hash\n```\n\n 11、指定hash集合中指定增量\n\n```bash\nhincrby hash views 1\n```\n\n12、如果不存在则直接设置值，存在则设置失败\n\n```bash\nhsetnx hash password 123456\n```\n\n### 5.5、Zset有序集合类型\n\n1、添加一个值\n\n```cobol\nzadd zset 1 first\n```\n\n2、添加多个值\n\n```cobol\nzadd zset 2 second 3 third 4 four\n```\n\n3、获取zset集合中所有元素\n\n```cobol\nzrange zset 0 -1\n```\n\n4、给zset集合中的元素从小到大排序，-inf：负无穷，+inf：正无穷\n\n```matlab\nzrangebyscore zset -inf +inf\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/f51753f18d1072bd46b76bbb9619abb1.png)\n\n5、从小到大排序并输出键值\n\n```matlab\nzrangebyscore zset -inf +inf withscores\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/a2f0d9b51a992e9afc6075bda6436489.png)\n\n6、指定负无穷到1的范围\n\n```matlab\nzrangebyscore zset -inf 1 withscores\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/052b347be2397cda1f81b741c872dd04.png)\n\n7、移除zset集合中指定的元素\n\n```undefined\nzrem zset four\n```\n\n8、查看zset集合中元素个数\n\n```undefined\nzcard zset\n```\n\n 9、反转指定范围\n\n```cobol\nzrevrange zset 1 2\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/5c690ddea425461422ac13ca7b68a141.png)\n\n\n\n\n\n","source":"_posts/Redis通用命令.md","raw":"---\ntitle: Redis通用命令\ndate: 2024-08-08T06:41:06.497Z\ntags: []\ncategories: []\n---\n## Redis通用命令**\n\n1、Redis默认有16个数据库，切换到第2个数据库\n\n```cobol\nselect 1\n```\n\n2、查看当前数据库key的数量\n\n```undefined\nDBSIZE\n```\n\n3、设置一个key为username，值为mike的数据\n\n```csharp\nset username mike\n```\n\n4、获取key为username的值\n\n```csharp\nget username\n```\n\n5、获取所有的key\n\n```perl\nkeys *\n```\n\n6、清除当前数据库\n\n```undefined\nflushdb\n```\n\n7、清楚所有数据库\n\n```undefined\nflushall\n```\n\n## 四、Redis基本命令\n\n1、查询key为username是否存在\n\n```perl\nexists username\n```\n\n2、指定key为username移动到1号数据库\n\n```cobol\nmove username 1\n```\n\n3、指定key为username10s后过期\n\n```cobol\nexpire username 10\n```\n\n4、查看key为username还有多久过期\n\n```undefined\n ttl username\n```\n\n5、查看key为username是什么类型\n\n```haskell\ntype username\n```\n\n## 五、五种数据结构类型\n\n### 5.1、String类型\n\n1、设置key为name的值为htt\n\n```delphi\nset name htt\n```\n\n2、获取key为name的值\n\n```csharp\nget name\n```\n\n3、拼接key为name的值：httstudy\n\n```perl\nappend name study\n```\n\n 4、获取key为name的值的长度\n\n```delphi\nstrlen name\n```\n\n5、设置key为view的值加1 \n\n```sql\nincr view\n```\n\n6、设置key为view的值减1\n\n```sql\ndecr view\n```\n\n7、设置key为view的值加10\n\n```sql\nincrby view 10\n```\n\n8、设置key为view的值减10\n\n```sql\ndecrby view 10\n```\n\n9、截取下标为0-3之间的字符串，例如：abcdef，截取后abcd\n\n```cobol\ngetrange name 0 3\n```\n\n10、从下标为1进行替换字符串，例如：abcdef，替换后a000efg\n\n```cobol\nsetrange name 1 000\n```\n\n11、设置key为name的值为hello，10s后过期\n\n```delphi\nsetex name 10 hello\n```\n\n12、如果不存在key为title的，值设置为redis，如果存在，则set失败\n\n```undefined\nsetnx title redis\n```\n\n13、一次性设置多个值\n\n```cobol\nmset k1 v1 k2 v2 k3 v3\nmset user:1:name htt user:1:age 2\n```\n\n14、一次性获取多个值\n\n```cobol\nmget k1 k2 k3\nmget user:1:name user:1:age\n```\n\n15、如果k1已经存在，则k1，k4全部设置失败，参考事务的原子性操作\n\n```cobol\nmsetnx k1 v1 k4 v4\n```\n\n16、如果不存在key为username的值，则返回nil，然后set进去；如果存在值，则获取原来的值并设置新的值\n\n```undefined\ngetset username htt\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/e5a4df2685ab4e754729c900d20eb091.png)\n\n看了图会更好理解一些！\n\n### 5.2、List集合类型\n\n1、将一个值或者多个值插入到列表的头部\n\n```cobol\nlpush list 1\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/3155e007b4575f8219d2cd6523e98546.png)\n\n2、将一个值或者多个值插入到列表的尾部\n\n```cobol\nrpush list 4\n```\n\n ![img](https://i-blog.csdnimg.cn/blog_migrate/07cd8fccca0df00a3dbc616e09eb82c9.png)\n\n3、通过区间获取具体的值\n\n```cobol\nlrange list 0 -1\n```\n\n4、移除list的第一个元素：3\n\n```undefined\nlpop list\n```\n\n5、移除list的最后一个元素：4\n\n```undefined\nrpop list\n```\n\n6、通过下标获得list当中的某一个值\n\n```cobol\nlindex list 0\n```\n\n7、获取list的长度\n\n```undefined\nllen list\n```\n\n 8、移除list集合指定个数的value，移除1个值为2的，精确匹配\n\n```cobol\nlrem list 1 2\n```\n\n9、截取list集合中下标为1到下标为2之间的元素集合，并覆盖原来的list集合\n\n```cobol\nltrim list 1 2\n```\n\n 10、更新list集合当中下标为0的值为bbb，如果下标0的值不存在，则报错\n\n```cobol\nlset list 0 bbb\n```\n\n11、将一个某一个具体的值插入到某一个具体元素（默认第一个）的前面或者后面\n\n```cobol\nlinsert list BEFORE kkk aaa\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/7d526e10e25e532e7cc8acb731afa3ac.png)\n\n```cobol\nlinsert list AFTER kkk aaa\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/b44ff342b1e4221f85e06b9b48c606fb.png)\n\n### 5.3、Set集合类型\n\n1、往set集合中添加一个元素\n\n```csharp\nsadd set hello\n```\n\n2、查看set集合中所有元素\n\n```csharp\n smembers set\n```\n\n3、 查看set集合中是否存在某元素\n\n```csharp\nsismember set world\n```\n\n 4、随机抽取出1个元素\n\n```csharp\nsrandmember set\n```\n\n5、随机抽取出2个元素\n\n```cobol\n srandmember set 2\n```\n\n6、随机删除set集合中某个元素\n\n```csharp\nspop set\n```\n\n7、移动set集合中的world元素到set2集合中\n\n```cobol\nsmove set set2 world\n```\n\n8、作set2集合减去set集合的差集\n\n```cobol\nsdiff set2 set\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/8450fe8ff2015fec9784754d9b460b3c.png)\n\n9、set和set2的交集\n\n```cobol\nsinter set set2\n```\n\n10、set和set2作并集并去重\n\n```cobol\nsunion set set2\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/5e3992493fbcd74ad3bb9ad33a3a6bd5.png)\n\n### 5.4、Hash集合类型\n\n1、往hash集合中存放键值对数据\n\n```bash\nhset hash username mike\n```\n\n2、从hash集合中获取数据\n\n```bash\nhget hash username\n```\n\n3、同时往hash集合中添加多个值\n\n```bash\nhmset hash username jack age 2\n```\n\n4、同时往hash集合中获取多个值\n\n```bash\nhmget hash username age\n```\n\n5、获取hash集合中所有的键值对\n\n```bash\nhgetall hash\n```\n\n6、删除hash集合中指定的key字段\n\n```bash\nhdel hash username\n```\n\n7、获取hash集合的长度\n\n```bash\nhlen hash\n```\n\n8、判断hash集合中指定字段是否存在\n\n```bash\nhexists hash username\n```\n\n9、获取hash集合中所有的key\n\n```bash\nhvals hash\n```\n\n10、获取hash集合中所有的值\n\n```bash\nhkeys hash\n```\n\n 11、指定hash集合中指定增量\n\n```bash\nhincrby hash views 1\n```\n\n12、如果不存在则直接设置值，存在则设置失败\n\n```bash\nhsetnx hash password 123456\n```\n\n### 5.5、Zset有序集合类型\n\n1、添加一个值\n\n```cobol\nzadd zset 1 first\n```\n\n2、添加多个值\n\n```cobol\nzadd zset 2 second 3 third 4 four\n```\n\n3、获取zset集合中所有元素\n\n```cobol\nzrange zset 0 -1\n```\n\n4、给zset集合中的元素从小到大排序，-inf：负无穷，+inf：正无穷\n\n```matlab\nzrangebyscore zset -inf +inf\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/f51753f18d1072bd46b76bbb9619abb1.png)\n\n5、从小到大排序并输出键值\n\n```matlab\nzrangebyscore zset -inf +inf withscores\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/a2f0d9b51a992e9afc6075bda6436489.png)\n\n6、指定负无穷到1的范围\n\n```matlab\nzrangebyscore zset -inf 1 withscores\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/052b347be2397cda1f81b741c872dd04.png)\n\n7、移除zset集合中指定的元素\n\n```undefined\nzrem zset four\n```\n\n8、查看zset集合中元素个数\n\n```undefined\nzcard zset\n```\n\n 9、反转指定范围\n\n```cobol\nzrevrange zset 1 2\n```\n\n![img](https://i-blog.csdnimg.cn/blog_migrate/5c690ddea425461422ac13ca7b68a141.png)\n\n\n\n\n\n","slug":"Redis通用命令","published":1,"updated":"2024-11-25T11:44:04.469Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscl002hmbs6e28o6j43","content":"<h2 id=\"Redis通用命令\"><a href=\"#Redis通用命令\" class=\"headerlink\" title=\"Redis通用命令**\"></a>Redis通用命令**</h2><p>1、Redis默认有16个数据库，切换到第2个数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 1</span><br></pre></td></tr></table></figure>\n\n<p>2、查看当前数据库key的数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBSIZE</span><br></pre></td></tr></table></figure>\n\n<p>3、设置一个key为username，值为mike的数据</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> username mike</span><br></pre></td></tr></table></figure>\n\n<p>4、获取key为username的值</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> username</span><br></pre></td></tr></table></figure>\n\n<p>5、获取所有的key</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">keys</span> *</span><br></pre></td></tr></table></figure>\n\n<p>6、清除当前数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushdb</span><br></pre></td></tr></table></figure>\n\n<p>7、清楚所有数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、Redis基本命令\"><a href=\"#四、Redis基本命令\" class=\"headerlink\" title=\"四、Redis基本命令\"></a>四、Redis基本命令</h2><p>1、查询key为username是否存在</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exists</span> username</span><br></pre></td></tr></table></figure>\n\n<p>2、指定key为username移动到1号数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">move username 1</span><br></pre></td></tr></table></figure>\n\n<p>3、指定key为username10s后过期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expire username 10</span><br></pre></td></tr></table></figure>\n\n<p>4、查看key为username还有多久过期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttl username</span><br></pre></td></tr></table></figure>\n\n<p>5、查看key为username是什么类型</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> username</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、五种数据结构类型\"><a href=\"#五、五种数据结构类型\" class=\"headerlink\" title=\"五、五种数据结构类型\"></a>五、五种数据结构类型</h2><h3 id=\"5-1、String类型\"><a href=\"#5-1、String类型\" class=\"headerlink\" title=\"5.1、String类型\"></a>5.1、String类型</h3><p>1、设置key为name的值为htt</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">name</span> htt</span><br></pre></td></tr></table></figure>\n\n<p>2、获取key为name的值</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> name</span><br></pre></td></tr></table></figure>\n\n<p>3、拼接key为name的值：httstudy</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append name <span class=\"keyword\">study</span></span><br></pre></td></tr></table></figure>\n\n<p> 4、获取key为name的值的长度</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strlen <span class=\"keyword\">name</span></span><br></pre></td></tr></table></figure>\n\n<p>5、设置key为view的值加1 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incr <span class=\"keyword\">view</span></span><br></pre></td></tr></table></figure>\n\n<p>6、设置key为view的值减1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decr <span class=\"keyword\">view</span></span><br></pre></td></tr></table></figure>\n\n<p>7、设置key为view的值加10</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby <span class=\"keyword\">view</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>8、设置key为view的值减10</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decrby <span class=\"keyword\">view</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>9、截取下标为0-3之间的字符串，例如：abcdef，截取后abcd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getrange name 0 3</span><br></pre></td></tr></table></figure>\n\n<p>10、从下标为1进行替换字符串，例如：abcdef，替换后a000efg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setrange name 1 000</span><br></pre></td></tr></table></figure>\n\n<p>11、设置key为name的值为hello，10s后过期</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setex <span class=\"keyword\">name</span> <span class=\"number\">10</span> hello</span><br></pre></td></tr></table></figure>\n\n<p>12、如果不存在key为title的，值设置为redis，如果存在，则set失败</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setnx title redis</span><br></pre></td></tr></table></figure>\n\n<p>13、一次性设置多个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mset k1 v1 k2 v2 k3 v3</span><br><span class=\"line\">mset user:1:name htt user:1:age 2</span><br></pre></td></tr></table></figure>\n\n<p>14、一次性获取多个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mget k1 k2 k3</span><br><span class=\"line\">mget user:1:name user:1:age</span><br></pre></td></tr></table></figure>\n\n<p>15、如果k1已经存在，则k1，k4全部设置失败，参考事务的原子性操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msetnx k1 v1 k4 v4</span><br></pre></td></tr></table></figure>\n\n<p>16、如果不存在key为username的值，则返回nil，然后set进去；如果存在值，则获取原来的值并设置新的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getset username htt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e5a4df2685ab4e754729c900d20eb091.png\" alt=\"img\"></p>\n<p>看了图会更好理解一些！</p>\n<h3 id=\"5-2、List集合类型\"><a href=\"#5-2、List集合类型\" class=\"headerlink\" title=\"5.2、List集合类型\"></a>5.2、List集合类型</h3><p>1、将一个值或者多个值插入到列表的头部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush list 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/3155e007b4575f8219d2cd6523e98546.png\" alt=\"img\"></p>\n<p>2、将一个值或者多个值插入到列表的尾部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpush list 4</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://i-blog.csdnimg.cn/blog_migrate/07cd8fccca0df00a3dbc616e09eb82c9.png\" alt=\"img\"></p>\n<p>3、通过区间获取具体的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrange list 0 -1</span><br></pre></td></tr></table></figure>\n\n<p>4、移除list的第一个元素：3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpop list</span><br></pre></td></tr></table></figure>\n\n<p>5、移除list的最后一个元素：4</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpop list</span><br></pre></td></tr></table></figure>\n\n<p>6、通过下标获得list当中的某一个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lindex list 0</span><br></pre></td></tr></table></figure>\n\n<p>7、获取list的长度</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llen list</span><br></pre></td></tr></table></figure>\n\n<p> 8、移除list集合指定个数的value，移除1个值为2的，精确匹配</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrem list 1 2</span><br></pre></td></tr></table></figure>\n\n<p>9、截取list集合中下标为1到下标为2之间的元素集合，并覆盖原来的list集合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ltrim list 1 2</span><br></pre></td></tr></table></figure>\n\n<p> 10、更新list集合当中下标为0的值为bbb，如果下标0的值不存在，则报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lset list 0 bbb</span><br></pre></td></tr></table></figure>\n\n<p>11、将一个某一个具体的值插入到某一个具体元素（默认第一个）的前面或者后面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linsert list BEFORE kkk aaa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7d526e10e25e532e7cc8acb731afa3ac.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linsert list AFTER kkk aaa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b44ff342b1e4221f85e06b9b48c606fb.png\" alt=\"img\"></p>\n<h3 id=\"5-3、Set集合类型\"><a href=\"#5-3、Set集合类型\" class=\"headerlink\" title=\"5.3、Set集合类型\"></a>5.3、Set集合类型</h3><p>1、往set集合中添加一个元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd <span class=\"keyword\">set</span> hello</span><br></pre></td></tr></table></figure>\n\n<p>2、查看set集合中所有元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smembers <span class=\"keyword\">set</span></span><br></pre></td></tr></table></figure>\n\n<p>3、 查看set集合中是否存在某元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sismember <span class=\"keyword\">set</span> world</span><br></pre></td></tr></table></figure>\n\n<p> 4、随机抽取出1个元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember <span class=\"keyword\">set</span></span><br></pre></td></tr></table></figure>\n\n<p>5、随机抽取出2个元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember set 2</span><br></pre></td></tr></table></figure>\n\n<p>6、随机删除set集合中某个元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop <span class=\"keyword\">set</span></span><br></pre></td></tr></table></figure>\n\n<p>7、移动set集合中的world元素到set2集合中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smove set set2 world</span><br></pre></td></tr></table></figure>\n\n<p>8、作set2集合减去set集合的差集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiff set2 set</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8450fe8ff2015fec9784754d9b460b3c.png\" alt=\"img\"></p>\n<p>9、set和set2的交集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter set set2</span><br></pre></td></tr></table></figure>\n\n<p>10、set和set2作并集并去重</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunion set set2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5e3992493fbcd74ad3bb9ad33a3a6bd5.png\" alt=\"img\"></p>\n<h3 id=\"5-4、Hash集合类型\"><a href=\"#5-4、Hash集合类型\" class=\"headerlink\" title=\"5.4、Hash集合类型\"></a>5.4、Hash集合类型</h3><p>1、往hash集合中存放键值对数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset <span class=\"built_in\">hash</span> username mike</span><br></pre></td></tr></table></figure>\n\n<p>2、从hash集合中获取数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hget <span class=\"built_in\">hash</span> username</span><br></pre></td></tr></table></figure>\n\n<p>3、同时往hash集合中添加多个值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmset <span class=\"built_in\">hash</span> username jack age 2</span><br></pre></td></tr></table></figure>\n\n<p>4、同时往hash集合中获取多个值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmget <span class=\"built_in\">hash</span> username age</span><br></pre></td></tr></table></figure>\n\n<p>5、获取hash集合中所有的键值对</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgetall <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p>6、删除hash集合中指定的key字段</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdel <span class=\"built_in\">hash</span> username</span><br></pre></td></tr></table></figure>\n\n<p>7、获取hash集合的长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hlen <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p>8、判断hash集合中指定字段是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexists <span class=\"built_in\">hash</span> username</span><br></pre></td></tr></table></figure>\n\n<p>9、获取hash集合中所有的key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hvals <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p>10、获取hash集合中所有的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hkeys <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p> 11、指定hash集合中指定增量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hincrby <span class=\"built_in\">hash</span> views 1</span><br></pre></td></tr></table></figure>\n\n<p>12、如果不存在则直接设置值，存在则设置失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hsetnx <span class=\"built_in\">hash</span> password 123456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5、Zset有序集合类型\"><a href=\"#5-5、Zset有序集合类型\" class=\"headerlink\" title=\"5.5、Zset有序集合类型\"></a>5.5、Zset有序集合类型</h3><p>1、添加一个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd zset 1 first</span><br></pre></td></tr></table></figure>\n\n<p>2、添加多个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd zset 2 second 3 third 4 four</span><br></pre></td></tr></table></figure>\n\n<p>3、获取zset集合中所有元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrange zset 0 -1</span><br></pre></td></tr></table></figure>\n\n<p>4、给zset集合中的元素从小到大排序，-inf：负无穷，+inf：正无穷</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore zset -<span class=\"built_in\">inf</span> +<span class=\"built_in\">inf</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f51753f18d1072bd46b76bbb9619abb1.png\" alt=\"img\"></p>\n<p>5、从小到大排序并输出键值</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore zset -<span class=\"built_in\">inf</span> +<span class=\"built_in\">inf</span> withscores</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/a2f0d9b51a992e9afc6075bda6436489.png\" alt=\"img\"></p>\n<p>6、指定负无穷到1的范围</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore zset -<span class=\"built_in\">inf</span> <span class=\"number\">1</span> withscores</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/052b347be2397cda1f81b741c872dd04.png\" alt=\"img\"></p>\n<p>7、移除zset集合中指定的元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrem zset four</span><br></pre></td></tr></table></figure>\n\n<p>8、查看zset集合中元素个数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zcard zset</span><br></pre></td></tr></table></figure>\n\n<p> 9、反转指定范围</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrevrange zset 1 2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5c690ddea425461422ac13ca7b68a141.png\" alt=\"img\"></p>\n","excerpt":"","more":"<h2 id=\"Redis通用命令\"><a href=\"#Redis通用命令\" class=\"headerlink\" title=\"Redis通用命令**\"></a>Redis通用命令**</h2><p>1、Redis默认有16个数据库，切换到第2个数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 1</span><br></pre></td></tr></table></figure>\n\n<p>2、查看当前数据库key的数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBSIZE</span><br></pre></td></tr></table></figure>\n\n<p>3、设置一个key为username，值为mike的数据</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> username mike</span><br></pre></td></tr></table></figure>\n\n<p>4、获取key为username的值</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> username</span><br></pre></td></tr></table></figure>\n\n<p>5、获取所有的key</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">keys</span> *</span><br></pre></td></tr></table></figure>\n\n<p>6、清除当前数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushdb</span><br></pre></td></tr></table></figure>\n\n<p>7、清楚所有数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、Redis基本命令\"><a href=\"#四、Redis基本命令\" class=\"headerlink\" title=\"四、Redis基本命令\"></a>四、Redis基本命令</h2><p>1、查询key为username是否存在</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exists</span> username</span><br></pre></td></tr></table></figure>\n\n<p>2、指定key为username移动到1号数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">move username 1</span><br></pre></td></tr></table></figure>\n\n<p>3、指定key为username10s后过期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expire username 10</span><br></pre></td></tr></table></figure>\n\n<p>4、查看key为username还有多久过期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttl username</span><br></pre></td></tr></table></figure>\n\n<p>5、查看key为username是什么类型</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> username</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、五种数据结构类型\"><a href=\"#五、五种数据结构类型\" class=\"headerlink\" title=\"五、五种数据结构类型\"></a>五、五种数据结构类型</h2><h3 id=\"5-1、String类型\"><a href=\"#5-1、String类型\" class=\"headerlink\" title=\"5.1、String类型\"></a>5.1、String类型</h3><p>1、设置key为name的值为htt</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">name</span> htt</span><br></pre></td></tr></table></figure>\n\n<p>2、获取key为name的值</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> name</span><br></pre></td></tr></table></figure>\n\n<p>3、拼接key为name的值：httstudy</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append name <span class=\"keyword\">study</span></span><br></pre></td></tr></table></figure>\n\n<p> 4、获取key为name的值的长度</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strlen <span class=\"keyword\">name</span></span><br></pre></td></tr></table></figure>\n\n<p>5、设置key为view的值加1 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incr <span class=\"keyword\">view</span></span><br></pre></td></tr></table></figure>\n\n<p>6、设置key为view的值减1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decr <span class=\"keyword\">view</span></span><br></pre></td></tr></table></figure>\n\n<p>7、设置key为view的值加10</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby <span class=\"keyword\">view</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>8、设置key为view的值减10</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decrby <span class=\"keyword\">view</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>9、截取下标为0-3之间的字符串，例如：abcdef，截取后abcd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getrange name 0 3</span><br></pre></td></tr></table></figure>\n\n<p>10、从下标为1进行替换字符串，例如：abcdef，替换后a000efg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setrange name 1 000</span><br></pre></td></tr></table></figure>\n\n<p>11、设置key为name的值为hello，10s后过期</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setex <span class=\"keyword\">name</span> <span class=\"number\">10</span> hello</span><br></pre></td></tr></table></figure>\n\n<p>12、如果不存在key为title的，值设置为redis，如果存在，则set失败</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setnx title redis</span><br></pre></td></tr></table></figure>\n\n<p>13、一次性设置多个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mset k1 v1 k2 v2 k3 v3</span><br><span class=\"line\">mset user:1:name htt user:1:age 2</span><br></pre></td></tr></table></figure>\n\n<p>14、一次性获取多个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mget k1 k2 k3</span><br><span class=\"line\">mget user:1:name user:1:age</span><br></pre></td></tr></table></figure>\n\n<p>15、如果k1已经存在，则k1，k4全部设置失败，参考事务的原子性操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msetnx k1 v1 k4 v4</span><br></pre></td></tr></table></figure>\n\n<p>16、如果不存在key为username的值，则返回nil，然后set进去；如果存在值，则获取原来的值并设置新的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getset username htt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e5a4df2685ab4e754729c900d20eb091.png\" alt=\"img\"></p>\n<p>看了图会更好理解一些！</p>\n<h3 id=\"5-2、List集合类型\"><a href=\"#5-2、List集合类型\" class=\"headerlink\" title=\"5.2、List集合类型\"></a>5.2、List集合类型</h3><p>1、将一个值或者多个值插入到列表的头部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush list 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/3155e007b4575f8219d2cd6523e98546.png\" alt=\"img\"></p>\n<p>2、将一个值或者多个值插入到列表的尾部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpush list 4</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://i-blog.csdnimg.cn/blog_migrate/07cd8fccca0df00a3dbc616e09eb82c9.png\" alt=\"img\"></p>\n<p>3、通过区间获取具体的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrange list 0 -1</span><br></pre></td></tr></table></figure>\n\n<p>4、移除list的第一个元素：3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpop list</span><br></pre></td></tr></table></figure>\n\n<p>5、移除list的最后一个元素：4</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpop list</span><br></pre></td></tr></table></figure>\n\n<p>6、通过下标获得list当中的某一个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lindex list 0</span><br></pre></td></tr></table></figure>\n\n<p>7、获取list的长度</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llen list</span><br></pre></td></tr></table></figure>\n\n<p> 8、移除list集合指定个数的value，移除1个值为2的，精确匹配</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrem list 1 2</span><br></pre></td></tr></table></figure>\n\n<p>9、截取list集合中下标为1到下标为2之间的元素集合，并覆盖原来的list集合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ltrim list 1 2</span><br></pre></td></tr></table></figure>\n\n<p> 10、更新list集合当中下标为0的值为bbb，如果下标0的值不存在，则报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lset list 0 bbb</span><br></pre></td></tr></table></figure>\n\n<p>11、将一个某一个具体的值插入到某一个具体元素（默认第一个）的前面或者后面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linsert list BEFORE kkk aaa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7d526e10e25e532e7cc8acb731afa3ac.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linsert list AFTER kkk aaa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b44ff342b1e4221f85e06b9b48c606fb.png\" alt=\"img\"></p>\n<h3 id=\"5-3、Set集合类型\"><a href=\"#5-3、Set集合类型\" class=\"headerlink\" title=\"5.3、Set集合类型\"></a>5.3、Set集合类型</h3><p>1、往set集合中添加一个元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd <span class=\"keyword\">set</span> hello</span><br></pre></td></tr></table></figure>\n\n<p>2、查看set集合中所有元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smembers <span class=\"keyword\">set</span></span><br></pre></td></tr></table></figure>\n\n<p>3、 查看set集合中是否存在某元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sismember <span class=\"keyword\">set</span> world</span><br></pre></td></tr></table></figure>\n\n<p> 4、随机抽取出1个元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember <span class=\"keyword\">set</span></span><br></pre></td></tr></table></figure>\n\n<p>5、随机抽取出2个元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember set 2</span><br></pre></td></tr></table></figure>\n\n<p>6、随机删除set集合中某个元素</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop <span class=\"keyword\">set</span></span><br></pre></td></tr></table></figure>\n\n<p>7、移动set集合中的world元素到set2集合中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smove set set2 world</span><br></pre></td></tr></table></figure>\n\n<p>8、作set2集合减去set集合的差集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiff set2 set</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8450fe8ff2015fec9784754d9b460b3c.png\" alt=\"img\"></p>\n<p>9、set和set2的交集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter set set2</span><br></pre></td></tr></table></figure>\n\n<p>10、set和set2作并集并去重</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunion set set2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5e3992493fbcd74ad3bb9ad33a3a6bd5.png\" alt=\"img\"></p>\n<h3 id=\"5-4、Hash集合类型\"><a href=\"#5-4、Hash集合类型\" class=\"headerlink\" title=\"5.4、Hash集合类型\"></a>5.4、Hash集合类型</h3><p>1、往hash集合中存放键值对数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset <span class=\"built_in\">hash</span> username mike</span><br></pre></td></tr></table></figure>\n\n<p>2、从hash集合中获取数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hget <span class=\"built_in\">hash</span> username</span><br></pre></td></tr></table></figure>\n\n<p>3、同时往hash集合中添加多个值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmset <span class=\"built_in\">hash</span> username jack age 2</span><br></pre></td></tr></table></figure>\n\n<p>4、同时往hash集合中获取多个值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmget <span class=\"built_in\">hash</span> username age</span><br></pre></td></tr></table></figure>\n\n<p>5、获取hash集合中所有的键值对</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgetall <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p>6、删除hash集合中指定的key字段</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdel <span class=\"built_in\">hash</span> username</span><br></pre></td></tr></table></figure>\n\n<p>7、获取hash集合的长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hlen <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p>8、判断hash集合中指定字段是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexists <span class=\"built_in\">hash</span> username</span><br></pre></td></tr></table></figure>\n\n<p>9、获取hash集合中所有的key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hvals <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p>10、获取hash集合中所有的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hkeys <span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n\n<p> 11、指定hash集合中指定增量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hincrby <span class=\"built_in\">hash</span> views 1</span><br></pre></td></tr></table></figure>\n\n<p>12、如果不存在则直接设置值，存在则设置失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hsetnx <span class=\"built_in\">hash</span> password 123456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5、Zset有序集合类型\"><a href=\"#5-5、Zset有序集合类型\" class=\"headerlink\" title=\"5.5、Zset有序集合类型\"></a>5.5、Zset有序集合类型</h3><p>1、添加一个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd zset 1 first</span><br></pre></td></tr></table></figure>\n\n<p>2、添加多个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd zset 2 second 3 third 4 four</span><br></pre></td></tr></table></figure>\n\n<p>3、获取zset集合中所有元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrange zset 0 -1</span><br></pre></td></tr></table></figure>\n\n<p>4、给zset集合中的元素从小到大排序，-inf：负无穷，+inf：正无穷</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore zset -<span class=\"built_in\">inf</span> +<span class=\"built_in\">inf</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f51753f18d1072bd46b76bbb9619abb1.png\" alt=\"img\"></p>\n<p>5、从小到大排序并输出键值</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore zset -<span class=\"built_in\">inf</span> +<span class=\"built_in\">inf</span> withscores</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/a2f0d9b51a992e9afc6075bda6436489.png\" alt=\"img\"></p>\n<p>6、指定负无穷到1的范围</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore zset -<span class=\"built_in\">inf</span> <span class=\"number\">1</span> withscores</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/052b347be2397cda1f81b741c872dd04.png\" alt=\"img\"></p>\n<p>7、移除zset集合中指定的元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrem zset four</span><br></pre></td></tr></table></figure>\n\n<p>8、查看zset集合中元素个数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zcard zset</span><br></pre></td></tr></table></figure>\n\n<p> 9、反转指定范围</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrevrange zset 1 2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5c690ddea425461422ac13ca7b68a141.png\" alt=\"img\"></p>\n"},{"title":"Python 和 Java 是两种流行的编程语言","date":"2024-11-24T10:36:18.363Z","_content":"Python 和 Java 是两种流行的编程语言，各有特点，适合不同的场景和应用领域。以下是它们的主要区别和用途：\n\n------\n\n## **1. 语言特点**\n\n| **特性**     | **Python**                       | **Java**                                |\n| ------------ | -------------------------------- | --------------------------------------- |\n| **语言类型** | 动态类型语言（解释型）           | 静态类型语言（编译型）                  |\n| **语法**     | 简洁易读，代码量少               | 严谨强类型，代码量多                    |\n| **运行机制** | 通过解释器逐行执行               | 编译为字节码后运行于 JVM（Java 虚拟机） |\n| **性能**     | 较慢，适合开发速度快的项目       | 性能更高，适合复杂、高性能应用          |\n| **跨平台**   | 支持多平台（需要 Python 解释器） | 原生跨平台，通过 JVM 实现               |\n\n------\n\n## **2. 学习难度**\n\n- **Python**：\n  - 适合初学者，语法接近自然语言。\n  - 错误提示和调试更直观。\n  - 动态类型赋值灵活，降低学习成本。\n- **Java**：\n  - 学习曲线稍陡峭，尤其是理解面向对象的概念。\n  - 强类型语言需要开发者明确指定数据类型，增加学习难度。\n  - 开发工具（如 IntelliJ IDEA、Eclipse）较复杂，但功能强大。\n\n------\n\n## **3. 常见用途**\n\n### **Python 的主要应用**\n\n1. **数据科学与人工智能**：\n   - 常用库：`numpy`、`pandas`、`matplotlib`、`scikit-learn`、`TensorFlow`、`PyTorch`。\n   - 应用场景：数据分析、机器学习、深度学习。\n2. **Web 开发**：\n   - 框架：`Django`、`Flask`、`FastAPI`。\n   - 快速搭建服务端和 REST API。\n3. **自动化与脚本**：\n   - 适合快速编写脚本以完成文件操作、数据处理、爬虫等任务。\n4. **科学计算与研究**：\n   - 科学家和研究人员常用来快速验证算法或模型。\n5. **爬虫与网络工具**：\n   - 库：`requests`、`BeautifulSoup`、`Scrapy`。\n   - 编写网络爬虫、自动化数据抓取。\n6. **物联网与嵌入式开发**：\n   - 在树莓派等嵌入式设备上运行 Python 脚本。\n\n------\n\n### **Java 的主要应用**\n\n1. **企业级应用开发**：\n   - Java 是银行、金融等行业的首选语言。\n   - 稳定、高性能，支持多线程。\n   - 框架：`Spring`、`Hibernate`。\n2. **Android 应用开发**：\n   - Java 是传统 Android 开发的主流语言（目前 Kotlin 更受欢迎，但 Java 仍然普遍使用）。\n3. **大型分布式系统**：\n   - 例如：`Apache Kafka`、`Hadoop` 等大数据生态系统。\n4. **Web 开发**：\n   - 后端框架：`Spring Boot`、`Struts`、`JavaServer Faces (JSF)`。\n5. **游戏开发**：\n   - Java 提供跨平台支持和性能优化，适合某些 2D/3D 游戏的开发。\n6. **嵌入式开发**：\n   - 在嵌入式系统中使用，尤其是 Java ME（Micro Edition）。\n\n------\n\n## **4. 对比总结**\n\n| **比较维度** | **Python**                                 | **Java**                        |\n| ------------ | ------------------------------------------ | ------------------------------- |\n| **开发速度** | 开发速度快，适合快速迭代                   | 开发速度较慢，代码量较多        |\n| **性能**     | 运行速度较慢，适合脚本、自动化             | 性能更高，适合高并发、大型应用  |\n| **适用项目** | 中小型项目、数据科学、人工智能、自动化工具 | 企业级应用、Android、分布式系统 |\n| **学习曲线** | 简单，适合初学者                           | 较难，需要理解更多编程概念      |\n| **生态**     | 丰富，尤其在数据科学领域                   | 成熟，企业支持广泛              |\n\n------\n\n## **5. 选择建议**\n\n- 如果你是初学者，或者需要快速开发工具和脚本，**选择 Python**。\n- 如果你的目标是开发高性能、稳定的企业级应用或 Android 项目，**选择 Java**。\n- 如果涉及到跨学科领域（如数据科学或物联网），Python 的生态更适合。\n- 如果未来想从事传统 IT 行业（如银行、金融、大型软件开发），Java 是必备技能之一。\n\n两种语言在实际开发中经常结合使用。例如，Java 负责核心系统，而 Python 用于数据分析或辅助工具开发。","source":"_posts/Python 和 Java 是两种流行的编程语言.md","raw":"---\ntitle: Python 和 Java 是两种流行的编程语言\ndate: 2024-11-24T18:36:18.363Z\ntags: []\ncategories: []\n---\nPython 和 Java 是两种流行的编程语言，各有特点，适合不同的场景和应用领域。以下是它们的主要区别和用途：\n\n------\n\n## **1. 语言特点**\n\n| **特性**     | **Python**                       | **Java**                                |\n| ------------ | -------------------------------- | --------------------------------------- |\n| **语言类型** | 动态类型语言（解释型）           | 静态类型语言（编译型）                  |\n| **语法**     | 简洁易读，代码量少               | 严谨强类型，代码量多                    |\n| **运行机制** | 通过解释器逐行执行               | 编译为字节码后运行于 JVM（Java 虚拟机） |\n| **性能**     | 较慢，适合开发速度快的项目       | 性能更高，适合复杂、高性能应用          |\n| **跨平台**   | 支持多平台（需要 Python 解释器） | 原生跨平台，通过 JVM 实现               |\n\n------\n\n## **2. 学习难度**\n\n- **Python**：\n  - 适合初学者，语法接近自然语言。\n  - 错误提示和调试更直观。\n  - 动态类型赋值灵活，降低学习成本。\n- **Java**：\n  - 学习曲线稍陡峭，尤其是理解面向对象的概念。\n  - 强类型语言需要开发者明确指定数据类型，增加学习难度。\n  - 开发工具（如 IntelliJ IDEA、Eclipse）较复杂，但功能强大。\n\n------\n\n## **3. 常见用途**\n\n### **Python 的主要应用**\n\n1. **数据科学与人工智能**：\n   - 常用库：`numpy`、`pandas`、`matplotlib`、`scikit-learn`、`TensorFlow`、`PyTorch`。\n   - 应用场景：数据分析、机器学习、深度学习。\n2. **Web 开发**：\n   - 框架：`Django`、`Flask`、`FastAPI`。\n   - 快速搭建服务端和 REST API。\n3. **自动化与脚本**：\n   - 适合快速编写脚本以完成文件操作、数据处理、爬虫等任务。\n4. **科学计算与研究**：\n   - 科学家和研究人员常用来快速验证算法或模型。\n5. **爬虫与网络工具**：\n   - 库：`requests`、`BeautifulSoup`、`Scrapy`。\n   - 编写网络爬虫、自动化数据抓取。\n6. **物联网与嵌入式开发**：\n   - 在树莓派等嵌入式设备上运行 Python 脚本。\n\n------\n\n### **Java 的主要应用**\n\n1. **企业级应用开发**：\n   - Java 是银行、金融等行业的首选语言。\n   - 稳定、高性能，支持多线程。\n   - 框架：`Spring`、`Hibernate`。\n2. **Android 应用开发**：\n   - Java 是传统 Android 开发的主流语言（目前 Kotlin 更受欢迎，但 Java 仍然普遍使用）。\n3. **大型分布式系统**：\n   - 例如：`Apache Kafka`、`Hadoop` 等大数据生态系统。\n4. **Web 开发**：\n   - 后端框架：`Spring Boot`、`Struts`、`JavaServer Faces (JSF)`。\n5. **游戏开发**：\n   - Java 提供跨平台支持和性能优化，适合某些 2D/3D 游戏的开发。\n6. **嵌入式开发**：\n   - 在嵌入式系统中使用，尤其是 Java ME（Micro Edition）。\n\n------\n\n## **4. 对比总结**\n\n| **比较维度** | **Python**                                 | **Java**                        |\n| ------------ | ------------------------------------------ | ------------------------------- |\n| **开发速度** | 开发速度快，适合快速迭代                   | 开发速度较慢，代码量较多        |\n| **性能**     | 运行速度较慢，适合脚本、自动化             | 性能更高，适合高并发、大型应用  |\n| **适用项目** | 中小型项目、数据科学、人工智能、自动化工具 | 企业级应用、Android、分布式系统 |\n| **学习曲线** | 简单，适合初学者                           | 较难，需要理解更多编程概念      |\n| **生态**     | 丰富，尤其在数据科学领域                   | 成熟，企业支持广泛              |\n\n------\n\n## **5. 选择建议**\n\n- 如果你是初学者，或者需要快速开发工具和脚本，**选择 Python**。\n- 如果你的目标是开发高性能、稳定的企业级应用或 Android 项目，**选择 Java**。\n- 如果涉及到跨学科领域（如数据科学或物联网），Python 的生态更适合。\n- 如果未来想从事传统 IT 行业（如银行、金融、大型软件开发），Java 是必备技能之一。\n\n两种语言在实际开发中经常结合使用。例如，Java 负责核心系统，而 Python 用于数据分析或辅助工具开发。","slug":"Python 和 Java 是两种流行的编程语言","published":1,"updated":"2024-11-25T11:44:04.476Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscm002imbs61ntp9n2o","content":"<p>Python 和 Java 是两种流行的编程语言，各有特点，适合不同的场景和应用领域。以下是它们的主要区别和用途：</p>\n<hr>\n<h2 id=\"1-语言特点\"><a href=\"#1-语言特点\" class=\"headerlink\" title=\"1. 语言特点\"></a><strong>1. 语言特点</strong></h2><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>Python</strong></th>\n<th><strong>Java</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>语言类型</strong></td>\n<td>动态类型语言（解释型）</td>\n<td>静态类型语言（编译型）</td>\n</tr>\n<tr>\n<td><strong>语法</strong></td>\n<td>简洁易读，代码量少</td>\n<td>严谨强类型，代码量多</td>\n</tr>\n<tr>\n<td><strong>运行机制</strong></td>\n<td>通过解释器逐行执行</td>\n<td>编译为字节码后运行于 JVM（Java 虚拟机）</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>较慢，适合开发速度快的项目</td>\n<td>性能更高，适合复杂、高性能应用</td>\n</tr>\n<tr>\n<td><strong>跨平台</strong></td>\n<td>支持多平台（需要 Python 解释器）</td>\n<td>原生跨平台，通过 JVM 实现</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"2-学习难度\"><a href=\"#2-学习难度\" class=\"headerlink\" title=\"2. 学习难度\"></a><strong>2. 学习难度</strong></h2><ul>\n<li><strong>Python</strong>：<ul>\n<li>适合初学者，语法接近自然语言。</li>\n<li>错误提示和调试更直观。</li>\n<li>动态类型赋值灵活，降低学习成本。</li>\n</ul>\n</li>\n<li><strong>Java</strong>：<ul>\n<li>学习曲线稍陡峭，尤其是理解面向对象的概念。</li>\n<li>强类型语言需要开发者明确指定数据类型，增加学习难度。</li>\n<li>开发工具（如 IntelliJ IDEA、Eclipse）较复杂，但功能强大。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-常见用途\"><a href=\"#3-常见用途\" class=\"headerlink\" title=\"3. 常见用途\"></a><strong>3. 常见用途</strong></h2><h3 id=\"Python-的主要应用\"><a href=\"#Python-的主要应用\" class=\"headerlink\" title=\"Python 的主要应用\"></a><strong>Python 的主要应用</strong></h3><ol>\n<li><strong>数据科学与人工智能</strong>：<ul>\n<li>常用库：<code>numpy</code>、<code>pandas</code>、<code>matplotlib</code>、<code>scikit-learn</code>、<code>TensorFlow</code>、<code>PyTorch</code>。</li>\n<li>应用场景：数据分析、机器学习、深度学习。</li>\n</ul>\n</li>\n<li><strong>Web 开发</strong>：<ul>\n<li>框架：<code>Django</code>、<code>Flask</code>、<code>FastAPI</code>。</li>\n<li>快速搭建服务端和 REST API。</li>\n</ul>\n</li>\n<li><strong>自动化与脚本</strong>：<ul>\n<li>适合快速编写脚本以完成文件操作、数据处理、爬虫等任务。</li>\n</ul>\n</li>\n<li><strong>科学计算与研究</strong>：<ul>\n<li>科学家和研究人员常用来快速验证算法或模型。</li>\n</ul>\n</li>\n<li><strong>爬虫与网络工具</strong>：<ul>\n<li>库：<code>requests</code>、<code>BeautifulSoup</code>、<code>Scrapy</code>。</li>\n<li>编写网络爬虫、自动化数据抓取。</li>\n</ul>\n</li>\n<li><strong>物联网与嵌入式开发</strong>：<ul>\n<li>在树莓派等嵌入式设备上运行 Python 脚本。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"Java-的主要应用\"><a href=\"#Java-的主要应用\" class=\"headerlink\" title=\"Java 的主要应用\"></a><strong>Java 的主要应用</strong></h3><ol>\n<li><strong>企业级应用开发</strong>：<ul>\n<li>Java 是银行、金融等行业的首选语言。</li>\n<li>稳定、高性能，支持多线程。</li>\n<li>框架：<code>Spring</code>、<code>Hibernate</code>。</li>\n</ul>\n</li>\n<li><strong>Android 应用开发</strong>：<ul>\n<li>Java 是传统 Android 开发的主流语言（目前 Kotlin 更受欢迎，但 Java 仍然普遍使用）。</li>\n</ul>\n</li>\n<li><strong>大型分布式系统</strong>：<ul>\n<li>例如：<code>Apache Kafka</code>、<code>Hadoop</code> 等大数据生态系统。</li>\n</ul>\n</li>\n<li><strong>Web 开发</strong>：<ul>\n<li>后端框架：<code>Spring Boot</code>、<code>Struts</code>、<code>JavaServer Faces (JSF)</code>。</li>\n</ul>\n</li>\n<li><strong>游戏开发</strong>：<ul>\n<li>Java 提供跨平台支持和性能优化，适合某些 2D&#x2F;3D 游戏的开发。</li>\n</ul>\n</li>\n<li><strong>嵌入式开发</strong>：<ul>\n<li>在嵌入式系统中使用，尤其是 Java ME（Micro Edition）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-对比总结\"><a href=\"#4-对比总结\" class=\"headerlink\" title=\"4. 对比总结\"></a><strong>4. 对比总结</strong></h2><table>\n<thead>\n<tr>\n<th><strong>比较维度</strong></th>\n<th><strong>Python</strong></th>\n<th><strong>Java</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开发速度</strong></td>\n<td>开发速度快，适合快速迭代</td>\n<td>开发速度较慢，代码量较多</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>运行速度较慢，适合脚本、自动化</td>\n<td>性能更高，适合高并发、大型应用</td>\n</tr>\n<tr>\n<td><strong>适用项目</strong></td>\n<td>中小型项目、数据科学、人工智能、自动化工具</td>\n<td>企业级应用、Android、分布式系统</td>\n</tr>\n<tr>\n<td><strong>学习曲线</strong></td>\n<td>简单，适合初学者</td>\n<td>较难，需要理解更多编程概念</td>\n</tr>\n<tr>\n<td><strong>生态</strong></td>\n<td>丰富，尤其在数据科学领域</td>\n<td>成熟，企业支持广泛</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"5-选择建议\"><a href=\"#5-选择建议\" class=\"headerlink\" title=\"5. 选择建议\"></a><strong>5. 选择建议</strong></h2><ul>\n<li>如果你是初学者，或者需要快速开发工具和脚本，<strong>选择 Python</strong>。</li>\n<li>如果你的目标是开发高性能、稳定的企业级应用或 Android 项目，<strong>选择 Java</strong>。</li>\n<li>如果涉及到跨学科领域（如数据科学或物联网），Python 的生态更适合。</li>\n<li>如果未来想从事传统 IT 行业（如银行、金融、大型软件开发），Java 是必备技能之一。</li>\n</ul>\n<p>两种语言在实际开发中经常结合使用。例如，Java 负责核心系统，而 Python 用于数据分析或辅助工具开发。</p>\n","excerpt":"","more":"<p>Python 和 Java 是两种流行的编程语言，各有特点，适合不同的场景和应用领域。以下是它们的主要区别和用途：</p>\n<hr>\n<h2 id=\"1-语言特点\"><a href=\"#1-语言特点\" class=\"headerlink\" title=\"1. 语言特点\"></a><strong>1. 语言特点</strong></h2><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>Python</strong></th>\n<th><strong>Java</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>语言类型</strong></td>\n<td>动态类型语言（解释型）</td>\n<td>静态类型语言（编译型）</td>\n</tr>\n<tr>\n<td><strong>语法</strong></td>\n<td>简洁易读，代码量少</td>\n<td>严谨强类型，代码量多</td>\n</tr>\n<tr>\n<td><strong>运行机制</strong></td>\n<td>通过解释器逐行执行</td>\n<td>编译为字节码后运行于 JVM（Java 虚拟机）</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>较慢，适合开发速度快的项目</td>\n<td>性能更高，适合复杂、高性能应用</td>\n</tr>\n<tr>\n<td><strong>跨平台</strong></td>\n<td>支持多平台（需要 Python 解释器）</td>\n<td>原生跨平台，通过 JVM 实现</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"2-学习难度\"><a href=\"#2-学习难度\" class=\"headerlink\" title=\"2. 学习难度\"></a><strong>2. 学习难度</strong></h2><ul>\n<li><strong>Python</strong>：<ul>\n<li>适合初学者，语法接近自然语言。</li>\n<li>错误提示和调试更直观。</li>\n<li>动态类型赋值灵活，降低学习成本。</li>\n</ul>\n</li>\n<li><strong>Java</strong>：<ul>\n<li>学习曲线稍陡峭，尤其是理解面向对象的概念。</li>\n<li>强类型语言需要开发者明确指定数据类型，增加学习难度。</li>\n<li>开发工具（如 IntelliJ IDEA、Eclipse）较复杂，但功能强大。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-常见用途\"><a href=\"#3-常见用途\" class=\"headerlink\" title=\"3. 常见用途\"></a><strong>3. 常见用途</strong></h2><h3 id=\"Python-的主要应用\"><a href=\"#Python-的主要应用\" class=\"headerlink\" title=\"Python 的主要应用\"></a><strong>Python 的主要应用</strong></h3><ol>\n<li><strong>数据科学与人工智能</strong>：<ul>\n<li>常用库：<code>numpy</code>、<code>pandas</code>、<code>matplotlib</code>、<code>scikit-learn</code>、<code>TensorFlow</code>、<code>PyTorch</code>。</li>\n<li>应用场景：数据分析、机器学习、深度学习。</li>\n</ul>\n</li>\n<li><strong>Web 开发</strong>：<ul>\n<li>框架：<code>Django</code>、<code>Flask</code>、<code>FastAPI</code>。</li>\n<li>快速搭建服务端和 REST API。</li>\n</ul>\n</li>\n<li><strong>自动化与脚本</strong>：<ul>\n<li>适合快速编写脚本以完成文件操作、数据处理、爬虫等任务。</li>\n</ul>\n</li>\n<li><strong>科学计算与研究</strong>：<ul>\n<li>科学家和研究人员常用来快速验证算法或模型。</li>\n</ul>\n</li>\n<li><strong>爬虫与网络工具</strong>：<ul>\n<li>库：<code>requests</code>、<code>BeautifulSoup</code>、<code>Scrapy</code>。</li>\n<li>编写网络爬虫、自动化数据抓取。</li>\n</ul>\n</li>\n<li><strong>物联网与嵌入式开发</strong>：<ul>\n<li>在树莓派等嵌入式设备上运行 Python 脚本。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"Java-的主要应用\"><a href=\"#Java-的主要应用\" class=\"headerlink\" title=\"Java 的主要应用\"></a><strong>Java 的主要应用</strong></h3><ol>\n<li><strong>企业级应用开发</strong>：<ul>\n<li>Java 是银行、金融等行业的首选语言。</li>\n<li>稳定、高性能，支持多线程。</li>\n<li>框架：<code>Spring</code>、<code>Hibernate</code>。</li>\n</ul>\n</li>\n<li><strong>Android 应用开发</strong>：<ul>\n<li>Java 是传统 Android 开发的主流语言（目前 Kotlin 更受欢迎，但 Java 仍然普遍使用）。</li>\n</ul>\n</li>\n<li><strong>大型分布式系统</strong>：<ul>\n<li>例如：<code>Apache Kafka</code>、<code>Hadoop</code> 等大数据生态系统。</li>\n</ul>\n</li>\n<li><strong>Web 开发</strong>：<ul>\n<li>后端框架：<code>Spring Boot</code>、<code>Struts</code>、<code>JavaServer Faces (JSF)</code>。</li>\n</ul>\n</li>\n<li><strong>游戏开发</strong>：<ul>\n<li>Java 提供跨平台支持和性能优化，适合某些 2D&#x2F;3D 游戏的开发。</li>\n</ul>\n</li>\n<li><strong>嵌入式开发</strong>：<ul>\n<li>在嵌入式系统中使用，尤其是 Java ME（Micro Edition）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-对比总结\"><a href=\"#4-对比总结\" class=\"headerlink\" title=\"4. 对比总结\"></a><strong>4. 对比总结</strong></h2><table>\n<thead>\n<tr>\n<th><strong>比较维度</strong></th>\n<th><strong>Python</strong></th>\n<th><strong>Java</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开发速度</strong></td>\n<td>开发速度快，适合快速迭代</td>\n<td>开发速度较慢，代码量较多</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>运行速度较慢，适合脚本、自动化</td>\n<td>性能更高，适合高并发、大型应用</td>\n</tr>\n<tr>\n<td><strong>适用项目</strong></td>\n<td>中小型项目、数据科学、人工智能、自动化工具</td>\n<td>企业级应用、Android、分布式系统</td>\n</tr>\n<tr>\n<td><strong>学习曲线</strong></td>\n<td>简单，适合初学者</td>\n<td>较难，需要理解更多编程概念</td>\n</tr>\n<tr>\n<td><strong>生态</strong></td>\n<td>丰富，尤其在数据科学领域</td>\n<td>成熟，企业支持广泛</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"5-选择建议\"><a href=\"#5-选择建议\" class=\"headerlink\" title=\"5. 选择建议\"></a><strong>5. 选择建议</strong></h2><ul>\n<li>如果你是初学者，或者需要快速开发工具和脚本，<strong>选择 Python</strong>。</li>\n<li>如果你的目标是开发高性能、稳定的企业级应用或 Android 项目，<strong>选择 Java</strong>。</li>\n<li>如果涉及到跨学科领域（如数据科学或物联网），Python 的生态更适合。</li>\n<li>如果未来想从事传统 IT 行业（如银行、金融、大型软件开发），Java 是必备技能之一。</li>\n</ul>\n<p>两种语言在实际开发中经常结合使用。例如，Java 负责核心系统，而 Python 用于数据分析或辅助工具开发。</p>\n"},{"title":"QX 懒人配置","date":"2024-09-12T04:31:57.338Z","_content":"```\n# 配置名称：QX 懒人配置\n# 配置作者: 帝少\n# 更新时间: 2023-09-16 19:41\n# 反馈邮箱：dishao@msn.com\n# 更新地址：https://github.com/dishao123/rules_script\n# TG频道：https://t.me/dishao_channel\n# TG群组：https://t.me/dishao_chat\n\n\n[general]\n# 配置图标\nprofile_img_url = https://github.githubassets.com/images/modules/site/integrators/google.png\n# 代理测速 URL\nserver_check_url = http://www.apple.com/library/test/success.html\n# 测速超时（ms）\nserver_check_timeout = 2000\n# UDP 策略\nfallback_udp_policy = direct\n# UDP 白名单\nudp_whitelist = 1-442, 444-65535\n# 节点信息显示\ngeo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/IP_API.js\n# 资源解析器\nresource_parser_url = https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js\n# 跳过代理\nexcluded_routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 192.168.122.1/32, 193.168.0.1/32, 198.51.100.0/24, 24.105.30.129/32, 203.0.113.0/24, 224.0.0.0/4, 239.255.255.250/32, 255.255.255.255/32\n# DNS 排除列表\ndns_exclusion_list = *.lan, *.direct, cable.auth.com, *.msftconnecttest.com, *.msftncsi.com, network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, stun.*, global.turn.twilio.com, global.stun.twilio.com, app.yinxiang.com, injections.adguard.org, local.adguard.org, cable.auth.com, localhost.*.qq.com, localhost.*.weixin.qq.com, *.logon.battlenet.com.cn, *.logon.battle.net, *.blzstatic.cn, music.163.com, *.music.163.com, *.126.net, musicapi.taihe.com, music.taihe.com, songsearch.kugou.com, trackercdn.kugou.com, *.kuwo.cn, api-jooxtt.sanook.com, api.joox.com, joox.com, y.qq.com, *.y.qq.com, streamoc.music.tc.qq.com, mobileoc.music.tc.qq.com, isure.stream.qqmusic.qq.com, dl.stream.qqmusic.qq.com, aqqmusic.tc.qq.com, amobile.music.tc.qq.com, *.xiami.com, *.music.migu.cn, music.migu.cn, proxy.golang.org, *.mcdn.bilivideo.cn, *.cmpassport.com, id6.me, open.e.189.cn, mdn.open.wo.cn, opencloud.wostore.cn, auth.wosms.cn, *.jegotrip.com.cn, *.icitymobile.mobi, *.pingan.com.cn, *.cmbchina.com, pool.ntp.org, *.pool.ntp.org, ntp.*.com, time.*.com, ntp?.*.com, time?.*.com, time.*.gov, time.*.edu.cn, *.ntp.org.cn, PDC._msDCS.*.*, DC._msDCS.*.*, GC._msDCS.*.*\n\n[dns]\nno-system\nno-ipv6\nserver = 114.114.114.114\nserver = 119.29.29.29\nserver = 119.28.28.28\nserver = 223.5.5.5\nserver = 223.6.6.6\nserver = 1.1.1.1\nserver = 1.0.0.1\nserver = 8.8.8.8\nserver = 8.8.4.4\nserver = /*.id.ui.direct/system\nserver = /unifi.ui.com/system\nserver = /unifi.local/system\nserver = /networks.unifi.ui.com/system\nserver = /amplifi.lan/system\nserver = /router.synology.com/system\nserver = /sila.razer.com/system\nserver = /router.asus.com/system\nserver = /routerlogin.net/system\nserver = /orbilogin.com/system\nserver = /www.LinksysSmartWiFi.com/system\nserver = /LinksysSmartWiFi.com/system\nserver = /myrouter.local/system\nserver = /instant.arubanetworks.com/system\nserver = /setmeup.arubanetworks.com/system\nserver = /www.miwifi.com/system\nserver = /miwifi.com/system\nserver = /mediarouter.home/system\nserver = /tplogin.cn/system\nserver = /tplinklogin.net/system\nserver = /tplinkwifi.net/system\nserver = /melogin.cn/system\nserver = /falogin.cn/system\nserver = /tendawifi.com/system\nserver = /leike.cc/system\nserver = /zte.home/system\nserver = /p.to/system\nserver = /phicomm.me/system\nserver = /hiwifi.com/system\nserver = /peiluyou.com/system\nserver = /_hotspot_.m2m/system\nserver = /hotspot.cslwifi.com/system\nserver = /*.163.com/119.29.29.29\nserver = /*.126.com/119.29.29.29\nserver = /*.126.net/119.29.29.29\nserver = /*.127.net/119.29.29.29\nserver = /*.taobao.com/223.5.5.5\nserver = /*.tmall.com/223.5.5.5\nserver = /*.alipay.com/223.5.5.5\nserver = /*.alicdn.com/223.5.5.5\nserver = /*.aliyun.com/223.5.5.5\nserver = /*.jd.com/119.28.28.28\nserver = /*.tencent.com/119.28.28.28\nserver = /*.weixin.com/119.28.28.28\nserver = /*.bilibili.com/119.29.29.29\nserver = /*.netease.com/119.29.29.29\nserver = /*.mi.com/119.29.29.29\nserver = /*.xiaomi.com/119.29.29.29\n\n[policy]\nurl-latency-benchmark=优选线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png\navailable=可用线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static_1.png\nstatic=全球加速, proxy, 优选线路, 可用线路, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Rocket.png\nstatic=手动选择, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Clubhouse.png\nstatic=国际社交, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/telegram(1).png\nstatic=Google, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png\nstatic=Git, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/github(1).png\nstatic=Apple, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple.png\nstatic=Microsoft, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png\nstatic=TikTok, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png\nstatic=YouTube, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png\nstatic=Speedtest, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png\nstatic=Netflix, server-tag-regex=^(?=.*((?i)流媒体|奈飞|奶飞|解锁|宽频|流量|(\\b(Netflix|NF|IDC)\\b)))(?!.*((?i)回国|校园|游戏|加群|签到|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png\nstatic=港澳台剧, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili.png\nstatic=国际媒体, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Streaming.png\nstatic=屏蔽IOS更新, direct, proxy, reject, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_Update.png\nstatic=国内线路, server-tag-regex=^(?=.*((?i)🇨🇳|中|中国|国内|大陆|内地|(\\b(CN|CH|China)\\b)))(?!.*((?i)校园|游戏|香|台|澳|美|新|日|韩|迪|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/CN.png\nurl-latency-benchmark=香港线路, server-tag-regex=^(?=.*((?i)🇭🇰|香|香港|(\\b(HK|Hong)\\b)))(?!.*((?i)回国|校园|游戏|台|日|韩|新|美|迪|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png\nurl-latency-benchmark=台湾线路, server-tag-regex=^(?=.*((?i)🇹🇼|台|台湾|(\\b(TW|Tai|Taiwan)\\b)))(?!.*((?i)回国|校园|游戏|港|日|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png\nurl-latency-benchmark=澳门线路, server-tag-regex=^(?=.*((?i)🇲🇴|澳|澳门|(\\b(MO|Oman)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|美|澳大利亚|澳州🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/MO.png\nurl-latency-benchmark=美国线路, server-tag-regex=^(?=.*((?i)🇺🇸|美|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|阿拉斯加|旧金山|(\\b(US|States|American|United States)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|马|俄罗斯|加拿大|加蓬|加纳|牙买加|马达加斯加|尼加拉瓜|塞内加尔|新加坡|汤加|孟加拉国|保加利亚|哥斯达黎加|多米尼加|加群|加频道|@|🎮|(\\b(GAME|TG|COM)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png\nurl-latency-benchmark=狮城线路, server-tag-regex=^(?=.*((?i)🇸🇬|新|狮|獅|新加坡|(\\b(SG|Singapore)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|韩|美|无法|公告|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png\nurl-latency-benchmark=日本线路, server-tag-regex=^(?=.*((?i)🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|(\\b(JP|Japan)\\b)))(?!.*((?i)回国|校园|游戏|港|台|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png\nurl-latency-benchmark=韩国线路, server-tag-regex=^(?=.*((?i)🇰🇷|韩|韓|韩国|首尔|(\\b(KR|Korea)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png\nstatic=其他国家, server-tag-regex=^(?=.*(.*))(?!.*((?i)防止|倒卖|通知|贩卖|工单|联系|已用|过期|备用|版本|下次|机场|到期|官址|流量|订阅|获取|客服|循环|返利|邀请|中国|国内|大陆|香|台|澳门|狮|日本|韩国|新加坡|美国|网易|洛|拉|谷|勒|凤|费|圣|东|埼|澳门|群|网址|网站|官方|无法|公告|一元|距离|邮箱|套餐|节点版本|@|🇨🇳|🇭🇰|🇺🇸|🇸🇬|🇰🇷|🇯🇵|🇹🇼|🎮|🎧|🎵|🎶|(\\b(CN|CH|SG|HK|KR|TW|JP|MO|US|China|Macao|Hong|TaiWan|States|American|Japan|Singapore|Korea|Music|Node|URL|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/XD.png\nstatic=漏网之鱼, direct, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Alpha/Socloud.png\nstatic=允许访问, direct, proxy, reject, 手动选择, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static.png\nstatic=拒绝访问, reject, direct, proxy, 手动选择, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Adblock.png\n\n[server_local]\n\n[server_remote]\nhttps://raw.githubusercontent.com/dishao123/rules_script/main/QuantumultX/policy-test.snippet, tag=策略组正则测试[一般人用不着], img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Quantumult_X.png, update-interval=86400, opt-parser=true, enabled=false\n\n[filter_local]\n# 知乎AD屏蔽,以下规则请放置在filter_local最顶部\nhost, 118.89.204.198, reject\nhost-keyword, 118.89.204.198, reject\nip-cidr, 118.89.204.198/32, reject\nhost, appcloud2.in.zhihu.com, reject\nhost, mqtt.zhihu.com, reject\nhost, sugar.zhihu.com, reject\nuser-agent, AVOS*, reject\n# 苹果消息推送服务\nhost-suffix, push.apple.com, direct\nhost, identity.apple.com, direct\nip-cidr, 17.0.0.0/8, direct\nip-cidr, 17.249.0.0/16, direct\nip-cidr, 17.252.0.0/16, direct\nip-cidr, 17.57.144.0/22, direct\nip-cidr, 17.188.128.0/18, direct\nip-cidr, 17.188.20.0/2, direct\nip6-cidr, 2620:149:a44::/48, direct\nip6-cidr, 2403:300:a42::/48, direct\nip6-cidr, 2403:300:a51::/48, direct\nip6-cidr, 2a01:b740:a42::/48, direct\n# 银行直连\nhost-suffix, 95599.cn, direct\nhost-suffix, abchina.com, direct\nhost-suffix, bscabank.com, direct\nhost-suffix, openaboc.cn, direct\nhost-suffix, openaboc.com, direct\nhost-suffix, openaboc.com.cn, direct\n# 一些比较容易忽视的分流\nhost, ad.12306.cn, direct\nhost, sdkapp.uve.weibo.com, direct\n# 酷安AD处理\nhost-keyword, pangolin, reject\nhost-keyword, pglstat, reject\n# 贴吧AD处理\nip-cidr, 180.76.76.200/32, reject\nhost, im.tieba.baidu.com, reject\n# 爱思助手AD处理\nhost, d.image.i4.cn, reject\n# 其他AD处理\nhost-keyword, adview, reject\nhost-suffix, gdt.qq.com, reject\nhost-suffix, u3.ucweb.com, reject\nhost, amdc.m.taobao.com, reject\n# 避免迅雷版权问题\nhost, hub5idx.v6.shub.sandai.net, reject\nhost, hub5emu.v6.shub.sandai.net, reject\nhost, hub5btmain.v6.shub.sandai.net, reject\n# 绕过企业证书过期\nhost, ocsp.apple.com, reject\n# B站自动换区\nip-cidr, 203.107.1.1/24, reject\n# 本地局域网\nip-cidr, 10.0.0.0/8, direct\nip-cidr, 127.0.0.0/8, direct\nip-cidr, 172.16.0.0/12, direct\nip-cidr, 192.168.0.0/16, direct\nip-cidr, 224.0.0.0/24, direct\nip-cidr, 182.254.116.0/24, direct\nip6-cidr, fe80::/10, direct\n# GEOIP IP库分流\ngeoip, cn, direct\n# 兜里分流\nfinal, 漏网之鱼\n\n[filter_remote]\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Direct/Direct.list, tag=规则修正@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Lan/Lan.list, tag=本地局域网@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-surge2.txt, tag=广告终结者@anti-ad, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Privacy/Privacy.list, tag=隐私保护@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Hijacking/Hijacking.list, tag=反劫持@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/mieqq/mieqq/master/In-AppTracker.txt, tag=应用内防追踪@mieqq, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/WeChat/WeChat.list, tag=微信直连@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/SystemOTA/SystemOTA.list, tag=🈲IOS系统更新@blackmatrix7, force-policy=屏蔽IOS更新, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Microsoft/Microsoft.list, tag=Microsoft@blackmatrix7, force-policy=Microsoft, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Apple/Apple.list, tag=Apple@blackmatrix7, force-policy=Apple, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GoogleVoice/GoogleVoice.list, tag=GoogleVoice@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/OpenAI/OpenAI.list, tag=OpenAI@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Google/Google.list, tag=Google@blackmatrix7, force-policy=Google, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitLab/GitLab.list, tag=GitLab@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitBook/GitBook.list, tag=GitBook@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitHub/GitHub.list, tag=GitHub@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Speedtest/Speedtest.list, tag=Speedtest@blackmatrix7, force-policy=Speedtest, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.Telegram.list, tag=Telegram@VirgilClyne, force-policy=国际社交, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Instagram/Instagram.list, tag=Instagram@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Discord/Discord.list, tag=Discord@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/PotatoChat/PotatoChat.list, tag=Potato@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Facebook/Facebook.list, tag=Facebook@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Twitter/Twitter.list, tag=Twitter(X)@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Spotify/Spotify.list, tag=Spotify@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/TikTok/TikTok.list, tag=TikTok@blackmatrix7, force-policy=TikTok, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/YouTube/YouTube.list, tag=YuoTube@blackmatrix7, force-policy=YouTube, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Netflix/Netflix.list, tag=Netflix@blackmatrix7, force-policy=Netflix, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/BiliBili/BiliBili.list, tag=BiliBili@blackmatrix7, force-policy=港澳台剧, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GlobalMedia/GlobalMedia.list, tag=国外影视@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Global/Global.list, tag=国外网站@blackmatrix7, force-policy=全球加速, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/China/China.list, tag=国内网站@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.China.list, tag=国内ASN@VirgilClyne, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt, tag=China IPv4@17mon, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/gaoyifan/china-operator-ip/ip-lists/chinanet6.txt, tag=China IPv6@gaoyifan, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true\n\n[rewrite_local]\n\n[rewrite_remote]\nhttps://raw.githubusercontent.com/chxm1023/Script_X/main/Collections.conf, tag=app解锁合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/chongxie.txt, tag=去广告合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/cleanup.snippet, tag=App&小程序净化合集@fmz200, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/weibo.snippet, tag=微博国内版去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=false\nhttps://raw.githubusercontent.com/Keywos/rule/main/module/weibous.sgmodule, tag=微博国际版去广告@keywos, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/zhihu.snippet, tag=知乎去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/cloudmusic.snippet, tag=网易云去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/amap.snippet, tag=高德地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/bdmap.snippet, tag=百度地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/WebAdBlock.conf, tag=影视网站去广告@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=神机重定向@DivineEngine, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Q-Search.conf, tag=Safari超级搜索@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/EndlessGoogle.conf, tag=Google自动翻页@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false\nhttps://raw.githubusercontent.com/id77/QuantumultX/master/rewrite/Youtube_CC.conf#out=Hant, tag=油管字幕翻译@id77, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/Orz-3/QuantumultX/master/Netflix_ratings.conf, tag=Netflix评分@Orz-3, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/Orz-3/QuantumultX/master/JD_TB_price.conf, tag=比价脚本@Orz-3, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/Orz-3/QuantumultX/master/TikTok.conf, tag=Tiktok解锁[需旧版V21]@Orz-3, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/NobyDa/Script/master/TestFlight/TestFlightAccount.js, tag=Testflight解锁限制@NobyDa, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/zZPiglet/Task/master/UnblockURLinWeChat.conf, tag=解除微信链接屏蔽@zZPiglet, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BaiduCloud.conf, tag=百度网盘倍速@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BilibiliAutoRegion.conf, tag=B站换区脚本[不会配置boxjs请勿勾选]@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Douban.conf, tag=豆瓣电影网页快捷跳转@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.conf, tag=boxjs@chavyleung, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/QX.snippet, tag=Sub-Store@Peng-YM, update-interval=172800, opt-parser=false, enabled=true\n\n[task_local]\nevent-interaction https://raw.githubusercontent.com/xiaomaoJT/QxScript/main/rewrite/script/txt/ipinfo.txt, tag=节点位置查询, img-url=https://raw.githubusercontent.com/tugepaopao/Image-Storage/master/cartoon/Cute/3icon.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/scripts/server_info.js, tag=节点家宽查询, img-url=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/icon/qure/color/Back.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/server-info-plus.js, tag=节点信息Plus, img-url=info.bubble.system.system, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/geo_location.js, tag=GeoIP 查询, img-url=location.fill.viewfinder.system, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/traffic-check.js, tag=策略流量查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Download.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag=流媒体-解锁查询, img-url=checkmark.seal.system, enabled=true\nevent-interaction https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Resource/Script/Node_detection_tool/CloudflareSpeedtest.js, tag=Speed测速, img-url=bolt.square.fill.system, enabled=true\nevent-interaction https://raw.githubusercontent.com/getsomecat/Qx/main/Net_Speed.js, tag=⚡️ Net Speed, img-url=bolt.square.fill.system, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-google.js, tag=Google 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-ytb.js, tag=YouTube 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/ytb-ui-check.js, tag=YouTube 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-nf.js, tag=Netflix 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/nf-ui-check.js, tag=Netflix 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-disneyplus.js, tag=Disneyᐩ 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/disney-ui-check.js, tag=Disneyᐩ 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=false\n5 0 * * * https://raw.githubusercontent.com/unknowntokyo/surge-list/master/X/dns-clear-cache.js, tag=𝑫𝒏𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true\n5 0 * * * https://raw.githubusercontent.com/chavyleung/scripts/master/box/scripts/boxjs.revert.usercfgs.httpbackend.js, tag=𝑩𝒐𝒙𝑱𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true\n5 0 * * * https://raw.githubusercontent.com/sub-store-org/Sub-Store/master/scripts/revert.js, tag=𝑺𝒖𝒃-𝑺𝒕𝒐𝒓𝒆 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true\n\n[http_backend]\n\n[mitm]\n# 跳过证书验证\nskip_validating_cert = true\n# 验证 SNI 域名\nforce_sni_domain_name = false\n# 简单主机名\nsimple_cert_hostname = sub.store\n# 主机名\nhostname = -weather-data.apple.com, -buy.itunes.apple.com\n# 证书\npassphrase = \np12 = \n```","source":"_posts/QX 懒人配置.md","raw":"---\ntitle: QX 懒人配置\ndate: 2024-09-12T12:31:57.338Z\ntags: []\ncategories: []\n---\n```\n# 配置名称：QX 懒人配置\n# 配置作者: 帝少\n# 更新时间: 2023-09-16 19:41\n# 反馈邮箱：dishao@msn.com\n# 更新地址：https://github.com/dishao123/rules_script\n# TG频道：https://t.me/dishao_channel\n# TG群组：https://t.me/dishao_chat\n\n\n[general]\n# 配置图标\nprofile_img_url = https://github.githubassets.com/images/modules/site/integrators/google.png\n# 代理测速 URL\nserver_check_url = http://www.apple.com/library/test/success.html\n# 测速超时（ms）\nserver_check_timeout = 2000\n# UDP 策略\nfallback_udp_policy = direct\n# UDP 白名单\nudp_whitelist = 1-442, 444-65535\n# 节点信息显示\ngeo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/IP_API.js\n# 资源解析器\nresource_parser_url = https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js\n# 跳过代理\nexcluded_routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 192.168.122.1/32, 193.168.0.1/32, 198.51.100.0/24, 24.105.30.129/32, 203.0.113.0/24, 224.0.0.0/4, 239.255.255.250/32, 255.255.255.255/32\n# DNS 排除列表\ndns_exclusion_list = *.lan, *.direct, cable.auth.com, *.msftconnecttest.com, *.msftncsi.com, network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, stun.*, global.turn.twilio.com, global.stun.twilio.com, app.yinxiang.com, injections.adguard.org, local.adguard.org, cable.auth.com, localhost.*.qq.com, localhost.*.weixin.qq.com, *.logon.battlenet.com.cn, *.logon.battle.net, *.blzstatic.cn, music.163.com, *.music.163.com, *.126.net, musicapi.taihe.com, music.taihe.com, songsearch.kugou.com, trackercdn.kugou.com, *.kuwo.cn, api-jooxtt.sanook.com, api.joox.com, joox.com, y.qq.com, *.y.qq.com, streamoc.music.tc.qq.com, mobileoc.music.tc.qq.com, isure.stream.qqmusic.qq.com, dl.stream.qqmusic.qq.com, aqqmusic.tc.qq.com, amobile.music.tc.qq.com, *.xiami.com, *.music.migu.cn, music.migu.cn, proxy.golang.org, *.mcdn.bilivideo.cn, *.cmpassport.com, id6.me, open.e.189.cn, mdn.open.wo.cn, opencloud.wostore.cn, auth.wosms.cn, *.jegotrip.com.cn, *.icitymobile.mobi, *.pingan.com.cn, *.cmbchina.com, pool.ntp.org, *.pool.ntp.org, ntp.*.com, time.*.com, ntp?.*.com, time?.*.com, time.*.gov, time.*.edu.cn, *.ntp.org.cn, PDC._msDCS.*.*, DC._msDCS.*.*, GC._msDCS.*.*\n\n[dns]\nno-system\nno-ipv6\nserver = 114.114.114.114\nserver = 119.29.29.29\nserver = 119.28.28.28\nserver = 223.5.5.5\nserver = 223.6.6.6\nserver = 1.1.1.1\nserver = 1.0.0.1\nserver = 8.8.8.8\nserver = 8.8.4.4\nserver = /*.id.ui.direct/system\nserver = /unifi.ui.com/system\nserver = /unifi.local/system\nserver = /networks.unifi.ui.com/system\nserver = /amplifi.lan/system\nserver = /router.synology.com/system\nserver = /sila.razer.com/system\nserver = /router.asus.com/system\nserver = /routerlogin.net/system\nserver = /orbilogin.com/system\nserver = /www.LinksysSmartWiFi.com/system\nserver = /LinksysSmartWiFi.com/system\nserver = /myrouter.local/system\nserver = /instant.arubanetworks.com/system\nserver = /setmeup.arubanetworks.com/system\nserver = /www.miwifi.com/system\nserver = /miwifi.com/system\nserver = /mediarouter.home/system\nserver = /tplogin.cn/system\nserver = /tplinklogin.net/system\nserver = /tplinkwifi.net/system\nserver = /melogin.cn/system\nserver = /falogin.cn/system\nserver = /tendawifi.com/system\nserver = /leike.cc/system\nserver = /zte.home/system\nserver = /p.to/system\nserver = /phicomm.me/system\nserver = /hiwifi.com/system\nserver = /peiluyou.com/system\nserver = /_hotspot_.m2m/system\nserver = /hotspot.cslwifi.com/system\nserver = /*.163.com/119.29.29.29\nserver = /*.126.com/119.29.29.29\nserver = /*.126.net/119.29.29.29\nserver = /*.127.net/119.29.29.29\nserver = /*.taobao.com/223.5.5.5\nserver = /*.tmall.com/223.5.5.5\nserver = /*.alipay.com/223.5.5.5\nserver = /*.alicdn.com/223.5.5.5\nserver = /*.aliyun.com/223.5.5.5\nserver = /*.jd.com/119.28.28.28\nserver = /*.tencent.com/119.28.28.28\nserver = /*.weixin.com/119.28.28.28\nserver = /*.bilibili.com/119.29.29.29\nserver = /*.netease.com/119.29.29.29\nserver = /*.mi.com/119.29.29.29\nserver = /*.xiaomi.com/119.29.29.29\n\n[policy]\nurl-latency-benchmark=优选线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png\navailable=可用线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static_1.png\nstatic=全球加速, proxy, 优选线路, 可用线路, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Rocket.png\nstatic=手动选择, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Clubhouse.png\nstatic=国际社交, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/telegram(1).png\nstatic=Google, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png\nstatic=Git, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/github(1).png\nstatic=Apple, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple.png\nstatic=Microsoft, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png\nstatic=TikTok, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png\nstatic=YouTube, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png\nstatic=Speedtest, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png\nstatic=Netflix, server-tag-regex=^(?=.*((?i)流媒体|奈飞|奶飞|解锁|宽频|流量|(\\b(Netflix|NF|IDC)\\b)))(?!.*((?i)回国|校园|游戏|加群|签到|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png\nstatic=港澳台剧, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili.png\nstatic=国际媒体, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Streaming.png\nstatic=屏蔽IOS更新, direct, proxy, reject, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_Update.png\nstatic=国内线路, server-tag-regex=^(?=.*((?i)🇨🇳|中|中国|国内|大陆|内地|(\\b(CN|CH|China)\\b)))(?!.*((?i)校园|游戏|香|台|澳|美|新|日|韩|迪|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/CN.png\nurl-latency-benchmark=香港线路, server-tag-regex=^(?=.*((?i)🇭🇰|香|香港|(\\b(HK|Hong)\\b)))(?!.*((?i)回国|校园|游戏|台|日|韩|新|美|迪|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png\nurl-latency-benchmark=台湾线路, server-tag-regex=^(?=.*((?i)🇹🇼|台|台湾|(\\b(TW|Tai|Taiwan)\\b)))(?!.*((?i)回国|校园|游戏|港|日|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png\nurl-latency-benchmark=澳门线路, server-tag-regex=^(?=.*((?i)🇲🇴|澳|澳门|(\\b(MO|Oman)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|美|澳大利亚|澳州🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/MO.png\nurl-latency-benchmark=美国线路, server-tag-regex=^(?=.*((?i)🇺🇸|美|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|阿拉斯加|旧金山|(\\b(US|States|American|United States)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|马|俄罗斯|加拿大|加蓬|加纳|牙买加|马达加斯加|尼加拉瓜|塞内加尔|新加坡|汤加|孟加拉国|保加利亚|哥斯达黎加|多米尼加|加群|加频道|@|🎮|(\\b(GAME|TG|COM)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png\nurl-latency-benchmark=狮城线路, server-tag-regex=^(?=.*((?i)🇸🇬|新|狮|獅|新加坡|(\\b(SG|Singapore)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|韩|美|无法|公告|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png\nurl-latency-benchmark=日本线路, server-tag-regex=^(?=.*((?i)🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|(\\b(JP|Japan)\\b)))(?!.*((?i)回国|校园|游戏|港|台|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png\nurl-latency-benchmark=韩国线路, server-tag-regex=^(?=.*((?i)🇰🇷|韩|韓|韩国|首尔|(\\b(KR|Korea)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png\nstatic=其他国家, server-tag-regex=^(?=.*(.*))(?!.*((?i)防止|倒卖|通知|贩卖|工单|联系|已用|过期|备用|版本|下次|机场|到期|官址|流量|订阅|获取|客服|循环|返利|邀请|中国|国内|大陆|香|台|澳门|狮|日本|韩国|新加坡|美国|网易|洛|拉|谷|勒|凤|费|圣|东|埼|澳门|群|网址|网站|官方|无法|公告|一元|距离|邮箱|套餐|节点版本|@|🇨🇳|🇭🇰|🇺🇸|🇸🇬|🇰🇷|🇯🇵|🇹🇼|🎮|🎧|🎵|🎶|(\\b(CN|CH|SG|HK|KR|TW|JP|MO|US|China|Macao|Hong|TaiWan|States|American|Japan|Singapore|Korea|Music|Node|URL|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel)\\b|(\\d{4}-\\d{2}-\\d{2}|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/XD.png\nstatic=漏网之鱼, direct, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Alpha/Socloud.png\nstatic=允许访问, direct, proxy, reject, 手动选择, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static.png\nstatic=拒绝访问, reject, direct, proxy, 手动选择, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Adblock.png\n\n[server_local]\n\n[server_remote]\nhttps://raw.githubusercontent.com/dishao123/rules_script/main/QuantumultX/policy-test.snippet, tag=策略组正则测试[一般人用不着], img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Quantumult_X.png, update-interval=86400, opt-parser=true, enabled=false\n\n[filter_local]\n# 知乎AD屏蔽,以下规则请放置在filter_local最顶部\nhost, 118.89.204.198, reject\nhost-keyword, 118.89.204.198, reject\nip-cidr, 118.89.204.198/32, reject\nhost, appcloud2.in.zhihu.com, reject\nhost, mqtt.zhihu.com, reject\nhost, sugar.zhihu.com, reject\nuser-agent, AVOS*, reject\n# 苹果消息推送服务\nhost-suffix, push.apple.com, direct\nhost, identity.apple.com, direct\nip-cidr, 17.0.0.0/8, direct\nip-cidr, 17.249.0.0/16, direct\nip-cidr, 17.252.0.0/16, direct\nip-cidr, 17.57.144.0/22, direct\nip-cidr, 17.188.128.0/18, direct\nip-cidr, 17.188.20.0/2, direct\nip6-cidr, 2620:149:a44::/48, direct\nip6-cidr, 2403:300:a42::/48, direct\nip6-cidr, 2403:300:a51::/48, direct\nip6-cidr, 2a01:b740:a42::/48, direct\n# 银行直连\nhost-suffix, 95599.cn, direct\nhost-suffix, abchina.com, direct\nhost-suffix, bscabank.com, direct\nhost-suffix, openaboc.cn, direct\nhost-suffix, openaboc.com, direct\nhost-suffix, openaboc.com.cn, direct\n# 一些比较容易忽视的分流\nhost, ad.12306.cn, direct\nhost, sdkapp.uve.weibo.com, direct\n# 酷安AD处理\nhost-keyword, pangolin, reject\nhost-keyword, pglstat, reject\n# 贴吧AD处理\nip-cidr, 180.76.76.200/32, reject\nhost, im.tieba.baidu.com, reject\n# 爱思助手AD处理\nhost, d.image.i4.cn, reject\n# 其他AD处理\nhost-keyword, adview, reject\nhost-suffix, gdt.qq.com, reject\nhost-suffix, u3.ucweb.com, reject\nhost, amdc.m.taobao.com, reject\n# 避免迅雷版权问题\nhost, hub5idx.v6.shub.sandai.net, reject\nhost, hub5emu.v6.shub.sandai.net, reject\nhost, hub5btmain.v6.shub.sandai.net, reject\n# 绕过企业证书过期\nhost, ocsp.apple.com, reject\n# B站自动换区\nip-cidr, 203.107.1.1/24, reject\n# 本地局域网\nip-cidr, 10.0.0.0/8, direct\nip-cidr, 127.0.0.0/8, direct\nip-cidr, 172.16.0.0/12, direct\nip-cidr, 192.168.0.0/16, direct\nip-cidr, 224.0.0.0/24, direct\nip-cidr, 182.254.116.0/24, direct\nip6-cidr, fe80::/10, direct\n# GEOIP IP库分流\ngeoip, cn, direct\n# 兜里分流\nfinal, 漏网之鱼\n\n[filter_remote]\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Direct/Direct.list, tag=规则修正@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Lan/Lan.list, tag=本地局域网@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-surge2.txt, tag=广告终结者@anti-ad, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Privacy/Privacy.list, tag=隐私保护@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Hijacking/Hijacking.list, tag=反劫持@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/mieqq/mieqq/master/In-AppTracker.txt, tag=应用内防追踪@mieqq, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/WeChat/WeChat.list, tag=微信直连@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/SystemOTA/SystemOTA.list, tag=🈲IOS系统更新@blackmatrix7, force-policy=屏蔽IOS更新, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Microsoft/Microsoft.list, tag=Microsoft@blackmatrix7, force-policy=Microsoft, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Apple/Apple.list, tag=Apple@blackmatrix7, force-policy=Apple, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GoogleVoice/GoogleVoice.list, tag=GoogleVoice@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/OpenAI/OpenAI.list, tag=OpenAI@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Google/Google.list, tag=Google@blackmatrix7, force-policy=Google, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitLab/GitLab.list, tag=GitLab@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitBook/GitBook.list, tag=GitBook@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitHub/GitHub.list, tag=GitHub@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Speedtest/Speedtest.list, tag=Speedtest@blackmatrix7, force-policy=Speedtest, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.Telegram.list, tag=Telegram@VirgilClyne, force-policy=国际社交, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Instagram/Instagram.list, tag=Instagram@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Discord/Discord.list, tag=Discord@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/PotatoChat/PotatoChat.list, tag=Potato@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Facebook/Facebook.list, tag=Facebook@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Twitter/Twitter.list, tag=Twitter(X)@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Spotify/Spotify.list, tag=Spotify@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/TikTok/TikTok.list, tag=TikTok@blackmatrix7, force-policy=TikTok, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/YouTube/YouTube.list, tag=YuoTube@blackmatrix7, force-policy=YouTube, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Netflix/Netflix.list, tag=Netflix@blackmatrix7, force-policy=Netflix, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/BiliBili/BiliBili.list, tag=BiliBili@blackmatrix7, force-policy=港澳台剧, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GlobalMedia/GlobalMedia.list, tag=国外影视@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Global/Global.list, tag=国外网站@blackmatrix7, force-policy=全球加速, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/China/China.list, tag=国内网站@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.China.list, tag=国内ASN@VirgilClyne, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt, tag=China IPv4@17mon, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/gaoyifan/china-operator-ip/ip-lists/chinanet6.txt, tag=China IPv6@gaoyifan, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true\n\n[rewrite_local]\n\n[rewrite_remote]\nhttps://raw.githubusercontent.com/chxm1023/Script_X/main/Collections.conf, tag=app解锁合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/chongxie.txt, tag=去广告合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/cleanup.snippet, tag=App&小程序净化合集@fmz200, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/weibo.snippet, tag=微博国内版去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=false\nhttps://raw.githubusercontent.com/Keywos/rule/main/module/weibous.sgmodule, tag=微博国际版去广告@keywos, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/zhihu.snippet, tag=知乎去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/cloudmusic.snippet, tag=网易云去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/amap.snippet, tag=高德地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/bdmap.snippet, tag=百度地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/WebAdBlock.conf, tag=影视网站去广告@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=神机重定向@DivineEngine, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Q-Search.conf, tag=Safari超级搜索@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/EndlessGoogle.conf, tag=Google自动翻页@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false\nhttps://raw.githubusercontent.com/id77/QuantumultX/master/rewrite/Youtube_CC.conf#out=Hant, tag=油管字幕翻译@id77, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/Orz-3/QuantumultX/master/Netflix_ratings.conf, tag=Netflix评分@Orz-3, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/Orz-3/QuantumultX/master/JD_TB_price.conf, tag=比价脚本@Orz-3, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/Orz-3/QuantumultX/master/TikTok.conf, tag=Tiktok解锁[需旧版V21]@Orz-3, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/NobyDa/Script/master/TestFlight/TestFlightAccount.js, tag=Testflight解锁限制@NobyDa, update-interval=172800, opt-parser=true, enabled=true\nhttps://raw.githubusercontent.com/zZPiglet/Task/master/UnblockURLinWeChat.conf, tag=解除微信链接屏蔽@zZPiglet, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BaiduCloud.conf, tag=百度网盘倍速@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BilibiliAutoRegion.conf, tag=B站换区脚本[不会配置boxjs请勿勾选]@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false\nhttps://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Douban.conf, tag=豆瓣电影网页快捷跳转@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.conf, tag=boxjs@chavyleung, update-interval=172800, opt-parser=false, enabled=true\nhttps://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/QX.snippet, tag=Sub-Store@Peng-YM, update-interval=172800, opt-parser=false, enabled=true\n\n[task_local]\nevent-interaction https://raw.githubusercontent.com/xiaomaoJT/QxScript/main/rewrite/script/txt/ipinfo.txt, tag=节点位置查询, img-url=https://raw.githubusercontent.com/tugepaopao/Image-Storage/master/cartoon/Cute/3icon.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/scripts/server_info.js, tag=节点家宽查询, img-url=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/icon/qure/color/Back.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/server-info-plus.js, tag=节点信息Plus, img-url=info.bubble.system.system, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/geo_location.js, tag=GeoIP 查询, img-url=location.fill.viewfinder.system, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/traffic-check.js, tag=策略流量查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Download.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag=流媒体-解锁查询, img-url=checkmark.seal.system, enabled=true\nevent-interaction https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Resource/Script/Node_detection_tool/CloudflareSpeedtest.js, tag=Speed测速, img-url=bolt.square.fill.system, enabled=true\nevent-interaction https://raw.githubusercontent.com/getsomecat/Qx/main/Net_Speed.js, tag=⚡️ Net Speed, img-url=bolt.square.fill.system, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-google.js, tag=Google 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-ytb.js, tag=YouTube 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/ytb-ui-check.js, tag=YouTube 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-nf.js, tag=Netflix 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=false\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/nf-ui-check.js, tag=Netflix 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-disneyplus.js, tag=Disneyᐩ 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=true\nevent-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/disney-ui-check.js, tag=Disneyᐩ 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=false\n5 0 * * * https://raw.githubusercontent.com/unknowntokyo/surge-list/master/X/dns-clear-cache.js, tag=𝑫𝒏𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true\n5 0 * * * https://raw.githubusercontent.com/chavyleung/scripts/master/box/scripts/boxjs.revert.usercfgs.httpbackend.js, tag=𝑩𝒐𝒙𝑱𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true\n5 0 * * * https://raw.githubusercontent.com/sub-store-org/Sub-Store/master/scripts/revert.js, tag=𝑺𝒖𝒃-𝑺𝒕𝒐𝒓𝒆 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true\n\n[http_backend]\n\n[mitm]\n# 跳过证书验证\nskip_validating_cert = true\n# 验证 SNI 域名\nforce_sni_domain_name = false\n# 简单主机名\nsimple_cert_hostname = sub.store\n# 主机名\nhostname = -weather-data.apple.com, -buy.itunes.apple.com\n# 证书\npassphrase = \np12 = \n```","slug":"QX 懒人配置","published":1,"updated":"2024-11-25T11:44:04.473Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscm002jmbs6bbm54hpw","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置名称：QX 懒人配置</span><br><span class=\"line\"># 配置作者: 帝少</span><br><span class=\"line\"># 更新时间: 2023-09-16 19:41</span><br><span class=\"line\"># 反馈邮箱：dishao@msn.com</span><br><span class=\"line\"># 更新地址：https://github.com/dishao123/rules_script</span><br><span class=\"line\"># TG频道：https://t.me/dishao_channel</span><br><span class=\"line\"># TG群组：https://t.me/dishao_chat</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[general]</span><br><span class=\"line\"># 配置图标</span><br><span class=\"line\">profile_img_url = https://github.githubassets.com/images/modules/site/integrators/google.png</span><br><span class=\"line\"># 代理测速 URL</span><br><span class=\"line\">server_check_url = http://www.apple.com/library/test/success.html</span><br><span class=\"line\"># 测速超时（ms）</span><br><span class=\"line\">server_check_timeout = 2000</span><br><span class=\"line\"># UDP 策略</span><br><span class=\"line\">fallback_udp_policy = direct</span><br><span class=\"line\"># UDP 白名单</span><br><span class=\"line\">udp_whitelist = 1-442, 444-65535</span><br><span class=\"line\"># 节点信息显示</span><br><span class=\"line\">geo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/IP_API.js</span><br><span class=\"line\"># 资源解析器</span><br><span class=\"line\">resource_parser_url = https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js</span><br><span class=\"line\"># 跳过代理</span><br><span class=\"line\">excluded_routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 192.168.122.1/32, 193.168.0.1/32, 198.51.100.0/24, 24.105.30.129/32, 203.0.113.0/24, 224.0.0.0/4, 239.255.255.250/32, 255.255.255.255/32</span><br><span class=\"line\"># DNS 排除列表</span><br><span class=\"line\">dns_exclusion_list = *.lan, *.direct, cable.auth.com, *.msftconnecttest.com, *.msftncsi.com, network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, stun.*, global.turn.twilio.com, global.stun.twilio.com, app.yinxiang.com, injections.adguard.org, local.adguard.org, cable.auth.com, localhost.*.qq.com, localhost.*.weixin.qq.com, *.logon.battlenet.com.cn, *.logon.battle.net, *.blzstatic.cn, music.163.com, *.music.163.com, *.126.net, musicapi.taihe.com, music.taihe.com, songsearch.kugou.com, trackercdn.kugou.com, *.kuwo.cn, api-jooxtt.sanook.com, api.joox.com, joox.com, y.qq.com, *.y.qq.com, streamoc.music.tc.qq.com, mobileoc.music.tc.qq.com, isure.stream.qqmusic.qq.com, dl.stream.qqmusic.qq.com, aqqmusic.tc.qq.com, amobile.music.tc.qq.com, *.xiami.com, *.music.migu.cn, music.migu.cn, proxy.golang.org, *.mcdn.bilivideo.cn, *.cmpassport.com, id6.me, open.e.189.cn, mdn.open.wo.cn, opencloud.wostore.cn, auth.wosms.cn, *.jegotrip.com.cn, *.icitymobile.mobi, *.pingan.com.cn, *.cmbchina.com, pool.ntp.org, *.pool.ntp.org, ntp.*.com, time.*.com, ntp?.*.com, time?.*.com, time.*.gov, time.*.edu.cn, *.ntp.org.cn, PDC._msDCS.*.*, DC._msDCS.*.*, GC._msDCS.*.*</span><br><span class=\"line\"></span><br><span class=\"line\">[dns]</span><br><span class=\"line\">no-system</span><br><span class=\"line\">no-ipv6</span><br><span class=\"line\">server = 114.114.114.114</span><br><span class=\"line\">server = 119.29.29.29</span><br><span class=\"line\">server = 119.28.28.28</span><br><span class=\"line\">server = 223.5.5.5</span><br><span class=\"line\">server = 223.6.6.6</span><br><span class=\"line\">server = 1.1.1.1</span><br><span class=\"line\">server = 1.0.0.1</span><br><span class=\"line\">server = 8.8.8.8</span><br><span class=\"line\">server = 8.8.4.4</span><br><span class=\"line\">server = /*.id.ui.direct/system</span><br><span class=\"line\">server = /unifi.ui.com/system</span><br><span class=\"line\">server = /unifi.local/system</span><br><span class=\"line\">server = /networks.unifi.ui.com/system</span><br><span class=\"line\">server = /amplifi.lan/system</span><br><span class=\"line\">server = /router.synology.com/system</span><br><span class=\"line\">server = /sila.razer.com/system</span><br><span class=\"line\">server = /router.asus.com/system</span><br><span class=\"line\">server = /routerlogin.net/system</span><br><span class=\"line\">server = /orbilogin.com/system</span><br><span class=\"line\">server = /www.LinksysSmartWiFi.com/system</span><br><span class=\"line\">server = /LinksysSmartWiFi.com/system</span><br><span class=\"line\">server = /myrouter.local/system</span><br><span class=\"line\">server = /instant.arubanetworks.com/system</span><br><span class=\"line\">server = /setmeup.arubanetworks.com/system</span><br><span class=\"line\">server = /www.miwifi.com/system</span><br><span class=\"line\">server = /miwifi.com/system</span><br><span class=\"line\">server = /mediarouter.home/system</span><br><span class=\"line\">server = /tplogin.cn/system</span><br><span class=\"line\">server = /tplinklogin.net/system</span><br><span class=\"line\">server = /tplinkwifi.net/system</span><br><span class=\"line\">server = /melogin.cn/system</span><br><span class=\"line\">server = /falogin.cn/system</span><br><span class=\"line\">server = /tendawifi.com/system</span><br><span class=\"line\">server = /leike.cc/system</span><br><span class=\"line\">server = /zte.home/system</span><br><span class=\"line\">server = /p.to/system</span><br><span class=\"line\">server = /phicomm.me/system</span><br><span class=\"line\">server = /hiwifi.com/system</span><br><span class=\"line\">server = /peiluyou.com/system</span><br><span class=\"line\">server = /_hotspot_.m2m/system</span><br><span class=\"line\">server = /hotspot.cslwifi.com/system</span><br><span class=\"line\">server = /*.163.com/119.29.29.29</span><br><span class=\"line\">server = /*.126.com/119.29.29.29</span><br><span class=\"line\">server = /*.126.net/119.29.29.29</span><br><span class=\"line\">server = /*.127.net/119.29.29.29</span><br><span class=\"line\">server = /*.taobao.com/223.5.5.5</span><br><span class=\"line\">server = /*.tmall.com/223.5.5.5</span><br><span class=\"line\">server = /*.alipay.com/223.5.5.5</span><br><span class=\"line\">server = /*.alicdn.com/223.5.5.5</span><br><span class=\"line\">server = /*.aliyun.com/223.5.5.5</span><br><span class=\"line\">server = /*.jd.com/119.28.28.28</span><br><span class=\"line\">server = /*.tencent.com/119.28.28.28</span><br><span class=\"line\">server = /*.weixin.com/119.28.28.28</span><br><span class=\"line\">server = /*.bilibili.com/119.29.29.29</span><br><span class=\"line\">server = /*.netease.com/119.29.29.29</span><br><span class=\"line\">server = /*.mi.com/119.29.29.29</span><br><span class=\"line\">server = /*.xiaomi.com/119.29.29.29</span><br><span class=\"line\"></span><br><span class=\"line\">[policy]</span><br><span class=\"line\">url-latency-benchmark=优选线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png</span><br><span class=\"line\">available=可用线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static_1.png</span><br><span class=\"line\">static=全球加速, proxy, 优选线路, 可用线路, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Rocket.png</span><br><span class=\"line\">static=手动选择, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Clubhouse.png</span><br><span class=\"line\">static=国际社交, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/telegram(1).png</span><br><span class=\"line\">static=Google, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png</span><br><span class=\"line\">static=Git, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/github(1).png</span><br><span class=\"line\">static=Apple, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple.png</span><br><span class=\"line\">static=Microsoft, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png</span><br><span class=\"line\">static=TikTok, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png</span><br><span class=\"line\">static=YouTube, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png</span><br><span class=\"line\">static=Speedtest, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png</span><br><span class=\"line\">static=Netflix, server-tag-regex=^(?=.*((?i)流媒体|奈飞|奶飞|解锁|宽频|流量|(\\b(Netflix|NF|IDC)\\b)))(?!.*((?i)回国|校园|游戏|加群|签到|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png</span><br><span class=\"line\">static=港澳台剧, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili.png</span><br><span class=\"line\">static=国际媒体, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Streaming.png</span><br><span class=\"line\">static=屏蔽IOS更新, direct, proxy, reject, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_Update.png</span><br><span class=\"line\">static=国内线路, server-tag-regex=^(?=.*((?i)🇨🇳|中|中国|国内|大陆|内地|(\\b(CN|CH|China)\\b)))(?!.*((?i)校园|游戏|香|台|澳|美|新|日|韩|迪|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/CN.png</span><br><span class=\"line\">url-latency-benchmark=香港线路, server-tag-regex=^(?=.*((?i)🇭🇰|香|香港|(\\b(HK|Hong)\\b)))(?!.*((?i)回国|校园|游戏|台|日|韩|新|美|迪|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png</span><br><span class=\"line\">url-latency-benchmark=台湾线路, server-tag-regex=^(?=.*((?i)🇹🇼|台|台湾|(\\b(TW|Tai|Taiwan)\\b)))(?!.*((?i)回国|校园|游戏|港|日|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png</span><br><span class=\"line\">url-latency-benchmark=澳门线路, server-tag-regex=^(?=.*((?i)🇲🇴|澳|澳门|(\\b(MO|Oman)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|美|澳大利亚|澳州🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/MO.png</span><br><span class=\"line\">url-latency-benchmark=美国线路, server-tag-regex=^(?=.*((?i)🇺🇸|美|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|阿拉斯加|旧金山|(\\b(US|States|American|United States)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|马|俄罗斯|加拿大|加蓬|加纳|牙买加|马达加斯加|尼加拉瓜|塞内加尔|新加坡|汤加|孟加拉国|保加利亚|哥斯达黎加|多米尼加|加群|加频道|@|🎮|(\\b(GAME|TG|COM)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png</span><br><span class=\"line\">url-latency-benchmark=狮城线路, server-tag-regex=^(?=.*((?i)🇸🇬|新|狮|獅|新加坡|(\\b(SG|Singapore)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|韩|美|无法|公告|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png</span><br><span class=\"line\">url-latency-benchmark=日本线路, server-tag-regex=^(?=.*((?i)🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|(\\b(JP|Japan)\\b)))(?!.*((?i)回国|校园|游戏|港|台|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png</span><br><span class=\"line\">url-latency-benchmark=韩国线路, server-tag-regex=^(?=.*((?i)🇰🇷|韩|韓|韩国|首尔|(\\b(KR|Korea)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png</span><br><span class=\"line\">static=其他国家, server-tag-regex=^(?=.*(.*))(?!.*((?i)防止|倒卖|通知|贩卖|工单|联系|已用|过期|备用|版本|下次|机场|到期|官址|流量|订阅|获取|客服|循环|返利|邀请|中国|国内|大陆|香|台|澳门|狮|日本|韩国|新加坡|美国|网易|洛|拉|谷|勒|凤|费|圣|东|埼|澳门|群|网址|网站|官方|无法|公告|一元|距离|邮箱|套餐|节点版本|@|🇨🇳|🇭🇰|🇺🇸|🇸🇬|🇰🇷|🇯🇵|🇹🇼|🎮|🎧|🎵|🎶|(\\b(CN|CH|SG|HK|KR|TW|JP|MO|US|China|Macao|Hong|TaiWan|States|American|Japan|Singapore|Korea|Music|Node|URL|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/XD.png</span><br><span class=\"line\">static=漏网之鱼, direct, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Alpha/Socloud.png</span><br><span class=\"line\">static=允许访问, direct, proxy, reject, 手动选择, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static.png</span><br><span class=\"line\">static=拒绝访问, reject, direct, proxy, 手动选择, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Adblock.png</span><br><span class=\"line\"></span><br><span class=\"line\">[server_local]</span><br><span class=\"line\"></span><br><span class=\"line\">[server_remote]</span><br><span class=\"line\">https://raw.githubusercontent.com/dishao123/rules_script/main/QuantumultX/policy-test.snippet, tag=策略组正则测试[一般人用不着], img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Quantumult_X.png, update-interval=86400, opt-parser=true, enabled=false</span><br><span class=\"line\"></span><br><span class=\"line\">[filter_local]</span><br><span class=\"line\"># 知乎AD屏蔽,以下规则请放置在filter_local最顶部</span><br><span class=\"line\">host, 118.89.204.198, reject</span><br><span class=\"line\">host-keyword, 118.89.204.198, reject</span><br><span class=\"line\">ip-cidr, 118.89.204.198/32, reject</span><br><span class=\"line\">host, appcloud2.in.zhihu.com, reject</span><br><span class=\"line\">host, mqtt.zhihu.com, reject</span><br><span class=\"line\">host, sugar.zhihu.com, reject</span><br><span class=\"line\">user-agent, AVOS*, reject</span><br><span class=\"line\"># 苹果消息推送服务</span><br><span class=\"line\">host-suffix, push.apple.com, direct</span><br><span class=\"line\">host, identity.apple.com, direct</span><br><span class=\"line\">ip-cidr, 17.0.0.0/8, direct</span><br><span class=\"line\">ip-cidr, 17.249.0.0/16, direct</span><br><span class=\"line\">ip-cidr, 17.252.0.0/16, direct</span><br><span class=\"line\">ip-cidr, 17.57.144.0/22, direct</span><br><span class=\"line\">ip-cidr, 17.188.128.0/18, direct</span><br><span class=\"line\">ip-cidr, 17.188.20.0/2, direct</span><br><span class=\"line\">ip6-cidr, 2620:149:a44::/48, direct</span><br><span class=\"line\">ip6-cidr, 2403:300:a42::/48, direct</span><br><span class=\"line\">ip6-cidr, 2403:300:a51::/48, direct</span><br><span class=\"line\">ip6-cidr, 2a01:b740:a42::/48, direct</span><br><span class=\"line\"># 银行直连</span><br><span class=\"line\">host-suffix, 95599.cn, direct</span><br><span class=\"line\">host-suffix, abchina.com, direct</span><br><span class=\"line\">host-suffix, bscabank.com, direct</span><br><span class=\"line\">host-suffix, openaboc.cn, direct</span><br><span class=\"line\">host-suffix, openaboc.com, direct</span><br><span class=\"line\">host-suffix, openaboc.com.cn, direct</span><br><span class=\"line\"># 一些比较容易忽视的分流</span><br><span class=\"line\">host, ad.12306.cn, direct</span><br><span class=\"line\">host, sdkapp.uve.weibo.com, direct</span><br><span class=\"line\"># 酷安AD处理</span><br><span class=\"line\">host-keyword, pangolin, reject</span><br><span class=\"line\">host-keyword, pglstat, reject</span><br><span class=\"line\"># 贴吧AD处理</span><br><span class=\"line\">ip-cidr, 180.76.76.200/32, reject</span><br><span class=\"line\">host, im.tieba.baidu.com, reject</span><br><span class=\"line\"># 爱思助手AD处理</span><br><span class=\"line\">host, d.image.i4.cn, reject</span><br><span class=\"line\"># 其他AD处理</span><br><span class=\"line\">host-keyword, adview, reject</span><br><span class=\"line\">host-suffix, gdt.qq.com, reject</span><br><span class=\"line\">host-suffix, u3.ucweb.com, reject</span><br><span class=\"line\">host, amdc.m.taobao.com, reject</span><br><span class=\"line\"># 避免迅雷版权问题</span><br><span class=\"line\">host, hub5idx.v6.shub.sandai.net, reject</span><br><span class=\"line\">host, hub5emu.v6.shub.sandai.net, reject</span><br><span class=\"line\">host, hub5btmain.v6.shub.sandai.net, reject</span><br><span class=\"line\"># 绕过企业证书过期</span><br><span class=\"line\">host, ocsp.apple.com, reject</span><br><span class=\"line\"># B站自动换区</span><br><span class=\"line\">ip-cidr, 203.107.1.1/24, reject</span><br><span class=\"line\"># 本地局域网</span><br><span class=\"line\">ip-cidr, 10.0.0.0/8, direct</span><br><span class=\"line\">ip-cidr, 127.0.0.0/8, direct</span><br><span class=\"line\">ip-cidr, 172.16.0.0/12, direct</span><br><span class=\"line\">ip-cidr, 192.168.0.0/16, direct</span><br><span class=\"line\">ip-cidr, 224.0.0.0/24, direct</span><br><span class=\"line\">ip-cidr, 182.254.116.0/24, direct</span><br><span class=\"line\">ip6-cidr, fe80::/10, direct</span><br><span class=\"line\"># GEOIP IP库分流</span><br><span class=\"line\">geoip, cn, direct</span><br><span class=\"line\"># 兜里分流</span><br><span class=\"line\">final, 漏网之鱼</span><br><span class=\"line\"></span><br><span class=\"line\">[filter_remote]</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Direct/Direct.list, tag=规则修正@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Lan/Lan.list, tag=本地局域网@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-surge2.txt, tag=广告终结者@anti-ad, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Privacy/Privacy.list, tag=隐私保护@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Hijacking/Hijacking.list, tag=反劫持@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/mieqq/mieqq/master/In-AppTracker.txt, tag=应用内防追踪@mieqq, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/WeChat/WeChat.list, tag=微信直连@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/SystemOTA/SystemOTA.list, tag=🈲IOS系统更新@blackmatrix7, force-policy=屏蔽IOS更新, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Microsoft/Microsoft.list, tag=Microsoft@blackmatrix7, force-policy=Microsoft, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Apple/Apple.list, tag=Apple@blackmatrix7, force-policy=Apple, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GoogleVoice/GoogleVoice.list, tag=GoogleVoice@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/OpenAI/OpenAI.list, tag=OpenAI@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Google/Google.list, tag=Google@blackmatrix7, force-policy=Google, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitLab/GitLab.list, tag=GitLab@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitBook/GitBook.list, tag=GitBook@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitHub/GitHub.list, tag=GitHub@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Speedtest/Speedtest.list, tag=Speedtest@blackmatrix7, force-policy=Speedtest, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.Telegram.list, tag=Telegram@VirgilClyne, force-policy=国际社交, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Instagram/Instagram.list, tag=Instagram@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Discord/Discord.list, tag=Discord@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/PotatoChat/PotatoChat.list, tag=Potato@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Facebook/Facebook.list, tag=Facebook@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Twitter/Twitter.list, tag=Twitter(X)@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Spotify/Spotify.list, tag=Spotify@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/TikTok/TikTok.list, tag=TikTok@blackmatrix7, force-policy=TikTok, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/YouTube/YouTube.list, tag=YuoTube@blackmatrix7, force-policy=YouTube, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Netflix/Netflix.list, tag=Netflix@blackmatrix7, force-policy=Netflix, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/BiliBili/BiliBili.list, tag=BiliBili@blackmatrix7, force-policy=港澳台剧, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GlobalMedia/GlobalMedia.list, tag=国外影视@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Global/Global.list, tag=国外网站@blackmatrix7, force-policy=全球加速, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/China/China.list, tag=国内网站@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.China.list, tag=国内ASN@VirgilClyne, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt, tag=China IPv4@17mon, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/gaoyifan/china-operator-ip/ip-lists/chinanet6.txt, tag=China IPv6@gaoyifan, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\"></span><br><span class=\"line\">[rewrite_local]</span><br><span class=\"line\"></span><br><span class=\"line\">[rewrite_remote]</span><br><span class=\"line\">https://raw.githubusercontent.com/chxm1023/Script_X/main/Collections.conf, tag=app解锁合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/chongxie.txt, tag=去广告合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/cleanup.snippet, tag=App&amp;小程序净化合集@fmz200, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/weibo.snippet, tag=微博国内版去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=false</span><br><span class=\"line\">https://raw.githubusercontent.com/Keywos/rule/main/module/weibous.sgmodule, tag=微博国际版去广告@keywos, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/zhihu.snippet, tag=知乎去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/cloudmusic.snippet, tag=网易云去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/amap.snippet, tag=高德地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/bdmap.snippet, tag=百度地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/WebAdBlock.conf, tag=影视网站去广告@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=神机重定向@DivineEngine, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Q-Search.conf, tag=Safari超级搜索@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/EndlessGoogle.conf, tag=Google自动翻页@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false</span><br><span class=\"line\">https://raw.githubusercontent.com/id77/QuantumultX/master/rewrite/Youtube_CC.conf#out=Hant, tag=油管字幕翻译@id77, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Orz-3/QuantumultX/master/Netflix_ratings.conf, tag=Netflix评分@Orz-3, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Orz-3/QuantumultX/master/JD_TB_price.conf, tag=比价脚本@Orz-3, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Orz-3/QuantumultX/master/TikTok.conf, tag=Tiktok解锁[需旧版V21]@Orz-3, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/NobyDa/Script/master/TestFlight/TestFlightAccount.js, tag=Testflight解锁限制@NobyDa, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/zZPiglet/Task/master/UnblockURLinWeChat.conf, tag=解除微信链接屏蔽@zZPiglet, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BaiduCloud.conf, tag=百度网盘倍速@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BilibiliAutoRegion.conf, tag=B站换区脚本[不会配置boxjs请勿勾选]@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Douban.conf, tag=豆瓣电影网页快捷跳转@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.conf, tag=boxjs@chavyleung, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/QX.snippet, tag=Sub-Store@Peng-YM, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\"></span><br><span class=\"line\">[task_local]</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/xiaomaoJT/QxScript/main/rewrite/script/txt/ipinfo.txt, tag=节点位置查询, img-url=https://raw.githubusercontent.com/tugepaopao/Image-Storage/master/cartoon/Cute/3icon.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/scripts/server_info.js, tag=节点家宽查询, img-url=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/icon/qure/color/Back.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/server-info-plus.js, tag=节点信息Plus, img-url=info.bubble.system.system, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/geo_location.js, tag=GeoIP 查询, img-url=location.fill.viewfinder.system, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/traffic-check.js, tag=策略流量查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Download.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag=流媒体-解锁查询, img-url=checkmark.seal.system, enabled=true</span><br><span class=\"line\">event-interaction https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Resource/Script/Node_detection_tool/CloudflareSpeedtest.js, tag=Speed测速, img-url=bolt.square.fill.system, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/getsomecat/Qx/main/Net_Speed.js, tag=⚡️ Net Speed, img-url=bolt.square.fill.system, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-google.js, tag=Google 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-ytb.js, tag=YouTube 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/ytb-ui-check.js, tag=YouTube 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-nf.js, tag=Netflix 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/nf-ui-check.js, tag=Netflix 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-disneyplus.js, tag=Disneyᐩ 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/disney-ui-check.js, tag=Disneyᐩ 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=false</span><br><span class=\"line\">5 0 * * * https://raw.githubusercontent.com/unknowntokyo/surge-list/master/X/dns-clear-cache.js, tag=𝑫𝒏𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true</span><br><span class=\"line\">5 0 * * * https://raw.githubusercontent.com/chavyleung/scripts/master/box/scripts/boxjs.revert.usercfgs.httpbackend.js, tag=𝑩𝒐𝒙𝑱𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true</span><br><span class=\"line\">5 0 * * * https://raw.githubusercontent.com/sub-store-org/Sub-Store/master/scripts/revert.js, tag=𝑺𝒖𝒃-𝑺𝒕𝒐𝒓𝒆 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true</span><br><span class=\"line\"></span><br><span class=\"line\">[http_backend]</span><br><span class=\"line\"></span><br><span class=\"line\">[mitm]</span><br><span class=\"line\"># 跳过证书验证</span><br><span class=\"line\">skip_validating_cert = true</span><br><span class=\"line\"># 验证 SNI 域名</span><br><span class=\"line\">force_sni_domain_name = false</span><br><span class=\"line\"># 简单主机名</span><br><span class=\"line\">simple_cert_hostname = sub.store</span><br><span class=\"line\"># 主机名</span><br><span class=\"line\">hostname = -weather-data.apple.com, -buy.itunes.apple.com</span><br><span class=\"line\"># 证书</span><br><span class=\"line\">passphrase = </span><br><span class=\"line\">p12 = </span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置名称：QX 懒人配置</span><br><span class=\"line\"># 配置作者: 帝少</span><br><span class=\"line\"># 更新时间: 2023-09-16 19:41</span><br><span class=\"line\"># 反馈邮箱：dishao@msn.com</span><br><span class=\"line\"># 更新地址：https://github.com/dishao123/rules_script</span><br><span class=\"line\"># TG频道：https://t.me/dishao_channel</span><br><span class=\"line\"># TG群组：https://t.me/dishao_chat</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[general]</span><br><span class=\"line\"># 配置图标</span><br><span class=\"line\">profile_img_url = https://github.githubassets.com/images/modules/site/integrators/google.png</span><br><span class=\"line\"># 代理测速 URL</span><br><span class=\"line\">server_check_url = http://www.apple.com/library/test/success.html</span><br><span class=\"line\"># 测速超时（ms）</span><br><span class=\"line\">server_check_timeout = 2000</span><br><span class=\"line\"># UDP 策略</span><br><span class=\"line\">fallback_udp_policy = direct</span><br><span class=\"line\"># UDP 白名单</span><br><span class=\"line\">udp_whitelist = 1-442, 444-65535</span><br><span class=\"line\"># 节点信息显示</span><br><span class=\"line\">geo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/IP_API.js</span><br><span class=\"line\"># 资源解析器</span><br><span class=\"line\">resource_parser_url = https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js</span><br><span class=\"line\"># 跳过代理</span><br><span class=\"line\">excluded_routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 192.168.122.1/32, 193.168.0.1/32, 198.51.100.0/24, 24.105.30.129/32, 203.0.113.0/24, 224.0.0.0/4, 239.255.255.250/32, 255.255.255.255/32</span><br><span class=\"line\"># DNS 排除列表</span><br><span class=\"line\">dns_exclusion_list = *.lan, *.direct, cable.auth.com, *.msftconnecttest.com, *.msftncsi.com, network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, stun.*, global.turn.twilio.com, global.stun.twilio.com, app.yinxiang.com, injections.adguard.org, local.adguard.org, cable.auth.com, localhost.*.qq.com, localhost.*.weixin.qq.com, *.logon.battlenet.com.cn, *.logon.battle.net, *.blzstatic.cn, music.163.com, *.music.163.com, *.126.net, musicapi.taihe.com, music.taihe.com, songsearch.kugou.com, trackercdn.kugou.com, *.kuwo.cn, api-jooxtt.sanook.com, api.joox.com, joox.com, y.qq.com, *.y.qq.com, streamoc.music.tc.qq.com, mobileoc.music.tc.qq.com, isure.stream.qqmusic.qq.com, dl.stream.qqmusic.qq.com, aqqmusic.tc.qq.com, amobile.music.tc.qq.com, *.xiami.com, *.music.migu.cn, music.migu.cn, proxy.golang.org, *.mcdn.bilivideo.cn, *.cmpassport.com, id6.me, open.e.189.cn, mdn.open.wo.cn, opencloud.wostore.cn, auth.wosms.cn, *.jegotrip.com.cn, *.icitymobile.mobi, *.pingan.com.cn, *.cmbchina.com, pool.ntp.org, *.pool.ntp.org, ntp.*.com, time.*.com, ntp?.*.com, time?.*.com, time.*.gov, time.*.edu.cn, *.ntp.org.cn, PDC._msDCS.*.*, DC._msDCS.*.*, GC._msDCS.*.*</span><br><span class=\"line\"></span><br><span class=\"line\">[dns]</span><br><span class=\"line\">no-system</span><br><span class=\"line\">no-ipv6</span><br><span class=\"line\">server = 114.114.114.114</span><br><span class=\"line\">server = 119.29.29.29</span><br><span class=\"line\">server = 119.28.28.28</span><br><span class=\"line\">server = 223.5.5.5</span><br><span class=\"line\">server = 223.6.6.6</span><br><span class=\"line\">server = 1.1.1.1</span><br><span class=\"line\">server = 1.0.0.1</span><br><span class=\"line\">server = 8.8.8.8</span><br><span class=\"line\">server = 8.8.4.4</span><br><span class=\"line\">server = /*.id.ui.direct/system</span><br><span class=\"line\">server = /unifi.ui.com/system</span><br><span class=\"line\">server = /unifi.local/system</span><br><span class=\"line\">server = /networks.unifi.ui.com/system</span><br><span class=\"line\">server = /amplifi.lan/system</span><br><span class=\"line\">server = /router.synology.com/system</span><br><span class=\"line\">server = /sila.razer.com/system</span><br><span class=\"line\">server = /router.asus.com/system</span><br><span class=\"line\">server = /routerlogin.net/system</span><br><span class=\"line\">server = /orbilogin.com/system</span><br><span class=\"line\">server = /www.LinksysSmartWiFi.com/system</span><br><span class=\"line\">server = /LinksysSmartWiFi.com/system</span><br><span class=\"line\">server = /myrouter.local/system</span><br><span class=\"line\">server = /instant.arubanetworks.com/system</span><br><span class=\"line\">server = /setmeup.arubanetworks.com/system</span><br><span class=\"line\">server = /www.miwifi.com/system</span><br><span class=\"line\">server = /miwifi.com/system</span><br><span class=\"line\">server = /mediarouter.home/system</span><br><span class=\"line\">server = /tplogin.cn/system</span><br><span class=\"line\">server = /tplinklogin.net/system</span><br><span class=\"line\">server = /tplinkwifi.net/system</span><br><span class=\"line\">server = /melogin.cn/system</span><br><span class=\"line\">server = /falogin.cn/system</span><br><span class=\"line\">server = /tendawifi.com/system</span><br><span class=\"line\">server = /leike.cc/system</span><br><span class=\"line\">server = /zte.home/system</span><br><span class=\"line\">server = /p.to/system</span><br><span class=\"line\">server = /phicomm.me/system</span><br><span class=\"line\">server = /hiwifi.com/system</span><br><span class=\"line\">server = /peiluyou.com/system</span><br><span class=\"line\">server = /_hotspot_.m2m/system</span><br><span class=\"line\">server = /hotspot.cslwifi.com/system</span><br><span class=\"line\">server = /*.163.com/119.29.29.29</span><br><span class=\"line\">server = /*.126.com/119.29.29.29</span><br><span class=\"line\">server = /*.126.net/119.29.29.29</span><br><span class=\"line\">server = /*.127.net/119.29.29.29</span><br><span class=\"line\">server = /*.taobao.com/223.5.5.5</span><br><span class=\"line\">server = /*.tmall.com/223.5.5.5</span><br><span class=\"line\">server = /*.alipay.com/223.5.5.5</span><br><span class=\"line\">server = /*.alicdn.com/223.5.5.5</span><br><span class=\"line\">server = /*.aliyun.com/223.5.5.5</span><br><span class=\"line\">server = /*.jd.com/119.28.28.28</span><br><span class=\"line\">server = /*.tencent.com/119.28.28.28</span><br><span class=\"line\">server = /*.weixin.com/119.28.28.28</span><br><span class=\"line\">server = /*.bilibili.com/119.29.29.29</span><br><span class=\"line\">server = /*.netease.com/119.29.29.29</span><br><span class=\"line\">server = /*.mi.com/119.29.29.29</span><br><span class=\"line\">server = /*.xiaomi.com/119.29.29.29</span><br><span class=\"line\"></span><br><span class=\"line\">[policy]</span><br><span class=\"line\">url-latency-benchmark=优选线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png</span><br><span class=\"line\">available=可用线路, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static_1.png</span><br><span class=\"line\">static=全球加速, proxy, 优选线路, 可用线路, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Rocket.png</span><br><span class=\"line\">static=手动选择, server-tag-regex=^(?=.*(.*))(?!.*((?i)节点版本|无法|官方|公告|套餐|距离|网易|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|到期|过期|已用|联系|邮箱|工单|群|贩卖|通知|倒卖|防止|国内|@|🎮|🎵|🎶|🎧|(\\b(URL|COM|MUSIC|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Node)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Clubhouse.png</span><br><span class=\"line\">static=国际社交, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/telegram(1).png</span><br><span class=\"line\">static=Google, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png</span><br><span class=\"line\">static=Git, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/github(1).png</span><br><span class=\"line\">static=Apple, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple.png</span><br><span class=\"line\">static=Microsoft, direct, proxy, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png</span><br><span class=\"line\">static=TikTok, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png</span><br><span class=\"line\">static=YouTube, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png</span><br><span class=\"line\">static=Speedtest, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png</span><br><span class=\"line\">static=Netflix, server-tag-regex=^(?=.*((?i)流媒体|奈飞|奶飞|解锁|宽频|流量|(\\b(Netflix|NF|IDC)\\b)))(?!.*((?i)回国|校园|游戏|加群|签到|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png</span><br><span class=\"line\">static=港澳台剧, direct, proxy, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili.png</span><br><span class=\"line\">static=国际媒体, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Streaming.png</span><br><span class=\"line\">static=屏蔽IOS更新, direct, proxy, reject, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_Update.png</span><br><span class=\"line\">static=国内线路, server-tag-regex=^(?=.*((?i)🇨🇳|中|中国|国内|大陆|内地|(\\b(CN|CH|China)\\b)))(?!.*((?i)校园|游戏|香|台|澳|美|新|日|韩|迪|🎮|(\\b(GAME)\\b))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/CN.png</span><br><span class=\"line\">url-latency-benchmark=香港线路, server-tag-regex=^(?=.*((?i)🇭🇰|香|香港|(\\b(HK|Hong)\\b)))(?!.*((?i)回国|校园|游戏|台|日|韩|新|美|迪|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png</span><br><span class=\"line\">url-latency-benchmark=台湾线路, server-tag-regex=^(?=.*((?i)🇹🇼|台|台湾|(\\b(TW|Tai|Taiwan)\\b)))(?!.*((?i)回国|校园|游戏|港|日|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png</span><br><span class=\"line\">url-latency-benchmark=澳门线路, server-tag-regex=^(?=.*((?i)🇲🇴|澳|澳门|(\\b(MO|Oman)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|美|澳大利亚|澳州🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/MO.png</span><br><span class=\"line\">url-latency-benchmark=美国线路, server-tag-regex=^(?=.*((?i)🇺🇸|美|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|阿拉斯加|旧金山|(\\b(US|States|American|United States)\\b)))(?!.*((?i)回国|校园|游戏|香|台|日|韩|新|马|俄罗斯|加拿大|加蓬|加纳|牙买加|马达加斯加|尼加拉瓜|塞内加尔|新加坡|汤加|孟加拉国|保加利亚|哥斯达黎加|多米尼加|加群|加频道|@|🎮|(\\b(GAME|TG|COM)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png</span><br><span class=\"line\">url-latency-benchmark=狮城线路, server-tag-regex=^(?=.*((?i)🇸🇬|新|狮|獅|新加坡|(\\b(SG|Singapore)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|韩|美|无法|公告|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png</span><br><span class=\"line\">url-latency-benchmark=日本线路, server-tag-regex=^(?=.*((?i)🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|(\\b(JP|Japan)\\b)))(?!.*((?i)回国|校园|游戏|港|台|韩|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png</span><br><span class=\"line\">url-latency-benchmark=韩国线路, server-tag-regex=^(?=.*((?i)🇰🇷|韩|韓|韩国|首尔|(\\b(KR|Korea)\\b)))(?!.*((?i)回国|校园|游戏|港|台|日|新|美|🎮|(\\b(GAME)\\b))).*$, check-interval=600, tolerance=0, alive-checking=false, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png</span><br><span class=\"line\">static=其他国家, server-tag-regex=^(?=.*(.*))(?!.*((?i)防止|倒卖|通知|贩卖|工单|联系|已用|过期|备用|版本|下次|机场|到期|官址|流量|订阅|获取|客服|循环|返利|邀请|中国|国内|大陆|香|台|澳门|狮|日本|韩国|新加坡|美国|网易|洛|拉|谷|勒|凤|费|圣|东|埼|澳门|群|网址|网站|官方|无法|公告|一元|距离|邮箱|套餐|节点版本|@|🇨🇳|🇭🇰|🇺🇸|🇸🇬|🇰🇷|🇯🇵|🇹🇼|🎮|🎧|🎵|🎶|(\\b(CN|CH|SG|HK|KR|TW|JP|MO|US|China|Macao|Hong|TaiWan|States|American|Japan|Singapore|Korea|Music|Node|URL|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel)\\b|(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;|\\dG)))).*$, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/XD.png</span><br><span class=\"line\">static=漏网之鱼, direct, proxy, 优选线路, 可用线路, 全球加速, 手动选择, 香港线路, 台湾线路, 澳门线路, 美国线路, 狮城线路, 日本线路, 韩国线路, 其他国家, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Alpha/Socloud.png</span><br><span class=\"line\">static=允许访问, direct, proxy, reject, 手动选择, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static.png</span><br><span class=\"line\">static=拒绝访问, reject, direct, proxy, 手动选择, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Adblock.png</span><br><span class=\"line\"></span><br><span class=\"line\">[server_local]</span><br><span class=\"line\"></span><br><span class=\"line\">[server_remote]</span><br><span class=\"line\">https://raw.githubusercontent.com/dishao123/rules_script/main/QuantumultX/policy-test.snippet, tag=策略组正则测试[一般人用不着], img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Quantumult_X.png, update-interval=86400, opt-parser=true, enabled=false</span><br><span class=\"line\"></span><br><span class=\"line\">[filter_local]</span><br><span class=\"line\"># 知乎AD屏蔽,以下规则请放置在filter_local最顶部</span><br><span class=\"line\">host, 118.89.204.198, reject</span><br><span class=\"line\">host-keyword, 118.89.204.198, reject</span><br><span class=\"line\">ip-cidr, 118.89.204.198/32, reject</span><br><span class=\"line\">host, appcloud2.in.zhihu.com, reject</span><br><span class=\"line\">host, mqtt.zhihu.com, reject</span><br><span class=\"line\">host, sugar.zhihu.com, reject</span><br><span class=\"line\">user-agent, AVOS*, reject</span><br><span class=\"line\"># 苹果消息推送服务</span><br><span class=\"line\">host-suffix, push.apple.com, direct</span><br><span class=\"line\">host, identity.apple.com, direct</span><br><span class=\"line\">ip-cidr, 17.0.0.0/8, direct</span><br><span class=\"line\">ip-cidr, 17.249.0.0/16, direct</span><br><span class=\"line\">ip-cidr, 17.252.0.0/16, direct</span><br><span class=\"line\">ip-cidr, 17.57.144.0/22, direct</span><br><span class=\"line\">ip-cidr, 17.188.128.0/18, direct</span><br><span class=\"line\">ip-cidr, 17.188.20.0/2, direct</span><br><span class=\"line\">ip6-cidr, 2620:149:a44::/48, direct</span><br><span class=\"line\">ip6-cidr, 2403:300:a42::/48, direct</span><br><span class=\"line\">ip6-cidr, 2403:300:a51::/48, direct</span><br><span class=\"line\">ip6-cidr, 2a01:b740:a42::/48, direct</span><br><span class=\"line\"># 银行直连</span><br><span class=\"line\">host-suffix, 95599.cn, direct</span><br><span class=\"line\">host-suffix, abchina.com, direct</span><br><span class=\"line\">host-suffix, bscabank.com, direct</span><br><span class=\"line\">host-suffix, openaboc.cn, direct</span><br><span class=\"line\">host-suffix, openaboc.com, direct</span><br><span class=\"line\">host-suffix, openaboc.com.cn, direct</span><br><span class=\"line\"># 一些比较容易忽视的分流</span><br><span class=\"line\">host, ad.12306.cn, direct</span><br><span class=\"line\">host, sdkapp.uve.weibo.com, direct</span><br><span class=\"line\"># 酷安AD处理</span><br><span class=\"line\">host-keyword, pangolin, reject</span><br><span class=\"line\">host-keyword, pglstat, reject</span><br><span class=\"line\"># 贴吧AD处理</span><br><span class=\"line\">ip-cidr, 180.76.76.200/32, reject</span><br><span class=\"line\">host, im.tieba.baidu.com, reject</span><br><span class=\"line\"># 爱思助手AD处理</span><br><span class=\"line\">host, d.image.i4.cn, reject</span><br><span class=\"line\"># 其他AD处理</span><br><span class=\"line\">host-keyword, adview, reject</span><br><span class=\"line\">host-suffix, gdt.qq.com, reject</span><br><span class=\"line\">host-suffix, u3.ucweb.com, reject</span><br><span class=\"line\">host, amdc.m.taobao.com, reject</span><br><span class=\"line\"># 避免迅雷版权问题</span><br><span class=\"line\">host, hub5idx.v6.shub.sandai.net, reject</span><br><span class=\"line\">host, hub5emu.v6.shub.sandai.net, reject</span><br><span class=\"line\">host, hub5btmain.v6.shub.sandai.net, reject</span><br><span class=\"line\"># 绕过企业证书过期</span><br><span class=\"line\">host, ocsp.apple.com, reject</span><br><span class=\"line\"># B站自动换区</span><br><span class=\"line\">ip-cidr, 203.107.1.1/24, reject</span><br><span class=\"line\"># 本地局域网</span><br><span class=\"line\">ip-cidr, 10.0.0.0/8, direct</span><br><span class=\"line\">ip-cidr, 127.0.0.0/8, direct</span><br><span class=\"line\">ip-cidr, 172.16.0.0/12, direct</span><br><span class=\"line\">ip-cidr, 192.168.0.0/16, direct</span><br><span class=\"line\">ip-cidr, 224.0.0.0/24, direct</span><br><span class=\"line\">ip-cidr, 182.254.116.0/24, direct</span><br><span class=\"line\">ip6-cidr, fe80::/10, direct</span><br><span class=\"line\"># GEOIP IP库分流</span><br><span class=\"line\">geoip, cn, direct</span><br><span class=\"line\"># 兜里分流</span><br><span class=\"line\">final, 漏网之鱼</span><br><span class=\"line\"></span><br><span class=\"line\">[filter_remote]</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Direct/Direct.list, tag=规则修正@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Lan/Lan.list, tag=本地局域网@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-surge2.txt, tag=广告终结者@anti-ad, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Privacy/Privacy.list, tag=隐私保护@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Hijacking/Hijacking.list, tag=反劫持@blackmatrix7, force-policy=拒绝访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/mieqq/mieqq/master/In-AppTracker.txt, tag=应用内防追踪@mieqq, force-policy=拒绝访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/WeChat/WeChat.list, tag=微信直连@blackmatrix7, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/SystemOTA/SystemOTA.list, tag=🈲IOS系统更新@blackmatrix7, force-policy=屏蔽IOS更新, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Microsoft/Microsoft.list, tag=Microsoft@blackmatrix7, force-policy=Microsoft, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Apple/Apple.list, tag=Apple@blackmatrix7, force-policy=Apple, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GoogleVoice/GoogleVoice.list, tag=GoogleVoice@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/OpenAI/OpenAI.list, tag=OpenAI@blackmatrix7, force-policy=美国线路, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Google/Google.list, tag=Google@blackmatrix7, force-policy=Google, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitLab/GitLab.list, tag=GitLab@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitBook/GitBook.list, tag=GitBook@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GitHub/GitHub.list, tag=GitHub@blackmatrix7, force-policy=Git, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Speedtest/Speedtest.list, tag=Speedtest@blackmatrix7, force-policy=Speedtest, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.Telegram.list, tag=Telegram@VirgilClyne, force-policy=国际社交, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Instagram/Instagram.list, tag=Instagram@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Discord/Discord.list, tag=Discord@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/PotatoChat/PotatoChat.list, tag=Potato@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Facebook/Facebook.list, tag=Facebook@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Twitter/Twitter.list, tag=Twitter(X)@blackmatrix7, force-policy=国际社交, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Spotify/Spotify.list, tag=Spotify@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/TikTok/TikTok.list, tag=TikTok@blackmatrix7, force-policy=TikTok, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/YouTube/YouTube.list, tag=YuoTube@blackmatrix7, force-policy=YouTube, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Netflix/Netflix.list, tag=Netflix@blackmatrix7, force-policy=Netflix, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/BiliBili/BiliBili.list, tag=BiliBili@blackmatrix7, force-policy=港澳台剧, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GlobalMedia/GlobalMedia.list, tag=国外影视@blackmatrix7, force-policy=国际媒体, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Global/Global.list, tag=国外网站@blackmatrix7, force-policy=全球加速, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/China/China.list, tag=国内网站@blackmatrix7, force-policy=允许访问, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.China.list, tag=国内ASN@VirgilClyne, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt, tag=China IPv4@17mon, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/gaoyifan/china-operator-ip/ip-lists/chinanet6.txt, tag=China IPv6@gaoyifan, force-policy=允许访问, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\"></span><br><span class=\"line\">[rewrite_local]</span><br><span class=\"line\"></span><br><span class=\"line\">[rewrite_remote]</span><br><span class=\"line\">https://raw.githubusercontent.com/chxm1023/Script_X/main/Collections.conf, tag=app解锁合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/chongxie.txt, tag=去广告合集@chxm1023, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/cleanup.snippet, tag=App&amp;小程序净化合集@fmz200, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/weibo.snippet, tag=微博国内版去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=false</span><br><span class=\"line\">https://raw.githubusercontent.com/Keywos/rule/main/module/weibous.sgmodule, tag=微博国际版去广告@keywos, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/zhihu.snippet, tag=知乎去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/cloudmusic.snippet, tag=网易云去广告@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/amap.snippet, tag=高德地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/RuCu6/QuanX/main/Rewrites/Cube/bdmap.snippet, tag=百度地图净化[卸载重装]@RuCu6, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/WebAdBlock.conf, tag=影视网站去广告@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=神机重定向@DivineEngine, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Q-Search.conf, tag=Safari超级搜索@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/EndlessGoogle.conf, tag=Google自动翻页@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false</span><br><span class=\"line\">https://raw.githubusercontent.com/id77/QuantumultX/master/rewrite/Youtube_CC.conf#out=Hant, tag=油管字幕翻译@id77, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Orz-3/QuantumultX/master/Netflix_ratings.conf, tag=Netflix评分@Orz-3, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Orz-3/QuantumultX/master/JD_TB_price.conf, tag=比价脚本@Orz-3, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Orz-3/QuantumultX/master/TikTok.conf, tag=Tiktok解锁[需旧版V21]@Orz-3, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/NobyDa/Script/master/TestFlight/TestFlightAccount.js, tag=Testflight解锁限制@NobyDa, update-interval=172800, opt-parser=true, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/zZPiglet/Task/master/UnblockURLinWeChat.conf, tag=解除微信链接屏蔽@zZPiglet, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BaiduCloud.conf, tag=百度网盘倍速@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Function/BilibiliAutoRegion.conf, tag=B站换区脚本[不会配置boxjs请勿勾选]@ddgksf2013, update-interval=172800, opt-parser=false, enabled=false</span><br><span class=\"line\">https://raw.githubusercontent.com/ddgksf2013/Rewrite/master/Html/Douban.conf, tag=豆瓣电影网页快捷跳转@ddgksf2013, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.conf, tag=boxjs@chavyleung, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\">https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/QX.snippet, tag=Sub-Store@Peng-YM, update-interval=172800, opt-parser=false, enabled=true</span><br><span class=\"line\"></span><br><span class=\"line\">[task_local]</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/xiaomaoJT/QxScript/main/rewrite/script/txt/ipinfo.txt, tag=节点位置查询, img-url=https://raw.githubusercontent.com/tugepaopao/Image-Storage/master/cartoon/Cute/3icon.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/scripts/server_info.js, tag=节点家宽查询, img-url=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/icon/qure/color/Back.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/server-info-plus.js, tag=节点信息Plus, img-url=info.bubble.system.system, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/geo_location.js, tag=GeoIP 查询, img-url=location.fill.viewfinder.system, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/traffic-check.js, tag=策略流量查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Download.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag=流媒体-解锁查询, img-url=checkmark.seal.system, enabled=true</span><br><span class=\"line\">event-interaction https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Resource/Script/Node_detection_tool/CloudflareSpeedtest.js, tag=Speed测速, img-url=bolt.square.fill.system, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/getsomecat/Qx/main/Net_Speed.js, tag=⚡️ Net Speed, img-url=bolt.square.fill.system, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-google.js, tag=Google 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-ytb.js, tag=YouTube 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/ytb-ui-check.js, tag=YouTube 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube_Letter.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-nf.js, tag=Netflix 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=false</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/nf-ui-check.js, tag=Netflix 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix_Letter.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/switch-check-disneyplus.js, tag=Disneyᐩ 切换, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=true</span><br><span class=\"line\">event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/disney-ui-check.js, tag=Disneyᐩ 查询, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png, enabled=false</span><br><span class=\"line\">5 0 * * * https://raw.githubusercontent.com/unknowntokyo/surge-list/master/X/dns-clear-cache.js, tag=𝑫𝒏𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true</span><br><span class=\"line\">5 0 * * * https://raw.githubusercontent.com/chavyleung/scripts/master/box/scripts/boxjs.revert.usercfgs.httpbackend.js, tag=𝑩𝒐𝒙𝑱𝒔 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true</span><br><span class=\"line\">5 0 * * * https://raw.githubusercontent.com/sub-store-org/Sub-Store/master/scripts/revert.js, tag=𝑺𝒖𝒃-𝑺𝒕𝒐𝒓𝒆 𝑪𝒍𝒆𝒂𝒓 𝑪𝒂𝒄𝒉𝒆, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png, enabled=true</span><br><span class=\"line\"></span><br><span class=\"line\">[http_backend]</span><br><span class=\"line\"></span><br><span class=\"line\">[mitm]</span><br><span class=\"line\"># 跳过证书验证</span><br><span class=\"line\">skip_validating_cert = true</span><br><span class=\"line\"># 验证 SNI 域名</span><br><span class=\"line\">force_sni_domain_name = false</span><br><span class=\"line\"># 简单主机名</span><br><span class=\"line\">simple_cert_hostname = sub.store</span><br><span class=\"line\"># 主机名</span><br><span class=\"line\">hostname = -weather-data.apple.com, -buy.itunes.apple.com</span><br><span class=\"line\"># 证书</span><br><span class=\"line\">passphrase = </span><br><span class=\"line\">p12 = </span><br></pre></td></tr></table></figure>"},{"title":"mca最常用终端命令","date":"2024-11-24T10:36:37.320Z","_content":"# 1.最常用终端命令\n\nMac OS系统有些文件默认隐藏,如果需要显示,可以通过终端显示隐藏文件或文件夹\n\n- 显示隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder\n- 取消隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder\n\n# 2.其他终端命令\n\n## 1.目录操作\n\n| 命令名 | 功能描述             | 使用举例         |\n| ------ | -------------------- | ---------------- |\n| cd     | 打开当前目录         | cd dirname       |\n| pwd    | 显示当前目录的路径名 | pwd              |\n| ls     | 显示当前目录的内容   | ls -la           |\n| dircmp | 比较两个目录的内容   | dircmp dir1 dir2 |\n| mkdir  | 创建一个目录         | mkdir dirname    |\n| rmdir  | 删除一个目录         | rmdir dirname    |\n| mvdir  | 移动或重命名一个目录 | mvdir dir1 dir2  |\n\n## 2.文件操作\n\n| 命令名 | 功能描述               | 使用举例                  |\n| ------ | ---------------------- | ------------------------- |\n| cat    | 显示或连接文件         | cat filename              |\n| ln     | 联接文件               | ln -s file1 file2         |\n| find   | 使用匹配表达式查找文件 | find . -name \"*.c\" -print |\n| file   | 显示文件类型           | file filename             |\n| open   | 使用默认的程序打开文件 | open filename             |\n| od     | 显示非文本文件的内容   | od -c filename            |\n| cp     | 复制文件或目录         | cp file1 file2            |\n| rm     | 删除文件或目录         | rm filename               |\n| mv     | 改变文件名或所在目录   | mv file1 file2            |\n| pg     | 分页格式化显示文件内容 | pg filename               |\n| more   | 分屏显示文件内容       | more filename             |\n\n## 3.选择操作\n\n| 命令名 | 功能描述                       | 使用举例                     |\n| ------ | ------------------------------ | ---------------------------- |\n| comm   | 显示两有序文件的公共和非公共行 | comm file1 file2             |\n| wc     | 统计文件的字符数、词数和行数   | wc filename                  |\n| nl     | 给文件加上行号                 | nl file1 >file2              |\n| awk    | 在文件中查找并处理模式         | awk '{print $1 $1}' filename |\n| sort   | 排序或归并文件                 | sort -d -f -u file1          |\n| uniq   | 去掉文件中的重复行             | uniq file1 file2             |\n| diff   | 比较并显示两个文件的差异       | diff file1 file2             |\n| sed    | 非交互方式流编辑器             | sed \"s/red/green/g\" filename |\n| cut    | 显示文件每行中的某些域         | cut -f1,7 -d: /etc/passwd    |\n| colrm  | 从标准输入中删除若干列         | colrm 8 20 file2             |\n| paste  | 横向连接文件                   | paste file1 file2            |\n| head   | 显示文件的最初几行             | head -20 filename            |\n| tail   | 显示文件的最后几行             | tail -15 filename            |\n\n## 4.安全操作\n\n| 命令名 | 功能描述               | 使用举例                  |\n| ------ | ---------------------- | ------------------------- |\n| chown  | 改变文件或目录的属主   | chown newowner filename   |\n| chgrp  | 改变文件或目录的所属组 | chgrp staff filename      |\n| xlock  | 给终端上锁             | xlock -remote             |\n| passwd | 修改用户密码           | passwd                    |\n| chmod  | 改变文件或目录的权限   | chmod ug+x filename umask |\n| umask  | 定义创建文件的权限掩码 | umask 027                 |\n\n## 5.编程操作\n\n| 命令名 | 功能描述                 | 使用举例                   |\n| ------ | ------------------------ | -------------------------- |\n| touch  | 更新文件的访问和修改时间 | touch -m 05202400 filename |\n| dbx    | 命令行界面调试工具       | dbx a.out                  |\n| xde    | 图形用户界面调试工具     | xde a.out                  |\n| make   | 维护可执行程序的最新版本 | make                       |\n\n## 6.进程操作\n\n| 命令名 | 功能描述               | 使用举例         |\n| ------ | ---------------------- | ---------------- |\n| nice   | 改变待执行命令的优先级 | nice cc -c *.c   |\n| renice | 改变已运行进程的优先级 | renice +20 32768 |\n| ps     | 显示进程当前状态       | ps u             |\n| kill   | 终止进程               | kill -9 30142    |\n\n## 7.时间操作\n\n| 命令名 | 功能描述                 | 使用举例   |\n| ------ | ------------------------ | ---------- |\n| date   | 显示系统的当前日期和时间 | date       |\n| cal    | 显示日历                 | cal 8 1996 |\n| time   | 统计程序的执行时间       | time a.out |\n\n## 8.网络与通信操作\n\n| 命令名 | 功能描述                         | 使用举例                    |\n| ------ | -------------------------------- | --------------------------- |\n| mail   | 阅读和发送电子邮件               | mail                        |\n| write  | 给另一用户发送报文               | write username pts/1        |\n| mesg   | 允许或拒绝接收报文               | mesg n                      |\n| ftp    | 在本地主机与远程主机之间传输文件 | ftp ftp.sp.net.edu.cn       |\n| rcp    | 在本地主机与远程主机之间复制文件 | rcp file1 host1:file2       |\n| ping   | 给一个网络主机发送 回应请求      | ping hpc.sp.net.edu.cn      |\n| telnet | 远程登录                         | telnet hpc.sp.net.edu.cn    |\n| rlogin | 远程登录                         | rlogin hostname -l username |\n| rsh    | 在远程主机执行指定命令           | rsh f01n03 date             |\n\n## 9.Korn Shell 命令\n\n| 命令名  | 功能描述                       | 使用举例        |\n| ------- | ------------------------------ | --------------- |\n| history | 列出最近执行过的几条命令及编号 | history         |\n| r       | 重复执行最近执行过的某条命令   | r -2            |\n| alias   | 给某个命令定义别名             | alias del=rm -i |\n| unalias | 取消对某个别名的定义           | unalias del     |\n\n## 10.其它命令\n\n| 命令名 | 功能描述                       | 使用举例     |\n| ------ | ------------------------------ | ------------ |\n| stty   | 显示或重置控制键定义           | stty -a      |\n| du     | 查询磁盘使用情况               | du -k subdir |\n| df     | 显示文件系统的总空间和可用空间 | df /tmp      |\n| w      | 显示当前系统活动的总信息       | w            |\n| env    | 显示当前所有设置过的环境变量   | env          |\n| who    | 列出当前登录的所有用户         | who          |\n| whoami | 显示当前正进行操作的用户名     | whoami       |\n| tty    | 显示终端或伪终端的名称         | tty          |\n| uname  | 显示操作系统的有关信息         | uname -a     |\n| clear  | 清除屏幕或窗口内容             | clear        |\n\n","source":"_posts/mca最常用终端命令.md","raw":"---\ntitle: mca最常用终端命令\ndate: 2024-11-24T18:36:37.320Z\ntags: []\ncategories: []\n---\n# 1.最常用终端命令\n\nMac OS系统有些文件默认隐藏,如果需要显示,可以通过终端显示隐藏文件或文件夹\n\n- 显示隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder\n- 取消隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder\n\n# 2.其他终端命令\n\n## 1.目录操作\n\n| 命令名 | 功能描述             | 使用举例         |\n| ------ | -------------------- | ---------------- |\n| cd     | 打开当前目录         | cd dirname       |\n| pwd    | 显示当前目录的路径名 | pwd              |\n| ls     | 显示当前目录的内容   | ls -la           |\n| dircmp | 比较两个目录的内容   | dircmp dir1 dir2 |\n| mkdir  | 创建一个目录         | mkdir dirname    |\n| rmdir  | 删除一个目录         | rmdir dirname    |\n| mvdir  | 移动或重命名一个目录 | mvdir dir1 dir2  |\n\n## 2.文件操作\n\n| 命令名 | 功能描述               | 使用举例                  |\n| ------ | ---------------------- | ------------------------- |\n| cat    | 显示或连接文件         | cat filename              |\n| ln     | 联接文件               | ln -s file1 file2         |\n| find   | 使用匹配表达式查找文件 | find . -name \"*.c\" -print |\n| file   | 显示文件类型           | file filename             |\n| open   | 使用默认的程序打开文件 | open filename             |\n| od     | 显示非文本文件的内容   | od -c filename            |\n| cp     | 复制文件或目录         | cp file1 file2            |\n| rm     | 删除文件或目录         | rm filename               |\n| mv     | 改变文件名或所在目录   | mv file1 file2            |\n| pg     | 分页格式化显示文件内容 | pg filename               |\n| more   | 分屏显示文件内容       | more filename             |\n\n## 3.选择操作\n\n| 命令名 | 功能描述                       | 使用举例                     |\n| ------ | ------------------------------ | ---------------------------- |\n| comm   | 显示两有序文件的公共和非公共行 | comm file1 file2             |\n| wc     | 统计文件的字符数、词数和行数   | wc filename                  |\n| nl     | 给文件加上行号                 | nl file1 >file2              |\n| awk    | 在文件中查找并处理模式         | awk '{print $1 $1}' filename |\n| sort   | 排序或归并文件                 | sort -d -f -u file1          |\n| uniq   | 去掉文件中的重复行             | uniq file1 file2             |\n| diff   | 比较并显示两个文件的差异       | diff file1 file2             |\n| sed    | 非交互方式流编辑器             | sed \"s/red/green/g\" filename |\n| cut    | 显示文件每行中的某些域         | cut -f1,7 -d: /etc/passwd    |\n| colrm  | 从标准输入中删除若干列         | colrm 8 20 file2             |\n| paste  | 横向连接文件                   | paste file1 file2            |\n| head   | 显示文件的最初几行             | head -20 filename            |\n| tail   | 显示文件的最后几行             | tail -15 filename            |\n\n## 4.安全操作\n\n| 命令名 | 功能描述               | 使用举例                  |\n| ------ | ---------------------- | ------------------------- |\n| chown  | 改变文件或目录的属主   | chown newowner filename   |\n| chgrp  | 改变文件或目录的所属组 | chgrp staff filename      |\n| xlock  | 给终端上锁             | xlock -remote             |\n| passwd | 修改用户密码           | passwd                    |\n| chmod  | 改变文件或目录的权限   | chmod ug+x filename umask |\n| umask  | 定义创建文件的权限掩码 | umask 027                 |\n\n## 5.编程操作\n\n| 命令名 | 功能描述                 | 使用举例                   |\n| ------ | ------------------------ | -------------------------- |\n| touch  | 更新文件的访问和修改时间 | touch -m 05202400 filename |\n| dbx    | 命令行界面调试工具       | dbx a.out                  |\n| xde    | 图形用户界面调试工具     | xde a.out                  |\n| make   | 维护可执行程序的最新版本 | make                       |\n\n## 6.进程操作\n\n| 命令名 | 功能描述               | 使用举例         |\n| ------ | ---------------------- | ---------------- |\n| nice   | 改变待执行命令的优先级 | nice cc -c *.c   |\n| renice | 改变已运行进程的优先级 | renice +20 32768 |\n| ps     | 显示进程当前状态       | ps u             |\n| kill   | 终止进程               | kill -9 30142    |\n\n## 7.时间操作\n\n| 命令名 | 功能描述                 | 使用举例   |\n| ------ | ------------------------ | ---------- |\n| date   | 显示系统的当前日期和时间 | date       |\n| cal    | 显示日历                 | cal 8 1996 |\n| time   | 统计程序的执行时间       | time a.out |\n\n## 8.网络与通信操作\n\n| 命令名 | 功能描述                         | 使用举例                    |\n| ------ | -------------------------------- | --------------------------- |\n| mail   | 阅读和发送电子邮件               | mail                        |\n| write  | 给另一用户发送报文               | write username pts/1        |\n| mesg   | 允许或拒绝接收报文               | mesg n                      |\n| ftp    | 在本地主机与远程主机之间传输文件 | ftp ftp.sp.net.edu.cn       |\n| rcp    | 在本地主机与远程主机之间复制文件 | rcp file1 host1:file2       |\n| ping   | 给一个网络主机发送 回应请求      | ping hpc.sp.net.edu.cn      |\n| telnet | 远程登录                         | telnet hpc.sp.net.edu.cn    |\n| rlogin | 远程登录                         | rlogin hostname -l username |\n| rsh    | 在远程主机执行指定命令           | rsh f01n03 date             |\n\n## 9.Korn Shell 命令\n\n| 命令名  | 功能描述                       | 使用举例        |\n| ------- | ------------------------------ | --------------- |\n| history | 列出最近执行过的几条命令及编号 | history         |\n| r       | 重复执行最近执行过的某条命令   | r -2            |\n| alias   | 给某个命令定义别名             | alias del=rm -i |\n| unalias | 取消对某个别名的定义           | unalias del     |\n\n## 10.其它命令\n\n| 命令名 | 功能描述                       | 使用举例     |\n| ------ | ------------------------------ | ------------ |\n| stty   | 显示或重置控制键定义           | stty -a      |\n| du     | 查询磁盘使用情况               | du -k subdir |\n| df     | 显示文件系统的总空间和可用空间 | df /tmp      |\n| w      | 显示当前系统活动的总信息       | w            |\n| env    | 显示当前所有设置过的环境变量   | env          |\n| who    | 列出当前登录的所有用户         | who          |\n| whoami | 显示当前正进行操作的用户名     | whoami       |\n| tty    | 显示终端或伪终端的名称         | tty          |\n| uname  | 显示操作系统的有关信息         | uname -a     |\n| clear  | 清除屏幕或窗口内容             | clear        |\n\n","slug":"mca最常用终端命令","published":1,"updated":"2024-11-25T11:44:04.482Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscm002kmbs60qaifh0t","content":"<h1 id=\"1-最常用终端命令\"><a href=\"#1-最常用终端命令\" class=\"headerlink\" title=\"1.最常用终端命令\"></a>1.最常用终端命令</h1><p>Mac OS系统有些文件默认隐藏,如果需要显示,可以通过终端显示隐藏文件或文件夹</p>\n<ul>\n<li>显示隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</li>\n<li>取消隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</li>\n</ul>\n<h1 id=\"2-其他终端命令\"><a href=\"#2-其他终端命令\" class=\"headerlink\" title=\"2.其他终端命令\"></a>2.其他终端命令</h1><h2 id=\"1-目录操作\"><a href=\"#1-目录操作\" class=\"headerlink\" title=\"1.目录操作\"></a>1.目录操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cd</td>\n<td>打开当前目录</td>\n<td>cd dirname</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>显示当前目录的路径名</td>\n<td>pwd</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>显示当前目录的内容</td>\n<td>ls -la</td>\n</tr>\n<tr>\n<td>dircmp</td>\n<td>比较两个目录的内容</td>\n<td>dircmp dir1 dir2</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>创建一个目录</td>\n<td>mkdir dirname</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除一个目录</td>\n<td>rmdir dirname</td>\n</tr>\n<tr>\n<td>mvdir</td>\n<td>移动或重命名一个目录</td>\n<td>mvdir dir1 dir2</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-文件操作\"><a href=\"#2-文件操作\" class=\"headerlink\" title=\"2.文件操作\"></a>2.文件操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cat</td>\n<td>显示或连接文件</td>\n<td>cat filename</td>\n</tr>\n<tr>\n<td>ln</td>\n<td>联接文件</td>\n<td>ln -s file1 file2</td>\n</tr>\n<tr>\n<td>find</td>\n<td>使用匹配表达式查找文件</td>\n<td>find . -name “*.c” -print</td>\n</tr>\n<tr>\n<td>file</td>\n<td>显示文件类型</td>\n<td>file filename</td>\n</tr>\n<tr>\n<td>open</td>\n<td>使用默认的程序打开文件</td>\n<td>open filename</td>\n</tr>\n<tr>\n<td>od</td>\n<td>显示非文本文件的内容</td>\n<td>od -c filename</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>复制文件或目录</td>\n<td>cp file1 file2</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>删除文件或目录</td>\n<td>rm filename</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>改变文件名或所在目录</td>\n<td>mv file1 file2</td>\n</tr>\n<tr>\n<td>pg</td>\n<td>分页格式化显示文件内容</td>\n<td>pg filename</td>\n</tr>\n<tr>\n<td>more</td>\n<td>分屏显示文件内容</td>\n<td>more filename</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-选择操作\"><a href=\"#3-选择操作\" class=\"headerlink\" title=\"3.选择操作\"></a>3.选择操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>comm</td>\n<td>显示两有序文件的公共和非公共行</td>\n<td>comm file1 file2</td>\n</tr>\n<tr>\n<td>wc</td>\n<td>统计文件的字符数、词数和行数</td>\n<td>wc filename</td>\n</tr>\n<tr>\n<td>nl</td>\n<td>给文件加上行号</td>\n<td>nl file1 &gt;file2</td>\n</tr>\n<tr>\n<td>awk</td>\n<td>在文件中查找并处理模式</td>\n<td>awk ‘{print $1 $1}’ filename</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>排序或归并文件</td>\n<td>sort -d -f -u file1</td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>去掉文件中的重复行</td>\n<td>uniq file1 file2</td>\n</tr>\n<tr>\n<td>diff</td>\n<td>比较并显示两个文件的差异</td>\n<td>diff file1 file2</td>\n</tr>\n<tr>\n<td>sed</td>\n<td>非交互方式流编辑器</td>\n<td>sed “s&#x2F;red&#x2F;green&#x2F;g” filename</td>\n</tr>\n<tr>\n<td>cut</td>\n<td>显示文件每行中的某些域</td>\n<td>cut -f1,7 -d: &#x2F;etc&#x2F;passwd</td>\n</tr>\n<tr>\n<td>colrm</td>\n<td>从标准输入中删除若干列</td>\n<td>colrm 8 20 file2</td>\n</tr>\n<tr>\n<td>paste</td>\n<td>横向连接文件</td>\n<td>paste file1 file2</td>\n</tr>\n<tr>\n<td>head</td>\n<td>显示文件的最初几行</td>\n<td>head -20 filename</td>\n</tr>\n<tr>\n<td>tail</td>\n<td>显示文件的最后几行</td>\n<td>tail -15 filename</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-安全操作\"><a href=\"#4-安全操作\" class=\"headerlink\" title=\"4.安全操作\"></a>4.安全操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>chown</td>\n<td>改变文件或目录的属主</td>\n<td>chown newowner filename</td>\n</tr>\n<tr>\n<td>chgrp</td>\n<td>改变文件或目录的所属组</td>\n<td>chgrp staff filename</td>\n</tr>\n<tr>\n<td>xlock</td>\n<td>给终端上锁</td>\n<td>xlock -remote</td>\n</tr>\n<tr>\n<td>passwd</td>\n<td>修改用户密码</td>\n<td>passwd</td>\n</tr>\n<tr>\n<td>chmod</td>\n<td>改变文件或目录的权限</td>\n<td>chmod ug+x filename umask</td>\n</tr>\n<tr>\n<td>umask</td>\n<td>定义创建文件的权限掩码</td>\n<td>umask 027</td>\n</tr>\n</tbody></table>\n<h2 id=\"5-编程操作\"><a href=\"#5-编程操作\" class=\"headerlink\" title=\"5.编程操作\"></a>5.编程操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>touch</td>\n<td>更新文件的访问和修改时间</td>\n<td>touch -m 05202400 filename</td>\n</tr>\n<tr>\n<td>dbx</td>\n<td>命令行界面调试工具</td>\n<td>dbx a.out</td>\n</tr>\n<tr>\n<td>xde</td>\n<td>图形用户界面调试工具</td>\n<td>xde a.out</td>\n</tr>\n<tr>\n<td>make</td>\n<td>维护可执行程序的最新版本</td>\n<td>make</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-进程操作\"><a href=\"#6-进程操作\" class=\"headerlink\" title=\"6.进程操作\"></a>6.进程操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nice</td>\n<td>改变待执行命令的优先级</td>\n<td>nice cc -c *.c</td>\n</tr>\n<tr>\n<td>renice</td>\n<td>改变已运行进程的优先级</td>\n<td>renice +20 32768</td>\n</tr>\n<tr>\n<td>ps</td>\n<td>显示进程当前状态</td>\n<td>ps u</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>终止进程</td>\n<td>kill -9 30142</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-时间操作\"><a href=\"#7-时间操作\" class=\"headerlink\" title=\"7.时间操作\"></a>7.时间操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>date</td>\n<td>显示系统的当前日期和时间</td>\n<td>date</td>\n</tr>\n<tr>\n<td>cal</td>\n<td>显示日历</td>\n<td>cal 8 1996</td>\n</tr>\n<tr>\n<td>time</td>\n<td>统计程序的执行时间</td>\n<td>time a.out</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-网络与通信操作\"><a href=\"#8-网络与通信操作\" class=\"headerlink\" title=\"8.网络与通信操作\"></a>8.网络与通信操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mail</td>\n<td>阅读和发送电子邮件</td>\n<td>mail</td>\n</tr>\n<tr>\n<td>write</td>\n<td>给另一用户发送报文</td>\n<td>write username pts&#x2F;1</td>\n</tr>\n<tr>\n<td>mesg</td>\n<td>允许或拒绝接收报文</td>\n<td>mesg n</td>\n</tr>\n<tr>\n<td>ftp</td>\n<td>在本地主机与远程主机之间传输文件</td>\n<td>ftp ftp.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td>rcp</td>\n<td>在本地主机与远程主机之间复制文件</td>\n<td>rcp file1 host1:file2</td>\n</tr>\n<tr>\n<td>ping</td>\n<td>给一个网络主机发送 回应请求</td>\n<td>ping hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td>telnet</td>\n<td>远程登录</td>\n<td>telnet hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td>rlogin</td>\n<td>远程登录</td>\n<td>rlogin hostname -l username</td>\n</tr>\n<tr>\n<td>rsh</td>\n<td>在远程主机执行指定命令</td>\n<td>rsh f01n03 date</td>\n</tr>\n</tbody></table>\n<h2 id=\"9-Korn-Shell-命令\"><a href=\"#9-Korn-Shell-命令\" class=\"headerlink\" title=\"9.Korn Shell 命令\"></a>9.Korn Shell 命令</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>history</td>\n<td>列出最近执行过的几条命令及编号</td>\n<td>history</td>\n</tr>\n<tr>\n<td>r</td>\n<td>重复执行最近执行过的某条命令</td>\n<td>r -2</td>\n</tr>\n<tr>\n<td>alias</td>\n<td>给某个命令定义别名</td>\n<td>alias del&#x3D;rm -i</td>\n</tr>\n<tr>\n<td>unalias</td>\n<td>取消对某个别名的定义</td>\n<td>unalias del</td>\n</tr>\n</tbody></table>\n<h2 id=\"10-其它命令\"><a href=\"#10-其它命令\" class=\"headerlink\" title=\"10.其它命令\"></a>10.其它命令</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stty</td>\n<td>显示或重置控制键定义</td>\n<td>stty -a</td>\n</tr>\n<tr>\n<td>du</td>\n<td>查询磁盘使用情况</td>\n<td>du -k subdir</td>\n</tr>\n<tr>\n<td>df</td>\n<td>显示文件系统的总空间和可用空间</td>\n<td>df &#x2F;tmp</td>\n</tr>\n<tr>\n<td>w</td>\n<td>显示当前系统活动的总信息</td>\n<td>w</td>\n</tr>\n<tr>\n<td>env</td>\n<td>显示当前所有设置过的环境变量</td>\n<td>env</td>\n</tr>\n<tr>\n<td>who</td>\n<td>列出当前登录的所有用户</td>\n<td>who</td>\n</tr>\n<tr>\n<td>whoami</td>\n<td>显示当前正进行操作的用户名</td>\n<td>whoami</td>\n</tr>\n<tr>\n<td>tty</td>\n<td>显示终端或伪终端的名称</td>\n<td>tty</td>\n</tr>\n<tr>\n<td>uname</td>\n<td>显示操作系统的有关信息</td>\n<td>uname -a</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清除屏幕或窗口内容</td>\n<td>clear</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h1 id=\"1-最常用终端命令\"><a href=\"#1-最常用终端命令\" class=\"headerlink\" title=\"1.最常用终端命令\"></a>1.最常用终端命令</h1><p>Mac OS系统有些文件默认隐藏,如果需要显示,可以通过终端显示隐藏文件或文件夹</p>\n<ul>\n<li>显示隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</li>\n<li>取消隐藏路径的终端命令:defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</li>\n</ul>\n<h1 id=\"2-其他终端命令\"><a href=\"#2-其他终端命令\" class=\"headerlink\" title=\"2.其他终端命令\"></a>2.其他终端命令</h1><h2 id=\"1-目录操作\"><a href=\"#1-目录操作\" class=\"headerlink\" title=\"1.目录操作\"></a>1.目录操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cd</td>\n<td>打开当前目录</td>\n<td>cd dirname</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>显示当前目录的路径名</td>\n<td>pwd</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>显示当前目录的内容</td>\n<td>ls -la</td>\n</tr>\n<tr>\n<td>dircmp</td>\n<td>比较两个目录的内容</td>\n<td>dircmp dir1 dir2</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>创建一个目录</td>\n<td>mkdir dirname</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除一个目录</td>\n<td>rmdir dirname</td>\n</tr>\n<tr>\n<td>mvdir</td>\n<td>移动或重命名一个目录</td>\n<td>mvdir dir1 dir2</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-文件操作\"><a href=\"#2-文件操作\" class=\"headerlink\" title=\"2.文件操作\"></a>2.文件操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cat</td>\n<td>显示或连接文件</td>\n<td>cat filename</td>\n</tr>\n<tr>\n<td>ln</td>\n<td>联接文件</td>\n<td>ln -s file1 file2</td>\n</tr>\n<tr>\n<td>find</td>\n<td>使用匹配表达式查找文件</td>\n<td>find . -name “*.c” -print</td>\n</tr>\n<tr>\n<td>file</td>\n<td>显示文件类型</td>\n<td>file filename</td>\n</tr>\n<tr>\n<td>open</td>\n<td>使用默认的程序打开文件</td>\n<td>open filename</td>\n</tr>\n<tr>\n<td>od</td>\n<td>显示非文本文件的内容</td>\n<td>od -c filename</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>复制文件或目录</td>\n<td>cp file1 file2</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>删除文件或目录</td>\n<td>rm filename</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>改变文件名或所在目录</td>\n<td>mv file1 file2</td>\n</tr>\n<tr>\n<td>pg</td>\n<td>分页格式化显示文件内容</td>\n<td>pg filename</td>\n</tr>\n<tr>\n<td>more</td>\n<td>分屏显示文件内容</td>\n<td>more filename</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-选择操作\"><a href=\"#3-选择操作\" class=\"headerlink\" title=\"3.选择操作\"></a>3.选择操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>comm</td>\n<td>显示两有序文件的公共和非公共行</td>\n<td>comm file1 file2</td>\n</tr>\n<tr>\n<td>wc</td>\n<td>统计文件的字符数、词数和行数</td>\n<td>wc filename</td>\n</tr>\n<tr>\n<td>nl</td>\n<td>给文件加上行号</td>\n<td>nl file1 &gt;file2</td>\n</tr>\n<tr>\n<td>awk</td>\n<td>在文件中查找并处理模式</td>\n<td>awk ‘{print $1 $1}’ filename</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>排序或归并文件</td>\n<td>sort -d -f -u file1</td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>去掉文件中的重复行</td>\n<td>uniq file1 file2</td>\n</tr>\n<tr>\n<td>diff</td>\n<td>比较并显示两个文件的差异</td>\n<td>diff file1 file2</td>\n</tr>\n<tr>\n<td>sed</td>\n<td>非交互方式流编辑器</td>\n<td>sed “s&#x2F;red&#x2F;green&#x2F;g” filename</td>\n</tr>\n<tr>\n<td>cut</td>\n<td>显示文件每行中的某些域</td>\n<td>cut -f1,7 -d: &#x2F;etc&#x2F;passwd</td>\n</tr>\n<tr>\n<td>colrm</td>\n<td>从标准输入中删除若干列</td>\n<td>colrm 8 20 file2</td>\n</tr>\n<tr>\n<td>paste</td>\n<td>横向连接文件</td>\n<td>paste file1 file2</td>\n</tr>\n<tr>\n<td>head</td>\n<td>显示文件的最初几行</td>\n<td>head -20 filename</td>\n</tr>\n<tr>\n<td>tail</td>\n<td>显示文件的最后几行</td>\n<td>tail -15 filename</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-安全操作\"><a href=\"#4-安全操作\" class=\"headerlink\" title=\"4.安全操作\"></a>4.安全操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>chown</td>\n<td>改变文件或目录的属主</td>\n<td>chown newowner filename</td>\n</tr>\n<tr>\n<td>chgrp</td>\n<td>改变文件或目录的所属组</td>\n<td>chgrp staff filename</td>\n</tr>\n<tr>\n<td>xlock</td>\n<td>给终端上锁</td>\n<td>xlock -remote</td>\n</tr>\n<tr>\n<td>passwd</td>\n<td>修改用户密码</td>\n<td>passwd</td>\n</tr>\n<tr>\n<td>chmod</td>\n<td>改变文件或目录的权限</td>\n<td>chmod ug+x filename umask</td>\n</tr>\n<tr>\n<td>umask</td>\n<td>定义创建文件的权限掩码</td>\n<td>umask 027</td>\n</tr>\n</tbody></table>\n<h2 id=\"5-编程操作\"><a href=\"#5-编程操作\" class=\"headerlink\" title=\"5.编程操作\"></a>5.编程操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>touch</td>\n<td>更新文件的访问和修改时间</td>\n<td>touch -m 05202400 filename</td>\n</tr>\n<tr>\n<td>dbx</td>\n<td>命令行界面调试工具</td>\n<td>dbx a.out</td>\n</tr>\n<tr>\n<td>xde</td>\n<td>图形用户界面调试工具</td>\n<td>xde a.out</td>\n</tr>\n<tr>\n<td>make</td>\n<td>维护可执行程序的最新版本</td>\n<td>make</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-进程操作\"><a href=\"#6-进程操作\" class=\"headerlink\" title=\"6.进程操作\"></a>6.进程操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nice</td>\n<td>改变待执行命令的优先级</td>\n<td>nice cc -c *.c</td>\n</tr>\n<tr>\n<td>renice</td>\n<td>改变已运行进程的优先级</td>\n<td>renice +20 32768</td>\n</tr>\n<tr>\n<td>ps</td>\n<td>显示进程当前状态</td>\n<td>ps u</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>终止进程</td>\n<td>kill -9 30142</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-时间操作\"><a href=\"#7-时间操作\" class=\"headerlink\" title=\"7.时间操作\"></a>7.时间操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>date</td>\n<td>显示系统的当前日期和时间</td>\n<td>date</td>\n</tr>\n<tr>\n<td>cal</td>\n<td>显示日历</td>\n<td>cal 8 1996</td>\n</tr>\n<tr>\n<td>time</td>\n<td>统计程序的执行时间</td>\n<td>time a.out</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-网络与通信操作\"><a href=\"#8-网络与通信操作\" class=\"headerlink\" title=\"8.网络与通信操作\"></a>8.网络与通信操作</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mail</td>\n<td>阅读和发送电子邮件</td>\n<td>mail</td>\n</tr>\n<tr>\n<td>write</td>\n<td>给另一用户发送报文</td>\n<td>write username pts&#x2F;1</td>\n</tr>\n<tr>\n<td>mesg</td>\n<td>允许或拒绝接收报文</td>\n<td>mesg n</td>\n</tr>\n<tr>\n<td>ftp</td>\n<td>在本地主机与远程主机之间传输文件</td>\n<td>ftp ftp.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td>rcp</td>\n<td>在本地主机与远程主机之间复制文件</td>\n<td>rcp file1 host1:file2</td>\n</tr>\n<tr>\n<td>ping</td>\n<td>给一个网络主机发送 回应请求</td>\n<td>ping hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td>telnet</td>\n<td>远程登录</td>\n<td>telnet hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td>rlogin</td>\n<td>远程登录</td>\n<td>rlogin hostname -l username</td>\n</tr>\n<tr>\n<td>rsh</td>\n<td>在远程主机执行指定命令</td>\n<td>rsh f01n03 date</td>\n</tr>\n</tbody></table>\n<h2 id=\"9-Korn-Shell-命令\"><a href=\"#9-Korn-Shell-命令\" class=\"headerlink\" title=\"9.Korn Shell 命令\"></a>9.Korn Shell 命令</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>history</td>\n<td>列出最近执行过的几条命令及编号</td>\n<td>history</td>\n</tr>\n<tr>\n<td>r</td>\n<td>重复执行最近执行过的某条命令</td>\n<td>r -2</td>\n</tr>\n<tr>\n<td>alias</td>\n<td>给某个命令定义别名</td>\n<td>alias del&#x3D;rm -i</td>\n</tr>\n<tr>\n<td>unalias</td>\n<td>取消对某个别名的定义</td>\n<td>unalias del</td>\n</tr>\n</tbody></table>\n<h2 id=\"10-其它命令\"><a href=\"#10-其它命令\" class=\"headerlink\" title=\"10.其它命令\"></a>10.其它命令</h2><table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>功能描述</th>\n<th>使用举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stty</td>\n<td>显示或重置控制键定义</td>\n<td>stty -a</td>\n</tr>\n<tr>\n<td>du</td>\n<td>查询磁盘使用情况</td>\n<td>du -k subdir</td>\n</tr>\n<tr>\n<td>df</td>\n<td>显示文件系统的总空间和可用空间</td>\n<td>df &#x2F;tmp</td>\n</tr>\n<tr>\n<td>w</td>\n<td>显示当前系统活动的总信息</td>\n<td>w</td>\n</tr>\n<tr>\n<td>env</td>\n<td>显示当前所有设置过的环境变量</td>\n<td>env</td>\n</tr>\n<tr>\n<td>who</td>\n<td>列出当前登录的所有用户</td>\n<td>who</td>\n</tr>\n<tr>\n<td>whoami</td>\n<td>显示当前正进行操作的用户名</td>\n<td>whoami</td>\n</tr>\n<tr>\n<td>tty</td>\n<td>显示终端或伪终端的名称</td>\n<td>tty</td>\n</tr>\n<tr>\n<td>uname</td>\n<td>显示操作系统的有关信息</td>\n<td>uname -a</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清除屏幕或窗口内容</td>\n<td>clear</td>\n</tr>\n</tbody></table>\n"},{"title":"nginx配置","date":"2024-10-30T11:25:29.665Z","_content":"# 2 Nginx 目录结构及配置文件详解\n\n## 2.1 Nginx 目录结构分析\n\n在使用Nginx之前，我们先对安装好的Nginx目录文件进行一个分析，在这块给大家介绍一个工具tree，通过tree我们可以很方面的去查看centos系统上的文件目录结构，当然，如果想使用tree工具，就得先通过`yum install -y tree`来进行安装，安装成功后，可以通过执行`tree /usr/local/nginx`(tree后面跟的是Nginx的安装目录)，获取的结果如下：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png)\n\n- conf:nginx所有配置文件目录\n  - CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用CGI【程序】处理及相应结果给客户端的一种标准规范。\n\n- fastcgi.conf:fastcgi相关配置文件\n\n- fastcgi.conf.default:fastcgi.conf的备份文件\n\n- fastcgi_params:fastcgi的参数文件\n\n- fastcgi_params.default:fastcgi的参数备份文件\n\n- scgi_params:scgi的参数文件\n\n- scgi_params.default：scgi的参数备份文件\n\n- uwsgi_params:uwsgi的参数文件\n\n- uwsgi_params.default:uwsgi的参数备份文件\n\n- mime.types:记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系\n\n- mime.types.default:mime.types的备份文件\n\n- nginx.conf:这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点\n\n- nginx.conf.default:nginx.conf的备份文件\n\n- koi-utf、koi-win、win-utf这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码\n\n- html:存放nginx自带的两个静态的html页面\n  - 50x.html:访问失败后的失败页面\n  - index.html:成功访问的默认首页\n\n- logs:记录入门的文件，当nginx服务器启动后，这里面会有 access.log error.log 和nginx.pid三个文件出现。\n\n- sbin:是存放执行程序文件nginx\n  - nginx是用来控制Nginx的启动和停止等相关的命令。\n\n## 2.2 Nginx 服务器启停命令\n\nNginx安装完成后，接下来我们要学习的是如何启动、重启和停止Nginx的服务。\n\n对于Nginx的启停在linux系统中也有很多种方式，介绍两种方式：\n\n- Nginx服务的信号控制\n- Nginx的命令行控制\n\n### 2.2.1 Nginx服务的信号控制\n\n前面在提到Nginx的高性能，其实也和它的架构模式有关。Nginx默认采用的是多进程的方式来工作的，当将Nginx启动后，我们通过`ps -ef | grep nginx`命令可以查看到如下内容：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png)\n\n从上图中可以看到,Nginx后台进程中包含一个master进程和多个worker进程，master进程主要用来管理worker进程，包含接收外界的信息，并将接收到的信号发送给各个worker进程，监控worker进程的状态，当worker进程出现异常退出后，会自动重新启动新的worker进程。\n\n而worker进程则是专门用来处理用户请求的，各个worker进程之间是平等的并且相互独立，处理请求的机会也是一样的。nginx的进程模型，我们可以通过下图来说明下：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png)\n\n我们现在作为管理员，只需要通过给master进程发送信号就可以来控制Nginx,这个时候我们需要有两个前提条件，一个是要操作的master进程，一个是信号。\n\n（1）要想操作Nginx的master进程，就需要获取到master进程的进程号ID。获取方式简单介绍两个，\n\n- 方式一：通过`ps -ef | grep nginx`；\n- 方式二：在讲解nginx的`./configure`的配置参数的时候，有一个参数是`--pid-path=PATH`默认是`/usr/local/nginx/logs/nginx.pid`,所以可以通过查看该文件来获取nginx的master进程ID.\n\n（2）信号\n\n| 信号     | 作用                                                       |\n| :------- | :--------------------------------------------------------- |\n| TERM/INT | 立即关闭整个服务                                           |\n| QUIT     | \"优雅\"地关闭整个服务                                       |\n| HUP      | 重读配置文件并使用服务对新配置项生效                       |\n| USR1     | 重新打开日志文件，可以用来进行日志切割                     |\n| USR2     | 平滑升级到最新版的nginx                                    |\n| WINCH    | 所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令 |\n\n调用命令为`kill -signal PID`\n\nsignal:即为信号；PID即为获取到的master线程ID\n\n1. 发送TERM/INT信号给master进程，会将Nginx服务立即关闭。\n\n\n\n```\nkill -TERM PID\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n\n\nkill -INT PID\nkill -INT `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送QUIT信号给master进程，master进程会控制所有的work进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。\n\n\n\n```\nkill -QUIT PID\n\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送HUP信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程\n\n\n\n```\nkill -HUP PID\n\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送USR1信号给master进程，告诉Nginx重新开启日志文件\n\n\n\n```\nkill -USR1 PID\n\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送USR2信号给master进程，告诉master进程要平滑升级，这个时候，会重新开启对应的master进程和work进程，整个系统中将会有两个master进程，并且新的master进程的PID会被记录在`/usr/local/nginx/logs/nginx.pid`而之前的旧的master进程PID会被记录在`/usr/local/nginx/logs/nginx.pid.oldbin`文件中，接着再次发送QUIT信号给旧的master进程，让其处理完请求后再进行关闭\n\n\n\n```\nkill -USR2 PID\n\nkill -USR2 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n\n\n```\nkill -QUIT PID\n\nkill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png)\n\n1. 发送WINCH信号给master进程,让master进程控制不让所有的work进程在接收新的请求了，请求处理完后关闭work进程。注意master进程不会被关闭掉\n\n\n\n```\nkill -WINCH PID\n\nkill -WINCH`cat /usr/local/nginx/logs/nginx.pid`\n```\n\n### 2.2.2 Nginx的命令行控制\n\n此方式是通过Nginx安装目录下的sbin下的可执行文件nginx来进行Nginx状态的控制，我们可以通过`nginx -h`来查看都有哪些参数可以用：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png)\n\n\n\n```\n-?和-h:显示帮助信息\n-v:打印版本号信息并退出\n-V:打印版本号信息和配置信息并退出\n-t:测试nginx的配置文件语法是否正确并退出\n-T:测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出\n-q:在配置测试期间禁止显示非错误消息\n-s:signal信号，后面可以跟 ：\n stop[快速关闭，类似于TERM/INT信号的作用]\n quit[优雅的关闭，类似于QUIT信号的作用] \n reopen[重新打开日志文件类似于USR1信号的作用] \n reload[类似于HUP信号的作用]\n-p:prefix，指定Nginx的prefix路径，(默认为: /usr/local/nginx/)\n-c:filename,指定Nginx的配置文件路径,(默认为: conf/nginx.conf)\n-g:用来补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置\n```\n\n## 2.3 Nginx 服务器版本升级和新增模块\n\n如果想对Nginx的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的Nginx服务，然后开启新的Nginx服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到Nginx服务器提供的平滑升级功能。这个也是Nginx的一大特点，使用这种方式，就可以使Nginx在7*24小时不间断的提供服务了。接下来我们分析下需求：\n\n需求：Nginx的版本最开始使用的是Nginx-1.18.0,由于服务升级，需要将Nginx的版本升级到Nginx-1.20.1,要求Nginx不能中断提供服务。\n\n为了应对上述的需求，这里我们给大家提供两种解决方案:\n\n- 方案一:使用Nginx服务信号完成Nginx的升级\n- 方案二:使用Nginx安装目录的make命令完成升级\n\n### 2.3.1 环境准备\n\n（1）先准备两个版本的Nginx分别是 1.18.0和1.20.1\n\n（2）使用Nginx源码安装的方式将1.18.0版本安装成功并正确访问\n\n\n\n```\ncd /root/nginx-1.18.0\n./configure\nmake && make install\n```\n\n（3）将Nginx1.20.1进行参数配置和编译，不需要进行安装。\n\n\n\n```\ncd /root/nginx-1.20.1\n./configure\nmake\n```\n\n### 2.3.2 使用Nginx服务信号进行升级\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)\n\n第一步:将1.18.0版本的sbin目录下的nginx进行备份\n\n\n\n```\ncd /usr/local/nginx/sbin\nmv nginx nginx-old\n```\n\n第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来`/usr/local/nginx/sbin`目录下\n\n\n\n```\ncd /root/nginx-1.20.1/objs\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步:发送信号USR2给Nginx的1.18.0版本对应的master进程\n\n\n\n```\nkill -USR2 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n第四步:发送信号QUIT给Nginx的1.18.0版本对应的master进程\n\n\n\n```\nkill -QUIT `more /usr/local/nginx/logs/nginx.pid.oldbin`\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)\n\n### 2.3.3 使用Nginx安装目录的make命令完成升级\n\n \n\n第一步:将1.18.0版本的sbin目录下的nginx进行备份\n\n\n\n```\ncd /usr/local/nginx/sbin\nmv nginx nginx-old\n```\n\n第二步:将Nginx1.20.1安装目录编译后的objs目录下的nginx文件，拷贝到原来`/usr/local/nginx/sbin`目录下\n\n\n\n```\ncd /root/nginx-1.20.1/objs\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步:进入到安装目录，执行`make upgrade`\n\n\n\n```\ncd /root/nginx-1.20.1/\nmake upgrade\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png)\n\n第四步:查看是否更新成功\n\n\n\n```\n./nginx -v\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png)\n\n在整个过程中，其实Nginx是一直对外提供服务的。并且当Nginx的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改html目录下的页面来修改我们在页面上所看到的内容\n\n## 2.4 Nginx 核心配置文件结构\n\n### 2.4.1 全局块\n\nNginx的核心配置文件默认是放在`/usr/local/nginx/conf/nginx.conf`，介绍下nginx.conf的内容和基本配置方法。\n\n读取Nginx自带的Nginx配置文件，我们将其中的注释部分删除掉后，就剩下下面内容:\n\n\n\n```\ncd /usr/local/nginx/conf/\n\n# 清除所有空行和注释\ncat nginx.conf | grep -v \"#\" | grep -v \"^$\" > nginx2.conf\n```\n\n\n\n```\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n}\n```\n\n简单小结下:\n\n- nginx.conf配置文件中默认有三大块：全局块、events块、http块\n- http块中可以配置多个server块，每个server块又可以配置多个location块。\n\n（1）user指令\n\nuser:用于配置运行Nginx服务器的worker进程的用户和用户组。\n\n| 语法   | user user [group] |\n| :----- | :---------------- |\n| 默认值 | nobody            |\n| 位置   | 全局块            |\n\n该属性也可以在编译的时候指定，语法如下`./configure --user=user --group=group`,如果两个地方都进行了设置，最终生效的是配置文件中的配置。\n\n该指令的使用步骤:\n\n1）设置一个用户信息\"www\"\n\n\n\n```\nsed -i \"1i user gudu;\" nginx.conf\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png)\n\n2）创建一个用户\n\n\n\n```\nuseradd gudu\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png)\n\n3）修改user属性\n\n\n\n```\nuser gudu;\n```\n\n4）创建`/root/html/index.html`页面，添加如下内容\n\n\n\n```\nmkdir -p /root/html/\n\n\ncat <<EOF> /root/html/index.heml\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n<p><em>I am gudu</em></p>\n</body>\n</html>\nEOF\n```\n\n5）修改nginx.conf\n\n\n\n```\n\nlocation / {\n    root   /root/html;\n    index  index.html index.htm;\n}\n```\n\n6）测试启动访问\n\n\n\n```\n页面会报403拒绝访问的错误\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png)\n\n7）分析原因\n\n\n\n```\n因为当前用户没有访问/root/html目录的权限\n```\n\n8）将文件创建到 `/home/gudu/html/index.html`,修改配置\n\n\n\n```\nlocation / {\n    root   /home/gudu/html;\n    index  index.html index.htm;\n}\n```\n\n9）再次测试启动访问\n\n\n\n```\n能正常访问。\n```\n\n综上所述，使用user指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。\n\n（2）work process指令\n\nmaster_process:用来指定是否开启工作进程。\n\n| 语法   | master_process on\\|off; |\n| :----- | :---------------------- |\n| 默认值 | master_process on;      |\n| 位置   | 全局块                  |\n\nworker_processes:用于配置Nginx生成工作进程的数量，这个是Nginx服务器实现并发处理服务的关键所在。理论上来说workder process的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器CPU的内核数保存一致。\n\n| 语法   | worker_processes num/auto; |\n| :----- | :------------------------- |\n| 默认值 | 1                          |\n| 位置   | 全局块                     |\n\n如果将worker_processes设置成2，则会看到如下内容:\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png)\n\n（3）其他指令\n\n1）daemon：设定Nginx是否以守护进程的方式启动。\n\n守护式进程是linux后台执行的一种服务进程，特点是独立于控制终端，不会随着终端关闭而停止。\n\n| 语法   | daemon on\\|off; |\n| :----- | :-------------- |\n| 默认值 | daemon on;      |\n| 位置   | 全局块          |\n\n2）pid:用来配置Nginx当前master进程的进程号ID存储的文件路径。\n\n| 语法   | pid file;                              |\n| :----- | :------------------------------------- |\n| 默认值 | 默认为:/usr/local/nginx/logs/nginx.pid |\n| 位置   | 全局块                                 |\n\n该属性可以通过`./configure --pid-path=PATH`来指定\n\nerror_log:用来配置Nginx的错误日志存放路径\n\n| 语法   | error_log file [日志级别];      |\n| :----- | :------------------------------ |\n| 默认值 | error_log logs/error.log error; |\n| 位置   | 全局块、http、server、location  |\n\n该属性可以通过`./configure --error-log-path=PATH`来指定\n\n其中日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg，翻译过来为试|信息|通知|警告|错误|临界|警报|紧急，这块建议大家设置的时候不要设置成info以下的等级，因为会带来大量的磁盘I/O消耗，影响Nginx的性能。\n\n3）include:用来引入其他配置文件，使Nginx的配置更加灵活\n\n| 语法   | include file; |\n| :----- | :------------ |\n| 默认值 | 无            |\n| 位置   | any           |\n\n### 2.4.2 events块\n\n（1）accept_mutex:用来设置Nginx网络连接序列化\n\n| 语法   | accept_mutex on\\|off; |\n| :----- | :-------------------- |\n| 默认值 | accept_mutex on;      |\n| 位置   | events                |\n\n这个配置主要可以用来解决常说的\"惊群\"问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx后台是以多进程的工作模式，也就是说有多个worker进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响Nginx的整体性能。\n\n如果将上述值设置为on(开启状态)，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png)\n\n（2）multi_accept:用来设置是否允许同时接收多个网络连接\n\n| 语法   | multi_accept on\\|off; |\n| :----- | :-------------------- |\n| 默认值 | multi_accept off;     |\n| 位置   | events                |\n\n如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接\n\n（3）worker_connections：用来配置单个worker进程最大的连接数\n\n| 语法   | worker_connections number; |\n| :----- | :------------------------- |\n| 默认值 | worker_commections 512;    |\n| 位置   | events                     |\n\n这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number值不能大于操作系统支持打开的最大文件句柄数量。\n\n（4）use:用来设置Nginx服务器选择哪种事件驱动来处理网络消息。\n\n| 语法   | use method;    |\n| :----- | :------------- |\n| 默认值 | 根据操作系统定 |\n| 位置   | events         |\n\n注意：此处所选择事件处理模型是Nginx优化部分的一个重要内容，method的可选值有select/poll/epoll/kqueue等，之前在准备centos环境的时候，我们强调过要使用linux内核在2.6以上，就是为了能使用epoll函数来优化Nginx。\n\n另外这些值的选择，我们也可以在编译的时候使用\n\n\n\n```\n--with-select_module\n--without-select_module\n--with-poll_module\n--without-poll_module\n```\n\n来设置是否需要将对应的事件驱动模块编译到Nginx的内核。\n\n**events指令配置实例**\n\n打开Nginx的配置文件 nginx.conf,添加如下配置\n\n\n\n```\nevents{\n    accept_mutex on;\n    multi_accept on;\n    worker_commections 1024;\n    use epoll;\n}\n```\n\n启动测试\n\n\n\n```\n./nginx -t\n./nginx -s reload\n```\n\n### 2.4.3 http块\n\n（1）定义MIME-Type\n\n我们都知道浏览器中可以显示的内容有HTML、XML、GIF等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用MIME Type。所以说MIME Type是网络资源的媒体类型。Nginx作为web服务器，也需要能够识别前端请求的资源类型。\n\n在Nginx的配置文件中，默认有两行配置\n\n\n\n```\ninclude mime.types;\ndefault_type application/octet-stream;\n```\n\ndefault_type:用来配置Nginx响应前端请求默认的MIME类型。\n\n| 语法   | default_type mime-type;   |\n| :----- | :------------------------ |\n| 默认值 | default_type text/plain； |\n| 位置   | http、server、location    |\n\n在default_type之前还有一句`include mime.types`,include之前我们已经介绍过，相当于把mime.types文件中MIMT类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。\n\n**举例说明：**\n\n有些时候请求某些接口的时候需要返回指定的文本字符串或者json字符串，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用nginx快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。\n\n**如何实现：**\n\n\n\n```\nlocation /get_text {\n    #这里也可以设置成text/plain\n    default_type text/html;\n    return 200 \"This is nginx's text\";\n}\nlocation /get_json{\n    default_type application/json;\n    return 200 '{\"name\":\"TOM\",\"age\":18}';\n}\n```\n\n（2）自定义服务日志\n\nNginx中日志的类型分access.log、error.log。\n\n- access.log:用来记录用户所有的访问请求。\n- error.log:记录nginx本身运行时的错误信息，不会记录用户的访问请求。\n\nNginx服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是access_log和log_format指令。\n\n1）access_log:用来设置用户访问日志的相关属性。\n\n| 语法   | access_log path[format[buffer=size]] |\n| :----- | :----------------------------------- |\n| 默认值 | access_log logs/access.log combined; |\n| 位置   | `http`, `server`, `location`         |\n\n2）log_format:用来指定日志的输出格式。\n\n| 语法   | log_format name [escape=default\\|json\\|none] string....; |\n| :----- | :------------------------------------------------------- |\n| 默认值 | log_format combined \"...\";                               |\n| 位置   | http                                                     |\n\n（3）其他配置指令\n\n1）sendfile:用来设置Nginx服务器是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能\n\n| 语法   | sendfile on\\|off；     |\n| :----- | :--------------------- |\n| 默认值 | sendfile off;          |\n| 位置   | http、server、location |\n\n2）keepalive_timeout:用来设置长连接的超时时间。\n\n我们都知道HTTP是一种无状态协议，客户端向服务端发送一个TCP请求，服务端响应完毕后断开连接。\n\n如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用keepalive模式，可以告诉服务器端在处理完一个请求后保持这个TCP连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。\n\n| 语法   | keepalive_timeout time; |\n| :----- | :---------------------- |\n| 默认值 | keepalive_timeout 75s;  |\n| 位置   | http、server、location  |\n\n3）keepalive_requests:用来设置一个keep-alive连接使用的次数。\n\n| 语法   | keepalive_requests number; |\n| :----- | :------------------------- |\n| 默认值 | keepalive_requests 100;    |\n| 位置   | http、server、location     |\n\n### 2.4.4 server块和location块\n\nserver块和location块都是我们要重点讲解和学习的内容，因为我们后面会对Nginx的功能进行详细讲解，所以这块内容就放到静态资源部署的地方给大家详细说明。\n\n主要来认识下Nginx默认给的nginx.conf中的相关内容，以及server块与location块在使用的时候需要注意的一些内容。\n\n\n\n```\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n       \n        error_page   500 502 503 504 404  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```","source":"_posts/nginx配置.md","raw":"---\ntitle: nginx配置\ndate: 2024-10-30T19:25:29.665Z\ntags: []\ncategories: []\n---\n# 2 Nginx 目录结构及配置文件详解\n\n## 2.1 Nginx 目录结构分析\n\n在使用Nginx之前，我们先对安装好的Nginx目录文件进行一个分析，在这块给大家介绍一个工具tree，通过tree我们可以很方面的去查看centos系统上的文件目录结构，当然，如果想使用tree工具，就得先通过`yum install -y tree`来进行安装，安装成功后，可以通过执行`tree /usr/local/nginx`(tree后面跟的是Nginx的安装目录)，获取的结果如下：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png)\n\n- conf:nginx所有配置文件目录\n  - CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用CGI【程序】处理及相应结果给客户端的一种标准规范。\n\n- fastcgi.conf:fastcgi相关配置文件\n\n- fastcgi.conf.default:fastcgi.conf的备份文件\n\n- fastcgi_params:fastcgi的参数文件\n\n- fastcgi_params.default:fastcgi的参数备份文件\n\n- scgi_params:scgi的参数文件\n\n- scgi_params.default：scgi的参数备份文件\n\n- uwsgi_params:uwsgi的参数文件\n\n- uwsgi_params.default:uwsgi的参数备份文件\n\n- mime.types:记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系\n\n- mime.types.default:mime.types的备份文件\n\n- nginx.conf:这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点\n\n- nginx.conf.default:nginx.conf的备份文件\n\n- koi-utf、koi-win、win-utf这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码\n\n- html:存放nginx自带的两个静态的html页面\n  - 50x.html:访问失败后的失败页面\n  - index.html:成功访问的默认首页\n\n- logs:记录入门的文件，当nginx服务器启动后，这里面会有 access.log error.log 和nginx.pid三个文件出现。\n\n- sbin:是存放执行程序文件nginx\n  - nginx是用来控制Nginx的启动和停止等相关的命令。\n\n## 2.2 Nginx 服务器启停命令\n\nNginx安装完成后，接下来我们要学习的是如何启动、重启和停止Nginx的服务。\n\n对于Nginx的启停在linux系统中也有很多种方式，介绍两种方式：\n\n- Nginx服务的信号控制\n- Nginx的命令行控制\n\n### 2.2.1 Nginx服务的信号控制\n\n前面在提到Nginx的高性能，其实也和它的架构模式有关。Nginx默认采用的是多进程的方式来工作的，当将Nginx启动后，我们通过`ps -ef | grep nginx`命令可以查看到如下内容：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png)\n\n从上图中可以看到,Nginx后台进程中包含一个master进程和多个worker进程，master进程主要用来管理worker进程，包含接收外界的信息，并将接收到的信号发送给各个worker进程，监控worker进程的状态，当worker进程出现异常退出后，会自动重新启动新的worker进程。\n\n而worker进程则是专门用来处理用户请求的，各个worker进程之间是平等的并且相互独立，处理请求的机会也是一样的。nginx的进程模型，我们可以通过下图来说明下：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png)\n\n我们现在作为管理员，只需要通过给master进程发送信号就可以来控制Nginx,这个时候我们需要有两个前提条件，一个是要操作的master进程，一个是信号。\n\n（1）要想操作Nginx的master进程，就需要获取到master进程的进程号ID。获取方式简单介绍两个，\n\n- 方式一：通过`ps -ef | grep nginx`；\n- 方式二：在讲解nginx的`./configure`的配置参数的时候，有一个参数是`--pid-path=PATH`默认是`/usr/local/nginx/logs/nginx.pid`,所以可以通过查看该文件来获取nginx的master进程ID.\n\n（2）信号\n\n| 信号     | 作用                                                       |\n| :------- | :--------------------------------------------------------- |\n| TERM/INT | 立即关闭整个服务                                           |\n| QUIT     | \"优雅\"地关闭整个服务                                       |\n| HUP      | 重读配置文件并使用服务对新配置项生效                       |\n| USR1     | 重新打开日志文件，可以用来进行日志切割                     |\n| USR2     | 平滑升级到最新版的nginx                                    |\n| WINCH    | 所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令 |\n\n调用命令为`kill -signal PID`\n\nsignal:即为信号；PID即为获取到的master线程ID\n\n1. 发送TERM/INT信号给master进程，会将Nginx服务立即关闭。\n\n\n\n```\nkill -TERM PID\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n\n\nkill -INT PID\nkill -INT `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送QUIT信号给master进程，master进程会控制所有的work进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。\n\n\n\n```\nkill -QUIT PID\n\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送HUP信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程\n\n\n\n```\nkill -HUP PID\n\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送USR1信号给master进程，告诉Nginx重新开启日志文件\n\n\n\n```\nkill -USR1 PID\n\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n1. 发送USR2信号给master进程，告诉master进程要平滑升级，这个时候，会重新开启对应的master进程和work进程，整个系统中将会有两个master进程，并且新的master进程的PID会被记录在`/usr/local/nginx/logs/nginx.pid`而之前的旧的master进程PID会被记录在`/usr/local/nginx/logs/nginx.pid.oldbin`文件中，接着再次发送QUIT信号给旧的master进程，让其处理完请求后再进行关闭\n\n\n\n```\nkill -USR2 PID\n\nkill -USR2 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n\n\n```\nkill -QUIT PID\n\nkill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png)\n\n1. 发送WINCH信号给master进程,让master进程控制不让所有的work进程在接收新的请求了，请求处理完后关闭work进程。注意master进程不会被关闭掉\n\n\n\n```\nkill -WINCH PID\n\nkill -WINCH`cat /usr/local/nginx/logs/nginx.pid`\n```\n\n### 2.2.2 Nginx的命令行控制\n\n此方式是通过Nginx安装目录下的sbin下的可执行文件nginx来进行Nginx状态的控制，我们可以通过`nginx -h`来查看都有哪些参数可以用：\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png)\n\n\n\n```\n-?和-h:显示帮助信息\n-v:打印版本号信息并退出\n-V:打印版本号信息和配置信息并退出\n-t:测试nginx的配置文件语法是否正确并退出\n-T:测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出\n-q:在配置测试期间禁止显示非错误消息\n-s:signal信号，后面可以跟 ：\n stop[快速关闭，类似于TERM/INT信号的作用]\n quit[优雅的关闭，类似于QUIT信号的作用] \n reopen[重新打开日志文件类似于USR1信号的作用] \n reload[类似于HUP信号的作用]\n-p:prefix，指定Nginx的prefix路径，(默认为: /usr/local/nginx/)\n-c:filename,指定Nginx的配置文件路径,(默认为: conf/nginx.conf)\n-g:用来补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置\n```\n\n## 2.3 Nginx 服务器版本升级和新增模块\n\n如果想对Nginx的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的Nginx服务，然后开启新的Nginx服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到Nginx服务器提供的平滑升级功能。这个也是Nginx的一大特点，使用这种方式，就可以使Nginx在7*24小时不间断的提供服务了。接下来我们分析下需求：\n\n需求：Nginx的版本最开始使用的是Nginx-1.18.0,由于服务升级，需要将Nginx的版本升级到Nginx-1.20.1,要求Nginx不能中断提供服务。\n\n为了应对上述的需求，这里我们给大家提供两种解决方案:\n\n- 方案一:使用Nginx服务信号完成Nginx的升级\n- 方案二:使用Nginx安装目录的make命令完成升级\n\n### 2.3.1 环境准备\n\n（1）先准备两个版本的Nginx分别是 1.18.0和1.20.1\n\n（2）使用Nginx源码安装的方式将1.18.0版本安装成功并正确访问\n\n\n\n```\ncd /root/nginx-1.18.0\n./configure\nmake && make install\n```\n\n（3）将Nginx1.20.1进行参数配置和编译，不需要进行安装。\n\n\n\n```\ncd /root/nginx-1.20.1\n./configure\nmake\n```\n\n### 2.3.2 使用Nginx服务信号进行升级\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)\n\n第一步:将1.18.0版本的sbin目录下的nginx进行备份\n\n\n\n```\ncd /usr/local/nginx/sbin\nmv nginx nginx-old\n```\n\n第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来`/usr/local/nginx/sbin`目录下\n\n\n\n```\ncd /root/nginx-1.20.1/objs\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步:发送信号USR2给Nginx的1.18.0版本对应的master进程\n\n\n\n```\nkill -USR2 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n第四步:发送信号QUIT给Nginx的1.18.0版本对应的master进程\n\n\n\n```\nkill -QUIT `more /usr/local/nginx/logs/nginx.pid.oldbin`\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png)\n\n### 2.3.3 使用Nginx安装目录的make命令完成升级\n\n \n\n第一步:将1.18.0版本的sbin目录下的nginx进行备份\n\n\n\n```\ncd /usr/local/nginx/sbin\nmv nginx nginx-old\n```\n\n第二步:将Nginx1.20.1安装目录编译后的objs目录下的nginx文件，拷贝到原来`/usr/local/nginx/sbin`目录下\n\n\n\n```\ncd /root/nginx-1.20.1/objs\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步:进入到安装目录，执行`make upgrade`\n\n\n\n```\ncd /root/nginx-1.20.1/\nmake upgrade\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png)\n\n第四步:查看是否更新成功\n\n\n\n```\n./nginx -v\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png)\n\n在整个过程中，其实Nginx是一直对外提供服务的。并且当Nginx的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改html目录下的页面来修改我们在页面上所看到的内容\n\n## 2.4 Nginx 核心配置文件结构\n\n### 2.4.1 全局块\n\nNginx的核心配置文件默认是放在`/usr/local/nginx/conf/nginx.conf`，介绍下nginx.conf的内容和基本配置方法。\n\n读取Nginx自带的Nginx配置文件，我们将其中的注释部分删除掉后，就剩下下面内容:\n\n\n\n```\ncd /usr/local/nginx/conf/\n\n# 清除所有空行和注释\ncat nginx.conf | grep -v \"#\" | grep -v \"^$\" > nginx2.conf\n```\n\n\n\n```\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n}\n```\n\n简单小结下:\n\n- nginx.conf配置文件中默认有三大块：全局块、events块、http块\n- http块中可以配置多个server块，每个server块又可以配置多个location块。\n\n（1）user指令\n\nuser:用于配置运行Nginx服务器的worker进程的用户和用户组。\n\n| 语法   | user user [group] |\n| :----- | :---------------- |\n| 默认值 | nobody            |\n| 位置   | 全局块            |\n\n该属性也可以在编译的时候指定，语法如下`./configure --user=user --group=group`,如果两个地方都进行了设置，最终生效的是配置文件中的配置。\n\n该指令的使用步骤:\n\n1）设置一个用户信息\"www\"\n\n\n\n```\nsed -i \"1i user gudu;\" nginx.conf\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png)\n\n2）创建一个用户\n\n\n\n```\nuseradd gudu\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png)\n\n3）修改user属性\n\n\n\n```\nuser gudu;\n```\n\n4）创建`/root/html/index.html`页面，添加如下内容\n\n\n\n```\nmkdir -p /root/html/\n\n\ncat <<EOF> /root/html/index.heml\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n<p><em>I am gudu</em></p>\n</body>\n</html>\nEOF\n```\n\n5）修改nginx.conf\n\n\n\n```\n\nlocation / {\n    root   /root/html;\n    index  index.html index.htm;\n}\n```\n\n6）测试启动访问\n\n\n\n```\n页面会报403拒绝访问的错误\n```\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png)\n\n7）分析原因\n\n\n\n```\n因为当前用户没有访问/root/html目录的权限\n```\n\n8）将文件创建到 `/home/gudu/html/index.html`,修改配置\n\n\n\n```\nlocation / {\n    root   /home/gudu/html;\n    index  index.html index.htm;\n}\n```\n\n9）再次测试启动访问\n\n\n\n```\n能正常访问。\n```\n\n综上所述，使用user指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。\n\n（2）work process指令\n\nmaster_process:用来指定是否开启工作进程。\n\n| 语法   | master_process on\\|off; |\n| :----- | :---------------------- |\n| 默认值 | master_process on;      |\n| 位置   | 全局块                  |\n\nworker_processes:用于配置Nginx生成工作进程的数量，这个是Nginx服务器实现并发处理服务的关键所在。理论上来说workder process的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器CPU的内核数保存一致。\n\n| 语法   | worker_processes num/auto; |\n| :----- | :------------------------- |\n| 默认值 | 1                          |\n| 位置   | 全局块                     |\n\n如果将worker_processes设置成2，则会看到如下内容:\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png)\n\n（3）其他指令\n\n1）daemon：设定Nginx是否以守护进程的方式启动。\n\n守护式进程是linux后台执行的一种服务进程，特点是独立于控制终端，不会随着终端关闭而停止。\n\n| 语法   | daemon on\\|off; |\n| :----- | :-------------- |\n| 默认值 | daemon on;      |\n| 位置   | 全局块          |\n\n2）pid:用来配置Nginx当前master进程的进程号ID存储的文件路径。\n\n| 语法   | pid file;                              |\n| :----- | :------------------------------------- |\n| 默认值 | 默认为:/usr/local/nginx/logs/nginx.pid |\n| 位置   | 全局块                                 |\n\n该属性可以通过`./configure --pid-path=PATH`来指定\n\nerror_log:用来配置Nginx的错误日志存放路径\n\n| 语法   | error_log file [日志级别];      |\n| :----- | :------------------------------ |\n| 默认值 | error_log logs/error.log error; |\n| 位置   | 全局块、http、server、location  |\n\n该属性可以通过`./configure --error-log-path=PATH`来指定\n\n其中日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg，翻译过来为试|信息|通知|警告|错误|临界|警报|紧急，这块建议大家设置的时候不要设置成info以下的等级，因为会带来大量的磁盘I/O消耗，影响Nginx的性能。\n\n3）include:用来引入其他配置文件，使Nginx的配置更加灵活\n\n| 语法   | include file; |\n| :----- | :------------ |\n| 默认值 | 无            |\n| 位置   | any           |\n\n### 2.4.2 events块\n\n（1）accept_mutex:用来设置Nginx网络连接序列化\n\n| 语法   | accept_mutex on\\|off; |\n| :----- | :-------------------- |\n| 默认值 | accept_mutex on;      |\n| 位置   | events                |\n\n这个配置主要可以用来解决常说的\"惊群\"问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx后台是以多进程的工作模式，也就是说有多个worker进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响Nginx的整体性能。\n\n如果将上述值设置为on(开启状态)，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。\n\n[![img](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png)](https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png)\n\n（2）multi_accept:用来设置是否允许同时接收多个网络连接\n\n| 语法   | multi_accept on\\|off; |\n| :----- | :-------------------- |\n| 默认值 | multi_accept off;     |\n| 位置   | events                |\n\n如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接\n\n（3）worker_connections：用来配置单个worker进程最大的连接数\n\n| 语法   | worker_connections number; |\n| :----- | :------------------------- |\n| 默认值 | worker_commections 512;    |\n| 位置   | events                     |\n\n这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number值不能大于操作系统支持打开的最大文件句柄数量。\n\n（4）use:用来设置Nginx服务器选择哪种事件驱动来处理网络消息。\n\n| 语法   | use method;    |\n| :----- | :------------- |\n| 默认值 | 根据操作系统定 |\n| 位置   | events         |\n\n注意：此处所选择事件处理模型是Nginx优化部分的一个重要内容，method的可选值有select/poll/epoll/kqueue等，之前在准备centos环境的时候，我们强调过要使用linux内核在2.6以上，就是为了能使用epoll函数来优化Nginx。\n\n另外这些值的选择，我们也可以在编译的时候使用\n\n\n\n```\n--with-select_module\n--without-select_module\n--with-poll_module\n--without-poll_module\n```\n\n来设置是否需要将对应的事件驱动模块编译到Nginx的内核。\n\n**events指令配置实例**\n\n打开Nginx的配置文件 nginx.conf,添加如下配置\n\n\n\n```\nevents{\n    accept_mutex on;\n    multi_accept on;\n    worker_commections 1024;\n    use epoll;\n}\n```\n\n启动测试\n\n\n\n```\n./nginx -t\n./nginx -s reload\n```\n\n### 2.4.3 http块\n\n（1）定义MIME-Type\n\n我们都知道浏览器中可以显示的内容有HTML、XML、GIF等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用MIME Type。所以说MIME Type是网络资源的媒体类型。Nginx作为web服务器，也需要能够识别前端请求的资源类型。\n\n在Nginx的配置文件中，默认有两行配置\n\n\n\n```\ninclude mime.types;\ndefault_type application/octet-stream;\n```\n\ndefault_type:用来配置Nginx响应前端请求默认的MIME类型。\n\n| 语法   | default_type mime-type;   |\n| :----- | :------------------------ |\n| 默认值 | default_type text/plain； |\n| 位置   | http、server、location    |\n\n在default_type之前还有一句`include mime.types`,include之前我们已经介绍过，相当于把mime.types文件中MIMT类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。\n\n**举例说明：**\n\n有些时候请求某些接口的时候需要返回指定的文本字符串或者json字符串，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用nginx快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。\n\n**如何实现：**\n\n\n\n```\nlocation /get_text {\n    #这里也可以设置成text/plain\n    default_type text/html;\n    return 200 \"This is nginx's text\";\n}\nlocation /get_json{\n    default_type application/json;\n    return 200 '{\"name\":\"TOM\",\"age\":18}';\n}\n```\n\n（2）自定义服务日志\n\nNginx中日志的类型分access.log、error.log。\n\n- access.log:用来记录用户所有的访问请求。\n- error.log:记录nginx本身运行时的错误信息，不会记录用户的访问请求。\n\nNginx服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是access_log和log_format指令。\n\n1）access_log:用来设置用户访问日志的相关属性。\n\n| 语法   | access_log path[format[buffer=size]] |\n| :----- | :----------------------------------- |\n| 默认值 | access_log logs/access.log combined; |\n| 位置   | `http`, `server`, `location`         |\n\n2）log_format:用来指定日志的输出格式。\n\n| 语法   | log_format name [escape=default\\|json\\|none] string....; |\n| :----- | :------------------------------------------------------- |\n| 默认值 | log_format combined \"...\";                               |\n| 位置   | http                                                     |\n\n（3）其他配置指令\n\n1）sendfile:用来设置Nginx服务器是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能\n\n| 语法   | sendfile on\\|off；     |\n| :----- | :--------------------- |\n| 默认值 | sendfile off;          |\n| 位置   | http、server、location |\n\n2）keepalive_timeout:用来设置长连接的超时时间。\n\n我们都知道HTTP是一种无状态协议，客户端向服务端发送一个TCP请求，服务端响应完毕后断开连接。\n\n如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用keepalive模式，可以告诉服务器端在处理完一个请求后保持这个TCP连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。\n\n| 语法   | keepalive_timeout time; |\n| :----- | :---------------------- |\n| 默认值 | keepalive_timeout 75s;  |\n| 位置   | http、server、location  |\n\n3）keepalive_requests:用来设置一个keep-alive连接使用的次数。\n\n| 语法   | keepalive_requests number; |\n| :----- | :------------------------- |\n| 默认值 | keepalive_requests 100;    |\n| 位置   | http、server、location     |\n\n### 2.4.4 server块和location块\n\nserver块和location块都是我们要重点讲解和学习的内容，因为我们后面会对Nginx的功能进行详细讲解，所以这块内容就放到静态资源部署的地方给大家详细说明。\n\n主要来认识下Nginx默认给的nginx.conf中的相关内容，以及server块与location块在使用的时候需要注意的一些内容。\n\n\n\n```\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n       \n        error_page   500 502 503 504 404  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```","slug":"nginx配置","published":1,"updated":"2024-11-25T11:44:04.479Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscm002lmbs6asx29ij7","content":"<h1 id=\"2-Nginx-目录结构及配置文件详解\"><a href=\"#2-Nginx-目录结构及配置文件详解\" class=\"headerlink\" title=\"2 Nginx 目录结构及配置文件详解\"></a>2 Nginx 目录结构及配置文件详解</h1><h2 id=\"2-1-Nginx-目录结构分析\"><a href=\"#2-1-Nginx-目录结构分析\" class=\"headerlink\" title=\"2.1 Nginx 目录结构分析\"></a>2.1 Nginx 目录结构分析</h2><p>在使用Nginx之前，我们先对安装好的Nginx目录文件进行一个分析，在这块给大家介绍一个工具tree，通过tree我们可以很方面的去查看centos系统上的文件目录结构，当然，如果想使用tree工具，就得先通过<code>yum install -y tree</code>来进行安装，安装成功后，可以通过执行<code>tree /usr/local/nginx</code>(tree后面跟的是Nginx的安装目录)，获取的结果如下：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png\" alt=\"img\"></a></p>\n<ul>\n<li><p>conf:nginx所有配置文件目录</p>\n<ul>\n<li>CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用CGI【程序】处理及相应结果给客户端的一种标准规范。</li>\n</ul>\n</li>\n<li><p>fastcgi.conf:fastcgi相关配置文件</p>\n</li>\n<li><p>fastcgi.conf.default:fastcgi.conf的备份文件</p>\n</li>\n<li><p>fastcgi_params:fastcgi的参数文件</p>\n</li>\n<li><p>fastcgi_params.default:fastcgi的参数备份文件</p>\n</li>\n<li><p>scgi_params:scgi的参数文件</p>\n</li>\n<li><p>scgi_params.default：scgi的参数备份文件</p>\n</li>\n<li><p>uwsgi_params:uwsgi的参数文件</p>\n</li>\n<li><p>uwsgi_params.default:uwsgi的参数备份文件</p>\n</li>\n<li><p>mime.types:记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系</p>\n</li>\n<li><p>mime.types.default:mime.types的备份文件</p>\n</li>\n<li><p>nginx.conf:这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</p>\n</li>\n<li><p>nginx.conf.default:nginx.conf的备份文件</p>\n</li>\n<li><p>koi-utf、koi-win、win-utf这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码</p>\n</li>\n<li><p>html:存放nginx自带的两个静态的html页面</p>\n<ul>\n<li>50x.html:访问失败后的失败页面</li>\n<li>index.html:成功访问的默认首页</li>\n</ul>\n</li>\n<li><p>logs:记录入门的文件，当nginx服务器启动后，这里面会有 access.log error.log 和nginx.pid三个文件出现。</p>\n</li>\n<li><p>sbin:是存放执行程序文件nginx</p>\n<ul>\n<li>nginx是用来控制Nginx的启动和停止等相关的命令。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-Nginx-服务器启停命令\"><a href=\"#2-2-Nginx-服务器启停命令\" class=\"headerlink\" title=\"2.2 Nginx 服务器启停命令\"></a>2.2 Nginx 服务器启停命令</h2><p>Nginx安装完成后，接下来我们要学习的是如何启动、重启和停止Nginx的服务。</p>\n<p>对于Nginx的启停在linux系统中也有很多种方式，介绍两种方式：</p>\n<ul>\n<li>Nginx服务的信号控制</li>\n<li>Nginx的命令行控制</li>\n</ul>\n<h3 id=\"2-2-1-Nginx服务的信号控制\"><a href=\"#2-2-1-Nginx服务的信号控制\" class=\"headerlink\" title=\"2.2.1 Nginx服务的信号控制\"></a>2.2.1 Nginx服务的信号控制</h3><p>前面在提到Nginx的高性能，其实也和它的架构模式有关。Nginx默认采用的是多进程的方式来工作的，当将Nginx启动后，我们通过<code>ps -ef | grep nginx</code>命令可以查看到如下内容：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png\" alt=\"img\"></a></p>\n<p>从上图中可以看到,Nginx后台进程中包含一个master进程和多个worker进程，master进程主要用来管理worker进程，包含接收外界的信息，并将接收到的信号发送给各个worker进程，监控worker进程的状态，当worker进程出现异常退出后，会自动重新启动新的worker进程。</p>\n<p>而worker进程则是专门用来处理用户请求的，各个worker进程之间是平等的并且相互独立，处理请求的机会也是一样的。nginx的进程模型，我们可以通过下图来说明下：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png\" alt=\"img\"></a></p>\n<p>我们现在作为管理员，只需要通过给master进程发送信号就可以来控制Nginx,这个时候我们需要有两个前提条件，一个是要操作的master进程，一个是信号。</p>\n<p>（1）要想操作Nginx的master进程，就需要获取到master进程的进程号ID。获取方式简单介绍两个，</p>\n<ul>\n<li>方式一：通过<code>ps -ef | grep nginx</code>；</li>\n<li>方式二：在讲解nginx的<code>./configure</code>的配置参数的时候，有一个参数是<code>--pid-path=PATH</code>默认是<code>/usr/local/nginx/logs/nginx.pid</code>,所以可以通过查看该文件来获取nginx的master进程ID.</li>\n</ul>\n<p>（2）信号</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">信号</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TERM&#x2F;INT</td>\n<td align=\"left\">立即关闭整个服务</td>\n</tr>\n<tr>\n<td align=\"left\">QUIT</td>\n<td align=\"left\">“优雅”地关闭整个服务</td>\n</tr>\n<tr>\n<td align=\"left\">HUP</td>\n<td align=\"left\">重读配置文件并使用服务对新配置项生效</td>\n</tr>\n<tr>\n<td align=\"left\">USR1</td>\n<td align=\"left\">重新打开日志文件，可以用来进行日志切割</td>\n</tr>\n<tr>\n<td align=\"left\">USR2</td>\n<td align=\"left\">平滑升级到最新版的nginx</td>\n</tr>\n<tr>\n<td align=\"left\">WINCH</td>\n<td align=\"left\">所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令</td>\n</tr>\n</tbody></table>\n<p>调用命令为<code>kill -signal PID</code></p>\n<p>signal:即为信号；PID即为获取到的master线程ID</p>\n<ol>\n<li>发送TERM&#x2F;INT信号给master进程，会将Nginx服务立即关闭。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -TERM PID</span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kill -INT PID</span><br><span class=\"line\">kill -INT `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送QUIT信号给master进程，master进程会控制所有的work进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送HUP信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -HUP PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送USR1信号给master进程，告诉Nginx重新开启日志文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -USR1 PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送USR2信号给master进程，告诉master进程要平滑升级，这个时候，会重新开启对应的master进程和work进程，整个系统中将会有两个master进程，并且新的master进程的PID会被记录在<code>/usr/local/nginx/logs/nginx.pid</code>而之前的旧的master进程PID会被记录在<code>/usr/local/nginx/logs/nginx.pid.oldbin</code>文件中，接着再次发送QUIT信号给旧的master进程，让其处理完请求后再进行关闭</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -USR2 PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png\" alt=\"img\"></a></p>\n<ol>\n<li>发送WINCH信号给master进程,让master进程控制不让所有的work进程在接收新的请求了，请求处理完后关闭work进程。注意master进程不会被关闭掉</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -WINCH PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -WINCH`cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-Nginx的命令行控制\"><a href=\"#2-2-2-Nginx的命令行控制\" class=\"headerlink\" title=\"2.2.2 Nginx的命令行控制\"></a>2.2.2 Nginx的命令行控制</h3><p>此方式是通过Nginx安装目录下的sbin下的可执行文件nginx来进行Nginx状态的控制，我们可以通过<code>nginx -h</code>来查看都有哪些参数可以用：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png\" alt=\"img\"></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-?和-h:显示帮助信息</span><br><span class=\"line\">-v:打印版本号信息并退出</span><br><span class=\"line\">-V:打印版本号信息和配置信息并退出</span><br><span class=\"line\">-t:测试nginx的配置文件语法是否正确并退出</span><br><span class=\"line\">-T:测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出</span><br><span class=\"line\">-q:在配置测试期间禁止显示非错误消息</span><br><span class=\"line\">-s:signal信号，后面可以跟 ：</span><br><span class=\"line\"> stop[快速关闭，类似于TERM/INT信号的作用]</span><br><span class=\"line\"> quit[优雅的关闭，类似于QUIT信号的作用] </span><br><span class=\"line\"> reopen[重新打开日志文件类似于USR1信号的作用] </span><br><span class=\"line\"> reload[类似于HUP信号的作用]</span><br><span class=\"line\">-p:prefix，指定Nginx的prefix路径，(默认为: /usr/local/nginx/)</span><br><span class=\"line\">-c:filename,指定Nginx的配置文件路径,(默认为: conf/nginx.conf)</span><br><span class=\"line\">-g:用来补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Nginx-服务器版本升级和新增模块\"><a href=\"#2-3-Nginx-服务器版本升级和新增模块\" class=\"headerlink\" title=\"2.3 Nginx 服务器版本升级和新增模块\"></a>2.3 Nginx 服务器版本升级和新增模块</h2><p>如果想对Nginx的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的Nginx服务，然后开启新的Nginx服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到Nginx服务器提供的平滑升级功能。这个也是Nginx的一大特点，使用这种方式，就可以使Nginx在7*24小时不间断的提供服务了。接下来我们分析下需求：</p>\n<p>需求：Nginx的版本最开始使用的是Nginx-1.18.0,由于服务升级，需要将Nginx的版本升级到Nginx-1.20.1,要求Nginx不能中断提供服务。</p>\n<p>为了应对上述的需求，这里我们给大家提供两种解决方案:</p>\n<ul>\n<li>方案一:使用Nginx服务信号完成Nginx的升级</li>\n<li>方案二:使用Nginx安装目录的make命令完成升级</li>\n</ul>\n<h3 id=\"2-3-1-环境准备\"><a href=\"#2-3-1-环境准备\" class=\"headerlink\" title=\"2.3.1 环境准备\"></a>2.3.1 环境准备</h3><p>（1）先准备两个版本的Nginx分别是 1.18.0和1.20.1</p>\n<p>（2）使用Nginx源码安装的方式将1.18.0版本安装成功并正确访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.18.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>（3）将Nginx1.20.1进行参数配置和编译，不需要进行安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-2-使用Nginx服务信号进行升级\"><a href=\"#2-3-2-使用Nginx服务信号进行升级\" class=\"headerlink\" title=\"2.3.2 使用Nginx服务信号进行升级\"></a>2.3.2 使用Nginx服务信号进行升级</h3><p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\" alt=\"img\"></a></p>\n<p>第一步:将1.18.0版本的sbin目录下的nginx进行备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">mv nginx nginx-old</span><br></pre></td></tr></table></figure>\n\n<p>第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来<code>/usr/local/nginx/sbin</code>目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1/objs</span><br><span class=\"line\">cp nginx /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步:发送信号USR2给Nginx的1.18.0版本对应的master进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<p>第四步:发送信号QUIT给Nginx的1.18.0版本对应的master进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT `more /usr/local/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\" alt=\"img\"></a></p>\n<h3 id=\"2-3-3-使用Nginx安装目录的make命令完成升级\"><a href=\"#2-3-3-使用Nginx安装目录的make命令完成升级\" class=\"headerlink\" title=\"2.3.3 使用Nginx安装目录的make命令完成升级\"></a>2.3.3 使用Nginx安装目录的make命令完成升级</h3><p>第一步:将1.18.0版本的sbin目录下的nginx进行备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">mv nginx nginx-old</span><br></pre></td></tr></table></figure>\n\n<p>第二步:将Nginx1.20.1安装目录编译后的objs目录下的nginx文件，拷贝到原来<code>/usr/local/nginx/sbin</code>目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1/objs</span><br><span class=\"line\">cp nginx /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步:进入到安装目录，执行<code>make upgrade</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1/</span><br><span class=\"line\">make upgrade</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png\" alt=\"img\"></a></p>\n<p>第四步:查看是否更新成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -v</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png\" alt=\"img\"></a></p>\n<p>在整个过程中，其实Nginx是一直对外提供服务的。并且当Nginx的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改html目录下的页面来修改我们在页面上所看到的内容</p>\n<h2 id=\"2-4-Nginx-核心配置文件结构\"><a href=\"#2-4-Nginx-核心配置文件结构\" class=\"headerlink\" title=\"2.4 Nginx 核心配置文件结构\"></a>2.4 Nginx 核心配置文件结构</h2><h3 id=\"2-4-1-全局块\"><a href=\"#2-4-1-全局块\" class=\"headerlink\" title=\"2.4.1 全局块\"></a>2.4.1 全局块</h3><p>Nginx的核心配置文件默认是放在<code>/usr/local/nginx/conf/nginx.conf</code>，介绍下nginx.conf的内容和基本配置方法。</p>\n<p>读取Nginx自带的Nginx配置文件，我们将其中的注释部分删除掉后，就剩下下面内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/conf/</span><br><span class=\"line\"></span><br><span class=\"line\"># 清除所有空行和注释</span><br><span class=\"line\">cat nginx.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; &gt; nginx2.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单小结下:</p>\n<ul>\n<li>nginx.conf配置文件中默认有三大块：全局块、events块、http块</li>\n<li>http块中可以配置多个server块，每个server块又可以配置多个location块。</li>\n</ul>\n<p>（1）user指令</p>\n<p>user:用于配置运行Nginx服务器的worker进程的用户和用户组。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">user user [group]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">nobody</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>该属性也可以在编译的时候指定，语法如下<code>./configure --user=user --group=group</code>,如果两个地方都进行了设置，最终生效的是配置文件中的配置。</p>\n<p>该指令的使用步骤:</p>\n<p>1）设置一个用户信息”www”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &quot;1i user gudu;&quot; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png\" alt=\"img\"></a></p>\n<p>2）创建一个用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd gudu</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png\" alt=\"img\"></a></p>\n<p>3）修改user属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user gudu;</span><br></pre></td></tr></table></figure>\n\n<p>4）创建<code>/root/html/index.html</code>页面，添加如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /root/html/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF&gt; /root/html/index.heml</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        width: 35em;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;I am gudu&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>5）修改nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /root/html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6）测试启动访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面会报403拒绝访问的错误</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png\" alt=\"img\"></a></p>\n<p>7）分析原因</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为当前用户没有访问/root/html目录的权限</span><br></pre></td></tr></table></figure>\n\n<p>8）将文件创建到 <code>/home/gudu/html/index.html</code>,修改配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /home/gudu/html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>9）再次测试启动访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">能正常访问。</span><br></pre></td></tr></table></figure>\n\n<p>综上所述，使用user指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p>\n<p>（2）work process指令</p>\n<p>master_process:用来指定是否开启工作进程。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">master_process on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">master_process on;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>worker_processes:用于配置Nginx生成工作进程的数量，这个是Nginx服务器实现并发处理服务的关键所在。理论上来说workder process的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器CPU的内核数保存一致。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">worker_processes num&#x2F;auto;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>如果将worker_processes设置成2，则会看到如下内容:</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png\" alt=\"img\"></a></p>\n<p>（3）其他指令</p>\n<p>1）daemon：设定Nginx是否以守护进程的方式启动。</p>\n<p>守护式进程是linux后台执行的一种服务进程，特点是独立于控制终端，不会随着终端关闭而停止。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">daemon on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">daemon on;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>2）pid:用来配置Nginx当前master进程的进程号ID存储的文件路径。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">pid file;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">默认为:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>该属性可以通过<code>./configure --pid-path=PATH</code>来指定</p>\n<p>error_log:用来配置Nginx的错误日志存放路径</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">error_log file [日志级别];</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">error_log logs&#x2F;error.log error;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块、http、server、location</td>\n</tr>\n</tbody></table>\n<p>该属性可以通过<code>./configure --error-log-path=PATH</code>来指定</p>\n<p>其中日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg，翻译过来为试|信息|通知|警告|错误|临界|警报|紧急，这块建议大家设置的时候不要设置成info以下的等级，因为会带来大量的磁盘I&#x2F;O消耗，影响Nginx的性能。</p>\n<p>3）include:用来引入其他配置文件，使Nginx的配置更加灵活</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">include file;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">无</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">any</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-2-events块\"><a href=\"#2-4-2-events块\" class=\"headerlink\" title=\"2.4.2 events块\"></a>2.4.2 events块</h3><p>（1）accept_mutex:用来设置Nginx网络连接序列化</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">accept_mutex on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">accept_mutex on;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>这个配置主要可以用来解决常说的”惊群”问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx后台是以多进程的工作模式，也就是说有多个worker进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响Nginx的整体性能。</p>\n<p>如果将上述值设置为on(开启状态)，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png\" alt=\"img\"></a></p>\n<p>（2）multi_accept:用来设置是否允许同时接收多个网络连接</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">multi_accept on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">multi_accept off;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接</p>\n<p>（3）worker_connections：用来配置单个worker进程最大的连接数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">worker_connections number;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">worker_commections 512;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number值不能大于操作系统支持打开的最大文件句柄数量。</p>\n<p>（4）use:用来设置Nginx服务器选择哪种事件驱动来处理网络消息。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">use method;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">根据操作系统定</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>注意：此处所选择事件处理模型是Nginx优化部分的一个重要内容，method的可选值有select&#x2F;poll&#x2F;epoll&#x2F;kqueue等，之前在准备centos环境的时候，我们强调过要使用linux内核在2.6以上，就是为了能使用epoll函数来优化Nginx。</p>\n<p>另外这些值的选择，我们也可以在编译的时候使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--with-select_module</span><br><span class=\"line\">--without-select_module</span><br><span class=\"line\">--with-poll_module</span><br><span class=\"line\">--without-poll_module</span><br></pre></td></tr></table></figure>\n\n<p>来设置是否需要将对应的事件驱动模块编译到Nginx的内核。</p>\n<p><strong>events指令配置实例</strong></p>\n<p>打开Nginx的配置文件 nginx.conf,添加如下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;</span><br><span class=\"line\">    accept_mutex on;</span><br><span class=\"line\">    multi_accept on;</span><br><span class=\"line\">    worker_commections 1024;</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -t</span><br><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-3-http块\"><a href=\"#2-4-3-http块\" class=\"headerlink\" title=\"2.4.3 http块\"></a>2.4.3 http块</h3><p>（1）定义MIME-Type</p>\n<p>我们都知道浏览器中可以显示的内容有HTML、XML、GIF等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用MIME Type。所以说MIME Type是网络资源的媒体类型。Nginx作为web服务器，也需要能够识别前端请求的资源类型。</p>\n<p>在Nginx的配置文件中，默认有两行配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include mime.types;</span><br><span class=\"line\">default_type application/octet-stream;</span><br></pre></td></tr></table></figure>\n\n<p>default_type:用来配置Nginx响应前端请求默认的MIME类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">default_type mime-type;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">default_type text&#x2F;plain；</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<p>在default_type之前还有一句<code>include mime.types</code>,include之前我们已经介绍过，相当于把mime.types文件中MIMT类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。</p>\n<p><strong>举例说明：</strong></p>\n<p>有些时候请求某些接口的时候需要返回指定的文本字符串或者json字符串，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用nginx快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。</p>\n<p><strong>如何实现：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /get_text &#123;</span><br><span class=\"line\">    #这里也可以设置成text/plain</span><br><span class=\"line\">    default_type text/html;</span><br><span class=\"line\">    return 200 &quot;This is nginx&#x27;s text&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location /get_json&#123;</span><br><span class=\"line\">    default_type application/json;</span><br><span class=\"line\">    return 200 &#x27;&#123;&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）自定义服务日志</p>\n<p>Nginx中日志的类型分access.log、error.log。</p>\n<ul>\n<li>access.log:用来记录用户所有的访问请求。</li>\n<li>error.log:记录nginx本身运行时的错误信息，不会记录用户的访问请求。</li>\n</ul>\n<p>Nginx服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是access_log和log_format指令。</p>\n<p>1）access_log:用来设置用户访问日志的相关属性。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">access_log path[format[buffer&#x3D;size]]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">access_log logs&#x2F;access.log combined;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\"><code>http</code>, <code>server</code>, <code>location</code></td>\n</tr>\n</tbody></table>\n<p>2）log_format:用来指定日志的输出格式。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">log_format name [escape&#x3D;default|json|none] string….;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">log_format combined “…”;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http</td>\n</tr>\n</tbody></table>\n<p>（3）其他配置指令</p>\n<p>1）sendfile:用来设置Nginx服务器是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">sendfile on|off；</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">sendfile off;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<p>2）keepalive_timeout:用来设置长连接的超时时间。</p>\n<p>我们都知道HTTP是一种无状态协议，客户端向服务端发送一个TCP请求，服务端响应完毕后断开连接。</p>\n<p>如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用keepalive模式，可以告诉服务器端在处理完一个请求后保持这个TCP连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">keepalive_timeout time;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">keepalive_timeout 75s;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<p>3）keepalive_requests:用来设置一个keep-alive连接使用的次数。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">keepalive_requests number;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">keepalive_requests 100;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-4-server块和location块\"><a href=\"#2-4-4-server块和location块\" class=\"headerlink\" title=\"2.4.4 server块和location块\"></a>2.4.4 server块和location块</h3><p>server块和location块都是我们要重点讲解和学习的内容，因为我们后面会对Nginx的功能进行详细讲解，所以这块内容就放到静态资源部署的地方给大家详细说明。</p>\n<p>主要来认识下Nginx默认给的nginx.conf中的相关内容，以及server块与location块在使用的时候需要注意的一些内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    error_page   500 502 503 504 404  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"2-Nginx-目录结构及配置文件详解\"><a href=\"#2-Nginx-目录结构及配置文件详解\" class=\"headerlink\" title=\"2 Nginx 目录结构及配置文件详解\"></a>2 Nginx 目录结构及配置文件详解</h1><h2 id=\"2-1-Nginx-目录结构分析\"><a href=\"#2-1-Nginx-目录结构分析\" class=\"headerlink\" title=\"2.1 Nginx 目录结构分析\"></a>2.1 Nginx 目录结构分析</h2><p>在使用Nginx之前，我们先对安装好的Nginx目录文件进行一个分析，在这块给大家介绍一个工具tree，通过tree我们可以很方面的去查看centos系统上的文件目录结构，当然，如果想使用tree工具，就得先通过<code>yum install -y tree</code>来进行安装，安装成功后，可以通过执行<code>tree /usr/local/nginx</code>(tree后面跟的是Nginx的安装目录)，获取的结果如下：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111165836807.png\" alt=\"img\"></a></p>\n<ul>\n<li><p>conf:nginx所有配置文件目录</p>\n<ul>\n<li>CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用CGI【程序】处理及相应结果给客户端的一种标准规范。</li>\n</ul>\n</li>\n<li><p>fastcgi.conf:fastcgi相关配置文件</p>\n</li>\n<li><p>fastcgi.conf.default:fastcgi.conf的备份文件</p>\n</li>\n<li><p>fastcgi_params:fastcgi的参数文件</p>\n</li>\n<li><p>fastcgi_params.default:fastcgi的参数备份文件</p>\n</li>\n<li><p>scgi_params:scgi的参数文件</p>\n</li>\n<li><p>scgi_params.default：scgi的参数备份文件</p>\n</li>\n<li><p>uwsgi_params:uwsgi的参数文件</p>\n</li>\n<li><p>uwsgi_params.default:uwsgi的参数备份文件</p>\n</li>\n<li><p>mime.types:记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系</p>\n</li>\n<li><p>mime.types.default:mime.types的备份文件</p>\n</li>\n<li><p>nginx.conf:这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</p>\n</li>\n<li><p>nginx.conf.default:nginx.conf的备份文件</p>\n</li>\n<li><p>koi-utf、koi-win、win-utf这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码</p>\n</li>\n<li><p>html:存放nginx自带的两个静态的html页面</p>\n<ul>\n<li>50x.html:访问失败后的失败页面</li>\n<li>index.html:成功访问的默认首页</li>\n</ul>\n</li>\n<li><p>logs:记录入门的文件，当nginx服务器启动后，这里面会有 access.log error.log 和nginx.pid三个文件出现。</p>\n</li>\n<li><p>sbin:是存放执行程序文件nginx</p>\n<ul>\n<li>nginx是用来控制Nginx的启动和停止等相关的命令。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-Nginx-服务器启停命令\"><a href=\"#2-2-Nginx-服务器启停命令\" class=\"headerlink\" title=\"2.2 Nginx 服务器启停命令\"></a>2.2 Nginx 服务器启停命令</h2><p>Nginx安装完成后，接下来我们要学习的是如何启动、重启和停止Nginx的服务。</p>\n<p>对于Nginx的启停在linux系统中也有很多种方式，介绍两种方式：</p>\n<ul>\n<li>Nginx服务的信号控制</li>\n<li>Nginx的命令行控制</li>\n</ul>\n<h3 id=\"2-2-1-Nginx服务的信号控制\"><a href=\"#2-2-1-Nginx服务的信号控制\" class=\"headerlink\" title=\"2.2.1 Nginx服务的信号控制\"></a>2.2.1 Nginx服务的信号控制</h3><p>前面在提到Nginx的高性能，其实也和它的架构模式有关。Nginx默认采用的是多进程的方式来工作的，当将Nginx启动后，我们通过<code>ps -ef | grep nginx</code>命令可以查看到如下内容：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170340002.png\" alt=\"img\"></a></p>\n<p>从上图中可以看到,Nginx后台进程中包含一个master进程和多个worker进程，master进程主要用来管理worker进程，包含接收外界的信息，并将接收到的信号发送给各个worker进程，监控worker进程的状态，当worker进程出现异常退出后，会自动重新启动新的worker进程。</p>\n<p>而worker进程则是专门用来处理用户请求的，各个worker进程之间是平等的并且相互独立，处理请求的机会也是一样的。nginx的进程模型，我们可以通过下图来说明下：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581444603231.png\" alt=\"img\"></a></p>\n<p>我们现在作为管理员，只需要通过给master进程发送信号就可以来控制Nginx,这个时候我们需要有两个前提条件，一个是要操作的master进程，一个是信号。</p>\n<p>（1）要想操作Nginx的master进程，就需要获取到master进程的进程号ID。获取方式简单介绍两个，</p>\n<ul>\n<li>方式一：通过<code>ps -ef | grep nginx</code>；</li>\n<li>方式二：在讲解nginx的<code>./configure</code>的配置参数的时候，有一个参数是<code>--pid-path=PATH</code>默认是<code>/usr/local/nginx/logs/nginx.pid</code>,所以可以通过查看该文件来获取nginx的master进程ID.</li>\n</ul>\n<p>（2）信号</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">信号</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TERM&#x2F;INT</td>\n<td align=\"left\">立即关闭整个服务</td>\n</tr>\n<tr>\n<td align=\"left\">QUIT</td>\n<td align=\"left\">“优雅”地关闭整个服务</td>\n</tr>\n<tr>\n<td align=\"left\">HUP</td>\n<td align=\"left\">重读配置文件并使用服务对新配置项生效</td>\n</tr>\n<tr>\n<td align=\"left\">USR1</td>\n<td align=\"left\">重新打开日志文件，可以用来进行日志切割</td>\n</tr>\n<tr>\n<td align=\"left\">USR2</td>\n<td align=\"left\">平滑升级到最新版的nginx</td>\n</tr>\n<tr>\n<td align=\"left\">WINCH</td>\n<td align=\"left\">所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令</td>\n</tr>\n</tbody></table>\n<p>调用命令为<code>kill -signal PID</code></p>\n<p>signal:即为信号；PID即为获取到的master线程ID</p>\n<ol>\n<li>发送TERM&#x2F;INT信号给master进程，会将Nginx服务立即关闭。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -TERM PID</span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kill -INT PID</span><br><span class=\"line\">kill -INT `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送QUIT信号给master进程，master进程会控制所有的work进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送HUP信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -HUP PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送USR1信号给master进程，告诉Nginx重新开启日志文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -USR1 PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发送USR2信号给master进程，告诉master进程要平滑升级，这个时候，会重新开启对应的master进程和work进程，整个系统中将会有两个master进程，并且新的master进程的PID会被记录在<code>/usr/local/nginx/logs/nginx.pid</code>而之前的旧的master进程PID会被记录在<code>/usr/local/nginx/logs/nginx.pid.oldbin</code>文件中，接着再次发送QUIT信号给旧的master进程，让其处理完请求后再进行关闭</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -USR2 PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1586368250085.png\" alt=\"img\"></a></p>\n<ol>\n<li>发送WINCH信号给master进程,让master进程控制不让所有的work进程在接收新的请求了，请求处理完后关闭work进程。注意master进程不会被关闭掉</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -WINCH PID</span><br><span class=\"line\"></span><br><span class=\"line\">kill -WINCH`cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-Nginx的命令行控制\"><a href=\"#2-2-2-Nginx的命令行控制\" class=\"headerlink\" title=\"2.2.2 Nginx的命令行控制\"></a>2.2.2 Nginx的命令行控制</h3><p>此方式是通过Nginx安装目录下的sbin下的可执行文件nginx来进行Nginx状态的控制，我们可以通过<code>nginx -h</code>来查看都有哪些参数可以用：</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111170130395.png\" alt=\"img\"></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-?和-h:显示帮助信息</span><br><span class=\"line\">-v:打印版本号信息并退出</span><br><span class=\"line\">-V:打印版本号信息和配置信息并退出</span><br><span class=\"line\">-t:测试nginx的配置文件语法是否正确并退出</span><br><span class=\"line\">-T:测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出</span><br><span class=\"line\">-q:在配置测试期间禁止显示非错误消息</span><br><span class=\"line\">-s:signal信号，后面可以跟 ：</span><br><span class=\"line\"> stop[快速关闭，类似于TERM/INT信号的作用]</span><br><span class=\"line\"> quit[优雅的关闭，类似于QUIT信号的作用] </span><br><span class=\"line\"> reopen[重新打开日志文件类似于USR1信号的作用] </span><br><span class=\"line\"> reload[类似于HUP信号的作用]</span><br><span class=\"line\">-p:prefix，指定Nginx的prefix路径，(默认为: /usr/local/nginx/)</span><br><span class=\"line\">-c:filename,指定Nginx的配置文件路径,(默认为: conf/nginx.conf)</span><br><span class=\"line\">-g:用来补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Nginx-服务器版本升级和新增模块\"><a href=\"#2-3-Nginx-服务器版本升级和新增模块\" class=\"headerlink\" title=\"2.3 Nginx 服务器版本升级和新增模块\"></a>2.3 Nginx 服务器版本升级和新增模块</h2><p>如果想对Nginx的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的Nginx服务，然后开启新的Nginx服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到Nginx服务器提供的平滑升级功能。这个也是Nginx的一大特点，使用这种方式，就可以使Nginx在7*24小时不间断的提供服务了。接下来我们分析下需求：</p>\n<p>需求：Nginx的版本最开始使用的是Nginx-1.18.0,由于服务升级，需要将Nginx的版本升级到Nginx-1.20.1,要求Nginx不能中断提供服务。</p>\n<p>为了应对上述的需求，这里我们给大家提供两种解决方案:</p>\n<ul>\n<li>方案一:使用Nginx服务信号完成Nginx的升级</li>\n<li>方案二:使用Nginx安装目录的make命令完成升级</li>\n</ul>\n<h3 id=\"2-3-1-环境准备\"><a href=\"#2-3-1-环境准备\" class=\"headerlink\" title=\"2.3.1 环境准备\"></a>2.3.1 环境准备</h3><p>（1）先准备两个版本的Nginx分别是 1.18.0和1.20.1</p>\n<p>（2）使用Nginx源码安装的方式将1.18.0版本安装成功并正确访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.18.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>（3）将Nginx1.20.1进行参数配置和编译，不需要进行安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-2-使用Nginx服务信号进行升级\"><a href=\"#2-3-2-使用Nginx服务信号进行升级\" class=\"headerlink\" title=\"2.3.2 使用Nginx服务信号进行升级\"></a>2.3.2 使用Nginx服务信号进行升级</h3><p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\" alt=\"img\"></a></p>\n<p>第一步:将1.18.0版本的sbin目录下的nginx进行备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">mv nginx nginx-old</span><br></pre></td></tr></table></figure>\n\n<p>第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来<code>/usr/local/nginx/sbin</code>目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1/objs</span><br><span class=\"line\">cp nginx /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步:发送信号USR2给Nginx的1.18.0版本对应的master进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<p>第四步:发送信号QUIT给Nginx的1.18.0版本对应的master进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT `more /usr/local/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111171440253.png\" alt=\"img\"></a></p>\n<h3 id=\"2-3-3-使用Nginx安装目录的make命令完成升级\"><a href=\"#2-3-3-使用Nginx安装目录的make命令完成升级\" class=\"headerlink\" title=\"2.3.3 使用Nginx安装目录的make命令完成升级\"></a>2.3.3 使用Nginx安装目录的make命令完成升级</h3><p>第一步:将1.18.0版本的sbin目录下的nginx进行备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">mv nginx nginx-old</span><br></pre></td></tr></table></figure>\n\n<p>第二步:将Nginx1.20.1安装目录编译后的objs目录下的nginx文件，拷贝到原来<code>/usr/local/nginx/sbin</code>目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1/objs</span><br><span class=\"line\">cp nginx /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步:进入到安装目录，执行<code>make upgrade</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/nginx-1.20.1/</span><br><span class=\"line\">make upgrade</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172704225.png\" alt=\"img\"></a></p>\n<p>第四步:查看是否更新成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -v</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111172724686.png\" alt=\"img\"></a></p>\n<p>在整个过程中，其实Nginx是一直对外提供服务的。并且当Nginx的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改html目录下的页面来修改我们在页面上所看到的内容</p>\n<h2 id=\"2-4-Nginx-核心配置文件结构\"><a href=\"#2-4-Nginx-核心配置文件结构\" class=\"headerlink\" title=\"2.4 Nginx 核心配置文件结构\"></a>2.4 Nginx 核心配置文件结构</h2><h3 id=\"2-4-1-全局块\"><a href=\"#2-4-1-全局块\" class=\"headerlink\" title=\"2.4.1 全局块\"></a>2.4.1 全局块</h3><p>Nginx的核心配置文件默认是放在<code>/usr/local/nginx/conf/nginx.conf</code>，介绍下nginx.conf的内容和基本配置方法。</p>\n<p>读取Nginx自带的Nginx配置文件，我们将其中的注释部分删除掉后，就剩下下面内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/conf/</span><br><span class=\"line\"></span><br><span class=\"line\"># 清除所有空行和注释</span><br><span class=\"line\">cat nginx.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; &gt; nginx2.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单小结下:</p>\n<ul>\n<li>nginx.conf配置文件中默认有三大块：全局块、events块、http块</li>\n<li>http块中可以配置多个server块，每个server块又可以配置多个location块。</li>\n</ul>\n<p>（1）user指令</p>\n<p>user:用于配置运行Nginx服务器的worker进程的用户和用户组。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">user user [group]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">nobody</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>该属性也可以在编译的时候指定，语法如下<code>./configure --user=user --group=group</code>,如果两个地方都进行了设置，最终生效的是配置文件中的配置。</p>\n<p>该指令的使用步骤:</p>\n<p>1）设置一个用户信息”www”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &quot;1i user gudu;&quot; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111180913679.png\" alt=\"img\"></a></p>\n<p>2）创建一个用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd gudu</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181001627.png\" alt=\"img\"></a></p>\n<p>3）修改user属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user gudu;</span><br></pre></td></tr></table></figure>\n\n<p>4）创建<code>/root/html/index.html</code>页面，添加如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /root/html/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF&gt; /root/html/index.heml</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        width: 35em;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;I am gudu&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>5）修改nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /root/html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6）测试启动访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面会报403拒绝访问的错误</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181505488.png\" alt=\"img\"></a></p>\n<p>7）分析原因</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为当前用户没有访问/root/html目录的权限</span><br></pre></td></tr></table></figure>\n\n<p>8）将文件创建到 <code>/home/gudu/html/index.html</code>,修改配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /home/gudu/html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>9）再次测试启动访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">能正常访问。</span><br></pre></td></tr></table></figure>\n\n<p>综上所述，使用user指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p>\n<p>（2）work process指令</p>\n<p>master_process:用来指定是否开启工作进程。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">master_process on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">master_process on;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>worker_processes:用于配置Nginx生成工作进程的数量，这个是Nginx服务器实现并发处理服务的关键所在。理论上来说workder process的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器CPU的内核数保存一致。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">worker_processes num&#x2F;auto;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>如果将worker_processes设置成2，则会看到如下内容:</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/image-20211111181702718.png\" alt=\"img\"></a></p>\n<p>（3）其他指令</p>\n<p>1）daemon：设定Nginx是否以守护进程的方式启动。</p>\n<p>守护式进程是linux后台执行的一种服务进程，特点是独立于控制终端，不会随着终端关闭而停止。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">daemon on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">daemon on;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>2）pid:用来配置Nginx当前master进程的进程号ID存储的文件路径。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">pid file;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">默认为:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块</td>\n</tr>\n</tbody></table>\n<p>该属性可以通过<code>./configure --pid-path=PATH</code>来指定</p>\n<p>error_log:用来配置Nginx的错误日志存放路径</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">error_log file [日志级别];</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">error_log logs&#x2F;error.log error;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">全局块、http、server、location</td>\n</tr>\n</tbody></table>\n<p>该属性可以通过<code>./configure --error-log-path=PATH</code>来指定</p>\n<p>其中日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg，翻译过来为试|信息|通知|警告|错误|临界|警报|紧急，这块建议大家设置的时候不要设置成info以下的等级，因为会带来大量的磁盘I&#x2F;O消耗，影响Nginx的性能。</p>\n<p>3）include:用来引入其他配置文件，使Nginx的配置更加灵活</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">include file;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">无</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">any</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-2-events块\"><a href=\"#2-4-2-events块\" class=\"headerlink\" title=\"2.4.2 events块\"></a>2.4.2 events块</h3><p>（1）accept_mutex:用来设置Nginx网络连接序列化</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">accept_mutex on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">accept_mutex on;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>这个配置主要可以用来解决常说的”惊群”问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx后台是以多进程的工作模式，也就是说有多个worker进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响Nginx的整体性能。</p>\n<p>如果将上述值设置为on(开启状态)，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。</p>\n<p><a href=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png\"><img src=\"https://gitee.com/wei_cunqi/images/raw/master/nginx/2/1581566971955.png\" alt=\"img\"></a></p>\n<p>（2）multi_accept:用来设置是否允许同时接收多个网络连接</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">multi_accept on|off;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">multi_accept off;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接</p>\n<p>（3）worker_connections：用来配置单个worker进程最大的连接数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">worker_connections number;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">worker_commections 512;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number值不能大于操作系统支持打开的最大文件句柄数量。</p>\n<p>（4）use:用来设置Nginx服务器选择哪种事件驱动来处理网络消息。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">use method;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">根据操作系统定</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">events</td>\n</tr>\n</tbody></table>\n<p>注意：此处所选择事件处理模型是Nginx优化部分的一个重要内容，method的可选值有select&#x2F;poll&#x2F;epoll&#x2F;kqueue等，之前在准备centos环境的时候，我们强调过要使用linux内核在2.6以上，就是为了能使用epoll函数来优化Nginx。</p>\n<p>另外这些值的选择，我们也可以在编译的时候使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--with-select_module</span><br><span class=\"line\">--without-select_module</span><br><span class=\"line\">--with-poll_module</span><br><span class=\"line\">--without-poll_module</span><br></pre></td></tr></table></figure>\n\n<p>来设置是否需要将对应的事件驱动模块编译到Nginx的内核。</p>\n<p><strong>events指令配置实例</strong></p>\n<p>打开Nginx的配置文件 nginx.conf,添加如下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;</span><br><span class=\"line\">    accept_mutex on;</span><br><span class=\"line\">    multi_accept on;</span><br><span class=\"line\">    worker_commections 1024;</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -t</span><br><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-3-http块\"><a href=\"#2-4-3-http块\" class=\"headerlink\" title=\"2.4.3 http块\"></a>2.4.3 http块</h3><p>（1）定义MIME-Type</p>\n<p>我们都知道浏览器中可以显示的内容有HTML、XML、GIF等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用MIME Type。所以说MIME Type是网络资源的媒体类型。Nginx作为web服务器，也需要能够识别前端请求的资源类型。</p>\n<p>在Nginx的配置文件中，默认有两行配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include mime.types;</span><br><span class=\"line\">default_type application/octet-stream;</span><br></pre></td></tr></table></figure>\n\n<p>default_type:用来配置Nginx响应前端请求默认的MIME类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">default_type mime-type;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">default_type text&#x2F;plain；</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<p>在default_type之前还有一句<code>include mime.types</code>,include之前我们已经介绍过，相当于把mime.types文件中MIMT类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。</p>\n<p><strong>举例说明：</strong></p>\n<p>有些时候请求某些接口的时候需要返回指定的文本字符串或者json字符串，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用nginx快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。</p>\n<p><strong>如何实现：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /get_text &#123;</span><br><span class=\"line\">    #这里也可以设置成text/plain</span><br><span class=\"line\">    default_type text/html;</span><br><span class=\"line\">    return 200 &quot;This is nginx&#x27;s text&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location /get_json&#123;</span><br><span class=\"line\">    default_type application/json;</span><br><span class=\"line\">    return 200 &#x27;&#123;&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）自定义服务日志</p>\n<p>Nginx中日志的类型分access.log、error.log。</p>\n<ul>\n<li>access.log:用来记录用户所有的访问请求。</li>\n<li>error.log:记录nginx本身运行时的错误信息，不会记录用户的访问请求。</li>\n</ul>\n<p>Nginx服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是access_log和log_format指令。</p>\n<p>1）access_log:用来设置用户访问日志的相关属性。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">access_log path[format[buffer&#x3D;size]]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">access_log logs&#x2F;access.log combined;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\"><code>http</code>, <code>server</code>, <code>location</code></td>\n</tr>\n</tbody></table>\n<p>2）log_format:用来指定日志的输出格式。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">log_format name [escape&#x3D;default|json|none] string….;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">log_format combined “…”;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http</td>\n</tr>\n</tbody></table>\n<p>（3）其他配置指令</p>\n<p>1）sendfile:用来设置Nginx服务器是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">sendfile on|off；</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">sendfile off;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<p>2）keepalive_timeout:用来设置长连接的超时时间。</p>\n<p>我们都知道HTTP是一种无状态协议，客户端向服务端发送一个TCP请求，服务端响应完毕后断开连接。</p>\n<p>如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用keepalive模式，可以告诉服务器端在处理完一个请求后保持这个TCP连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">keepalive_timeout time;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">keepalive_timeout 75s;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<p>3）keepalive_requests:用来设置一个keep-alive连接使用的次数。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">keepalive_requests number;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">默认值</td>\n<td align=\"left\">keepalive_requests 100;</td>\n</tr>\n<tr>\n<td align=\"left\">位置</td>\n<td align=\"left\">http、server、location</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-4-server块和location块\"><a href=\"#2-4-4-server块和location块\" class=\"headerlink\" title=\"2.4.4 server块和location块\"></a>2.4.4 server块和location块</h3><p>server块和location块都是我们要重点讲解和学习的内容，因为我们后面会对Nginx的功能进行详细讲解，所以这块内容就放到静态资源部署的地方给大家详细说明。</p>\n<p>主要来认识下Nginx默认给的nginx.conf中的相关内容，以及server块与location块在使用的时候需要注意的一些内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    error_page   500 502 503 504 404  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"macOS Sequoia 15","date":"2024-09-16T11:49:00.326Z","_content":"macOS Sequoia 推出了一系列新功能，可助你在 Mac 上提高生产力和创造力。通过最新连续互通功能 iPhone 镜像，你可以在 Mac 上访问整个 iPhone。轻松平铺窗口快速打造理想工作空间，还可查看通过演讲者前置演示时即将共享的内容。经过重大更新的 Safari 浏览器带来了干扰控制，可让你在浏览网页的同时轻松完成各种任务。macOS Sequoia 还为“信息”带来了文字效果和表情符号点回，为“计算器”带来了数学笔记等。\n\niPhone 镜像\n\t•\tiPhone 镜像可让你在 Mac 上访问和控制 iPhone，从而在 Mac 上轻松浏览主屏幕、启动 iPhone App 并与之交互\n\t•\t键盘和触控板支持可让你键入并使用多点触控手势轻扫浏览主屏幕上的 App、双指开合来缩放以及在 App 中滚动\n\t•\tMac 上的 iPhone 通知可让你直接在 Mac 上查看 iPhone 通知并进行操作\n窗口平铺更轻松\n\t•\t增强型窗口平铺可让你更轻松地排列窗口。可以将窗口拖移至屏幕边缘并排放置，或者拖到桌面角落实现平铺\n\t•\t使用键盘和菜单快捷键更快速将窗口平铺到某个位置\nSafari 浏览器\n\t•\t“干扰控制”可帮助你隐藏网页上干扰浏览的项目\n\t•\t观看器可让你无干扰观看视频，并在点按离开页面时自动将视频移入画中画\n密码\n\t•\t“密码” App 可让你集中查看网站和 App 的所有凭证，从而更轻松访问密码、通行密钥、Wi-Fi 密码和验证码\n\t•\t直接在“密码”中设置验证码，无需打开 App 即可轻松拷贝验证码或自动填充至 Safari 浏览器\n\t•\t安全同步确保存储在“密码”中的账户通过端对端加密与 iCloud 无缝同步，以便你在其他设备上访问\n\t•\t通过 iCloud 密码 App 支持 Windows，在 Windows 设备上也能访问密码\n视频会议\n\t•\t演讲者前置可让你在视频通话中共享自己的屏幕前进行预览\n\t•\t播放预览可让你预览在 Keynote 讲演中点按“播放”时内容和演讲者注释显示的位置\n\t•\t背景替换可让你上传自己的照片或从多个内建选项中选择，以将其用作视频通话背景\n信息\n\t•\t文字效果通过爆发、波纹和点头等动画效果从视觉上放大 iMessage 信息中的字母、字词、短语或表情符号，让对话更加生动\n\t•\t文本格式化可让你为 iMessage 信息中的字母、字词或短语添加粗体、下划线、斜体和删除线\n\t•\t表情符号和贴纸点回可让你使用任意表情符号或贴纸回应信息，轻扫一下即可访问你和朋友最常发送的点回内容\n\t•\t“稍后发送”可让你现在编写信息并定z时稍后发送\n地图\n\t•\t为公园徒步路线、社区日常锻炼路线、度假步行游览路线等创建自定义步行和徒步路线\n\t•\t地点资料库集中一处囊括了所有已存地点、指南和徒步路线以便轻松访问\n备忘录\n\t•\t直接从备忘录开始录音，并与相关注释、核对清单和文稿一起保存\n\t•\t“数学笔记”可让你在备忘录中输入表达式并立即求解\n\t•\t可折叠区域能协助简化和隐藏篇幅较长备忘录中的文本；只需在区域标题旁边点按即可让冗长繁杂的备忘录更精简轻盈\n\t•\t选择五种颜色高亮标记备忘录中的文本，让文本内容更加突出\n照片\n\t•\t精选集在边栏中按照“日子”、“旅程”、“人物与宠物”以及“精选照片”等实用主题自动整理图库\n\t•\t“人物与宠物”群组包括经常一起出现的喜爱人物或宠物照片\n\t•\t视频速度控制可让你减慢包含入点和出点的高帧速率视频内容\n\t•\t“更多项目”包含额外的实用精选集，例如“文稿”、“收据”等，以及最近编辑、查看和共享的项目\n\t•\t“更多项目”中的“已恢复”相簿会显示设备上之前由于锁定相簿数据库损坏而不可见的图像\n“视频” App\n\t•\t字幕会适时自动显示，例如观看节目时内容语言与设备语言不匹配、音频静音或者快退时\nAirPods\n\t•\t免动手 Siri 交互方式可让你使用 AirPods 简单点头表示“是”或者摇头表示“否”来回应 Siri 播报\n\t•\tAirPods Pro “语音突显”可在大风环境或背景噪声较大的地方为通话对象提供更清晰的通话质量\n\t•\t佩戴 AirPods 玩游戏时通过个性化空间音频享受身临其境的环绕声体验，结合为开发者提供的全新 API 可让你更轻松地拥有这种体验\n\n本更新还包括其他功能和改进：\n\t•\t“计算器” App 中经过更新的基础和科学计算器现可求解表达式、转换单位和访问之前计算的历史记录\n\t•\t“日历”中的“提醒事项”可让你随会议和预约安排创建、查看、编辑和完成提醒事项\n\t•\t“提醒事项”中的“最近删除”列表可让你查看和取回删除的提醒事项\n\t•\t“无边记”中的场景可让你将内容整理到各部分，然后随心存储、添加标签和排序\n\t•\t“天气” App 中体感温度与实际温度明显不同时，体感温度会突出显示在实际温度旁\n\t•\t“家庭” App 中的客人访问可让你向访客提供基于日期和时间的门锁、车库门和警报系统的访问权限\n\t•\t“人声快捷指令”辅助功能可帮助有严重非典型言语症状的人士在 Mac 上录制触发特定操作的自定义话语\n\n某些功能并非在所有地区都可用，也并非在所有 Apple 设备上都可用。","source":"_posts/macOS Sequoia 15.md","raw":"---\ntitle: macOS Sequoia 15\ndate: 2024-09-16T19:49:00.326Z\ntags: []\ncategories: []\n---\nmacOS Sequoia 推出了一系列新功能，可助你在 Mac 上提高生产力和创造力。通过最新连续互通功能 iPhone 镜像，你可以在 Mac 上访问整个 iPhone。轻松平铺窗口快速打造理想工作空间，还可查看通过演讲者前置演示时即将共享的内容。经过重大更新的 Safari 浏览器带来了干扰控制，可让你在浏览网页的同时轻松完成各种任务。macOS Sequoia 还为“信息”带来了文字效果和表情符号点回，为“计算器”带来了数学笔记等。\n\niPhone 镜像\n\t•\tiPhone 镜像可让你在 Mac 上访问和控制 iPhone，从而在 Mac 上轻松浏览主屏幕、启动 iPhone App 并与之交互\n\t•\t键盘和触控板支持可让你键入并使用多点触控手势轻扫浏览主屏幕上的 App、双指开合来缩放以及在 App 中滚动\n\t•\tMac 上的 iPhone 通知可让你直接在 Mac 上查看 iPhone 通知并进行操作\n窗口平铺更轻松\n\t•\t增强型窗口平铺可让你更轻松地排列窗口。可以将窗口拖移至屏幕边缘并排放置，或者拖到桌面角落实现平铺\n\t•\t使用键盘和菜单快捷键更快速将窗口平铺到某个位置\nSafari 浏览器\n\t•\t“干扰控制”可帮助你隐藏网页上干扰浏览的项目\n\t•\t观看器可让你无干扰观看视频，并在点按离开页面时自动将视频移入画中画\n密码\n\t•\t“密码” App 可让你集中查看网站和 App 的所有凭证，从而更轻松访问密码、通行密钥、Wi-Fi 密码和验证码\n\t•\t直接在“密码”中设置验证码，无需打开 App 即可轻松拷贝验证码或自动填充至 Safari 浏览器\n\t•\t安全同步确保存储在“密码”中的账户通过端对端加密与 iCloud 无缝同步，以便你在其他设备上访问\n\t•\t通过 iCloud 密码 App 支持 Windows，在 Windows 设备上也能访问密码\n视频会议\n\t•\t演讲者前置可让你在视频通话中共享自己的屏幕前进行预览\n\t•\t播放预览可让你预览在 Keynote 讲演中点按“播放”时内容和演讲者注释显示的位置\n\t•\t背景替换可让你上传自己的照片或从多个内建选项中选择，以将其用作视频通话背景\n信息\n\t•\t文字效果通过爆发、波纹和点头等动画效果从视觉上放大 iMessage 信息中的字母、字词、短语或表情符号，让对话更加生动\n\t•\t文本格式化可让你为 iMessage 信息中的字母、字词或短语添加粗体、下划线、斜体和删除线\n\t•\t表情符号和贴纸点回可让你使用任意表情符号或贴纸回应信息，轻扫一下即可访问你和朋友最常发送的点回内容\n\t•\t“稍后发送”可让你现在编写信息并定z时稍后发送\n地图\n\t•\t为公园徒步路线、社区日常锻炼路线、度假步行游览路线等创建自定义步行和徒步路线\n\t•\t地点资料库集中一处囊括了所有已存地点、指南和徒步路线以便轻松访问\n备忘录\n\t•\t直接从备忘录开始录音，并与相关注释、核对清单和文稿一起保存\n\t•\t“数学笔记”可让你在备忘录中输入表达式并立即求解\n\t•\t可折叠区域能协助简化和隐藏篇幅较长备忘录中的文本；只需在区域标题旁边点按即可让冗长繁杂的备忘录更精简轻盈\n\t•\t选择五种颜色高亮标记备忘录中的文本，让文本内容更加突出\n照片\n\t•\t精选集在边栏中按照“日子”、“旅程”、“人物与宠物”以及“精选照片”等实用主题自动整理图库\n\t•\t“人物与宠物”群组包括经常一起出现的喜爱人物或宠物照片\n\t•\t视频速度控制可让你减慢包含入点和出点的高帧速率视频内容\n\t•\t“更多项目”包含额外的实用精选集，例如“文稿”、“收据”等，以及最近编辑、查看和共享的项目\n\t•\t“更多项目”中的“已恢复”相簿会显示设备上之前由于锁定相簿数据库损坏而不可见的图像\n“视频” App\n\t•\t字幕会适时自动显示，例如观看节目时内容语言与设备语言不匹配、音频静音或者快退时\nAirPods\n\t•\t免动手 Siri 交互方式可让你使用 AirPods 简单点头表示“是”或者摇头表示“否”来回应 Siri 播报\n\t•\tAirPods Pro “语音突显”可在大风环境或背景噪声较大的地方为通话对象提供更清晰的通话质量\n\t•\t佩戴 AirPods 玩游戏时通过个性化空间音频享受身临其境的环绕声体验，结合为开发者提供的全新 API 可让你更轻松地拥有这种体验\n\n本更新还包括其他功能和改进：\n\t•\t“计算器” App 中经过更新的基础和科学计算器现可求解表达式、转换单位和访问之前计算的历史记录\n\t•\t“日历”中的“提醒事项”可让你随会议和预约安排创建、查看、编辑和完成提醒事项\n\t•\t“提醒事项”中的“最近删除”列表可让你查看和取回删除的提醒事项\n\t•\t“无边记”中的场景可让你将内容整理到各部分，然后随心存储、添加标签和排序\n\t•\t“天气” App 中体感温度与实际温度明显不同时，体感温度会突出显示在实际温度旁\n\t•\t“家庭” App 中的客人访问可让你向访客提供基于日期和时间的门锁、车库门和警报系统的访问权限\n\t•\t“人声快捷指令”辅助功能可帮助有严重非典型言语症状的人士在 Mac 上录制触发特定操作的自定义话语\n\n某些功能并非在所有地区都可用，也并非在所有 Apple 设备上都可用。","slug":"macOS Sequoia 15","published":1,"updated":"2024-11-25T11:44:04.485Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscn002mmbs6hod0dogp","content":"<p>macOS Sequoia 推出了一系列新功能，可助你在 Mac 上提高生产力和创造力。通过最新连续互通功能 iPhone 镜像，你可以在 Mac 上访问整个 iPhone。轻松平铺窗口快速打造理想工作空间，还可查看通过演讲者前置演示时即将共享的内容。经过重大更新的 Safari 浏览器带来了干扰控制，可让你在浏览网页的同时轻松完成各种任务。macOS Sequoia 还为“信息”带来了文字效果和表情符号点回，为“计算器”带来了数学笔记等。</p>\n<p>iPhone 镜像<br>    •\tiPhone 镜像可让你在 Mac 上访问和控制 iPhone，从而在 Mac 上轻松浏览主屏幕、启动 iPhone App 并与之交互<br>    •\t键盘和触控板支持可让你键入并使用多点触控手势轻扫浏览主屏幕上的 App、双指开合来缩放以及在 App 中滚动<br>    •\tMac 上的 iPhone 通知可让你直接在 Mac 上查看 iPhone 通知并进行操作<br>窗口平铺更轻松<br>    •\t增强型窗口平铺可让你更轻松地排列窗口。可以将窗口拖移至屏幕边缘并排放置，或者拖到桌面角落实现平铺<br>    •\t使用键盘和菜单快捷键更快速将窗口平铺到某个位置<br>Safari 浏览器<br>    •\t“干扰控制”可帮助你隐藏网页上干扰浏览的项目<br>    •\t观看器可让你无干扰观看视频，并在点按离开页面时自动将视频移入画中画<br>密码<br>    •\t“密码” App 可让你集中查看网站和 App 的所有凭证，从而更轻松访问密码、通行密钥、Wi-Fi 密码和验证码<br>    •\t直接在“密码”中设置验证码，无需打开 App 即可轻松拷贝验证码或自动填充至 Safari 浏览器<br>    •\t安全同步确保存储在“密码”中的账户通过端对端加密与 iCloud 无缝同步，以便你在其他设备上访问<br>    •\t通过 iCloud 密码 App 支持 Windows，在 Windows 设备上也能访问密码<br>视频会议<br>    •\t演讲者前置可让你在视频通话中共享自己的屏幕前进行预览<br>    •\t播放预览可让你预览在 Keynote 讲演中点按“播放”时内容和演讲者注释显示的位置<br>    •\t背景替换可让你上传自己的照片或从多个内建选项中选择，以将其用作视频通话背景<br>信息<br>    •\t文字效果通过爆发、波纹和点头等动画效果从视觉上放大 iMessage 信息中的字母、字词、短语或表情符号，让对话更加生动<br>    •\t文本格式化可让你为 iMessage 信息中的字母、字词或短语添加粗体、下划线、斜体和删除线<br>    •\t表情符号和贴纸点回可让你使用任意表情符号或贴纸回应信息，轻扫一下即可访问你和朋友最常发送的点回内容<br>    •\t“稍后发送”可让你现在编写信息并定z时稍后发送<br>地图<br>    •\t为公园徒步路线、社区日常锻炼路线、度假步行游览路线等创建自定义步行和徒步路线<br>    •\t地点资料库集中一处囊括了所有已存地点、指南和徒步路线以便轻松访问<br>备忘录<br>    •\t直接从备忘录开始录音，并与相关注释、核对清单和文稿一起保存<br>    •\t“数学笔记”可让你在备忘录中输入表达式并立即求解<br>    •\t可折叠区域能协助简化和隐藏篇幅较长备忘录中的文本；只需在区域标题旁边点按即可让冗长繁杂的备忘录更精简轻盈<br>    •\t选择五种颜色高亮标记备忘录中的文本，让文本内容更加突出<br>照片<br>    •\t精选集在边栏中按照“日子”、“旅程”、“人物与宠物”以及“精选照片”等实用主题自动整理图库<br>    •\t“人物与宠物”群组包括经常一起出现的喜爱人物或宠物照片<br>    •\t视频速度控制可让你减慢包含入点和出点的高帧速率视频内容<br>    •\t“更多项目”包含额外的实用精选集，例如“文稿”、“收据”等，以及最近编辑、查看和共享的项目<br>    •\t“更多项目”中的“已恢复”相簿会显示设备上之前由于锁定相簿数据库损坏而不可见的图像<br>“视频” App<br>    •\t字幕会适时自动显示，例如观看节目时内容语言与设备语言不匹配、音频静音或者快退时<br>AirPods<br>    •\t免动手 Siri 交互方式可让你使用 AirPods 简单点头表示“是”或者摇头表示“否”来回应 Siri 播报<br>    •\tAirPods Pro “语音突显”可在大风环境或背景噪声较大的地方为通话对象提供更清晰的通话质量<br>    •\t佩戴 AirPods 玩游戏时通过个性化空间音频享受身临其境的环绕声体验，结合为开发者提供的全新 API 可让你更轻松地拥有这种体验</p>\n<p>本更新还包括其他功能和改进：<br>    •\t“计算器” App 中经过更新的基础和科学计算器现可求解表达式、转换单位和访问之前计算的历史记录<br>    •\t“日历”中的“提醒事项”可让你随会议和预约安排创建、查看、编辑和完成提醒事项<br>    •\t“提醒事项”中的“最近删除”列表可让你查看和取回删除的提醒事项<br>    •\t“无边记”中的场景可让你将内容整理到各部分，然后随心存储、添加标签和排序<br>    •\t“天气” App 中体感温度与实际温度明显不同时，体感温度会突出显示在实际温度旁<br>    •\t“家庭” App 中的客人访问可让你向访客提供基于日期和时间的门锁、车库门和警报系统的访问权限<br>    •\t“人声快捷指令”辅助功能可帮助有严重非典型言语症状的人士在 Mac 上录制触发特定操作的自定义话语</p>\n<p>某些功能并非在所有地区都可用，也并非在所有 Apple 设备上都可用。</p>\n","excerpt":"","more":"<p>macOS Sequoia 推出了一系列新功能，可助你在 Mac 上提高生产力和创造力。通过最新连续互通功能 iPhone 镜像，你可以在 Mac 上访问整个 iPhone。轻松平铺窗口快速打造理想工作空间，还可查看通过演讲者前置演示时即将共享的内容。经过重大更新的 Safari 浏览器带来了干扰控制，可让你在浏览网页的同时轻松完成各种任务。macOS Sequoia 还为“信息”带来了文字效果和表情符号点回，为“计算器”带来了数学笔记等。</p>\n<p>iPhone 镜像<br>    •\tiPhone 镜像可让你在 Mac 上访问和控制 iPhone，从而在 Mac 上轻松浏览主屏幕、启动 iPhone App 并与之交互<br>    •\t键盘和触控板支持可让你键入并使用多点触控手势轻扫浏览主屏幕上的 App、双指开合来缩放以及在 App 中滚动<br>    •\tMac 上的 iPhone 通知可让你直接在 Mac 上查看 iPhone 通知并进行操作<br>窗口平铺更轻松<br>    •\t增强型窗口平铺可让你更轻松地排列窗口。可以将窗口拖移至屏幕边缘并排放置，或者拖到桌面角落实现平铺<br>    •\t使用键盘和菜单快捷键更快速将窗口平铺到某个位置<br>Safari 浏览器<br>    •\t“干扰控制”可帮助你隐藏网页上干扰浏览的项目<br>    •\t观看器可让你无干扰观看视频，并在点按离开页面时自动将视频移入画中画<br>密码<br>    •\t“密码” App 可让你集中查看网站和 App 的所有凭证，从而更轻松访问密码、通行密钥、Wi-Fi 密码和验证码<br>    •\t直接在“密码”中设置验证码，无需打开 App 即可轻松拷贝验证码或自动填充至 Safari 浏览器<br>    •\t安全同步确保存储在“密码”中的账户通过端对端加密与 iCloud 无缝同步，以便你在其他设备上访问<br>    •\t通过 iCloud 密码 App 支持 Windows，在 Windows 设备上也能访问密码<br>视频会议<br>    •\t演讲者前置可让你在视频通话中共享自己的屏幕前进行预览<br>    •\t播放预览可让你预览在 Keynote 讲演中点按“播放”时内容和演讲者注释显示的位置<br>    •\t背景替换可让你上传自己的照片或从多个内建选项中选择，以将其用作视频通话背景<br>信息<br>    •\t文字效果通过爆发、波纹和点头等动画效果从视觉上放大 iMessage 信息中的字母、字词、短语或表情符号，让对话更加生动<br>    •\t文本格式化可让你为 iMessage 信息中的字母、字词或短语添加粗体、下划线、斜体和删除线<br>    •\t表情符号和贴纸点回可让你使用任意表情符号或贴纸回应信息，轻扫一下即可访问你和朋友最常发送的点回内容<br>    •\t“稍后发送”可让你现在编写信息并定z时稍后发送<br>地图<br>    •\t为公园徒步路线、社区日常锻炼路线、度假步行游览路线等创建自定义步行和徒步路线<br>    •\t地点资料库集中一处囊括了所有已存地点、指南和徒步路线以便轻松访问<br>备忘录<br>    •\t直接从备忘录开始录音，并与相关注释、核对清单和文稿一起保存<br>    •\t“数学笔记”可让你在备忘录中输入表达式并立即求解<br>    •\t可折叠区域能协助简化和隐藏篇幅较长备忘录中的文本；只需在区域标题旁边点按即可让冗长繁杂的备忘录更精简轻盈<br>    •\t选择五种颜色高亮标记备忘录中的文本，让文本内容更加突出<br>照片<br>    •\t精选集在边栏中按照“日子”、“旅程”、“人物与宠物”以及“精选照片”等实用主题自动整理图库<br>    •\t“人物与宠物”群组包括经常一起出现的喜爱人物或宠物照片<br>    •\t视频速度控制可让你减慢包含入点和出点的高帧速率视频内容<br>    •\t“更多项目”包含额外的实用精选集，例如“文稿”、“收据”等，以及最近编辑、查看和共享的项目<br>    •\t“更多项目”中的“已恢复”相簿会显示设备上之前由于锁定相簿数据库损坏而不可见的图像<br>“视频” App<br>    •\t字幕会适时自动显示，例如观看节目时内容语言与设备语言不匹配、音频静音或者快退时<br>AirPods<br>    •\t免动手 Siri 交互方式可让你使用 AirPods 简单点头表示“是”或者摇头表示“否”来回应 Siri 播报<br>    •\tAirPods Pro “语音突显”可在大风环境或背景噪声较大的地方为通话对象提供更清晰的通话质量<br>    •\t佩戴 AirPods 玩游戏时通过个性化空间音频享受身临其境的环绕声体验，结合为开发者提供的全新 API 可让你更轻松地拥有这种体验</p>\n<p>本更新还包括其他功能和改进：<br>    •\t“计算器” App 中经过更新的基础和科学计算器现可求解表达式、转换单位和访问之前计算的历史记录<br>    •\t“日历”中的“提醒事项”可让你随会议和预约安排创建、查看、编辑和完成提醒事项<br>    •\t“提醒事项”中的“最近删除”列表可让你查看和取回删除的提醒事项<br>    •\t“无边记”中的场景可让你将内容整理到各部分，然后随心存储、添加标签和排序<br>    •\t“天气” App 中体感温度与实际温度明显不同时，体感温度会突出显示在实际温度旁<br>    •\t“家庭” App 中的客人访问可让你向访客提供基于日期和时间的门锁、车库门和警报系统的访问权限<br>    •\t“人声快捷指令”辅助功能可帮助有严重非典型言语症状的人士在 Mac 上录制触发特定操作的自定义话语</p>\n<p>某些功能并非在所有地区都可用，也并非在所有 Apple 设备上都可用。</p>\n"},{"title":"macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：","date":"2024-10-30T01:34:53.016Z","_content":"macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：\n\n### 1. 根目录结构差异\n\n| 目录              | macOS                                | Linux                                  |\n| ----------------- | ------------------------------------ | -------------------------------------- |\n| **/System**       | macOS 特有，包含系统文件和资源       | 通常没有此目录                         |\n| **/Library**      | macOS 特有，包含系统应用的资源和配置 | 通常没有此目录（软件资源在 `/usr` 中） |\n| **/Applications** | 存放用户安装的应用程序               | Linux 没有此目录                       |\n| **/Users**        | 用户的主目录，macOS 的用户文件存储地 | 通常为 `/home`                         |\n| **/Volumes**      | 存储挂载的外部驱动器                 | Linux 使用 `/mnt` 或 `/media`          |\n\n### 2. 目录对比\n\n#### `/System` vs. `/usr`\n- **macOS**：`/System` 是 macOS 特有的系统目录，用于存放 macOS 系统级别的文件，不能轻易修改。\n- **Linux**：`/usr` 包含用户级应用和二进制文件，所有用户都可以访问。\n\n#### `/Library` vs. `/etc`\n- **macOS**：`/Library` 目录用于存放应用和系统的配置文件，包含系统配置、用户配置以及第三方软件的资源文件。\n- **Linux**：使用 `/etc` 存放系统和应用配置文件，例如网络配置、系统服务设置等。\n\n#### `/Applications` vs. `/usr/bin`\n- **macOS**：`/Applications` 是用户安装应用的主要目录，用于存放 GUI 应用程序。\n- **Linux**：`/usr/bin` 存放二进制可执行文件，供所有用户使用。GUI 应用一般安装在 `/opt` 或特定桌面环境的文件夹中。\n\n#### `/Users` vs. `/home`\n- **macOS**：用户主目录位于 `/Users` 下，每个用户有独立的子目录。\n- **Linux**：在 `/home` 目录下，每个用户有单独的主目录。 \n\n#### `/Volumes` vs. `/mnt` & `/media`\n- **macOS**：外部存储设备（如 USB 或外部硬盘）会自动挂载在 `/Volumes` 目录中。\n- **Linux**：挂载外部存储时，一般挂载在 `/mnt` 或 `/media` 中。\n\n### 总结\nmacOS 的目录结构设计更多是为了支持其 GUI 和用户体验，而 Linux 更注重系统的灵活性和配置文件的标准化。","source":"_posts/macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：.md","raw":"---\ntitle: macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：\ndate: 2024-10-30T09:34:53.016Z\ntags: []\ncategories: []\n---\nmacOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：\n\n### 1. 根目录结构差异\n\n| 目录              | macOS                                | Linux                                  |\n| ----------------- | ------------------------------------ | -------------------------------------- |\n| **/System**       | macOS 特有，包含系统文件和资源       | 通常没有此目录                         |\n| **/Library**      | macOS 特有，包含系统应用的资源和配置 | 通常没有此目录（软件资源在 `/usr` 中） |\n| **/Applications** | 存放用户安装的应用程序               | Linux 没有此目录                       |\n| **/Users**        | 用户的主目录，macOS 的用户文件存储地 | 通常为 `/home`                         |\n| **/Volumes**      | 存储挂载的外部驱动器                 | Linux 使用 `/mnt` 或 `/media`          |\n\n### 2. 目录对比\n\n#### `/System` vs. `/usr`\n- **macOS**：`/System` 是 macOS 特有的系统目录，用于存放 macOS 系统级别的文件，不能轻易修改。\n- **Linux**：`/usr` 包含用户级应用和二进制文件，所有用户都可以访问。\n\n#### `/Library` vs. `/etc`\n- **macOS**：`/Library` 目录用于存放应用和系统的配置文件，包含系统配置、用户配置以及第三方软件的资源文件。\n- **Linux**：使用 `/etc` 存放系统和应用配置文件，例如网络配置、系统服务设置等。\n\n#### `/Applications` vs. `/usr/bin`\n- **macOS**：`/Applications` 是用户安装应用的主要目录，用于存放 GUI 应用程序。\n- **Linux**：`/usr/bin` 存放二进制可执行文件，供所有用户使用。GUI 应用一般安装在 `/opt` 或特定桌面环境的文件夹中。\n\n#### `/Users` vs. `/home`\n- **macOS**：用户主目录位于 `/Users` 下，每个用户有独立的子目录。\n- **Linux**：在 `/home` 目录下，每个用户有单独的主目录。 \n\n#### `/Volumes` vs. `/mnt` & `/media`\n- **macOS**：外部存储设备（如 USB 或外部硬盘）会自动挂载在 `/Volumes` 目录中。\n- **Linux**：挂载外部存储时，一般挂载在 `/mnt` 或 `/media` 中。\n\n### 总结\nmacOS 的目录结构设计更多是为了支持其 GUI 和用户体验，而 Linux 更注重系统的灵活性和配置文件的标准化。","slug":"macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：","published":1,"updated":"2024-11-25T11:44:04.490Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscn002nmbs64vh0hayz","content":"<p>macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：</p>\n<h3 id=\"1-根目录结构差异\"><a href=\"#1-根目录结构差异\" class=\"headerlink\" title=\"1. 根目录结构差异\"></a>1. 根目录结构差异</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>macOS</th>\n<th>Linux</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>&#x2F;System</strong></td>\n<td>macOS 特有，包含系统文件和资源</td>\n<td>通常没有此目录</td>\n</tr>\n<tr>\n<td><strong>&#x2F;Library</strong></td>\n<td>macOS 特有，包含系统应用的资源和配置</td>\n<td>通常没有此目录（软件资源在 <code>/usr</code> 中）</td>\n</tr>\n<tr>\n<td><strong>&#x2F;Applications</strong></td>\n<td>存放用户安装的应用程序</td>\n<td>Linux 没有此目录</td>\n</tr>\n<tr>\n<td><strong>&#x2F;Users</strong></td>\n<td>用户的主目录，macOS 的用户文件存储地</td>\n<td>通常为 <code>/home</code></td>\n</tr>\n<tr>\n<td><strong>&#x2F;Volumes</strong></td>\n<td>存储挂载的外部驱动器</td>\n<td>Linux 使用 <code>/mnt</code> 或 <code>/media</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-目录对比\"><a href=\"#2-目录对比\" class=\"headerlink\" title=\"2. 目录对比\"></a>2. 目录对比</h3><h4 id=\"System-vs-usr\"><a href=\"#System-vs-usr\" class=\"headerlink\" title=\"/System vs. /usr\"></a><code>/System</code> vs. <code>/usr</code></h4><ul>\n<li><strong>macOS</strong>：<code>/System</code> 是 macOS 特有的系统目录，用于存放 macOS 系统级别的文件，不能轻易修改。</li>\n<li><strong>Linux</strong>：<code>/usr</code> 包含用户级应用和二进制文件，所有用户都可以访问。</li>\n</ul>\n<h4 id=\"Library-vs-etc\"><a href=\"#Library-vs-etc\" class=\"headerlink\" title=\"/Library vs. /etc\"></a><code>/Library</code> vs. <code>/etc</code></h4><ul>\n<li><strong>macOS</strong>：<code>/Library</code> 目录用于存放应用和系统的配置文件，包含系统配置、用户配置以及第三方软件的资源文件。</li>\n<li><strong>Linux</strong>：使用 <code>/etc</code> 存放系统和应用配置文件，例如网络配置、系统服务设置等。</li>\n</ul>\n<h4 id=\"Applications-vs-usr-bin\"><a href=\"#Applications-vs-usr-bin\" class=\"headerlink\" title=\"/Applications vs. /usr/bin\"></a><code>/Applications</code> vs. <code>/usr/bin</code></h4><ul>\n<li><strong>macOS</strong>：<code>/Applications</code> 是用户安装应用的主要目录，用于存放 GUI 应用程序。</li>\n<li><strong>Linux</strong>：<code>/usr/bin</code> 存放二进制可执行文件，供所有用户使用。GUI 应用一般安装在 <code>/opt</code> 或特定桌面环境的文件夹中。</li>\n</ul>\n<h4 id=\"Users-vs-home\"><a href=\"#Users-vs-home\" class=\"headerlink\" title=\"/Users vs. /home\"></a><code>/Users</code> vs. <code>/home</code></h4><ul>\n<li><strong>macOS</strong>：用户主目录位于 <code>/Users</code> 下，每个用户有独立的子目录。</li>\n<li><strong>Linux</strong>：在 <code>/home</code> 目录下，每个用户有单独的主目录。</li>\n</ul>\n<h4 id=\"Volumes-vs-mnt-media\"><a href=\"#Volumes-vs-mnt-media\" class=\"headerlink\" title=\"/Volumes vs. /mnt &amp; /media\"></a><code>/Volumes</code> vs. <code>/mnt</code> &amp; <code>/media</code></h4><ul>\n<li><strong>macOS</strong>：外部存储设备（如 USB 或外部硬盘）会自动挂载在 <code>/Volumes</code> 目录中。</li>\n<li><strong>Linux</strong>：挂载外部存储时，一般挂载在 <code>/mnt</code> 或 <code>/media</code> 中。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>macOS 的目录结构设计更多是为了支持其 GUI 和用户体验，而 Linux 更注重系统的灵活性和配置文件的标准化。</p>\n","excerpt":"","more":"<p>macOS 和 Linux 虽然都基于 Unix，但它们的系统目录结构稍有不同。以下是两者的主要区别和一些常用目录的介绍：</p>\n<h3 id=\"1-根目录结构差异\"><a href=\"#1-根目录结构差异\" class=\"headerlink\" title=\"1. 根目录结构差异\"></a>1. 根目录结构差异</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>macOS</th>\n<th>Linux</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>&#x2F;System</strong></td>\n<td>macOS 特有，包含系统文件和资源</td>\n<td>通常没有此目录</td>\n</tr>\n<tr>\n<td><strong>&#x2F;Library</strong></td>\n<td>macOS 特有，包含系统应用的资源和配置</td>\n<td>通常没有此目录（软件资源在 <code>/usr</code> 中）</td>\n</tr>\n<tr>\n<td><strong>&#x2F;Applications</strong></td>\n<td>存放用户安装的应用程序</td>\n<td>Linux 没有此目录</td>\n</tr>\n<tr>\n<td><strong>&#x2F;Users</strong></td>\n<td>用户的主目录，macOS 的用户文件存储地</td>\n<td>通常为 <code>/home</code></td>\n</tr>\n<tr>\n<td><strong>&#x2F;Volumes</strong></td>\n<td>存储挂载的外部驱动器</td>\n<td>Linux 使用 <code>/mnt</code> 或 <code>/media</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-目录对比\"><a href=\"#2-目录对比\" class=\"headerlink\" title=\"2. 目录对比\"></a>2. 目录对比</h3><h4 id=\"System-vs-usr\"><a href=\"#System-vs-usr\" class=\"headerlink\" title=\"/System vs. /usr\"></a><code>/System</code> vs. <code>/usr</code></h4><ul>\n<li><strong>macOS</strong>：<code>/System</code> 是 macOS 特有的系统目录，用于存放 macOS 系统级别的文件，不能轻易修改。</li>\n<li><strong>Linux</strong>：<code>/usr</code> 包含用户级应用和二进制文件，所有用户都可以访问。</li>\n</ul>\n<h4 id=\"Library-vs-etc\"><a href=\"#Library-vs-etc\" class=\"headerlink\" title=\"/Library vs. /etc\"></a><code>/Library</code> vs. <code>/etc</code></h4><ul>\n<li><strong>macOS</strong>：<code>/Library</code> 目录用于存放应用和系统的配置文件，包含系统配置、用户配置以及第三方软件的资源文件。</li>\n<li><strong>Linux</strong>：使用 <code>/etc</code> 存放系统和应用配置文件，例如网络配置、系统服务设置等。</li>\n</ul>\n<h4 id=\"Applications-vs-usr-bin\"><a href=\"#Applications-vs-usr-bin\" class=\"headerlink\" title=\"/Applications vs. /usr/bin\"></a><code>/Applications</code> vs. <code>/usr/bin</code></h4><ul>\n<li><strong>macOS</strong>：<code>/Applications</code> 是用户安装应用的主要目录，用于存放 GUI 应用程序。</li>\n<li><strong>Linux</strong>：<code>/usr/bin</code> 存放二进制可执行文件，供所有用户使用。GUI 应用一般安装在 <code>/opt</code> 或特定桌面环境的文件夹中。</li>\n</ul>\n<h4 id=\"Users-vs-home\"><a href=\"#Users-vs-home\" class=\"headerlink\" title=\"/Users vs. /home\"></a><code>/Users</code> vs. <code>/home</code></h4><ul>\n<li><strong>macOS</strong>：用户主目录位于 <code>/Users</code> 下，每个用户有独立的子目录。</li>\n<li><strong>Linux</strong>：在 <code>/home</code> 目录下，每个用户有单独的主目录。</li>\n</ul>\n<h4 id=\"Volumes-vs-mnt-media\"><a href=\"#Volumes-vs-mnt-media\" class=\"headerlink\" title=\"/Volumes vs. /mnt &amp; /media\"></a><code>/Volumes</code> vs. <code>/mnt</code> &amp; <code>/media</code></h4><ul>\n<li><strong>macOS</strong>：外部存储设备（如 USB 或外部硬盘）会自动挂载在 <code>/Volumes</code> 目录中。</li>\n<li><strong>Linux</strong>：挂载外部存储时，一般挂载在 <code>/mnt</code> 或 <code>/media</code> 中。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>macOS 的目录结构设计更多是为了支持其 GUI 和用户体验，而 Linux 更注重系统的灵活性和配置文件的标准化。</p>\n"},{"title":"Lyone","date":"2024-09-06T01:26:21.901Z","_content":"你提供的网站 `https://lyone.xyz/#oline` 似乎是一个个人网站，可能展示了与技术、项目或工具相关的内容。以下是一些可能的 SEO 优化建议和总结，根据网站的结构和典型 SEO 实践来进行描述。\n\n### 网站内容总结\n1. **主页内容**：网站的主页可能包含一些基本的介绍，涉及个人简介、项目展示或服务信息。\n2. **功能页面**：你可能有一个或多个子页面，提供关于特定项目、工具或服务的详细介绍。\n3. **技术/开发相关内容**：网站可能是围绕技术项目、工具、博客或者展示个人编程工作展开的，目标用户可能是开发者或对技术感兴趣的读者。\n\n### SEO 优化建议\n\n#### 1. **标题优化（Title Tag）**\n- **当前情况**：网站的标题标签可能是比较通用的或与内容不够匹配。\n- **优化建议**：标题标签是搜索引擎了解网页内容的第一个重要信息。确保每个页面有独特的标题，并且准确反映页面内容。\n\n  例如：\n  ```html\n  <title>Lyone's Personal Blog - 技术分享与项目展示</title>\n  ```\n\n#### 2. **Meta 描述优化**\n- **当前情况**：可能没有设置具体的 meta 描述，或描述过于简单。\n- **优化建议**：为每个页面添加 meta 描述，使其能够简要介绍页面内容，吸引用户点击。\n\n  例如：\n  ```html\n  <meta name=\"description\" content=\"Lyone's personal blog focusing on web development, Vue.js, and project showcases. Explore tutorials, coding tips, and technology updates.\">\n  ```\n\n#### 3. **关键词优化**\n- **当前情况**：未发现网站是否专门使用了 SEO 关键词。\n- **优化建议**：为网站选择合适的关键词，确保在文章、标题、URL 和内容中合理地使用关键词。避免关键词堆砌。你可以围绕以下主题进行关键词选择：\n  - \"技术博客\"\n  - \"Vue.js 教程\"\n  - \"Java 开发项目\"\n  - \"个人开发者网站\"\n  - \"编程工具展示\"\n\n#### 4. **网站结构和内部链接**\n- **当前情况**：内部链接可能不足。\n- **优化建议**：通过内部链接连接各个相关页面，增加用户停留时间和页面访问深度。例如，主页可以链接到详细的项目页面，或者文章可以链接到相关的教程。\n\n#### 5. **页面 URL 结构**\n- **当前情况**：如果网站使用哈希标记（如 `#oline`）来定位部分内容，这对于 SEO 不太理想，因为哈希部分不会被搜索引擎视为单独的页面。\n- **优化建议**：建议使用清晰、简洁的 URL 结构。例如，将哈希路径替换为独立的页面路径：\n  ```\n  https://lyone.xyz/online-tools\n  ```\n  这种 URL 结构对搜索引擎更友好，也能提高页面的权重。\n\n#### 6. **内容更新和高质量内容**\n- **当前情况**：定期更新可能尚未完成或缺乏高质量内容。\n- **优化建议**：定期发布有价值的博客、教程、项目更新或行业新闻。内容是吸引用户和提升搜索引擎排名的关键因素。\n\n#### 7. **图像优化**\n- **当前情况**：如果网站上有大量图片，可能没有为每张图片设置 `alt` 标签。\n- **优化建议**：为每张图片添加 `alt` 标签，以描述图片内容，并确保图像文件体积经过压缩优化。\n\n  例如：\n  ```html\n  <img src=\"project-screenshot.png\" alt=\"Vue.js web application screenshot\">\n  ```\n\n#### 8. **移动端优化**\n- **当前情况**：不清楚网站是否对移动设备进行过优化。\n- **优化建议**：确保网站使用响应式设计，使其在移动设备上的用户体验和桌面端一样流畅。这对于 SEO 尤其重要，因为 Google 等搜索引擎优先考虑移动端优化。\n\n#### 9. **网站地图（Sitemap）和 Robots.txt**\n- **当前情况**：可能还没有生成网站地图。\n- **优化建议**：生成并提交一个 `sitemap.xml` 文件，帮助搜索引擎更好地索引你的网站。同时创建 `robots.txt` 文件，以指示搜索引擎哪些页面可以被抓取，哪些应该忽略。\n\n  网站地图：\n  ```\n  https://lyone.xyz/sitemap.xml\n  ```\n\n#### 10. **社交媒体集成**\n- **当前情况**：不清楚是否有集成社交媒体分享。\n- **优化建议**：集成社交媒体分享按钮，帮助用户分享网站内容，增加外部链接流量。同时可以使用 Open Graph 标签优化社交媒体上的预览。\n\n  例如：\n  ```html\n  <meta property=\"og:title\" content=\"Lyone's Personal Blog\">\n  <meta property=\"og:description\" content=\"Learn web development and explore project showcases.\">\n  <meta property=\"og:image\" content=\"https://lyone.xyz/images/og-image.png\">\n  ```\n\n---\n\n### 总结\n**网站的 SEO 优化要点**：\n1. **优化标题和 Meta 描述**，确保每个页面有唯一的、精确的描述。\n2. **选择合适的关键词**，并合理布局在标题、内容和 URL 中。\n3. **简化 URL 结构**，避免使用哈希标记，将其改为独立的页面路径。\n4. **增强内部链接和外部链接**，增加页面权重和可访问性。\n5. **确保网站移动端优化**，提升用户体验。\n6. **生成并提交网站地图和 Robots.txt 文件**，提高搜索引擎的抓取效率。\n\n通过这些优化，你的网站可以更容易被搜索引擎抓取，并提升在搜索结果中的排名，从而让更多用户可以发现你的内容。\n\n\n\n\n\n当然可以！以下是一个为你的网站撰写的简短介绍：\n\n\n\n**网站介绍**\n\n\n\n**Lyone’s Personal Blog** 是一个专注于技术分享与项目展示的个人博客。这里涵盖了前端开发、后端编程、以及各种开发工具的教程和实践案例。无论你是刚刚入门的编程爱好者，还是资深开发者，都可以在这里找到实用的技术干货和独特的见解。\n\n\n\n我们分享的内容包括：\n\n\n\n​\t•\t**Web 开发**：深入浅出的 Vue.js 和 Java 项目教程。\n\n​\t•\t**工具分享**：推荐并介绍编程过程中常用的开发工具和插件。\n\n​\t•\t**项目展示**：展示实际开发的项目和实战经验，提供源码参考。\n\n\n\n本博客旨在为开发者提供一个轻松学习和交流的平台，通过丰富的技术内容和实际项目经验帮助大家更好地提升技能。\n\n\n\n无论你是想学习最新的技术趋势，还是寻找解决开发问题的方法，Lyone’s Blog 都会是你的好伙伴！\n\n\n\n你可以根据实际网站的内容进行微调，确保介绍与你的网站定位和目标用户相符。","source":"_posts/Lyone.md","raw":"---\ntitle: Lyone\ndate: 2024-09-06T09:26:21.901Z\ntags: []\ncategories: []\n---\n你提供的网站 `https://lyone.xyz/#oline` 似乎是一个个人网站，可能展示了与技术、项目或工具相关的内容。以下是一些可能的 SEO 优化建议和总结，根据网站的结构和典型 SEO 实践来进行描述。\n\n### 网站内容总结\n1. **主页内容**：网站的主页可能包含一些基本的介绍，涉及个人简介、项目展示或服务信息。\n2. **功能页面**：你可能有一个或多个子页面，提供关于特定项目、工具或服务的详细介绍。\n3. **技术/开发相关内容**：网站可能是围绕技术项目、工具、博客或者展示个人编程工作展开的，目标用户可能是开发者或对技术感兴趣的读者。\n\n### SEO 优化建议\n\n#### 1. **标题优化（Title Tag）**\n- **当前情况**：网站的标题标签可能是比较通用的或与内容不够匹配。\n- **优化建议**：标题标签是搜索引擎了解网页内容的第一个重要信息。确保每个页面有独特的标题，并且准确反映页面内容。\n\n  例如：\n  ```html\n  <title>Lyone's Personal Blog - 技术分享与项目展示</title>\n  ```\n\n#### 2. **Meta 描述优化**\n- **当前情况**：可能没有设置具体的 meta 描述，或描述过于简单。\n- **优化建议**：为每个页面添加 meta 描述，使其能够简要介绍页面内容，吸引用户点击。\n\n  例如：\n  ```html\n  <meta name=\"description\" content=\"Lyone's personal blog focusing on web development, Vue.js, and project showcases. Explore tutorials, coding tips, and technology updates.\">\n  ```\n\n#### 3. **关键词优化**\n- **当前情况**：未发现网站是否专门使用了 SEO 关键词。\n- **优化建议**：为网站选择合适的关键词，确保在文章、标题、URL 和内容中合理地使用关键词。避免关键词堆砌。你可以围绕以下主题进行关键词选择：\n  - \"技术博客\"\n  - \"Vue.js 教程\"\n  - \"Java 开发项目\"\n  - \"个人开发者网站\"\n  - \"编程工具展示\"\n\n#### 4. **网站结构和内部链接**\n- **当前情况**：内部链接可能不足。\n- **优化建议**：通过内部链接连接各个相关页面，增加用户停留时间和页面访问深度。例如，主页可以链接到详细的项目页面，或者文章可以链接到相关的教程。\n\n#### 5. **页面 URL 结构**\n- **当前情况**：如果网站使用哈希标记（如 `#oline`）来定位部分内容，这对于 SEO 不太理想，因为哈希部分不会被搜索引擎视为单独的页面。\n- **优化建议**：建议使用清晰、简洁的 URL 结构。例如，将哈希路径替换为独立的页面路径：\n  ```\n  https://lyone.xyz/online-tools\n  ```\n  这种 URL 结构对搜索引擎更友好，也能提高页面的权重。\n\n#### 6. **内容更新和高质量内容**\n- **当前情况**：定期更新可能尚未完成或缺乏高质量内容。\n- **优化建议**：定期发布有价值的博客、教程、项目更新或行业新闻。内容是吸引用户和提升搜索引擎排名的关键因素。\n\n#### 7. **图像优化**\n- **当前情况**：如果网站上有大量图片，可能没有为每张图片设置 `alt` 标签。\n- **优化建议**：为每张图片添加 `alt` 标签，以描述图片内容，并确保图像文件体积经过压缩优化。\n\n  例如：\n  ```html\n  <img src=\"project-screenshot.png\" alt=\"Vue.js web application screenshot\">\n  ```\n\n#### 8. **移动端优化**\n- **当前情况**：不清楚网站是否对移动设备进行过优化。\n- **优化建议**：确保网站使用响应式设计，使其在移动设备上的用户体验和桌面端一样流畅。这对于 SEO 尤其重要，因为 Google 等搜索引擎优先考虑移动端优化。\n\n#### 9. **网站地图（Sitemap）和 Robots.txt**\n- **当前情况**：可能还没有生成网站地图。\n- **优化建议**：生成并提交一个 `sitemap.xml` 文件，帮助搜索引擎更好地索引你的网站。同时创建 `robots.txt` 文件，以指示搜索引擎哪些页面可以被抓取，哪些应该忽略。\n\n  网站地图：\n  ```\n  https://lyone.xyz/sitemap.xml\n  ```\n\n#### 10. **社交媒体集成**\n- **当前情况**：不清楚是否有集成社交媒体分享。\n- **优化建议**：集成社交媒体分享按钮，帮助用户分享网站内容，增加外部链接流量。同时可以使用 Open Graph 标签优化社交媒体上的预览。\n\n  例如：\n  ```html\n  <meta property=\"og:title\" content=\"Lyone's Personal Blog\">\n  <meta property=\"og:description\" content=\"Learn web development and explore project showcases.\">\n  <meta property=\"og:image\" content=\"https://lyone.xyz/images/og-image.png\">\n  ```\n\n---\n\n### 总结\n**网站的 SEO 优化要点**：\n1. **优化标题和 Meta 描述**，确保每个页面有唯一的、精确的描述。\n2. **选择合适的关键词**，并合理布局在标题、内容和 URL 中。\n3. **简化 URL 结构**，避免使用哈希标记，将其改为独立的页面路径。\n4. **增强内部链接和外部链接**，增加页面权重和可访问性。\n5. **确保网站移动端优化**，提升用户体验。\n6. **生成并提交网站地图和 Robots.txt 文件**，提高搜索引擎的抓取效率。\n\n通过这些优化，你的网站可以更容易被搜索引擎抓取，并提升在搜索结果中的排名，从而让更多用户可以发现你的内容。\n\n\n\n\n\n当然可以！以下是一个为你的网站撰写的简短介绍：\n\n\n\n**网站介绍**\n\n\n\n**Lyone’s Personal Blog** 是一个专注于技术分享与项目展示的个人博客。这里涵盖了前端开发、后端编程、以及各种开发工具的教程和实践案例。无论你是刚刚入门的编程爱好者，还是资深开发者，都可以在这里找到实用的技术干货和独特的见解。\n\n\n\n我们分享的内容包括：\n\n\n\n​\t•\t**Web 开发**：深入浅出的 Vue.js 和 Java 项目教程。\n\n​\t•\t**工具分享**：推荐并介绍编程过程中常用的开发工具和插件。\n\n​\t•\t**项目展示**：展示实际开发的项目和实战经验，提供源码参考。\n\n\n\n本博客旨在为开发者提供一个轻松学习和交流的平台，通过丰富的技术内容和实际项目经验帮助大家更好地提升技能。\n\n\n\n无论你是想学习最新的技术趋势，还是寻找解决开发问题的方法，Lyone’s Blog 都会是你的好伙伴！\n\n\n\n你可以根据实际网站的内容进行微调，确保介绍与你的网站定位和目标用户相符。","slug":"Lyone","published":1,"updated":"2024-11-25T11:44:04.494Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsco002ombs62rtyft7z","content":"<p>你提供的网站 <code>https://lyone.xyz/#oline</code> 似乎是一个个人网站，可能展示了与技术、项目或工具相关的内容。以下是一些可能的 SEO 优化建议和总结，根据网站的结构和典型 SEO 实践来进行描述。</p>\n<h3 id=\"网站内容总结\"><a href=\"#网站内容总结\" class=\"headerlink\" title=\"网站内容总结\"></a>网站内容总结</h3><ol>\n<li><strong>主页内容</strong>：网站的主页可能包含一些基本的介绍，涉及个人简介、项目展示或服务信息。</li>\n<li><strong>功能页面</strong>：你可能有一个或多个子页面，提供关于特定项目、工具或服务的详细介绍。</li>\n<li><strong>技术&#x2F;开发相关内容</strong>：网站可能是围绕技术项目、工具、博客或者展示个人编程工作展开的，目标用户可能是开发者或对技术感兴趣的读者。</li>\n</ol>\n<h3 id=\"SEO-优化建议\"><a href=\"#SEO-优化建议\" class=\"headerlink\" title=\"SEO 优化建议\"></a>SEO 优化建议</h3><h4 id=\"1-标题优化（Title-Tag）\"><a href=\"#1-标题优化（Title-Tag）\" class=\"headerlink\" title=\"1. 标题优化（Title Tag）\"></a>1. <strong>标题优化（Title Tag）</strong></h4><ul>\n<li><p><strong>当前情况</strong>：网站的标题标签可能是比较通用的或与内容不够匹配。</p>\n</li>\n<li><p><strong>优化建议</strong>：标题标签是搜索引擎了解网页内容的第一个重要信息。确保每个页面有独特的标题，并且准确反映页面内容。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Lyone&#x27;s Personal Blog - 技术分享与项目展示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-Meta-描述优化\"><a href=\"#2-Meta-描述优化\" class=\"headerlink\" title=\"2. Meta 描述优化\"></a>2. <strong>Meta 描述优化</strong></h4><ul>\n<li><p><strong>当前情况</strong>：可能没有设置具体的 meta 描述，或描述过于简单。</p>\n</li>\n<li><p><strong>优化建议</strong>：为每个页面添加 meta 描述，使其能够简要介绍页面内容，吸引用户点击。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Lyone&#x27;s personal blog focusing on web development, Vue.js, and project showcases. Explore tutorials, coding tips, and technology updates.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-关键词优化\"><a href=\"#3-关键词优化\" class=\"headerlink\" title=\"3. 关键词优化\"></a>3. <strong>关键词优化</strong></h4><ul>\n<li><strong>当前情况</strong>：未发现网站是否专门使用了 SEO 关键词。</li>\n<li><strong>优化建议</strong>：为网站选择合适的关键词，确保在文章、标题、URL 和内容中合理地使用关键词。避免关键词堆砌。你可以围绕以下主题进行关键词选择：<ul>\n<li>“技术博客”</li>\n<li>“Vue.js 教程”</li>\n<li>“Java 开发项目”</li>\n<li>“个人开发者网站”</li>\n<li>“编程工具展示”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-网站结构和内部链接\"><a href=\"#4-网站结构和内部链接\" class=\"headerlink\" title=\"4. 网站结构和内部链接\"></a>4. <strong>网站结构和内部链接</strong></h4><ul>\n<li><strong>当前情况</strong>：内部链接可能不足。</li>\n<li><strong>优化建议</strong>：通过内部链接连接各个相关页面，增加用户停留时间和页面访问深度。例如，主页可以链接到详细的项目页面，或者文章可以链接到相关的教程。</li>\n</ul>\n<h4 id=\"5-页面-URL-结构\"><a href=\"#5-页面-URL-结构\" class=\"headerlink\" title=\"5. 页面 URL 结构\"></a>5. <strong>页面 URL 结构</strong></h4><ul>\n<li><strong>当前情况</strong>：如果网站使用哈希标记（如 <code>#oline</code>）来定位部分内容，这对于 SEO 不太理想，因为哈希部分不会被搜索引擎视为单独的页面。</li>\n<li><strong>优化建议</strong>：建议使用清晰、简洁的 URL 结构。例如，将哈希路径替换为独立的页面路径：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://lyone.xyz/online-tools</span><br></pre></td></tr></table></figure>\n这种 URL 结构对搜索引擎更友好，也能提高页面的权重。</li>\n</ul>\n<h4 id=\"6-内容更新和高质量内容\"><a href=\"#6-内容更新和高质量内容\" class=\"headerlink\" title=\"6. 内容更新和高质量内容\"></a>6. <strong>内容更新和高质量内容</strong></h4><ul>\n<li><strong>当前情况</strong>：定期更新可能尚未完成或缺乏高质量内容。</li>\n<li><strong>优化建议</strong>：定期发布有价值的博客、教程、项目更新或行业新闻。内容是吸引用户和提升搜索引擎排名的关键因素。</li>\n</ul>\n<h4 id=\"7-图像优化\"><a href=\"#7-图像优化\" class=\"headerlink\" title=\"7. 图像优化\"></a>7. <strong>图像优化</strong></h4><ul>\n<li><p><strong>当前情况</strong>：如果网站上有大量图片，可能没有为每张图片设置 <code>alt</code> 标签。</p>\n</li>\n<li><p><strong>优化建议</strong>：为每张图片添加 <code>alt</code> 标签，以描述图片内容，并确保图像文件体积经过压缩优化。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;project-screenshot.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Vue.js web application screenshot&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8-移动端优化\"><a href=\"#8-移动端优化\" class=\"headerlink\" title=\"8. 移动端优化\"></a>8. <strong>移动端优化</strong></h4><ul>\n<li><strong>当前情况</strong>：不清楚网站是否对移动设备进行过优化。</li>\n<li><strong>优化建议</strong>：确保网站使用响应式设计，使其在移动设备上的用户体验和桌面端一样流畅。这对于 SEO 尤其重要，因为 Google 等搜索引擎优先考虑移动端优化。</li>\n</ul>\n<h4 id=\"9-网站地图（Sitemap）和-Robots-txt\"><a href=\"#9-网站地图（Sitemap）和-Robots-txt\" class=\"headerlink\" title=\"9. 网站地图（Sitemap）和 Robots.txt\"></a>9. <strong>网站地图（Sitemap）和 Robots.txt</strong></h4><ul>\n<li><p><strong>当前情况</strong>：可能还没有生成网站地图。</p>\n</li>\n<li><p><strong>优化建议</strong>：生成并提交一个 <code>sitemap.xml</code> 文件，帮助搜索引擎更好地索引你的网站。同时创建 <code>robots.txt</code> 文件，以指示搜索引擎哪些页面可以被抓取，哪些应该忽略。</p>\n<p>网站地图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://lyone.xyz/sitemap.xml</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"10-社交媒体集成\"><a href=\"#10-社交媒体集成\" class=\"headerlink\" title=\"10. 社交媒体集成\"></a>10. <strong>社交媒体集成</strong></h4><ul>\n<li><p><strong>当前情况</strong>：不清楚是否有集成社交媒体分享。</p>\n</li>\n<li><p><strong>优化建议</strong>：集成社交媒体分享按钮，帮助用户分享网站内容，增加外部链接流量。同时可以使用 Open Graph 标签优化社交媒体上的预览。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:title&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Lyone&#x27;s Personal Blog&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Learn web development and explore project showcases.&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://lyone.xyz/images/og-image.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>网站的 SEO 优化要点</strong>：</p>\n<ol>\n<li><strong>优化标题和 Meta 描述</strong>，确保每个页面有唯一的、精确的描述。</li>\n<li><strong>选择合适的关键词</strong>，并合理布局在标题、内容和 URL 中。</li>\n<li><strong>简化 URL 结构</strong>，避免使用哈希标记，将其改为独立的页面路径。</li>\n<li><strong>增强内部链接和外部链接</strong>，增加页面权重和可访问性。</li>\n<li><strong>确保网站移动端优化</strong>，提升用户体验。</li>\n<li><strong>生成并提交网站地图和 Robots.txt 文件</strong>，提高搜索引擎的抓取效率。</li>\n</ol>\n<p>通过这些优化，你的网站可以更容易被搜索引擎抓取，并提升在搜索结果中的排名，从而让更多用户可以发现你的内容。</p>\n<p>当然可以！以下是一个为你的网站撰写的简短介绍：</p>\n<p><strong>网站介绍</strong></p>\n<p><strong>Lyone’s Personal Blog</strong> 是一个专注于技术分享与项目展示的个人博客。这里涵盖了前端开发、后端编程、以及各种开发工具的教程和实践案例。无论你是刚刚入门的编程爱好者，还是资深开发者，都可以在这里找到实用的技术干货和独特的见解。</p>\n<p>我们分享的内容包括：</p>\n<p>​\t•\t<strong>Web 开发</strong>：深入浅出的 Vue.js 和 Java 项目教程。</p>\n<p>​\t•\t<strong>工具分享</strong>：推荐并介绍编程过程中常用的开发工具和插件。</p>\n<p>​\t•\t<strong>项目展示</strong>：展示实际开发的项目和实战经验，提供源码参考。</p>\n<p>本博客旨在为开发者提供一个轻松学习和交流的平台，通过丰富的技术内容和实际项目经验帮助大家更好地提升技能。</p>\n<p>无论你是想学习最新的技术趋势，还是寻找解决开发问题的方法，Lyone’s Blog 都会是你的好伙伴！</p>\n<p>你可以根据实际网站的内容进行微调，确保介绍与你的网站定位和目标用户相符。</p>\n","excerpt":"","more":"<p>你提供的网站 <code>https://lyone.xyz/#oline</code> 似乎是一个个人网站，可能展示了与技术、项目或工具相关的内容。以下是一些可能的 SEO 优化建议和总结，根据网站的结构和典型 SEO 实践来进行描述。</p>\n<h3 id=\"网站内容总结\"><a href=\"#网站内容总结\" class=\"headerlink\" title=\"网站内容总结\"></a>网站内容总结</h3><ol>\n<li><strong>主页内容</strong>：网站的主页可能包含一些基本的介绍，涉及个人简介、项目展示或服务信息。</li>\n<li><strong>功能页面</strong>：你可能有一个或多个子页面，提供关于特定项目、工具或服务的详细介绍。</li>\n<li><strong>技术&#x2F;开发相关内容</strong>：网站可能是围绕技术项目、工具、博客或者展示个人编程工作展开的，目标用户可能是开发者或对技术感兴趣的读者。</li>\n</ol>\n<h3 id=\"SEO-优化建议\"><a href=\"#SEO-优化建议\" class=\"headerlink\" title=\"SEO 优化建议\"></a>SEO 优化建议</h3><h4 id=\"1-标题优化（Title-Tag）\"><a href=\"#1-标题优化（Title-Tag）\" class=\"headerlink\" title=\"1. 标题优化（Title Tag）\"></a>1. <strong>标题优化（Title Tag）</strong></h4><ul>\n<li><p><strong>当前情况</strong>：网站的标题标签可能是比较通用的或与内容不够匹配。</p>\n</li>\n<li><p><strong>优化建议</strong>：标题标签是搜索引擎了解网页内容的第一个重要信息。确保每个页面有独特的标题，并且准确反映页面内容。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Lyone&#x27;s Personal Blog - 技术分享与项目展示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-Meta-描述优化\"><a href=\"#2-Meta-描述优化\" class=\"headerlink\" title=\"2. Meta 描述优化\"></a>2. <strong>Meta 描述优化</strong></h4><ul>\n<li><p><strong>当前情况</strong>：可能没有设置具体的 meta 描述，或描述过于简单。</p>\n</li>\n<li><p><strong>优化建议</strong>：为每个页面添加 meta 描述，使其能够简要介绍页面内容，吸引用户点击。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Lyone&#x27;s personal blog focusing on web development, Vue.js, and project showcases. Explore tutorials, coding tips, and technology updates.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-关键词优化\"><a href=\"#3-关键词优化\" class=\"headerlink\" title=\"3. 关键词优化\"></a>3. <strong>关键词优化</strong></h4><ul>\n<li><strong>当前情况</strong>：未发现网站是否专门使用了 SEO 关键词。</li>\n<li><strong>优化建议</strong>：为网站选择合适的关键词，确保在文章、标题、URL 和内容中合理地使用关键词。避免关键词堆砌。你可以围绕以下主题进行关键词选择：<ul>\n<li>“技术博客”</li>\n<li>“Vue.js 教程”</li>\n<li>“Java 开发项目”</li>\n<li>“个人开发者网站”</li>\n<li>“编程工具展示”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-网站结构和内部链接\"><a href=\"#4-网站结构和内部链接\" class=\"headerlink\" title=\"4. 网站结构和内部链接\"></a>4. <strong>网站结构和内部链接</strong></h4><ul>\n<li><strong>当前情况</strong>：内部链接可能不足。</li>\n<li><strong>优化建议</strong>：通过内部链接连接各个相关页面，增加用户停留时间和页面访问深度。例如，主页可以链接到详细的项目页面，或者文章可以链接到相关的教程。</li>\n</ul>\n<h4 id=\"5-页面-URL-结构\"><a href=\"#5-页面-URL-结构\" class=\"headerlink\" title=\"5. 页面 URL 结构\"></a>5. <strong>页面 URL 结构</strong></h4><ul>\n<li><strong>当前情况</strong>：如果网站使用哈希标记（如 <code>#oline</code>）来定位部分内容，这对于 SEO 不太理想，因为哈希部分不会被搜索引擎视为单独的页面。</li>\n<li><strong>优化建议</strong>：建议使用清晰、简洁的 URL 结构。例如，将哈希路径替换为独立的页面路径：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://lyone.xyz/online-tools</span><br></pre></td></tr></table></figure>\n这种 URL 结构对搜索引擎更友好，也能提高页面的权重。</li>\n</ul>\n<h4 id=\"6-内容更新和高质量内容\"><a href=\"#6-内容更新和高质量内容\" class=\"headerlink\" title=\"6. 内容更新和高质量内容\"></a>6. <strong>内容更新和高质量内容</strong></h4><ul>\n<li><strong>当前情况</strong>：定期更新可能尚未完成或缺乏高质量内容。</li>\n<li><strong>优化建议</strong>：定期发布有价值的博客、教程、项目更新或行业新闻。内容是吸引用户和提升搜索引擎排名的关键因素。</li>\n</ul>\n<h4 id=\"7-图像优化\"><a href=\"#7-图像优化\" class=\"headerlink\" title=\"7. 图像优化\"></a>7. <strong>图像优化</strong></h4><ul>\n<li><p><strong>当前情况</strong>：如果网站上有大量图片，可能没有为每张图片设置 <code>alt</code> 标签。</p>\n</li>\n<li><p><strong>优化建议</strong>：为每张图片添加 <code>alt</code> 标签，以描述图片内容，并确保图像文件体积经过压缩优化。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;project-screenshot.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Vue.js web application screenshot&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8-移动端优化\"><a href=\"#8-移动端优化\" class=\"headerlink\" title=\"8. 移动端优化\"></a>8. <strong>移动端优化</strong></h4><ul>\n<li><strong>当前情况</strong>：不清楚网站是否对移动设备进行过优化。</li>\n<li><strong>优化建议</strong>：确保网站使用响应式设计，使其在移动设备上的用户体验和桌面端一样流畅。这对于 SEO 尤其重要，因为 Google 等搜索引擎优先考虑移动端优化。</li>\n</ul>\n<h4 id=\"9-网站地图（Sitemap）和-Robots-txt\"><a href=\"#9-网站地图（Sitemap）和-Robots-txt\" class=\"headerlink\" title=\"9. 网站地图（Sitemap）和 Robots.txt\"></a>9. <strong>网站地图（Sitemap）和 Robots.txt</strong></h4><ul>\n<li><p><strong>当前情况</strong>：可能还没有生成网站地图。</p>\n</li>\n<li><p><strong>优化建议</strong>：生成并提交一个 <code>sitemap.xml</code> 文件，帮助搜索引擎更好地索引你的网站。同时创建 <code>robots.txt</code> 文件，以指示搜索引擎哪些页面可以被抓取，哪些应该忽略。</p>\n<p>网站地图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://lyone.xyz/sitemap.xml</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"10-社交媒体集成\"><a href=\"#10-社交媒体集成\" class=\"headerlink\" title=\"10. 社交媒体集成\"></a>10. <strong>社交媒体集成</strong></h4><ul>\n<li><p><strong>当前情况</strong>：不清楚是否有集成社交媒体分享。</p>\n</li>\n<li><p><strong>优化建议</strong>：集成社交媒体分享按钮，帮助用户分享网站内容，增加外部链接流量。同时可以使用 Open Graph 标签优化社交媒体上的预览。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:title&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Lyone&#x27;s Personal Blog&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Learn web development and explore project showcases.&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://lyone.xyz/images/og-image.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>网站的 SEO 优化要点</strong>：</p>\n<ol>\n<li><strong>优化标题和 Meta 描述</strong>，确保每个页面有唯一的、精确的描述。</li>\n<li><strong>选择合适的关键词</strong>，并合理布局在标题、内容和 URL 中。</li>\n<li><strong>简化 URL 结构</strong>，避免使用哈希标记，将其改为独立的页面路径。</li>\n<li><strong>增强内部链接和外部链接</strong>，增加页面权重和可访问性。</li>\n<li><strong>确保网站移动端优化</strong>，提升用户体验。</li>\n<li><strong>生成并提交网站地图和 Robots.txt 文件</strong>，提高搜索引擎的抓取效率。</li>\n</ol>\n<p>通过这些优化，你的网站可以更容易被搜索引擎抓取，并提升在搜索结果中的排名，从而让更多用户可以发现你的内容。</p>\n<p>当然可以！以下是一个为你的网站撰写的简短介绍：</p>\n<p><strong>网站介绍</strong></p>\n<p><strong>Lyone’s Personal Blog</strong> 是一个专注于技术分享与项目展示的个人博客。这里涵盖了前端开发、后端编程、以及各种开发工具的教程和实践案例。无论你是刚刚入门的编程爱好者，还是资深开发者，都可以在这里找到实用的技术干货和独特的见解。</p>\n<p>我们分享的内容包括：</p>\n<p>​\t•\t<strong>Web 开发</strong>：深入浅出的 Vue.js 和 Java 项目教程。</p>\n<p>​\t•\t<strong>工具分享</strong>：推荐并介绍编程过程中常用的开发工具和插件。</p>\n<p>​\t•\t<strong>项目展示</strong>：展示实际开发的项目和实战经验，提供源码参考。</p>\n<p>本博客旨在为开发者提供一个轻松学习和交流的平台，通过丰富的技术内容和实际项目经验帮助大家更好地提升技能。</p>\n<p>无论你是想学习最新的技术趋势，还是寻找解决开发问题的方法，Lyone’s Blog 都会是你的好伙伴！</p>\n<p>你可以根据实际网站的内容进行微调，确保介绍与你的网站定位和目标用户相符。</p>\n"},{"title":"Linux命令大全(超详细版)","date":"2024-10-30T12:14:20.831Z","_content":"## Linux命令大全(超详细版)\n\n### 1.简单系统命令\n\n```markdown\n# 查看ip地址\n\tip a\n\tip addr\n# ping网络(测试网络连通)\n\tping 目标机器的ip\n# 查看系统时间\n\tdate\n# 注销\n\tlogout\n# 关机\n\tshutdown now\n# 重启\n\treboot\n# 清屏\n\tclear\n123456789101112131415\n```\n\n### 2.Linux文件系统\n\n- 核心\n\n> 1.Linux一切皆文件\n>\n> 2.只有一个顶级目录，不像windows分C盘、D盘、E盘\n\n- 目录结构\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/b6dedb58c8b570b5e530b9d426de015f.png#pic_center)\n\n- 文件含义\n\n| Linux | 含义                                                         | windows                                           |\n| ----- | ------------------------------------------------------------ | ------------------------------------------------- |\n| /bin  | 所有用户可用的基本命令存放的位置                             | windows没有固定的命令存放目录                     |\n| /sbin | 需要管理员权限才能使用的命令                                 |                                                   |\n| /boot | linux系统启动的时候需要加载和使用的文件                      |                                                   |\n| /dev  | 外设连接linux后，对应的文件存放的位置                        | 类似Windows中的U盘，光盘的符号文件。              |\n| /etc  | 存放系统或者安装的程序的配置文件,注册服务等                  | 类似windows中的注册表，                           |\n| /home | 家目录，linux中每新建一个用户，会自动在home中为该用户分配一个文件夹 | 类似windows中的\"我的文档\"，每个用户有自己的目录。 |\n| /root | root账户的家目录，仅供root账户使用                           | 类似windows中的Administrator账户的\"我的文档\"      |\n| /lib  | linux的命令和系统启动，需要使用一些公共的依赖，放在lib中，类似我们开发的代码执行需要引入的jdk的jar |                                                   |\n| /usr  | 很多系统软件的默认安装路径                                   | 类似windows中的C盘下的Program Files目录。         |\n| /var  | 系统和程序运行产生的日志文件和缓存文件放在这里               |                                                   |\n\n#### 3. 文件管理命令\n\n> 注意事项：命令区分大小写\n\n```markdown\n# 1. 查看文件列表\n\tls [-参数1参数2] [目标文件夹]\n12\n# 查看当前目录下的文件列表\n\tls\n# 查看指定目录下的文件\n\tls /\n# 查看详细信息，元数据信息(用户、组、大小、创建时间、权限信息、文件类型)\n\tls -l\n# 查看隐藏文件\n\tls -a \n# 参数并用\n\tls -la\n12345678910\n# 2. 切换目录\n\tcd 目标文件夹\n12\n# 绝对路径切换\n\tcd 绝对路径\n# 相对路径切换\n\tcd 相对路径\n# 例子：切换到/etc/sysconfig/networks-scripts 目录下\n12345\n# 3. 查看当前命令所在的目录\n1\n[root@centos7 network-scripts]# pwd\n/etc/sysconfig/network-scripts\n# 特殊目录符号\n\t~ 当前用户的home目录\n\t. 当前目录\n\t.. 上一级目录\n123456\n# 4. 新建文件夹及文件\n1\n# 在当前位置新建文件夹\n\tmkdir 文件夹名\n# 在指定目录位置，创建文件夹，并创建父文件夹\n\tmkdir -p /a/b/文件夹名\n# 在当前目录下新建文件\n\ttouch 文件名\n123456\n# 5. 删除文件\n1\n# 删除文件\n\trm 文件\n# 删除文件夹\n\trm -r 文件夹\n# 强制删除不询问\n\trm -rf 文件\n123456\n# 6. 拷贝文件\n1\n# 拷贝文件\n\tcp 原文件  新文件\n# 拷贝文件夹\n\tcp -r 源文件夹 新文件夹\n1234\n# 7. 移动文件或修改文件名\n1\n# 移动源文件到目标文件夹中\n\tmv 文件  文件夹\n# 修改文件A的名字为文件B\n\tmv 文件A 文件B\n1234\n# 8. 获取文件的md5指纹(数字签名)\n1\nmd5sum 文件名\n# 简介\n1. 数字签名，又称数字指纹\n2. 可以验证文件是否被修改\n3. 一个文件通过计算得到的一串字符串,文件内容的唯一标记(文件内容不变,指纹不会变)\n12345\n```\n\n#### 4. 文本内容查看命令\n\n```markdown\n# cat命令\n1\n# 查看文件中的全部信息(适合查看小文档)\n\tcat 文件名\n12\n# less命令\n1\n# 以分页的方式浏览文件信息(适合查看大文档)，进入浏览模式\n\tless 文件名\n# 浏览模式快捷键\n\t↑ #上一行\n    ↓ #下一行\n    G #最后一页\n    g #第一页\n    空格 #下一页\n    /关键词 #搜索关键词\n# 退出浏览模式，回到Linux命令行模式\n    q #退出\n1234567891011\n# tail 命令\n1\n# 实时滚动显示文件的最后10行信息(默认10行)\ntail -f 文件名\n# 显示文件的最后20行信息\ntail -n 20 文件名\ntail -n -20 文件名\n# 显示文件信息从第20行至文件末尾\ntail -n +20 文件名\n1234567\n```\n\n#### 5. 文件查找\n\n1. 文件名查找\n\n   ```markdown\n   # 语法\n   \tfind 搜索路径 -name \"文件名关键词\"\n   # 例子\n   \tfind / -name \"passwd\"\n   \tfind / -name \"ifcfg-*\"\n   12345\n   ```\n\n2. 文件内容查找\n\n   ```markdown\n   # 语法\n   \tgrep -参数 要查找的目录范围\n   \t# 参数\n   \t-n 显示查找结果所在行号\n   \t-R 递归查找目录下的所有文件\n   # 例子\n   \tgrep aries /etc\n   \tgrep aries /etc/passwd\n   \t\n   123456789\n   ```\n\n#### 6. 文件链接\n\n1. Linux文件管理\n\n- 模型图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/72686490a9fbd64ed0850c833e136e28.png#pic_center)\n\n- 说明\n\n  ```markdown\n  # 文件名\n  \t该文件的名字\n  # inode\n  \t该文件的元数据\n  # datablock\n  \t该文件真正保存的数据\n  123456\n  ```\n\n  > 注意：\n  >\n  > 1、inode中保存的是文件的元数据\n  >\n  > 2、ls命令查看的都是linux的元数据信息\n  >\n  > 3、数据块中才是文件的真正数据\n\n1. 硬链接\n\n- 图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/f33101a860bc5a42bf8cb4767e4a57e7.png#pic_center)\n\n- 命令\n\n  ```shell\n  ln 源文件 硬链接文件\n  1\n  ```\n\n1. 软连接\n\n- 图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/9a97cfb63a445ef7214cb94f6d58cce1.png#pic_center)\n\n- 命令\n\n  ```shell\n  ln -s 目标文件或文件夹 软连接名字\n  1\n  ```\n\n#### 7. 系统管理\n\n```markdown\n# 静态查看系统进程\n\tps -aux\n12\n# 实时查看系统进程\n\ttop\n\t# 快捷键\n\t\t↑ 下翻\n\t\t↓ 上翻\n\t\tq 退出\n123456\n# 关闭进程\n\tkill 进程id \n# 强制关闭进程(谨慎使用)\n\tkill -9 进程id\n1234\n```\n\n#### 8. 输出\n\n```markdown\n# 覆盖输出\n1\n# 将命令1的执行结果，输出到后面的文件中。\n`覆盖写入`\n\t命令1 > 文件\n# 例子\n\tdate > date.log\n12345\n# 追加输出\n1\n# 将命令1的执行结果，输出到后面的文件中。\n`追加写入`\n\t命令1 >> 文件\n# 例子\n\tdate >> date.log\n12345\n```\n\n#### 9. 管道\n\n```markdown\n# 管道\n1\n# 语法，将命令1的输出结果，作为命令2的输入\n命令1 | 命令2\n12\n```\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/34c8eabf3bb9494d6375938b4f0494b7.png#pic_center)\n\n```shell\n# 例子\n查找aries用户：cat /etc/passwd | grep -n “baizhi”\n查找aries组：cat /etc/group | grep -n “baizhi”\n查找sshd进程：ps -aux | grep sshd\n1234\n```\n\n#### 9. 文件编辑\n\n> 配置[MobaXterm](https://so.csdn.net/so/search?q=MobaXterm&spm=1001.2101.3001.7020)的默认文本编辑器\n>\n> 免去[vim命令](https://so.csdn.net/so/search?q=vim命令&spm=1001.2101.3001.7020)的麻烦\n\n### 系统权限\n\n#### 用户组\n\n- 图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/297f0edfdb54c4071cdad9aca6b6a1cf.png#pic_center)\n\n- 相关命令\n\n  ```shell\n  1. 创建组\n    `groupadd 组名`\n  2. 删除组\n    `groupdel 组名`\n  3. 查找系统中的组\n    `cat /etc/group | grep -n “组名”`\n    说明：系统每个组信息都会被存放在/etc/group的文件中\n  1234567\n  ```\n\n#### 用户\n\n- 相关命令\n\n  ```shell\n  1. 创建用户\n    `useradd -g 组名 用户名`\n  2. 设置密码\n    `passwd 用户名`\n  3. 查找系统账户\n    说明：系统每个用户信息保存在`/etc/passwd`文件中\n  4. 切换用户\n    `su 用户名`\n  5. 删除用户\n    `userdel -r 用户名`\n  12345678910\n  ```\n\n#### 权限\n\n- 问题\n\n  linux系统未来可能有程序员、用户、数据库管理员、项目经理等各种角色各种级别人使用，甚至还有身份不明的人链接到linux，控制不好权限容易导致系统崩溃、数据丢失等问题。\n\n- 权限含义\n\n  | 权限字母 | 含义 | 对文件                        | 代表命令                   | 对文件夹                 | 代表命令 |\n  | -------- | ---- | ----------------------------- | -------------------------- | ------------------------ | -------- |\n  | R®       | 读   | 查看文件内容和复制文件        | more cat less cp head tail | 查看文件夹下的文件       | ls       |\n  | W(w)     | 写   | 编辑文件                      | vi                         | 在文件夹内创建和删除文件 | rm touch |\n  | X(x)     | 执行 | 执行该文件(执行必须具备r权限) | -                          | 切换到文件夹             | cd       |\n\n- 权限访问控制列表(ACL access controll list)\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/3de3cbc1b7e1f4f7f302a21028a346b4.png#pic_center)\n\n- 命令\n\n  ```markdown\n  # 查看权限\n  1\n  ```\n\n  ```shell\n  ls -la 文件\n  ll 文件\n  12\n  ```\n\n  ```markdown\n  # 设置文件所有者\n  1\n  ```\n\n  ```shell\n  语法：chown [-R] user名:group名 文件名\n  参数：-R 如果是文件夹，需要使用这个参数，可以将文件夹及其内部所有文件的所有者和组全部修改\n  注意：命令权限需要root\n  ## 修改文件所有者\n  \tchown 用户名 文件名\n  ## 修改文件所属组\n  \tchown :组名 文件名\n  ## 修改文件所有者和所属组\n  \tchown 用户名:组名 文件名\n  ## 修改文件夹的所有者和所属组\n  \tchown [-R] 用户名:组名 文件夹\n  1234567891011\n  ```\n\n  ```markdown\n  # 权限设置1\n  1\n  ```\n\n  ```shell\n  语法：chmod u±rwx,g±rwx,o±rwx 文件名\n  运算符：\n  \t- 删除权限\n  \t+ 添加权限\n  \t= 赋值权限\n  ## 给文件的所有者添加执行权限\n  chmod u+x 文件名\n  ## 给文件的其他人删除所有权限\n  chmod o-rwx 文件名\n  ## 给文件的所属组设置读写权限\n  chmod g=wx 文件名\n  1234567891011\n  ```\n\n  ```markdown\n  # 权限设置2\n  1\n  ```\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/c0f3ef45c3b90b0520355a0703bacb03.png#pic_center)\n\n```shell\n# 文件的每个归属方的权限的值使用rwx之和计算出来的。\n# 语法\n\t`chmod [-R] nnn 文件` \n\t-R 递归设置文件夹内所有文件\n# 设置文件的权限为(所有者可读可写可执行，所属组可读可写，其他人可读)\n\tchmod 764 文件名\n123456\n```\n\n### 系统软件管理\n\n#### 压缩解压缩\n\n> 压缩语法：`tar -zcvf 压缩后文件名 被压缩文件`\n>\n> 解压缩语法 `tar -zxvf 压缩文件名 -C 解压后文件所在目录`\n>\n> 参数1：\n>\n> | 参数 | 描述                             |\n> | ---- | -------------------------------- |\n> | -z   | 操作tar.gz文件需要使用           |\n> | -x   | 解压缩                           |\n> | -c   | 压缩                             |\n> | -v   | 显示压缩或者解压缩的执行过程信息 |\n> | -f   | 要处理的文件file，必须放在最后   |\n>\n> 参数2：-C 指定解压后的文件存放的位置\n\n#### rpm软件\n\n> 简介：类似于windows中的.exe程序\n\n```shell\n1. 安装rpm软件\n  语法：`rpm -ivh xxx.rpm`\n2. 查看系统中是否已安装的过该rpm软件\n  语法：`rpm -qa 软件名`\n3. 卸载rpm软件\n  语法：`rpm -e 软件名`\n4. 例子：安装tree工具\n  作用：查看某个目录下的文件信息\n  # 以树状结构查看2层文件信息\n  tree -L 2 要查看的路径\n12345678910\n```\n\n#### yum\n\n> yum基于rpm实现的，提供了除了rpm的安装软件、卸载软件等功能以外还有，自动查找、下载软件并自动处理软件的彼此之间的依赖关系，下载并安装依赖包。\n\n```shell\n## 列出所有可以安装的软件包\n\tyum list\n## 安装软件\n\tyum install -y 软件名\n## 卸载软件\n\tyum remove 软件名\n## 查找软件包\n\tyum search all 软件名\n12345678\n```\n\n#### Linux服务\n\n```markdown\n# 例如：sshd network firewalld 等\n1\n# 服务器管理命令\n\tsystemctl status 服务名\n# 启动服务\n\tsystemctl start 服务名\n# 重启服务\n\tsystemctl restart 服务名\n# 停止服务\n\tsystemctl stop 服务名\n# 禁止服务随linux启动。\n\tsystemctl disable 服务名\n# 设置服务随linux启动。\n\tsystemctl enable 服务名\n123456789101112\n```\n\n#### ip设置\n\n```\n服务名:network\n[root@centos7 dirnew]# vim /etc/sysconfig/network-scripts/ifcfg-ens33\n----------------网卡对应的文件内容---------------------\n    TYPE=\"Ethernet\"\n    PROXY_METHOD=\"none\"\n    BROWSER_ONLY=\"no\"\n    BOOTPROTO=\"none\"\n    DEFROUTE=\"yes\"\n    IPV4_FAILURE_FATAL=\"no\"\n    IPV6INIT=\"yes\"\n    IPV6_AUTOCONF=\"yes\"\n    IPV6_DEFROUTE=\"yes\"\n    IPV6_FAILURE_FATAL=\"no\"\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\n    NAME=\"ens33\"\n    UUID=\"0bd5d8a5-fe1b-42de-82bd-bfa7d2984b95\"\n    DEVICE=\"ens33\"\n    ONBOOT=\"yes\"\n    IPADDR=\"192.168.199.8\" # 修改这里的ip地址即可\n    PREFIX=\"24\"\n    GATEWAY=\"192.168.199.2\"\n    DNS1=\"192.168.199.2\"\n    DNS2=\"8.8.8.8\"\n    IPV6_PRIVACY=\"no\"\n[root@centos7 dirnew]# systemctl restart network #重启网卡服务\n\n123456789101112131415161718192021222324\n```\n\n#### 防火墙\n\n```\n服务名:firewalld\n# 开启防火墙\nsystemctl start 服务名\n# 关闭防火墙(服务器重启后还会自动开启防火墙)\nsystemctl stop firewalld\n# 禁止防火墙开机启动\nsystemctl disable firewalld\n123456\n```\n\n#### 主机名\n\n```shell\n# 查看主机名\nhostname\n# 设置主机名\nhostnamectl set-hostname 主机名\n1234\n```\n\n#### ip映射\n\n- 域名解析\n\n- 本地hosts编辑\n\n  ```shell\n  [root@centos7 ~]# vim /etc/hosts\n  --------------下面是文件------------------\n  \t192.168.199.8 centos7\n  123\n  ```\n\n#### SSH\n\n```shell\n# 远程登录linux\nssh 远程linux的ip或者映射域名\n12\n```\n\n#### 免密登录\n\n```markdown\n# 简介\nssh登录远程linux，免去输入密码的麻烦\n12\n# 生成公钥和私钥\n[root@centos7 ~]# ssh-keygen\n------------执行结果-----------\n    [root@centos7 ~]# tree .ssh\n    .ssh\n    ├── id_rsa # 私钥\n    ├── id_rsa.pub # 公钥\n    └── known_hosts\n# 发送公钥\n\t`保存公钥的文件为/root/.ssh/authorized_keys`\n[root@centos7 .ssh]# cat id_rsa.pub > authorized_keys\n# 发送公钥\n[root@centos7 .ssh]# ssh-copy-id 目标主机的ip\n12345678910111213\n```\n\n#### 远程拷贝\n\n```shell\nscp 本地的文件 root@远程linuxip:/远程linux的文件路径\nscp -r 本地的目录 root@远程linuxip:/远程linux的文件路径\n12\n```\n\n#### 必要软件安装\n\n1. vim(vi编辑器增强版)\n\n   ```shell\n   vim 文件\n   1\n   ```\n\n2. wget(下载器)\n\n   ```shell\n   wget url\n   1\n   ```\n\n3. tree(目录树状显示)\n\n   ```shell\n   # 以tree结构，递归显示当前文件下所有文件\n   \ttree\n   # 显示目标文件夹下的文件\n   \ttree 目标目录\n   1234\n   ```\n\n4. psmisc(高级进程管理工具)\n\n   ```shell\n   # 以tree形式显示系统目前进程\n   \tpstree\n   # 杀死进程\n   \tkillall 进程名\n   # 显示该文件被哪个进程使用\n   \tfuser /目标文件\n   123456\n   ```\n\n5. jdk安装","source":"_posts/Linux命令大全(超详细版).md","raw":"---\ntitle: Linux命令大全(超详细版)\ndate: 2024-10-30T20:14:20.831Z\ntags: []\ncategories: []\n---\n## Linux命令大全(超详细版)\n\n### 1.简单系统命令\n\n```markdown\n# 查看ip地址\n\tip a\n\tip addr\n# ping网络(测试网络连通)\n\tping 目标机器的ip\n# 查看系统时间\n\tdate\n# 注销\n\tlogout\n# 关机\n\tshutdown now\n# 重启\n\treboot\n# 清屏\n\tclear\n123456789101112131415\n```\n\n### 2.Linux文件系统\n\n- 核心\n\n> 1.Linux一切皆文件\n>\n> 2.只有一个顶级目录，不像windows分C盘、D盘、E盘\n\n- 目录结构\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/b6dedb58c8b570b5e530b9d426de015f.png#pic_center)\n\n- 文件含义\n\n| Linux | 含义                                                         | windows                                           |\n| ----- | ------------------------------------------------------------ | ------------------------------------------------- |\n| /bin  | 所有用户可用的基本命令存放的位置                             | windows没有固定的命令存放目录                     |\n| /sbin | 需要管理员权限才能使用的命令                                 |                                                   |\n| /boot | linux系统启动的时候需要加载和使用的文件                      |                                                   |\n| /dev  | 外设连接linux后，对应的文件存放的位置                        | 类似Windows中的U盘，光盘的符号文件。              |\n| /etc  | 存放系统或者安装的程序的配置文件,注册服务等                  | 类似windows中的注册表，                           |\n| /home | 家目录，linux中每新建一个用户，会自动在home中为该用户分配一个文件夹 | 类似windows中的\"我的文档\"，每个用户有自己的目录。 |\n| /root | root账户的家目录，仅供root账户使用                           | 类似windows中的Administrator账户的\"我的文档\"      |\n| /lib  | linux的命令和系统启动，需要使用一些公共的依赖，放在lib中，类似我们开发的代码执行需要引入的jdk的jar |                                                   |\n| /usr  | 很多系统软件的默认安装路径                                   | 类似windows中的C盘下的Program Files目录。         |\n| /var  | 系统和程序运行产生的日志文件和缓存文件放在这里               |                                                   |\n\n#### 3. 文件管理命令\n\n> 注意事项：命令区分大小写\n\n```markdown\n# 1. 查看文件列表\n\tls [-参数1参数2] [目标文件夹]\n12\n# 查看当前目录下的文件列表\n\tls\n# 查看指定目录下的文件\n\tls /\n# 查看详细信息，元数据信息(用户、组、大小、创建时间、权限信息、文件类型)\n\tls -l\n# 查看隐藏文件\n\tls -a \n# 参数并用\n\tls -la\n12345678910\n# 2. 切换目录\n\tcd 目标文件夹\n12\n# 绝对路径切换\n\tcd 绝对路径\n# 相对路径切换\n\tcd 相对路径\n# 例子：切换到/etc/sysconfig/networks-scripts 目录下\n12345\n# 3. 查看当前命令所在的目录\n1\n[root@centos7 network-scripts]# pwd\n/etc/sysconfig/network-scripts\n# 特殊目录符号\n\t~ 当前用户的home目录\n\t. 当前目录\n\t.. 上一级目录\n123456\n# 4. 新建文件夹及文件\n1\n# 在当前位置新建文件夹\n\tmkdir 文件夹名\n# 在指定目录位置，创建文件夹，并创建父文件夹\n\tmkdir -p /a/b/文件夹名\n# 在当前目录下新建文件\n\ttouch 文件名\n123456\n# 5. 删除文件\n1\n# 删除文件\n\trm 文件\n# 删除文件夹\n\trm -r 文件夹\n# 强制删除不询问\n\trm -rf 文件\n123456\n# 6. 拷贝文件\n1\n# 拷贝文件\n\tcp 原文件  新文件\n# 拷贝文件夹\n\tcp -r 源文件夹 新文件夹\n1234\n# 7. 移动文件或修改文件名\n1\n# 移动源文件到目标文件夹中\n\tmv 文件  文件夹\n# 修改文件A的名字为文件B\n\tmv 文件A 文件B\n1234\n# 8. 获取文件的md5指纹(数字签名)\n1\nmd5sum 文件名\n# 简介\n1. 数字签名，又称数字指纹\n2. 可以验证文件是否被修改\n3. 一个文件通过计算得到的一串字符串,文件内容的唯一标记(文件内容不变,指纹不会变)\n12345\n```\n\n#### 4. 文本内容查看命令\n\n```markdown\n# cat命令\n1\n# 查看文件中的全部信息(适合查看小文档)\n\tcat 文件名\n12\n# less命令\n1\n# 以分页的方式浏览文件信息(适合查看大文档)，进入浏览模式\n\tless 文件名\n# 浏览模式快捷键\n\t↑ #上一行\n    ↓ #下一行\n    G #最后一页\n    g #第一页\n    空格 #下一页\n    /关键词 #搜索关键词\n# 退出浏览模式，回到Linux命令行模式\n    q #退出\n1234567891011\n# tail 命令\n1\n# 实时滚动显示文件的最后10行信息(默认10行)\ntail -f 文件名\n# 显示文件的最后20行信息\ntail -n 20 文件名\ntail -n -20 文件名\n# 显示文件信息从第20行至文件末尾\ntail -n +20 文件名\n1234567\n```\n\n#### 5. 文件查找\n\n1. 文件名查找\n\n   ```markdown\n   # 语法\n   \tfind 搜索路径 -name \"文件名关键词\"\n   # 例子\n   \tfind / -name \"passwd\"\n   \tfind / -name \"ifcfg-*\"\n   12345\n   ```\n\n2. 文件内容查找\n\n   ```markdown\n   # 语法\n   \tgrep -参数 要查找的目录范围\n   \t# 参数\n   \t-n 显示查找结果所在行号\n   \t-R 递归查找目录下的所有文件\n   # 例子\n   \tgrep aries /etc\n   \tgrep aries /etc/passwd\n   \t\n   123456789\n   ```\n\n#### 6. 文件链接\n\n1. Linux文件管理\n\n- 模型图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/72686490a9fbd64ed0850c833e136e28.png#pic_center)\n\n- 说明\n\n  ```markdown\n  # 文件名\n  \t该文件的名字\n  # inode\n  \t该文件的元数据\n  # datablock\n  \t该文件真正保存的数据\n  123456\n  ```\n\n  > 注意：\n  >\n  > 1、inode中保存的是文件的元数据\n  >\n  > 2、ls命令查看的都是linux的元数据信息\n  >\n  > 3、数据块中才是文件的真正数据\n\n1. 硬链接\n\n- 图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/f33101a860bc5a42bf8cb4767e4a57e7.png#pic_center)\n\n- 命令\n\n  ```shell\n  ln 源文件 硬链接文件\n  1\n  ```\n\n1. 软连接\n\n- 图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/9a97cfb63a445ef7214cb94f6d58cce1.png#pic_center)\n\n- 命令\n\n  ```shell\n  ln -s 目标文件或文件夹 软连接名字\n  1\n  ```\n\n#### 7. 系统管理\n\n```markdown\n# 静态查看系统进程\n\tps -aux\n12\n# 实时查看系统进程\n\ttop\n\t# 快捷键\n\t\t↑ 下翻\n\t\t↓ 上翻\n\t\tq 退出\n123456\n# 关闭进程\n\tkill 进程id \n# 强制关闭进程(谨慎使用)\n\tkill -9 进程id\n1234\n```\n\n#### 8. 输出\n\n```markdown\n# 覆盖输出\n1\n# 将命令1的执行结果，输出到后面的文件中。\n`覆盖写入`\n\t命令1 > 文件\n# 例子\n\tdate > date.log\n12345\n# 追加输出\n1\n# 将命令1的执行结果，输出到后面的文件中。\n`追加写入`\n\t命令1 >> 文件\n# 例子\n\tdate >> date.log\n12345\n```\n\n#### 9. 管道\n\n```markdown\n# 管道\n1\n# 语法，将命令1的输出结果，作为命令2的输入\n命令1 | 命令2\n12\n```\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/34c8eabf3bb9494d6375938b4f0494b7.png#pic_center)\n\n```shell\n# 例子\n查找aries用户：cat /etc/passwd | grep -n “baizhi”\n查找aries组：cat /etc/group | grep -n “baizhi”\n查找sshd进程：ps -aux | grep sshd\n1234\n```\n\n#### 9. 文件编辑\n\n> 配置[MobaXterm](https://so.csdn.net/so/search?q=MobaXterm&spm=1001.2101.3001.7020)的默认文本编辑器\n>\n> 免去[vim命令](https://so.csdn.net/so/search?q=vim命令&spm=1001.2101.3001.7020)的麻烦\n\n### 系统权限\n\n#### 用户组\n\n- 图\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/297f0edfdb54c4071cdad9aca6b6a1cf.png#pic_center)\n\n- 相关命令\n\n  ```shell\n  1. 创建组\n    `groupadd 组名`\n  2. 删除组\n    `groupdel 组名`\n  3. 查找系统中的组\n    `cat /etc/group | grep -n “组名”`\n    说明：系统每个组信息都会被存放在/etc/group的文件中\n  1234567\n  ```\n\n#### 用户\n\n- 相关命令\n\n  ```shell\n  1. 创建用户\n    `useradd -g 组名 用户名`\n  2. 设置密码\n    `passwd 用户名`\n  3. 查找系统账户\n    说明：系统每个用户信息保存在`/etc/passwd`文件中\n  4. 切换用户\n    `su 用户名`\n  5. 删除用户\n    `userdel -r 用户名`\n  12345678910\n  ```\n\n#### 权限\n\n- 问题\n\n  linux系统未来可能有程序员、用户、数据库管理员、项目经理等各种角色各种级别人使用，甚至还有身份不明的人链接到linux，控制不好权限容易导致系统崩溃、数据丢失等问题。\n\n- 权限含义\n\n  | 权限字母 | 含义 | 对文件                        | 代表命令                   | 对文件夹                 | 代表命令 |\n  | -------- | ---- | ----------------------------- | -------------------------- | ------------------------ | -------- |\n  | R®       | 读   | 查看文件内容和复制文件        | more cat less cp head tail | 查看文件夹下的文件       | ls       |\n  | W(w)     | 写   | 编辑文件                      | vi                         | 在文件夹内创建和删除文件 | rm touch |\n  | X(x)     | 执行 | 执行该文件(执行必须具备r权限) | -                          | 切换到文件夹             | cd       |\n\n- 权限访问控制列表(ACL access controll list)\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/3de3cbc1b7e1f4f7f302a21028a346b4.png#pic_center)\n\n- 命令\n\n  ```markdown\n  # 查看权限\n  1\n  ```\n\n  ```shell\n  ls -la 文件\n  ll 文件\n  12\n  ```\n\n  ```markdown\n  # 设置文件所有者\n  1\n  ```\n\n  ```shell\n  语法：chown [-R] user名:group名 文件名\n  参数：-R 如果是文件夹，需要使用这个参数，可以将文件夹及其内部所有文件的所有者和组全部修改\n  注意：命令权限需要root\n  ## 修改文件所有者\n  \tchown 用户名 文件名\n  ## 修改文件所属组\n  \tchown :组名 文件名\n  ## 修改文件所有者和所属组\n  \tchown 用户名:组名 文件名\n  ## 修改文件夹的所有者和所属组\n  \tchown [-R] 用户名:组名 文件夹\n  1234567891011\n  ```\n\n  ```markdown\n  # 权限设置1\n  1\n  ```\n\n  ```shell\n  语法：chmod u±rwx,g±rwx,o±rwx 文件名\n  运算符：\n  \t- 删除权限\n  \t+ 添加权限\n  \t= 赋值权限\n  ## 给文件的所有者添加执行权限\n  chmod u+x 文件名\n  ## 给文件的其他人删除所有权限\n  chmod o-rwx 文件名\n  ## 给文件的所属组设置读写权限\n  chmod g=wx 文件名\n  1234567891011\n  ```\n\n  ```markdown\n  # 权限设置2\n  1\n  ```\n\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/c0f3ef45c3b90b0520355a0703bacb03.png#pic_center)\n\n```shell\n# 文件的每个归属方的权限的值使用rwx之和计算出来的。\n# 语法\n\t`chmod [-R] nnn 文件` \n\t-R 递归设置文件夹内所有文件\n# 设置文件的权限为(所有者可读可写可执行，所属组可读可写，其他人可读)\n\tchmod 764 文件名\n123456\n```\n\n### 系统软件管理\n\n#### 压缩解压缩\n\n> 压缩语法：`tar -zcvf 压缩后文件名 被压缩文件`\n>\n> 解压缩语法 `tar -zxvf 压缩文件名 -C 解压后文件所在目录`\n>\n> 参数1：\n>\n> | 参数 | 描述                             |\n> | ---- | -------------------------------- |\n> | -z   | 操作tar.gz文件需要使用           |\n> | -x   | 解压缩                           |\n> | -c   | 压缩                             |\n> | -v   | 显示压缩或者解压缩的执行过程信息 |\n> | -f   | 要处理的文件file，必须放在最后   |\n>\n> 参数2：-C 指定解压后的文件存放的位置\n\n#### rpm软件\n\n> 简介：类似于windows中的.exe程序\n\n```shell\n1. 安装rpm软件\n  语法：`rpm -ivh xxx.rpm`\n2. 查看系统中是否已安装的过该rpm软件\n  语法：`rpm -qa 软件名`\n3. 卸载rpm软件\n  语法：`rpm -e 软件名`\n4. 例子：安装tree工具\n  作用：查看某个目录下的文件信息\n  # 以树状结构查看2层文件信息\n  tree -L 2 要查看的路径\n12345678910\n```\n\n#### yum\n\n> yum基于rpm实现的，提供了除了rpm的安装软件、卸载软件等功能以外还有，自动查找、下载软件并自动处理软件的彼此之间的依赖关系，下载并安装依赖包。\n\n```shell\n## 列出所有可以安装的软件包\n\tyum list\n## 安装软件\n\tyum install -y 软件名\n## 卸载软件\n\tyum remove 软件名\n## 查找软件包\n\tyum search all 软件名\n12345678\n```\n\n#### Linux服务\n\n```markdown\n# 例如：sshd network firewalld 等\n1\n# 服务器管理命令\n\tsystemctl status 服务名\n# 启动服务\n\tsystemctl start 服务名\n# 重启服务\n\tsystemctl restart 服务名\n# 停止服务\n\tsystemctl stop 服务名\n# 禁止服务随linux启动。\n\tsystemctl disable 服务名\n# 设置服务随linux启动。\n\tsystemctl enable 服务名\n123456789101112\n```\n\n#### ip设置\n\n```\n服务名:network\n[root@centos7 dirnew]# vim /etc/sysconfig/network-scripts/ifcfg-ens33\n----------------网卡对应的文件内容---------------------\n    TYPE=\"Ethernet\"\n    PROXY_METHOD=\"none\"\n    BROWSER_ONLY=\"no\"\n    BOOTPROTO=\"none\"\n    DEFROUTE=\"yes\"\n    IPV4_FAILURE_FATAL=\"no\"\n    IPV6INIT=\"yes\"\n    IPV6_AUTOCONF=\"yes\"\n    IPV6_DEFROUTE=\"yes\"\n    IPV6_FAILURE_FATAL=\"no\"\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\n    NAME=\"ens33\"\n    UUID=\"0bd5d8a5-fe1b-42de-82bd-bfa7d2984b95\"\n    DEVICE=\"ens33\"\n    ONBOOT=\"yes\"\n    IPADDR=\"192.168.199.8\" # 修改这里的ip地址即可\n    PREFIX=\"24\"\n    GATEWAY=\"192.168.199.2\"\n    DNS1=\"192.168.199.2\"\n    DNS2=\"8.8.8.8\"\n    IPV6_PRIVACY=\"no\"\n[root@centos7 dirnew]# systemctl restart network #重启网卡服务\n\n123456789101112131415161718192021222324\n```\n\n#### 防火墙\n\n```\n服务名:firewalld\n# 开启防火墙\nsystemctl start 服务名\n# 关闭防火墙(服务器重启后还会自动开启防火墙)\nsystemctl stop firewalld\n# 禁止防火墙开机启动\nsystemctl disable firewalld\n123456\n```\n\n#### 主机名\n\n```shell\n# 查看主机名\nhostname\n# 设置主机名\nhostnamectl set-hostname 主机名\n1234\n```\n\n#### ip映射\n\n- 域名解析\n\n- 本地hosts编辑\n\n  ```shell\n  [root@centos7 ~]# vim /etc/hosts\n  --------------下面是文件------------------\n  \t192.168.199.8 centos7\n  123\n  ```\n\n#### SSH\n\n```shell\n# 远程登录linux\nssh 远程linux的ip或者映射域名\n12\n```\n\n#### 免密登录\n\n```markdown\n# 简介\nssh登录远程linux，免去输入密码的麻烦\n12\n# 生成公钥和私钥\n[root@centos7 ~]# ssh-keygen\n------------执行结果-----------\n    [root@centos7 ~]# tree .ssh\n    .ssh\n    ├── id_rsa # 私钥\n    ├── id_rsa.pub # 公钥\n    └── known_hosts\n# 发送公钥\n\t`保存公钥的文件为/root/.ssh/authorized_keys`\n[root@centos7 .ssh]# cat id_rsa.pub > authorized_keys\n# 发送公钥\n[root@centos7 .ssh]# ssh-copy-id 目标主机的ip\n12345678910111213\n```\n\n#### 远程拷贝\n\n```shell\nscp 本地的文件 root@远程linuxip:/远程linux的文件路径\nscp -r 本地的目录 root@远程linuxip:/远程linux的文件路径\n12\n```\n\n#### 必要软件安装\n\n1. vim(vi编辑器增强版)\n\n   ```shell\n   vim 文件\n   1\n   ```\n\n2. wget(下载器)\n\n   ```shell\n   wget url\n   1\n   ```\n\n3. tree(目录树状显示)\n\n   ```shell\n   # 以tree结构，递归显示当前文件下所有文件\n   \ttree\n   # 显示目标文件夹下的文件\n   \ttree 目标目录\n   1234\n   ```\n\n4. psmisc(高级进程管理工具)\n\n   ```shell\n   # 以tree形式显示系统目前进程\n   \tpstree\n   # 杀死进程\n   \tkillall 进程名\n   # 显示该文件被哪个进程使用\n   \tfuser /目标文件\n   123456\n   ```\n\n5. jdk安装","slug":"Linux命令大全(超详细版)","published":1,"updated":"2024-11-25T11:44:04.497Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsco002pmbs6g7rpb2we","content":"<h2 id=\"Linux命令大全-超详细版\"><a href=\"#Linux命令大全-超详细版\" class=\"headerlink\" title=\"Linux命令大全(超详细版)\"></a>Linux命令大全(超详细版)</h2><h3 id=\"1-简单系统命令\"><a href=\"#1-简单系统命令\" class=\"headerlink\" title=\"1.简单系统命令\"></a>1.简单系统命令</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 查看ip地址</span></span><br><span class=\"line\"><span class=\"code\">\tip a</span></span><br><span class=\"line\"><span class=\"code\">\tip addr</span></span><br><span class=\"line\"><span class=\"code\"># ping网络(测试网络连通)</span></span><br><span class=\"line\"><span class=\"code\">\tping 目标机器的ip</span></span><br><span class=\"line\"><span class=\"code\"># 查看系统时间</span></span><br><span class=\"line\"><span class=\"code\">\tdate</span></span><br><span class=\"line\"><span class=\"code\"># 注销</span></span><br><span class=\"line\"><span class=\"code\">\tlogout</span></span><br><span class=\"line\"><span class=\"code\"># 关机</span></span><br><span class=\"line\"><span class=\"code\">\tshutdown now</span></span><br><span class=\"line\"><span class=\"code\"># 重启</span></span><br><span class=\"line\"><span class=\"code\">\treboot</span></span><br><span class=\"line\"><span class=\"code\"># 清屏</span></span><br><span class=\"line\"><span class=\"code\">\tclear</span></span><br><span class=\"line\"><span class=\"code\">123456789101112131415</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Linux文件系统\"><a href=\"#2-Linux文件系统\" class=\"headerlink\" title=\"2.Linux文件系统\"></a>2.Linux文件系统</h3><ul>\n<li>核心</li>\n</ul>\n<blockquote>\n<p>1.Linux一切皆文件</p>\n<p>2.只有一个顶级目录，不像windows分C盘、D盘、E盘</p>\n</blockquote>\n<ul>\n<li>目录结构</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b6dedb58c8b570b5e530b9d426de015f.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>文件含义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Linux</th>\n<th>含义</th>\n<th>windows</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td>所有用户可用的基本命令存放的位置</td>\n<td>windows没有固定的命令存放目录</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td>需要管理员权限才能使用的命令</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td>linux系统启动的时候需要加载和使用的文件</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td>外设连接linux后，对应的文件存放的位置</td>\n<td>类似Windows中的U盘，光盘的符号文件。</td>\n</tr>\n<tr>\n<td>&#x2F;etc</td>\n<td>存放系统或者安装的程序的配置文件,注册服务等</td>\n<td>类似windows中的注册表，</td>\n</tr>\n<tr>\n<td>&#x2F;home</td>\n<td>家目录，linux中每新建一个用户，会自动在home中为该用户分配一个文件夹</td>\n<td>类似windows中的”我的文档”，每个用户有自己的目录。</td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td>root账户的家目录，仅供root账户使用</td>\n<td>类似windows中的Administrator账户的”我的文档”</td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td>linux的命令和系统启动，需要使用一些公共的依赖，放在lib中，类似我们开发的代码执行需要引入的jdk的jar</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td>很多系统软件的默认安装路径</td>\n<td>类似windows中的C盘下的Program Files目录。</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td>系统和程序运行产生的日志文件和缓存文件放在这里</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-文件管理命令\"><a href=\"#3-文件管理命令\" class=\"headerlink\" title=\"3. 文件管理命令\"></a>3. 文件管理命令</h4><blockquote>\n<p>注意事项：命令区分大小写</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1. 查看文件列表</span></span><br><span class=\"line\"><span class=\"code\">\tls [-参数1参数2] [目标文件夹]</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># 查看当前目录下的文件列表</span></span><br><span class=\"line\"><span class=\"code\">\tls</span></span><br><span class=\"line\"><span class=\"code\"># 查看指定目录下的文件</span></span><br><span class=\"line\"><span class=\"code\">\tls /</span></span><br><span class=\"line\"><span class=\"code\"># 查看详细信息，元数据信息(用户、组、大小、创建时间、权限信息、文件类型)</span></span><br><span class=\"line\"><span class=\"code\">\tls -l</span></span><br><span class=\"line\"><span class=\"code\"># 查看隐藏文件</span></span><br><span class=\"line\"><span class=\"code\">\tls -a </span></span><br><span class=\"line\"><span class=\"code\"># 参数并用</span></span><br><span class=\"line\"><span class=\"code\">\tls -la</span></span><br><span class=\"line\"><span class=\"code\">12345678910</span></span><br><span class=\"line\"><span class=\"code\"># 2. 切换目录</span></span><br><span class=\"line\"><span class=\"code\">\tcd 目标文件夹</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># 绝对路径切换</span></span><br><span class=\"line\"><span class=\"code\">\tcd 绝对路径</span></span><br><span class=\"line\"><span class=\"code\"># 相对路径切换</span></span><br><span class=\"line\"><span class=\"code\">\tcd 相对路径</span></span><br><span class=\"line\"><span class=\"code\"># 例子：切换到/etc/sysconfig/networks-scripts 目录下</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br><span class=\"line\"><span class=\"code\"># 3. 查看当前命令所在的目录</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\">[root@centos7 network-scripts]# pwd</span></span><br><span class=\"line\"><span class=\"code\">/etc/sysconfig/network-scripts</span></span><br><span class=\"line\"><span class=\"code\"># 特殊目录符号</span></span><br><span class=\"line\"><span class=\"code\">\t~ 当前用户的home目录</span></span><br><span class=\"line\"><span class=\"code\">\t. 当前目录</span></span><br><span class=\"line\"><span class=\"code\">\t.. 上一级目录</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 4. 新建文件夹及文件</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 在当前位置新建文件夹</span></span><br><span class=\"line\"><span class=\"code\">\tmkdir 文件夹名</span></span><br><span class=\"line\"><span class=\"code\"># 在指定目录位置，创建文件夹，并创建父文件夹</span></span><br><span class=\"line\"><span class=\"code\">\tmkdir -p /a/b/文件夹名</span></span><br><span class=\"line\"><span class=\"code\"># 在当前目录下新建文件</span></span><br><span class=\"line\"><span class=\"code\">\ttouch 文件名</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 5. 删除文件</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 删除文件</span></span><br><span class=\"line\"><span class=\"code\">\trm 文件</span></span><br><span class=\"line\"><span class=\"code\"># 删除文件夹</span></span><br><span class=\"line\"><span class=\"code\">\trm -r 文件夹</span></span><br><span class=\"line\"><span class=\"code\"># 强制删除不询问</span></span><br><span class=\"line\"><span class=\"code\">\trm -rf 文件</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 6. 拷贝文件</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 拷贝文件</span></span><br><span class=\"line\"><span class=\"code\">\tcp 原文件  新文件</span></span><br><span class=\"line\"><span class=\"code\"># 拷贝文件夹</span></span><br><span class=\"line\"><span class=\"code\">\tcp -r 源文件夹 新文件夹</span></span><br><span class=\"line\"><span class=\"code\">1234</span></span><br><span class=\"line\"><span class=\"code\"># 7. 移动文件或修改文件名</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 移动源文件到目标文件夹中</span></span><br><span class=\"line\"><span class=\"code\">\tmv 文件  文件夹</span></span><br><span class=\"line\"><span class=\"code\"># 修改文件A的名字为文件B</span></span><br><span class=\"line\"><span class=\"code\">\tmv 文件A 文件B</span></span><br><span class=\"line\"><span class=\"code\">1234</span></span><br><span class=\"line\"><span class=\"code\"># 8. 获取文件的md5指纹(数字签名)</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\">md5sum 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 简介</span></span><br><span class=\"line\"><span class=\"code\">1. 数字签名，又称数字指纹</span></span><br><span class=\"line\"><span class=\"code\">2. 可以验证文件是否被修改</span></span><br><span class=\"line\"><span class=\"code\">3. 一个文件通过计算得到的一串字符串,文件内容的唯一标记(文件内容不变,指纹不会变)</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-文本内容查看命令\"><a href=\"#4-文本内容查看命令\" class=\"headerlink\" title=\"4. 文本内容查看命令\"></a>4. 文本内容查看命令</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># cat命令</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 查看文件中的全部信息(适合查看小文档)</span></span><br><span class=\"line\"><span class=\"code\">\tcat 文件名</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># less命令</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 以分页的方式浏览文件信息(适合查看大文档)，进入浏览模式</span></span><br><span class=\"line\"><span class=\"code\">\tless 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 浏览模式快捷键</span></span><br><span class=\"line\"><span class=\"code\">\t↑ #上一行</span></span><br><span class=\"line\"><span class=\"code\">    ↓ #下一行</span></span><br><span class=\"line\"><span class=\"code\">    G #最后一页</span></span><br><span class=\"line\"><span class=\"code\">    g #第一页</span></span><br><span class=\"line\"><span class=\"code\">    空格 #下一页</span></span><br><span class=\"line\"><span class=\"code\">    /关键词 #搜索关键词</span></span><br><span class=\"line\"><span class=\"code\"># 退出浏览模式，回到Linux命令行模式</span></span><br><span class=\"line\"><span class=\"code\">    q #退出</span></span><br><span class=\"line\"><span class=\"code\">1234567891011</span></span><br><span class=\"line\"><span class=\"code\"># tail 命令</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 实时滚动显示文件的最后10行信息(默认10行)</span></span><br><span class=\"line\"><span class=\"code\">tail -f 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 显示文件的最后20行信息</span></span><br><span class=\"line\"><span class=\"code\">tail -n 20 文件名</span></span><br><span class=\"line\"><span class=\"code\">tail -n -20 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 显示文件信息从第20行至文件末尾</span></span><br><span class=\"line\"><span class=\"code\">tail -n +20 文件名</span></span><br><span class=\"line\"><span class=\"code\">1234567</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-文件查找\"><a href=\"#5-文件查找\" class=\"headerlink\" title=\"5. 文件查找\"></a>5. 文件查找</h4><ol>\n<li><p>文件名查找</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 语法</span></span><br><span class=\"line\"><span class=\"code\">\tfind 搜索路径 -name &quot;文件名关键词&quot;</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tfind / -name &quot;passwd&quot;</span></span><br><span class=\"line\"><span class=\"code\">\tfind / -name &quot;ifcfg-*&quot;</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件内容查找</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 语法</span></span><br><span class=\"line\"><span class=\"code\">\tgrep -参数 要查找的目录范围</span></span><br><span class=\"line\"><span class=\"code\">\t# 参数</span></span><br><span class=\"line\"><span class=\"code\">\t-n 显示查找结果所在行号</span></span><br><span class=\"line\"><span class=\"code\">\t-R 递归查找目录下的所有文件</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tgrep aries /etc</span></span><br><span class=\"line\"><span class=\"code\">\tgrep aries /etc/passwd</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">123456789</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"6-文件链接\"><a href=\"#6-文件链接\" class=\"headerlink\" title=\"6. 文件链接\"></a>6. 文件链接</h4><ol>\n<li>Linux文件管理</li>\n</ol>\n<ul>\n<li>模型图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/72686490a9fbd64ed0850c833e136e28.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>说明</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 文件名</span></span><br><span class=\"line\"><span class=\"code\">\t该文件的名字</span></span><br><span class=\"line\"><span class=\"code\"># inode</span></span><br><span class=\"line\"><span class=\"code\">\t该文件的元数据</span></span><br><span class=\"line\"><span class=\"code\"># datablock</span></span><br><span class=\"line\"><span class=\"code\">\t该文件真正保存的数据</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：</p>\n<p>1、inode中保存的是文件的元数据</p>\n<p>2、ls命令查看的都是linux的元数据信息</p>\n<p>3、数据块中才是文件的真正数据</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>硬链接</li>\n</ol>\n<ul>\n<li>图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f33101a860bc5a42bf8cb4767e4a57e7.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 源文件 硬链接文件</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>软连接</li>\n</ol>\n<ul>\n<li>图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9a97cfb63a445ef7214cb94f6d58cce1.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s 目标文件或文件夹 软连接名字</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-系统管理\"><a href=\"#7-系统管理\" class=\"headerlink\" title=\"7. 系统管理\"></a>7. 系统管理</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 静态查看系统进程</span></span><br><span class=\"line\"><span class=\"code\">\tps -aux</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># 实时查看系统进程</span></span><br><span class=\"line\"><span class=\"code\">\ttop</span></span><br><span class=\"line\"><span class=\"code\">\t# 快捷键</span></span><br><span class=\"line\"><span class=\"code\">\t\t↑ 下翻</span></span><br><span class=\"line\"><span class=\"code\">\t\t↓ 上翻</span></span><br><span class=\"line\"><span class=\"code\">\t\tq 退出</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 关闭进程</span></span><br><span class=\"line\"><span class=\"code\">\tkill 进程id </span></span><br><span class=\"line\"><span class=\"code\"># 强制关闭进程(谨慎使用)</span></span><br><span class=\"line\"><span class=\"code\">\tkill -9 进程id</span></span><br><span class=\"line\"><span class=\"code\">1234</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-输出\"><a href=\"#8-输出\" class=\"headerlink\" title=\"8. 输出\"></a>8. 输出</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 覆盖输出</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 将命令1的执行结果，输出到后面的文件中。</span></span><br><span class=\"line\"><span class=\"code\">`覆盖写入`</span></span><br><span class=\"line\"><span class=\"code\">\t命令1 &gt; 文件</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tdate &gt; date.log</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br><span class=\"line\"><span class=\"code\"># 追加输出</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 将命令1的执行结果，输出到后面的文件中。</span></span><br><span class=\"line\"><span class=\"code\">`追加写入`</span></span><br><span class=\"line\"><span class=\"code\">\t命令1 &gt;&gt; 文件</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tdate &gt;&gt; date.log</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-管道\"><a href=\"#9-管道\" class=\"headerlink\" title=\"9. 管道\"></a>9. 管道</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 管道</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 语法，将命令1的输出结果，作为命令2的输入</span></span><br><span class=\"line\">命令1 | 命令2</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/34c8eabf3bb9494d6375938b4f0494b7.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例子</span></span><br><span class=\"line\">查找aries用户：cat /etc/passwd | grep -n “baizhi”</span><br><span class=\"line\">查找aries组：cat /etc/group | grep -n “baizhi”</span><br><span class=\"line\">查找sshd进程：ps -aux | grep sshd</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-文件编辑\"><a href=\"#9-文件编辑\" class=\"headerlink\" title=\"9. 文件编辑\"></a>9. 文件编辑</h4><blockquote>\n<p>配置<a href=\"https://so.csdn.net/so/search?q=MobaXterm&spm=1001.2101.3001.7020\">MobaXterm</a>的默认文本编辑器</p>\n<p>免去<a href=\"https://so.csdn.net/so/search?q=vim%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020\">vim命令</a>的麻烦</p>\n</blockquote>\n<h3 id=\"系统权限\"><a href=\"#系统权限\" class=\"headerlink\" title=\"系统权限\"></a>系统权限</h3><h4 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h4><ul>\n<li>图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/297f0edfdb54c4071cdad9aca6b6a1cf.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>相关命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 创建组</span><br><span class=\"line\">  `groupadd 组名`</span><br><span class=\"line\">2. 删除组</span><br><span class=\"line\">  `groupdel 组名`</span><br><span class=\"line\">3. 查找系统中的组</span><br><span class=\"line\">  `cat /etc/group | grep -n “组名”`</span><br><span class=\"line\">  说明：系统每个组信息都会被存放在/etc/group的文件中</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><ul>\n<li><p>相关命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 创建用户</span><br><span class=\"line\">  `useradd -g 组名 用户名`</span><br><span class=\"line\">2. 设置密码</span><br><span class=\"line\">  `passwd 用户名`</span><br><span class=\"line\">3. 查找系统账户</span><br><span class=\"line\">  说明：系统每个用户信息保存在`/etc/passwd`文件中</span><br><span class=\"line\">4. 切换用户</span><br><span class=\"line\">  `su 用户名`</span><br><span class=\"line\">5. 删除用户</span><br><span class=\"line\">  `userdel -r 用户名`</span><br><span class=\"line\">12345678910</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><ul>\n<li><p>问题</p>\n<p>linux系统未来可能有程序员、用户、数据库管理员、项目经理等各种角色各种级别人使用，甚至还有身份不明的人链接到linux，控制不好权限容易导致系统崩溃、数据丢失等问题。</p>\n</li>\n<li><p>权限含义</p>\n<table>\n<thead>\n<tr>\n<th>权限字母</th>\n<th>含义</th>\n<th>对文件</th>\n<th>代表命令</th>\n<th>对文件夹</th>\n<th>代表命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R®</td>\n<td>读</td>\n<td>查看文件内容和复制文件</td>\n<td>more cat less cp head tail</td>\n<td>查看文件夹下的文件</td>\n<td>ls</td>\n</tr>\n<tr>\n<td>W(w)</td>\n<td>写</td>\n<td>编辑文件</td>\n<td>vi</td>\n<td>在文件夹内创建和删除文件</td>\n<td>rm touch</td>\n</tr>\n<tr>\n<td>X(x)</td>\n<td>执行</td>\n<td>执行该文件(执行必须具备r权限)</td>\n<td>-</td>\n<td>切换到文件夹</td>\n<td>cd</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>权限访问控制列表(ACL access controll list)</p>\n</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/3de3cbc1b7e1f4f7f302a21028a346b4.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>命令</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 查看权限</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la 文件</span><br><span class=\"line\">ll 文件</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 设置文件所有者</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：chown [-R] user名:group名 文件名</span><br><span class=\"line\">参数：-R 如果是文件夹，需要使用这个参数，可以将文件夹及其内部所有文件的所有者和组全部修改</span><br><span class=\"line\">注意：命令权限需要root</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件所有者</span></span></span><br><span class=\"line\">\tchown 用户名 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件所属组</span></span></span><br><span class=\"line\">\tchown :组名 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件所有者和所属组</span></span></span><br><span class=\"line\">\tchown 用户名:组名 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件夹的所有者和所属组</span></span></span><br><span class=\"line\">\tchown [-R] 用户名:组名 文件夹</span><br><span class=\"line\">1234567891011</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 权限设置1</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：chmod u±rwx,g±rwx,o±rwx 文件名</span><br><span class=\"line\">运算符：</span><br><span class=\"line\">\t- 删除权限</span><br><span class=\"line\">\t+ 添加权限</span><br><span class=\"line\">\t= 赋值权限</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 给文件的所有者添加执行权限</span></span></span><br><span class=\"line\">chmod u+x 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 给文件的其他人删除所有权限</span></span></span><br><span class=\"line\">chmod o-rwx 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 给文件的所属组设置读写权限</span></span></span><br><span class=\"line\">chmod g=wx 文件名</span><br><span class=\"line\">1234567891011</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 权限设置2</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c0f3ef45c3b90b0520355a0703bacb03.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文件的每个归属方的权限的值使用rwx之和计算出来的。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">语法</span></span><br><span class=\"line\">\t`chmod [-R] nnn 文件` </span><br><span class=\"line\">\t-R 递归设置文件夹内所有文件</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置文件的权限为(所有者可读可写可执行，所属组可读可写，其他人可读)</span></span><br><span class=\"line\">\tchmod 764 文件名</span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统软件管理\"><a href=\"#系统软件管理\" class=\"headerlink\" title=\"系统软件管理\"></a>系统软件管理</h3><h4 id=\"压缩解压缩\"><a href=\"#压缩解压缩\" class=\"headerlink\" title=\"压缩解压缩\"></a>压缩解压缩</h4><blockquote>\n<p>压缩语法：<code>tar -zcvf 压缩后文件名 被压缩文件</code></p>\n<p>解压缩语法 <code>tar -zxvf 压缩文件名 -C 解压后文件所在目录</code></p>\n<p>参数1：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-z</td>\n<td>操作tar.gz文件需要使用</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>解压缩</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>压缩</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示压缩或者解压缩的执行过程信息</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>要处理的文件file，必须放在最后</td>\n</tr>\n</tbody></table>\n<p>参数2：-C 指定解压后的文件存放的位置</p>\n</blockquote>\n<h4 id=\"rpm软件\"><a href=\"#rpm软件\" class=\"headerlink\" title=\"rpm软件\"></a>rpm软件</h4><blockquote>\n<p>简介：类似于windows中的.exe程序</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 安装rpm软件</span><br><span class=\"line\">  语法：`rpm -ivh xxx.rpm`</span><br><span class=\"line\">2. 查看系统中是否已安装的过该rpm软件</span><br><span class=\"line\">  语法：`rpm -qa 软件名`</span><br><span class=\"line\">3. 卸载rpm软件</span><br><span class=\"line\">  语法：`rpm -e 软件名`</span><br><span class=\"line\">4. 例子：安装tree工具</span><br><span class=\"line\">  作用：查看某个目录下的文件信息</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">以树状结构查看2层文件信息</span></span><br><span class=\"line\">  tree -L 2 要查看的路径</span><br><span class=\"line\">12345678910</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h4><blockquote>\n<p>yum基于rpm实现的，提供了除了rpm的安装软件、卸载软件等功能以外还有，自动查找、下载软件并自动处理软件的彼此之间的依赖关系，下载并安装依赖包。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 列出所有可以安装的软件包</span></span></span><br><span class=\"line\">\tyum list</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 安装软件</span></span></span><br><span class=\"line\">\tyum install -y 软件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 卸载软件</span></span></span><br><span class=\"line\">\tyum remove 软件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查找软件包</span></span></span><br><span class=\"line\">\tyum search all 软件名</span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux服务\"><a href=\"#Linux服务\" class=\"headerlink\" title=\"Linux服务\"></a>Linux服务</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 例如：sshd network firewalld 等</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 服务器管理命令</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl status 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 启动服务</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl start 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 重启服务</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl restart 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 停止服务</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl stop 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 禁止服务随linux启动。</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl disable 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 设置服务随linux启动。</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl enable 服务名</span></span><br><span class=\"line\"><span class=\"code\">123456789101112</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ip设置\"><a href=\"#ip设置\" class=\"headerlink\" title=\"ip设置\"></a>ip设置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务名:network</span><br><span class=\"line\">[root@centos7 dirnew]# vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class=\"line\">----------------网卡对应的文件内容---------------------</span><br><span class=\"line\">    TYPE=&quot;Ethernet&quot;</span><br><span class=\"line\">    PROXY_METHOD=&quot;none&quot;</span><br><span class=\"line\">    BROWSER_ONLY=&quot;no&quot;</span><br><span class=\"line\">    BOOTPROTO=&quot;none&quot;</span><br><span class=\"line\">    DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">    IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">    IPV6INIT=&quot;yes&quot;</span><br><span class=\"line\">    IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class=\"line\">    IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">    IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">    IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class=\"line\">    NAME=&quot;ens33&quot;</span><br><span class=\"line\">    UUID=&quot;0bd5d8a5-fe1b-42de-82bd-bfa7d2984b95&quot;</span><br><span class=\"line\">    DEVICE=&quot;ens33&quot;</span><br><span class=\"line\">    ONBOOT=&quot;yes&quot;</span><br><span class=\"line\">    IPADDR=&quot;192.168.199.8&quot; # 修改这里的ip地址即可</span><br><span class=\"line\">    PREFIX=&quot;24&quot;</span><br><span class=\"line\">    GATEWAY=&quot;192.168.199.2&quot;</span><br><span class=\"line\">    DNS1=&quot;192.168.199.2&quot;</span><br><span class=\"line\">    DNS2=&quot;8.8.8.8&quot;</span><br><span class=\"line\">    IPV6_PRIVACY=&quot;no&quot;</span><br><span class=\"line\">[root@centos7 dirnew]# systemctl restart network #重启网卡服务</span><br><span class=\"line\"></span><br><span class=\"line\">123456789101112131415161718192021222324</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务名:firewalld</span><br><span class=\"line\"># 开启防火墙</span><br><span class=\"line\">systemctl start 服务名</span><br><span class=\"line\"># 关闭防火墙(服务器重启后还会自动开启防火墙)</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"># 禁止防火墙开机启动</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主机名\"><a href=\"#主机名\" class=\"headerlink\" title=\"主机名\"></a>主机名</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看主机名</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置主机名</span></span><br><span class=\"line\">hostnamectl set-hostname 主机名</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ip映射\"><a href=\"#ip映射\" class=\"headerlink\" title=\"ip映射\"></a>ip映射</h4><ul>\n<li><p>域名解析</p>\n</li>\n<li><p>本地hosts编辑</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# vim /etc/hosts</span><br><span class=\"line\">--------------下面是文件------------------</span><br><span class=\"line\">\t192.168.199.8 centos7</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">远程登录linux</span></span><br><span class=\"line\">ssh 远程linux的ip或者映射域名</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 简介</span></span><br><span class=\"line\">ssh登录远程linux，免去输入密码的麻烦</span><br><span class=\"line\">12</span><br><span class=\"line\"><span class=\"section\"># 生成公钥和私钥</span></span><br><span class=\"line\">[root@centos7 ~]# ssh-keygen</span><br><span class=\"line\">------------执行结果-----------</span><br><span class=\"line\"><span class=\"code\">    [root@centos7 ~]# tree .ssh</span></span><br><span class=\"line\"><span class=\"code\">    .ssh</span></span><br><span class=\"line\"><span class=\"code\">    ├── id_rsa # 私钥</span></span><br><span class=\"line\"><span class=\"code\">    ├── id_rsa.pub # 公钥</span></span><br><span class=\"line\"><span class=\"code\">    └── known_hosts</span></span><br><span class=\"line\"><span class=\"code\"># 发送公钥</span></span><br><span class=\"line\"><span class=\"code\">\t`保存公钥的文件为/root/.ssh/authorized_keys`</span></span><br><span class=\"line\"><span class=\"code\">[root@centos7 .ssh]# cat id_rsa.pub &gt; authorized_keys</span></span><br><span class=\"line\"><span class=\"code\"># 发送公钥</span></span><br><span class=\"line\"><span class=\"code\">[root@centos7 .ssh]# ssh-copy-id 目标主机的ip</span></span><br><span class=\"line\"><span class=\"code\">12345678910111213</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"远程拷贝\"><a href=\"#远程拷贝\" class=\"headerlink\" title=\"远程拷贝\"></a>远程拷贝</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp 本地的文件 root@远程linuxip:/远程linux的文件路径</span><br><span class=\"line\">scp -r 本地的目录 root@远程linuxip:/远程linux的文件路径</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"必要软件安装\"><a href=\"#必要软件安装\" class=\"headerlink\" title=\"必要软件安装\"></a>必要软件安装</h4><ol>\n<li><p>vim(vi编辑器增强版)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim 文件</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wget(下载器)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget url</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tree(目录树状显示)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以tree结构，递归显示当前文件下所有文件</span></span><br><span class=\"line\">\ttree</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示目标文件夹下的文件</span></span><br><span class=\"line\">\ttree 目标目录</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>psmisc(高级进程管理工具)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以tree形式显示系统目前进程</span></span><br><span class=\"line\">\tpstree</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">杀死进程</span></span><br><span class=\"line\">\tkillall 进程名</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示该文件被哪个进程使用</span></span><br><span class=\"line\">\tfuser /目标文件</span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>jdk安装</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"Linux命令大全-超详细版\"><a href=\"#Linux命令大全-超详细版\" class=\"headerlink\" title=\"Linux命令大全(超详细版)\"></a>Linux命令大全(超详细版)</h2><h3 id=\"1-简单系统命令\"><a href=\"#1-简单系统命令\" class=\"headerlink\" title=\"1.简单系统命令\"></a>1.简单系统命令</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 查看ip地址</span></span><br><span class=\"line\"><span class=\"code\">\tip a</span></span><br><span class=\"line\"><span class=\"code\">\tip addr</span></span><br><span class=\"line\"><span class=\"code\"># ping网络(测试网络连通)</span></span><br><span class=\"line\"><span class=\"code\">\tping 目标机器的ip</span></span><br><span class=\"line\"><span class=\"code\"># 查看系统时间</span></span><br><span class=\"line\"><span class=\"code\">\tdate</span></span><br><span class=\"line\"><span class=\"code\"># 注销</span></span><br><span class=\"line\"><span class=\"code\">\tlogout</span></span><br><span class=\"line\"><span class=\"code\"># 关机</span></span><br><span class=\"line\"><span class=\"code\">\tshutdown now</span></span><br><span class=\"line\"><span class=\"code\"># 重启</span></span><br><span class=\"line\"><span class=\"code\">\treboot</span></span><br><span class=\"line\"><span class=\"code\"># 清屏</span></span><br><span class=\"line\"><span class=\"code\">\tclear</span></span><br><span class=\"line\"><span class=\"code\">123456789101112131415</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Linux文件系统\"><a href=\"#2-Linux文件系统\" class=\"headerlink\" title=\"2.Linux文件系统\"></a>2.Linux文件系统</h3><ul>\n<li>核心</li>\n</ul>\n<blockquote>\n<p>1.Linux一切皆文件</p>\n<p>2.只有一个顶级目录，不像windows分C盘、D盘、E盘</p>\n</blockquote>\n<ul>\n<li>目录结构</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b6dedb58c8b570b5e530b9d426de015f.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>文件含义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Linux</th>\n<th>含义</th>\n<th>windows</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td>所有用户可用的基本命令存放的位置</td>\n<td>windows没有固定的命令存放目录</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td>需要管理员权限才能使用的命令</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td>linux系统启动的时候需要加载和使用的文件</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td>外设连接linux后，对应的文件存放的位置</td>\n<td>类似Windows中的U盘，光盘的符号文件。</td>\n</tr>\n<tr>\n<td>&#x2F;etc</td>\n<td>存放系统或者安装的程序的配置文件,注册服务等</td>\n<td>类似windows中的注册表，</td>\n</tr>\n<tr>\n<td>&#x2F;home</td>\n<td>家目录，linux中每新建一个用户，会自动在home中为该用户分配一个文件夹</td>\n<td>类似windows中的”我的文档”，每个用户有自己的目录。</td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td>root账户的家目录，仅供root账户使用</td>\n<td>类似windows中的Administrator账户的”我的文档”</td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td>linux的命令和系统启动，需要使用一些公共的依赖，放在lib中，类似我们开发的代码执行需要引入的jdk的jar</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td>很多系统软件的默认安装路径</td>\n<td>类似windows中的C盘下的Program Files目录。</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td>系统和程序运行产生的日志文件和缓存文件放在这里</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-文件管理命令\"><a href=\"#3-文件管理命令\" class=\"headerlink\" title=\"3. 文件管理命令\"></a>3. 文件管理命令</h4><blockquote>\n<p>注意事项：命令区分大小写</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1. 查看文件列表</span></span><br><span class=\"line\"><span class=\"code\">\tls [-参数1参数2] [目标文件夹]</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># 查看当前目录下的文件列表</span></span><br><span class=\"line\"><span class=\"code\">\tls</span></span><br><span class=\"line\"><span class=\"code\"># 查看指定目录下的文件</span></span><br><span class=\"line\"><span class=\"code\">\tls /</span></span><br><span class=\"line\"><span class=\"code\"># 查看详细信息，元数据信息(用户、组、大小、创建时间、权限信息、文件类型)</span></span><br><span class=\"line\"><span class=\"code\">\tls -l</span></span><br><span class=\"line\"><span class=\"code\"># 查看隐藏文件</span></span><br><span class=\"line\"><span class=\"code\">\tls -a </span></span><br><span class=\"line\"><span class=\"code\"># 参数并用</span></span><br><span class=\"line\"><span class=\"code\">\tls -la</span></span><br><span class=\"line\"><span class=\"code\">12345678910</span></span><br><span class=\"line\"><span class=\"code\"># 2. 切换目录</span></span><br><span class=\"line\"><span class=\"code\">\tcd 目标文件夹</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># 绝对路径切换</span></span><br><span class=\"line\"><span class=\"code\">\tcd 绝对路径</span></span><br><span class=\"line\"><span class=\"code\"># 相对路径切换</span></span><br><span class=\"line\"><span class=\"code\">\tcd 相对路径</span></span><br><span class=\"line\"><span class=\"code\"># 例子：切换到/etc/sysconfig/networks-scripts 目录下</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br><span class=\"line\"><span class=\"code\"># 3. 查看当前命令所在的目录</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\">[root@centos7 network-scripts]# pwd</span></span><br><span class=\"line\"><span class=\"code\">/etc/sysconfig/network-scripts</span></span><br><span class=\"line\"><span class=\"code\"># 特殊目录符号</span></span><br><span class=\"line\"><span class=\"code\">\t~ 当前用户的home目录</span></span><br><span class=\"line\"><span class=\"code\">\t. 当前目录</span></span><br><span class=\"line\"><span class=\"code\">\t.. 上一级目录</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 4. 新建文件夹及文件</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 在当前位置新建文件夹</span></span><br><span class=\"line\"><span class=\"code\">\tmkdir 文件夹名</span></span><br><span class=\"line\"><span class=\"code\"># 在指定目录位置，创建文件夹，并创建父文件夹</span></span><br><span class=\"line\"><span class=\"code\">\tmkdir -p /a/b/文件夹名</span></span><br><span class=\"line\"><span class=\"code\"># 在当前目录下新建文件</span></span><br><span class=\"line\"><span class=\"code\">\ttouch 文件名</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 5. 删除文件</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 删除文件</span></span><br><span class=\"line\"><span class=\"code\">\trm 文件</span></span><br><span class=\"line\"><span class=\"code\"># 删除文件夹</span></span><br><span class=\"line\"><span class=\"code\">\trm -r 文件夹</span></span><br><span class=\"line\"><span class=\"code\"># 强制删除不询问</span></span><br><span class=\"line\"><span class=\"code\">\trm -rf 文件</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 6. 拷贝文件</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 拷贝文件</span></span><br><span class=\"line\"><span class=\"code\">\tcp 原文件  新文件</span></span><br><span class=\"line\"><span class=\"code\"># 拷贝文件夹</span></span><br><span class=\"line\"><span class=\"code\">\tcp -r 源文件夹 新文件夹</span></span><br><span class=\"line\"><span class=\"code\">1234</span></span><br><span class=\"line\"><span class=\"code\"># 7. 移动文件或修改文件名</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 移动源文件到目标文件夹中</span></span><br><span class=\"line\"><span class=\"code\">\tmv 文件  文件夹</span></span><br><span class=\"line\"><span class=\"code\"># 修改文件A的名字为文件B</span></span><br><span class=\"line\"><span class=\"code\">\tmv 文件A 文件B</span></span><br><span class=\"line\"><span class=\"code\">1234</span></span><br><span class=\"line\"><span class=\"code\"># 8. 获取文件的md5指纹(数字签名)</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\">md5sum 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 简介</span></span><br><span class=\"line\"><span class=\"code\">1. 数字签名，又称数字指纹</span></span><br><span class=\"line\"><span class=\"code\">2. 可以验证文件是否被修改</span></span><br><span class=\"line\"><span class=\"code\">3. 一个文件通过计算得到的一串字符串,文件内容的唯一标记(文件内容不变,指纹不会变)</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-文本内容查看命令\"><a href=\"#4-文本内容查看命令\" class=\"headerlink\" title=\"4. 文本内容查看命令\"></a>4. 文本内容查看命令</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># cat命令</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 查看文件中的全部信息(适合查看小文档)</span></span><br><span class=\"line\"><span class=\"code\">\tcat 文件名</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># less命令</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 以分页的方式浏览文件信息(适合查看大文档)，进入浏览模式</span></span><br><span class=\"line\"><span class=\"code\">\tless 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 浏览模式快捷键</span></span><br><span class=\"line\"><span class=\"code\">\t↑ #上一行</span></span><br><span class=\"line\"><span class=\"code\">    ↓ #下一行</span></span><br><span class=\"line\"><span class=\"code\">    G #最后一页</span></span><br><span class=\"line\"><span class=\"code\">    g #第一页</span></span><br><span class=\"line\"><span class=\"code\">    空格 #下一页</span></span><br><span class=\"line\"><span class=\"code\">    /关键词 #搜索关键词</span></span><br><span class=\"line\"><span class=\"code\"># 退出浏览模式，回到Linux命令行模式</span></span><br><span class=\"line\"><span class=\"code\">    q #退出</span></span><br><span class=\"line\"><span class=\"code\">1234567891011</span></span><br><span class=\"line\"><span class=\"code\"># tail 命令</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 实时滚动显示文件的最后10行信息(默认10行)</span></span><br><span class=\"line\"><span class=\"code\">tail -f 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 显示文件的最后20行信息</span></span><br><span class=\"line\"><span class=\"code\">tail -n 20 文件名</span></span><br><span class=\"line\"><span class=\"code\">tail -n -20 文件名</span></span><br><span class=\"line\"><span class=\"code\"># 显示文件信息从第20行至文件末尾</span></span><br><span class=\"line\"><span class=\"code\">tail -n +20 文件名</span></span><br><span class=\"line\"><span class=\"code\">1234567</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-文件查找\"><a href=\"#5-文件查找\" class=\"headerlink\" title=\"5. 文件查找\"></a>5. 文件查找</h4><ol>\n<li><p>文件名查找</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 语法</span></span><br><span class=\"line\"><span class=\"code\">\tfind 搜索路径 -name &quot;文件名关键词&quot;</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tfind / -name &quot;passwd&quot;</span></span><br><span class=\"line\"><span class=\"code\">\tfind / -name &quot;ifcfg-*&quot;</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件内容查找</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 语法</span></span><br><span class=\"line\"><span class=\"code\">\tgrep -参数 要查找的目录范围</span></span><br><span class=\"line\"><span class=\"code\">\t# 参数</span></span><br><span class=\"line\"><span class=\"code\">\t-n 显示查找结果所在行号</span></span><br><span class=\"line\"><span class=\"code\">\t-R 递归查找目录下的所有文件</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tgrep aries /etc</span></span><br><span class=\"line\"><span class=\"code\">\tgrep aries /etc/passwd</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">123456789</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"6-文件链接\"><a href=\"#6-文件链接\" class=\"headerlink\" title=\"6. 文件链接\"></a>6. 文件链接</h4><ol>\n<li>Linux文件管理</li>\n</ol>\n<ul>\n<li>模型图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/72686490a9fbd64ed0850c833e136e28.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>说明</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 文件名</span></span><br><span class=\"line\"><span class=\"code\">\t该文件的名字</span></span><br><span class=\"line\"><span class=\"code\"># inode</span></span><br><span class=\"line\"><span class=\"code\">\t该文件的元数据</span></span><br><span class=\"line\"><span class=\"code\"># datablock</span></span><br><span class=\"line\"><span class=\"code\">\t该文件真正保存的数据</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：</p>\n<p>1、inode中保存的是文件的元数据</p>\n<p>2、ls命令查看的都是linux的元数据信息</p>\n<p>3、数据块中才是文件的真正数据</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>硬链接</li>\n</ol>\n<ul>\n<li>图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f33101a860bc5a42bf8cb4767e4a57e7.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 源文件 硬链接文件</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>软连接</li>\n</ol>\n<ul>\n<li>图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9a97cfb63a445ef7214cb94f6d58cce1.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s 目标文件或文件夹 软连接名字</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-系统管理\"><a href=\"#7-系统管理\" class=\"headerlink\" title=\"7. 系统管理\"></a>7. 系统管理</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 静态查看系统进程</span></span><br><span class=\"line\"><span class=\"code\">\tps -aux</span></span><br><span class=\"line\"><span class=\"code\">12</span></span><br><span class=\"line\"><span class=\"code\"># 实时查看系统进程</span></span><br><span class=\"line\"><span class=\"code\">\ttop</span></span><br><span class=\"line\"><span class=\"code\">\t# 快捷键</span></span><br><span class=\"line\"><span class=\"code\">\t\t↑ 下翻</span></span><br><span class=\"line\"><span class=\"code\">\t\t↓ 上翻</span></span><br><span class=\"line\"><span class=\"code\">\t\tq 退出</span></span><br><span class=\"line\"><span class=\"code\">123456</span></span><br><span class=\"line\"><span class=\"code\"># 关闭进程</span></span><br><span class=\"line\"><span class=\"code\">\tkill 进程id </span></span><br><span class=\"line\"><span class=\"code\"># 强制关闭进程(谨慎使用)</span></span><br><span class=\"line\"><span class=\"code\">\tkill -9 进程id</span></span><br><span class=\"line\"><span class=\"code\">1234</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-输出\"><a href=\"#8-输出\" class=\"headerlink\" title=\"8. 输出\"></a>8. 输出</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 覆盖输出</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 将命令1的执行结果，输出到后面的文件中。</span></span><br><span class=\"line\"><span class=\"code\">`覆盖写入`</span></span><br><span class=\"line\"><span class=\"code\">\t命令1 &gt; 文件</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tdate &gt; date.log</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br><span class=\"line\"><span class=\"code\"># 追加输出</span></span><br><span class=\"line\"><span class=\"code\">1</span></span><br><span class=\"line\"><span class=\"code\"># 将命令1的执行结果，输出到后面的文件中。</span></span><br><span class=\"line\"><span class=\"code\">`追加写入`</span></span><br><span class=\"line\"><span class=\"code\">\t命令1 &gt;&gt; 文件</span></span><br><span class=\"line\"><span class=\"code\"># 例子</span></span><br><span class=\"line\"><span class=\"code\">\tdate &gt;&gt; date.log</span></span><br><span class=\"line\"><span class=\"code\">12345</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-管道\"><a href=\"#9-管道\" class=\"headerlink\" title=\"9. 管道\"></a>9. 管道</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 管道</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 语法，将命令1的输出结果，作为命令2的输入</span></span><br><span class=\"line\">命令1 | 命令2</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/34c8eabf3bb9494d6375938b4f0494b7.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例子</span></span><br><span class=\"line\">查找aries用户：cat /etc/passwd | grep -n “baizhi”</span><br><span class=\"line\">查找aries组：cat /etc/group | grep -n “baizhi”</span><br><span class=\"line\">查找sshd进程：ps -aux | grep sshd</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-文件编辑\"><a href=\"#9-文件编辑\" class=\"headerlink\" title=\"9. 文件编辑\"></a>9. 文件编辑</h4><blockquote>\n<p>配置<a href=\"https://so.csdn.net/so/search?q=MobaXterm&spm=1001.2101.3001.7020\">MobaXterm</a>的默认文本编辑器</p>\n<p>免去<a href=\"https://so.csdn.net/so/search?q=vim%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020\">vim命令</a>的麻烦</p>\n</blockquote>\n<h3 id=\"系统权限\"><a href=\"#系统权限\" class=\"headerlink\" title=\"系统权限\"></a>系统权限</h3><h4 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h4><ul>\n<li>图</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/297f0edfdb54c4071cdad9aca6b6a1cf.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>相关命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 创建组</span><br><span class=\"line\">  `groupadd 组名`</span><br><span class=\"line\">2. 删除组</span><br><span class=\"line\">  `groupdel 组名`</span><br><span class=\"line\">3. 查找系统中的组</span><br><span class=\"line\">  `cat /etc/group | grep -n “组名”`</span><br><span class=\"line\">  说明：系统每个组信息都会被存放在/etc/group的文件中</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><ul>\n<li><p>相关命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 创建用户</span><br><span class=\"line\">  `useradd -g 组名 用户名`</span><br><span class=\"line\">2. 设置密码</span><br><span class=\"line\">  `passwd 用户名`</span><br><span class=\"line\">3. 查找系统账户</span><br><span class=\"line\">  说明：系统每个用户信息保存在`/etc/passwd`文件中</span><br><span class=\"line\">4. 切换用户</span><br><span class=\"line\">  `su 用户名`</span><br><span class=\"line\">5. 删除用户</span><br><span class=\"line\">  `userdel -r 用户名`</span><br><span class=\"line\">12345678910</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><ul>\n<li><p>问题</p>\n<p>linux系统未来可能有程序员、用户、数据库管理员、项目经理等各种角色各种级别人使用，甚至还有身份不明的人链接到linux，控制不好权限容易导致系统崩溃、数据丢失等问题。</p>\n</li>\n<li><p>权限含义</p>\n<table>\n<thead>\n<tr>\n<th>权限字母</th>\n<th>含义</th>\n<th>对文件</th>\n<th>代表命令</th>\n<th>对文件夹</th>\n<th>代表命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R®</td>\n<td>读</td>\n<td>查看文件内容和复制文件</td>\n<td>more cat less cp head tail</td>\n<td>查看文件夹下的文件</td>\n<td>ls</td>\n</tr>\n<tr>\n<td>W(w)</td>\n<td>写</td>\n<td>编辑文件</td>\n<td>vi</td>\n<td>在文件夹内创建和删除文件</td>\n<td>rm touch</td>\n</tr>\n<tr>\n<td>X(x)</td>\n<td>执行</td>\n<td>执行该文件(执行必须具备r权限)</td>\n<td>-</td>\n<td>切换到文件夹</td>\n<td>cd</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>权限访问控制列表(ACL access controll list)</p>\n</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/3de3cbc1b7e1f4f7f302a21028a346b4.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>命令</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 查看权限</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la 文件</span><br><span class=\"line\">ll 文件</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 设置文件所有者</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：chown [-R] user名:group名 文件名</span><br><span class=\"line\">参数：-R 如果是文件夹，需要使用这个参数，可以将文件夹及其内部所有文件的所有者和组全部修改</span><br><span class=\"line\">注意：命令权限需要root</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件所有者</span></span></span><br><span class=\"line\">\tchown 用户名 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件所属组</span></span></span><br><span class=\"line\">\tchown :组名 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件所有者和所属组</span></span></span><br><span class=\"line\">\tchown 用户名:组名 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 修改文件夹的所有者和所属组</span></span></span><br><span class=\"line\">\tchown [-R] 用户名:组名 文件夹</span><br><span class=\"line\">1234567891011</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 权限设置1</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：chmod u±rwx,g±rwx,o±rwx 文件名</span><br><span class=\"line\">运算符：</span><br><span class=\"line\">\t- 删除权限</span><br><span class=\"line\">\t+ 添加权限</span><br><span class=\"line\">\t= 赋值权限</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 给文件的所有者添加执行权限</span></span></span><br><span class=\"line\">chmod u+x 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 给文件的其他人删除所有权限</span></span></span><br><span class=\"line\">chmod o-rwx 文件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 给文件的所属组设置读写权限</span></span></span><br><span class=\"line\">chmod g=wx 文件名</span><br><span class=\"line\">1234567891011</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 权限设置2</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c0f3ef45c3b90b0520355a0703bacb03.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文件的每个归属方的权限的值使用rwx之和计算出来的。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">语法</span></span><br><span class=\"line\">\t`chmod [-R] nnn 文件` </span><br><span class=\"line\">\t-R 递归设置文件夹内所有文件</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置文件的权限为(所有者可读可写可执行，所属组可读可写，其他人可读)</span></span><br><span class=\"line\">\tchmod 764 文件名</span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统软件管理\"><a href=\"#系统软件管理\" class=\"headerlink\" title=\"系统软件管理\"></a>系统软件管理</h3><h4 id=\"压缩解压缩\"><a href=\"#压缩解压缩\" class=\"headerlink\" title=\"压缩解压缩\"></a>压缩解压缩</h4><blockquote>\n<p>压缩语法：<code>tar -zcvf 压缩后文件名 被压缩文件</code></p>\n<p>解压缩语法 <code>tar -zxvf 压缩文件名 -C 解压后文件所在目录</code></p>\n<p>参数1：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-z</td>\n<td>操作tar.gz文件需要使用</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>解压缩</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>压缩</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示压缩或者解压缩的执行过程信息</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>要处理的文件file，必须放在最后</td>\n</tr>\n</tbody></table>\n<p>参数2：-C 指定解压后的文件存放的位置</p>\n</blockquote>\n<h4 id=\"rpm软件\"><a href=\"#rpm软件\" class=\"headerlink\" title=\"rpm软件\"></a>rpm软件</h4><blockquote>\n<p>简介：类似于windows中的.exe程序</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 安装rpm软件</span><br><span class=\"line\">  语法：`rpm -ivh xxx.rpm`</span><br><span class=\"line\">2. 查看系统中是否已安装的过该rpm软件</span><br><span class=\"line\">  语法：`rpm -qa 软件名`</span><br><span class=\"line\">3. 卸载rpm软件</span><br><span class=\"line\">  语法：`rpm -e 软件名`</span><br><span class=\"line\">4. 例子：安装tree工具</span><br><span class=\"line\">  作用：查看某个目录下的文件信息</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">以树状结构查看2层文件信息</span></span><br><span class=\"line\">  tree -L 2 要查看的路径</span><br><span class=\"line\">12345678910</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h4><blockquote>\n<p>yum基于rpm实现的，提供了除了rpm的安装软件、卸载软件等功能以外还有，自动查找、下载软件并自动处理软件的彼此之间的依赖关系，下载并安装依赖包。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 列出所有可以安装的软件包</span></span></span><br><span class=\"line\">\tyum list</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 安装软件</span></span></span><br><span class=\"line\">\tyum install -y 软件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 卸载软件</span></span></span><br><span class=\"line\">\tyum remove 软件名</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查找软件包</span></span></span><br><span class=\"line\">\tyum search all 软件名</span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux服务\"><a href=\"#Linux服务\" class=\"headerlink\" title=\"Linux服务\"></a>Linux服务</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 例如：sshd network firewalld 等</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"section\"># 服务器管理命令</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl status 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 启动服务</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl start 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 重启服务</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl restart 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 停止服务</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl stop 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 禁止服务随linux启动。</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl disable 服务名</span></span><br><span class=\"line\"><span class=\"code\"># 设置服务随linux启动。</span></span><br><span class=\"line\"><span class=\"code\">\tsystemctl enable 服务名</span></span><br><span class=\"line\"><span class=\"code\">123456789101112</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ip设置\"><a href=\"#ip设置\" class=\"headerlink\" title=\"ip设置\"></a>ip设置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务名:network</span><br><span class=\"line\">[root@centos7 dirnew]# vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class=\"line\">----------------网卡对应的文件内容---------------------</span><br><span class=\"line\">    TYPE=&quot;Ethernet&quot;</span><br><span class=\"line\">    PROXY_METHOD=&quot;none&quot;</span><br><span class=\"line\">    BROWSER_ONLY=&quot;no&quot;</span><br><span class=\"line\">    BOOTPROTO=&quot;none&quot;</span><br><span class=\"line\">    DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">    IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">    IPV6INIT=&quot;yes&quot;</span><br><span class=\"line\">    IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class=\"line\">    IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">    IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">    IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class=\"line\">    NAME=&quot;ens33&quot;</span><br><span class=\"line\">    UUID=&quot;0bd5d8a5-fe1b-42de-82bd-bfa7d2984b95&quot;</span><br><span class=\"line\">    DEVICE=&quot;ens33&quot;</span><br><span class=\"line\">    ONBOOT=&quot;yes&quot;</span><br><span class=\"line\">    IPADDR=&quot;192.168.199.8&quot; # 修改这里的ip地址即可</span><br><span class=\"line\">    PREFIX=&quot;24&quot;</span><br><span class=\"line\">    GATEWAY=&quot;192.168.199.2&quot;</span><br><span class=\"line\">    DNS1=&quot;192.168.199.2&quot;</span><br><span class=\"line\">    DNS2=&quot;8.8.8.8&quot;</span><br><span class=\"line\">    IPV6_PRIVACY=&quot;no&quot;</span><br><span class=\"line\">[root@centos7 dirnew]# systemctl restart network #重启网卡服务</span><br><span class=\"line\"></span><br><span class=\"line\">123456789101112131415161718192021222324</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务名:firewalld</span><br><span class=\"line\"># 开启防火墙</span><br><span class=\"line\">systemctl start 服务名</span><br><span class=\"line\"># 关闭防火墙(服务器重启后还会自动开启防火墙)</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"># 禁止防火墙开机启动</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主机名\"><a href=\"#主机名\" class=\"headerlink\" title=\"主机名\"></a>主机名</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看主机名</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置主机名</span></span><br><span class=\"line\">hostnamectl set-hostname 主机名</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ip映射\"><a href=\"#ip映射\" class=\"headerlink\" title=\"ip映射\"></a>ip映射</h4><ul>\n<li><p>域名解析</p>\n</li>\n<li><p>本地hosts编辑</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# vim /etc/hosts</span><br><span class=\"line\">--------------下面是文件------------------</span><br><span class=\"line\">\t192.168.199.8 centos7</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">远程登录linux</span></span><br><span class=\"line\">ssh 远程linux的ip或者映射域名</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 简介</span></span><br><span class=\"line\">ssh登录远程linux，免去输入密码的麻烦</span><br><span class=\"line\">12</span><br><span class=\"line\"><span class=\"section\"># 生成公钥和私钥</span></span><br><span class=\"line\">[root@centos7 ~]# ssh-keygen</span><br><span class=\"line\">------------执行结果-----------</span><br><span class=\"line\"><span class=\"code\">    [root@centos7 ~]# tree .ssh</span></span><br><span class=\"line\"><span class=\"code\">    .ssh</span></span><br><span class=\"line\"><span class=\"code\">    ├── id_rsa # 私钥</span></span><br><span class=\"line\"><span class=\"code\">    ├── id_rsa.pub # 公钥</span></span><br><span class=\"line\"><span class=\"code\">    └── known_hosts</span></span><br><span class=\"line\"><span class=\"code\"># 发送公钥</span></span><br><span class=\"line\"><span class=\"code\">\t`保存公钥的文件为/root/.ssh/authorized_keys`</span></span><br><span class=\"line\"><span class=\"code\">[root@centos7 .ssh]# cat id_rsa.pub &gt; authorized_keys</span></span><br><span class=\"line\"><span class=\"code\"># 发送公钥</span></span><br><span class=\"line\"><span class=\"code\">[root@centos7 .ssh]# ssh-copy-id 目标主机的ip</span></span><br><span class=\"line\"><span class=\"code\">12345678910111213</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"远程拷贝\"><a href=\"#远程拷贝\" class=\"headerlink\" title=\"远程拷贝\"></a>远程拷贝</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp 本地的文件 root@远程linuxip:/远程linux的文件路径</span><br><span class=\"line\">scp -r 本地的目录 root@远程linuxip:/远程linux的文件路径</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"必要软件安装\"><a href=\"#必要软件安装\" class=\"headerlink\" title=\"必要软件安装\"></a>必要软件安装</h4><ol>\n<li><p>vim(vi编辑器增强版)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim 文件</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wget(下载器)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget url</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tree(目录树状显示)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以tree结构，递归显示当前文件下所有文件</span></span><br><span class=\"line\">\ttree</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示目标文件夹下的文件</span></span><br><span class=\"line\">\ttree 目标目录</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>psmisc(高级进程管理工具)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以tree形式显示系统目前进程</span></span><br><span class=\"line\">\tpstree</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">杀死进程</span></span><br><span class=\"line\">\tkillall 进程名</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示该文件被哪个进程使用</span></span><br><span class=\"line\">\tfuser /目标文件</span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>jdk安装</p>\n</li>\n</ol>\n"},{"title":"java规划路线","date":"2024-09-05T01:16:52.349Z","_content":"作为应届生进入Java行业，可以从以下几个方面规划学习技能和职业路线：\n\n\n\n**1. Java基础**\n\n\n\n​\t•\t**核心语法**：熟悉Java的基本语法（数据类型、控制结构、面向对象编程）。\n\n​\t•\t**面向对象编程**：深入理解类、对象、继承、封装、多态、接口等概念。\n\n​\t•\t**异常处理**：学习异常的种类及其处理方式。\n\n​\t•\t**集合框架**：掌握Java集合类（List、Set、Map等）。\n\n​\t•\t**Java IO**：学习文件读写、序列化等操作。\n\n\n\n**2. Java进阶**\n\n\n\n​\t•\t**多线程和并发**：掌握线程的创建与管理，了解Java中的同步机制、线程池等并发编程。\n\n​\t•\t**JVM原理**：理解Java虚拟机的工作原理，掌握内存管理、垃圾回收机制、类加载机制等。\n\n​\t•\t**设计模式**：学习常用的设计模式（单例模式、工厂模式、观察者模式等），提升代码复用性和可维护性。\n\n\n\n**3. Web开发**\n\n\n\n​\t•\t**Spring Framework**：学习Spring核心、Spring Boot用于构建Java Web应用的基本框架。\n\n​\t•\t**Spring MVC**：掌握控制器、服务层、持久化层的开发。\n\n​\t•\t**Spring Security**：学习身份认证和权限管理。\n\n​\t•\t**MyBatis/Hibernate**：掌握数据库ORM框架，了解如何进行对象关系映射。\n\n​\t•\t**Restful API**：了解如何构建和使用RESTful API接口，数据传输格式如JSON、XML等。\n\n\n\n**4. 数据库**\n\n\n\n​\t•\t**SQL语言**：掌握常见数据库操作（MySQL、PostgreSQL）。\n\n​\t•\t**NoSQL数据库**：学习常用的NoSQL数据库（如MongoDB）。\n\n​\t•\t**数据库优化**：理解索引、事务、锁机制等，提高数据库性能。\n\n\n\n**5. 微服务架构**\n\n\n\n​\t•\t**Spring Cloud**：学习微服务架构的搭建与管理，使用Spring Cloud、Netflix Eureka等工具实现服务发现、负载均衡等。\n\n​\t•\t**Docker/Kubernetes**：掌握容器化技术，用于部署和管理微服务。\n\n​\t•\t**消息队列**：学习RabbitMQ、Kafka等消息队列，用于解耦和异步处理。\n\n\n\n**6. 工具和DevOps**\n\n\n\n​\t•\t**Git**：熟悉版本控制工具。\n\n​\t•\t**Maven/Gradle**：掌握项目构建工具的使用。\n\n​\t•\t**CI/CD**：了解持续集成、持续部署的流程和工具，如Jenkins。\n\n​\t•\t**Linux**：熟悉基本的Linux命令行操作。\n\n\n\n**7. 系统设计与架构**\n\n\n\n​\t•\t**高并发**：学习如何设计高并发、高可用的系统。\n\n​\t•\t**分布式系统**：了解分布式存储、分布式计算等技术。\n\n\n\n**学习路线建议：**\n\n\n\n​\t1.\t**基础打牢**：深入学习Java语言的核心基础，包括语法、面向对象编程、多线程等。\n\n​\t2.\t**项目实战**：通过构建Web应用熟悉Spring全家桶，尝试自己开发一个简单的增删查改项目。\n\n​\t3.\t**数据库掌握**：同时学习SQL和NoSQL数据库，了解如何优化数据库性能。\n\n​\t4.\t**微服务架构与容器化**：学习微服务相关的概念和实现，掌握Docker等工具进行容器化部署。\n\n​\t5.\t**积累项目经验**：可以通过参加开源项目或者自己做一些小项目积累经验，提升实战能力。\n\n\n\n同时，建议你积极参与实习或开发项目积累经验，加强简历的亮点。","source":"_posts/java规划路线.md","raw":"---\ntitle: java规划路线\ndate: 2024-09-05T09:16:52.349Z\ntags: []\ncategories: []\n---\n作为应届生进入Java行业，可以从以下几个方面规划学习技能和职业路线：\n\n\n\n**1. Java基础**\n\n\n\n​\t•\t**核心语法**：熟悉Java的基本语法（数据类型、控制结构、面向对象编程）。\n\n​\t•\t**面向对象编程**：深入理解类、对象、继承、封装、多态、接口等概念。\n\n​\t•\t**异常处理**：学习异常的种类及其处理方式。\n\n​\t•\t**集合框架**：掌握Java集合类（List、Set、Map等）。\n\n​\t•\t**Java IO**：学习文件读写、序列化等操作。\n\n\n\n**2. Java进阶**\n\n\n\n​\t•\t**多线程和并发**：掌握线程的创建与管理，了解Java中的同步机制、线程池等并发编程。\n\n​\t•\t**JVM原理**：理解Java虚拟机的工作原理，掌握内存管理、垃圾回收机制、类加载机制等。\n\n​\t•\t**设计模式**：学习常用的设计模式（单例模式、工厂模式、观察者模式等），提升代码复用性和可维护性。\n\n\n\n**3. Web开发**\n\n\n\n​\t•\t**Spring Framework**：学习Spring核心、Spring Boot用于构建Java Web应用的基本框架。\n\n​\t•\t**Spring MVC**：掌握控制器、服务层、持久化层的开发。\n\n​\t•\t**Spring Security**：学习身份认证和权限管理。\n\n​\t•\t**MyBatis/Hibernate**：掌握数据库ORM框架，了解如何进行对象关系映射。\n\n​\t•\t**Restful API**：了解如何构建和使用RESTful API接口，数据传输格式如JSON、XML等。\n\n\n\n**4. 数据库**\n\n\n\n​\t•\t**SQL语言**：掌握常见数据库操作（MySQL、PostgreSQL）。\n\n​\t•\t**NoSQL数据库**：学习常用的NoSQL数据库（如MongoDB）。\n\n​\t•\t**数据库优化**：理解索引、事务、锁机制等，提高数据库性能。\n\n\n\n**5. 微服务架构**\n\n\n\n​\t•\t**Spring Cloud**：学习微服务架构的搭建与管理，使用Spring Cloud、Netflix Eureka等工具实现服务发现、负载均衡等。\n\n​\t•\t**Docker/Kubernetes**：掌握容器化技术，用于部署和管理微服务。\n\n​\t•\t**消息队列**：学习RabbitMQ、Kafka等消息队列，用于解耦和异步处理。\n\n\n\n**6. 工具和DevOps**\n\n\n\n​\t•\t**Git**：熟悉版本控制工具。\n\n​\t•\t**Maven/Gradle**：掌握项目构建工具的使用。\n\n​\t•\t**CI/CD**：了解持续集成、持续部署的流程和工具，如Jenkins。\n\n​\t•\t**Linux**：熟悉基本的Linux命令行操作。\n\n\n\n**7. 系统设计与架构**\n\n\n\n​\t•\t**高并发**：学习如何设计高并发、高可用的系统。\n\n​\t•\t**分布式系统**：了解分布式存储、分布式计算等技术。\n\n\n\n**学习路线建议：**\n\n\n\n​\t1.\t**基础打牢**：深入学习Java语言的核心基础，包括语法、面向对象编程、多线程等。\n\n​\t2.\t**项目实战**：通过构建Web应用熟悉Spring全家桶，尝试自己开发一个简单的增删查改项目。\n\n​\t3.\t**数据库掌握**：同时学习SQL和NoSQL数据库，了解如何优化数据库性能。\n\n​\t4.\t**微服务架构与容器化**：学习微服务相关的概念和实现，掌握Docker等工具进行容器化部署。\n\n​\t5.\t**积累项目经验**：可以通过参加开源项目或者自己做一些小项目积累经验，提升实战能力。\n\n\n\n同时，建议你积极参与实习或开发项目积累经验，加强简历的亮点。","slug":"java规划路线","published":1,"updated":"2024-11-25T11:44:04.501Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsco002qmbs63s341qsv","content":"<p>作为应届生进入Java行业，可以从以下几个方面规划学习技能和职业路线：</p>\n<p><strong>1. Java基础</strong></p>\n<p>​\t•\t<strong>核心语法</strong>：熟悉Java的基本语法（数据类型、控制结构、面向对象编程）。</p>\n<p>​\t•\t<strong>面向对象编程</strong>：深入理解类、对象、继承、封装、多态、接口等概念。</p>\n<p>​\t•\t<strong>异常处理</strong>：学习异常的种类及其处理方式。</p>\n<p>​\t•\t<strong>集合框架</strong>：掌握Java集合类（List、Set、Map等）。</p>\n<p>​\t•\t<strong>Java IO</strong>：学习文件读写、序列化等操作。</p>\n<p><strong>2. Java进阶</strong></p>\n<p>​\t•\t<strong>多线程和并发</strong>：掌握线程的创建与管理，了解Java中的同步机制、线程池等并发编程。</p>\n<p>​\t•\t<strong>JVM原理</strong>：理解Java虚拟机的工作原理，掌握内存管理、垃圾回收机制、类加载机制等。</p>\n<p>​\t•\t<strong>设计模式</strong>：学习常用的设计模式（单例模式、工厂模式、观察者模式等），提升代码复用性和可维护性。</p>\n<p><strong>3. Web开发</strong></p>\n<p>​\t•\t<strong>Spring Framework</strong>：学习Spring核心、Spring Boot用于构建Java Web应用的基本框架。</p>\n<p>​\t•\t<strong>Spring MVC</strong>：掌握控制器、服务层、持久化层的开发。</p>\n<p>​\t•\t<strong>Spring Security</strong>：学习身份认证和权限管理。</p>\n<p>​\t•\t<strong>MyBatis&#x2F;Hibernate</strong>：掌握数据库ORM框架，了解如何进行对象关系映射。</p>\n<p>​\t•\t<strong>Restful API</strong>：了解如何构建和使用RESTful API接口，数据传输格式如JSON、XML等。</p>\n<p><strong>4. 数据库</strong></p>\n<p>​\t•\t<strong>SQL语言</strong>：掌握常见数据库操作（MySQL、PostgreSQL）。</p>\n<p>​\t•\t<strong>NoSQL数据库</strong>：学习常用的NoSQL数据库（如MongoDB）。</p>\n<p>​\t•\t<strong>数据库优化</strong>：理解索引、事务、锁机制等，提高数据库性能。</p>\n<p><strong>5. 微服务架构</strong></p>\n<p>​\t•\t<strong>Spring Cloud</strong>：学习微服务架构的搭建与管理，使用Spring Cloud、Netflix Eureka等工具实现服务发现、负载均衡等。</p>\n<p>​\t•\t<strong>Docker&#x2F;Kubernetes</strong>：掌握容器化技术，用于部署和管理微服务。</p>\n<p>​\t•\t<strong>消息队列</strong>：学习RabbitMQ、Kafka等消息队列，用于解耦和异步处理。</p>\n<p><strong>6. 工具和DevOps</strong></p>\n<p>​\t•\t<strong>Git</strong>：熟悉版本控制工具。</p>\n<p>​\t•\t<strong>Maven&#x2F;Gradle</strong>：掌握项目构建工具的使用。</p>\n<p>​\t•\t<strong>CI&#x2F;CD</strong>：了解持续集成、持续部署的流程和工具，如Jenkins。</p>\n<p>​\t•\t<strong>Linux</strong>：熟悉基本的Linux命令行操作。</p>\n<p><strong>7. 系统设计与架构</strong></p>\n<p>​\t•\t<strong>高并发</strong>：学习如何设计高并发、高可用的系统。</p>\n<p>​\t•\t<strong>分布式系统</strong>：了解分布式存储、分布式计算等技术。</p>\n<p><strong>学习路线建议：</strong></p>\n<p>​\t1.\t<strong>基础打牢</strong>：深入学习Java语言的核心基础，包括语法、面向对象编程、多线程等。</p>\n<p>​\t2.\t<strong>项目实战</strong>：通过构建Web应用熟悉Spring全家桶，尝试自己开发一个简单的增删查改项目。</p>\n<p>​\t3.\t<strong>数据库掌握</strong>：同时学习SQL和NoSQL数据库，了解如何优化数据库性能。</p>\n<p>​\t4.\t<strong>微服务架构与容器化</strong>：学习微服务相关的概念和实现，掌握Docker等工具进行容器化部署。</p>\n<p>​\t5.\t<strong>积累项目经验</strong>：可以通过参加开源项目或者自己做一些小项目积累经验，提升实战能力。</p>\n<p>同时，建议你积极参与实习或开发项目积累经验，加强简历的亮点。</p>\n","excerpt":"","more":"<p>作为应届生进入Java行业，可以从以下几个方面规划学习技能和职业路线：</p>\n<p><strong>1. Java基础</strong></p>\n<p>​\t•\t<strong>核心语法</strong>：熟悉Java的基本语法（数据类型、控制结构、面向对象编程）。</p>\n<p>​\t•\t<strong>面向对象编程</strong>：深入理解类、对象、继承、封装、多态、接口等概念。</p>\n<p>​\t•\t<strong>异常处理</strong>：学习异常的种类及其处理方式。</p>\n<p>​\t•\t<strong>集合框架</strong>：掌握Java集合类（List、Set、Map等）。</p>\n<p>​\t•\t<strong>Java IO</strong>：学习文件读写、序列化等操作。</p>\n<p><strong>2. Java进阶</strong></p>\n<p>​\t•\t<strong>多线程和并发</strong>：掌握线程的创建与管理，了解Java中的同步机制、线程池等并发编程。</p>\n<p>​\t•\t<strong>JVM原理</strong>：理解Java虚拟机的工作原理，掌握内存管理、垃圾回收机制、类加载机制等。</p>\n<p>​\t•\t<strong>设计模式</strong>：学习常用的设计模式（单例模式、工厂模式、观察者模式等），提升代码复用性和可维护性。</p>\n<p><strong>3. Web开发</strong></p>\n<p>​\t•\t<strong>Spring Framework</strong>：学习Spring核心、Spring Boot用于构建Java Web应用的基本框架。</p>\n<p>​\t•\t<strong>Spring MVC</strong>：掌握控制器、服务层、持久化层的开发。</p>\n<p>​\t•\t<strong>Spring Security</strong>：学习身份认证和权限管理。</p>\n<p>​\t•\t<strong>MyBatis&#x2F;Hibernate</strong>：掌握数据库ORM框架，了解如何进行对象关系映射。</p>\n<p>​\t•\t<strong>Restful API</strong>：了解如何构建和使用RESTful API接口，数据传输格式如JSON、XML等。</p>\n<p><strong>4. 数据库</strong></p>\n<p>​\t•\t<strong>SQL语言</strong>：掌握常见数据库操作（MySQL、PostgreSQL）。</p>\n<p>​\t•\t<strong>NoSQL数据库</strong>：学习常用的NoSQL数据库（如MongoDB）。</p>\n<p>​\t•\t<strong>数据库优化</strong>：理解索引、事务、锁机制等，提高数据库性能。</p>\n<p><strong>5. 微服务架构</strong></p>\n<p>​\t•\t<strong>Spring Cloud</strong>：学习微服务架构的搭建与管理，使用Spring Cloud、Netflix Eureka等工具实现服务发现、负载均衡等。</p>\n<p>​\t•\t<strong>Docker&#x2F;Kubernetes</strong>：掌握容器化技术，用于部署和管理微服务。</p>\n<p>​\t•\t<strong>消息队列</strong>：学习RabbitMQ、Kafka等消息队列，用于解耦和异步处理。</p>\n<p><strong>6. 工具和DevOps</strong></p>\n<p>​\t•\t<strong>Git</strong>：熟悉版本控制工具。</p>\n<p>​\t•\t<strong>Maven&#x2F;Gradle</strong>：掌握项目构建工具的使用。</p>\n<p>​\t•\t<strong>CI&#x2F;CD</strong>：了解持续集成、持续部署的流程和工具，如Jenkins。</p>\n<p>​\t•\t<strong>Linux</strong>：熟悉基本的Linux命令行操作。</p>\n<p><strong>7. 系统设计与架构</strong></p>\n<p>​\t•\t<strong>高并发</strong>：学习如何设计高并发、高可用的系统。</p>\n<p>​\t•\t<strong>分布式系统</strong>：了解分布式存储、分布式计算等技术。</p>\n<p><strong>学习路线建议：</strong></p>\n<p>​\t1.\t<strong>基础打牢</strong>：深入学习Java语言的核心基础，包括语法、面向对象编程、多线程等。</p>\n<p>​\t2.\t<strong>项目实战</strong>：通过构建Web应用熟悉Spring全家桶，尝试自己开发一个简单的增删查改项目。</p>\n<p>​\t3.\t<strong>数据库掌握</strong>：同时学习SQL和NoSQL数据库，了解如何优化数据库性能。</p>\n<p>​\t4.\t<strong>微服务架构与容器化</strong>：学习微服务相关的概念和实现，掌握Docker等工具进行容器化部署。</p>\n<p>​\t5.\t<strong>积累项目经验</strong>：可以通过参加开源项目或者自己做一些小项目积累经验，提升实战能力。</p>\n<p>同时，建议你积极参与实习或开发项目积累经验，加强简历的亮点。</p>\n"},{"title":"java","date":"2024-07-06T10:09:01.798Z","_content":"# Java程序员简历模板\n\n本简历模板由国内首家互联网人才拍卖网站「 [JobDeer.com](http://www.jobdeer.com) 」提供。\n\n（括号里的是我们的顾问编写的说明，建议在简历书写完成后统一删除）\n\n## 先讲讲怎样才是一份好的技术简历\n\n首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。\n\n - Feature：是什么\n - Advantage：比别人好在哪些地方\n - Benefit：如果雇佣你，招聘方会得到什么好处 \n\n其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。\n\n举个例子，下边内容是虚构的：\n\n2006年，我参与了手机XX网发布系统WAPCMS的开发（```这部分是大家都会写的```）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（```这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。```）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（``` 通过量化的数字来增强可信度 ```）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（``` 这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。 ```）。\n\n有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。\n\n具体、量化、有说服力，是技术简历特别需要注重的地方。\n\n（以上内容在写完简历后，对每一段进行评估，完成后再删除）\n\n---\n\n\n# 联系方式\n（HR会打印你的简历，用于在面试的时候联系，所以联系方式放到最上边会比较方便）\n\n- 手机：135******** （```如果是外地手机，可注明。如经常关机，要写上最优联系时间```）\n- Email：goodman@gmail.com （```虽然我觉得QQ邮箱无所谓，不过有些技术人员比较反感，建议用G```）\n- QQ/微信号：6*******（```提供一个通过网络可以联系到你的方式```）\n\n---\n\n# 个人信息\n\n - 胶布帝/男/1990 \n - 本科/萌鹿大学计算机系 \n - 工作年限：3年\n - 微博：[@JobDeer](http://weibo.com/jobdeer) （``` 如果没有技术相关内容，也可以不放 ```）\n - 技术博客：http://blog.github.io ( ``` 使用GitHub Host的Big较高 ```  )\n - Github：http://github.com/geekcompany ( ``` 有原创repo的Github帐号会极大的提升你的个人品牌 ```  )\n\n - 期望职位：Java高级程序员，架构师\n - 期望薪资：税前月薪15k~20k，特别喜欢的公司可例外\n - 期望城市：北京\n\n---\n\n# 工作经历\n（工作经历按逆序排列，最新的在最前边，按公司做一级分组，公司内按二级分组）\n\n## ABC公司 （ 2012年9月 ~ 2014年9月 ）\n\n### DEF项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### GHI项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### 其他项目\n\n（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）\n\n \n## JKL公司 （ 2010年3月 ~ 2012年8月 ）\n\n### MNO项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### PQR项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### 其他项目\n\n（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）\n\n---\n\n# 开源项目和作品\n（这一段用于放置工作以外的、可证明你的能力的材料）\n\n## 开源项目\n（对于程序员来讲，没有什么比Show me the code能有说服力了）\n\n - [STU](http://github.com/yourname/projectname)：项目的简要说明，Star和Fork数多的可以注明\n - [WXYZ](http://github.com/yourname/projectname)：项目的简要说明，Star和Fork数多的可以注明\n\n## 技术文章\n（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你）\n\n- [一个产品经理眼中的云计算：前生今世和未来](http://get.jobdeer.com/706.get)\n- [来自HeroKu的HTTP API 设计指南(翻译文章)](http://get.jobdeer.com/343.get) （ ```好的翻译文章可以侧证你对英文技术文档的阅读能力```）\n\n## 演讲和讲义\n（放置你代表公司在一些技术会议上做过的演讲，以及你在公司分享时制作的讲义）\n\n  - 2014架构师大会演讲：[如何通过Docker优化内部开发](http://jobdeer.com)\n - 9月公司内部分享：[云计算的前生今世](http://jobdeer.com)\n\n# 技能清单\n（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）\n\n以下均为我熟练使用的技能\n\n- Web开发：PHP/Hack/Node\n- Web框架：ThinkPHP/Yaf/Yii/Lavaral/LazyPHP\n- 前端框架：Bootstrap/AngularJS/EmberJS/HTML5/Cocos2dJS/ionic\n- 前端工具：Bower/Gulp/SaSS/LeSS/PhoneGap\n- 数据库相关：MySQL/PgSQL/PDO/SQLite\n- 版本管理、文档和自动化部署工具：Svn/Git/PHPDoc/Phing/Composer\n- 单元测试：PHPUnit/SimpleTest/Qunit\n- 云和开放平台：SAE/BAE/AWS/微博开放平台/微信应用开发\n\n## 参考技能关键字\n\n本技能关键字列表是从最近招聘Java的数百份JD中统计出来的，括号中是出现的词频。如果你的简历要投递给有机器（简历分选系统）和不如机器（不懂技术的HR）筛选简历环节的地方，请一定从下边高频关键词中选择5～10个适合你自己的。\n\n- java(730)\n- spring(305)\n- web(260)\n- mysql(250)\n- oracle(207)\n- linux(198)\n- j2ee(182)\n- javascript(177)\n- sql(176)\n- hibernate(169)\n- html(139)\n- tomcat(132)\n- struts(128)\n- jquery(116)\n- jsp(106)\n- ajax(96)\n- css(94)\n- ibatis(84)\n- mvc(77)\n- servlet(71)\n- xml(70)\n- js(62)\n- eclipse(51)\n- mybatis(51)\n- jboss(47)\n- struts2(47)\n- weblogic(46)\n- redis(46)\n- apache(45)\n- http(44)\n- shell(39)\n- python(38)\n- hadoop(37)\n- nosql(35)\n- ssh(35)\n- sqlserver(33)\n- mongodb(33)\n- svn(32)\n- uml(32)\n- json(27)\n- unix(27)\n- maven(27)\n- nginx(26)\n- webservice(25)\n- jdbc(24)\n- memcached(23)\n- tcp(22)\n- resin(22)\n- jvm(21)\n- socket(21)\n- db2(19)\n- springmvc(19)\n- websphere(16)\n- soa(16)\n- mina(14)\n- android(14)\n- extjs(13)\n- erp(12)\n- memcache(12)\n- api(11)\n- jetty(11)\n- myeclipse(11)\n- ext(10)\n- git(10)\n- jpa(10)\n- svm(9)\n- php(9)\n- jms(9)\n- ruby(9)\n- lucene(8)\n- html5(8)\n- postgresql(8)\n- crm(7)\n- javaee(7)\n- sybase(7)\n- freemarker(6)\n- cache(6)\n- jsf(6)\n- j2se(6)\n- jbpm(6)\n- cvs(6)\n- junit(6)\n- visio(6)\n- netty(6)\n- hbase(6)\n- nio(6)\n- powerdesigner(6)\n- oo(6)\n- aop(6)\n- workflow(5)\n- restful(5)\n- ios(5)\n- ant(5)\n- mssql(5)\n- orm(5)\n- rose(5)\n- solr(5)\n- webwork(5)\n- zookeeper(4)\n- soap(4)\n- o2o(4)\n- wap(4)\n- cxf(4)\n- thrift(4)\n- xmpp(3)\n- p2p(3)\n- javabean(3)\n- jee(3)\n- hdfs(3)\n- dom(3)\n- hibernate3(3)\n\n\n\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n","source":"_posts/java.md","raw":"---\ntitle: java\ndate: 2024-07-06T18:09:01.798Z\ntags: []\ncategories: []\n---\n# Java程序员简历模板\n\n本简历模板由国内首家互联网人才拍卖网站「 [JobDeer.com](http://www.jobdeer.com) 」提供。\n\n（括号里的是我们的顾问编写的说明，建议在简历书写完成后统一删除）\n\n## 先讲讲怎样才是一份好的技术简历\n\n首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。\n\n - Feature：是什么\n - Advantage：比别人好在哪些地方\n - Benefit：如果雇佣你，招聘方会得到什么好处 \n\n其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。\n\n举个例子，下边内容是虚构的：\n\n2006年，我参与了手机XX网发布系统WAPCMS的开发（```这部分是大家都会写的```）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（```这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。```）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（``` 通过量化的数字来增强可信度 ```）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（``` 这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。 ```）。\n\n有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。\n\n具体、量化、有说服力，是技术简历特别需要注重的地方。\n\n（以上内容在写完简历后，对每一段进行评估，完成后再删除）\n\n---\n\n\n# 联系方式\n（HR会打印你的简历，用于在面试的时候联系，所以联系方式放到最上边会比较方便）\n\n- 手机：135******** （```如果是外地手机，可注明。如经常关机，要写上最优联系时间```）\n- Email：goodman@gmail.com （```虽然我觉得QQ邮箱无所谓，不过有些技术人员比较反感，建议用G```）\n- QQ/微信号：6*******（```提供一个通过网络可以联系到你的方式```）\n\n---\n\n# 个人信息\n\n - 胶布帝/男/1990 \n - 本科/萌鹿大学计算机系 \n - 工作年限：3年\n - 微博：[@JobDeer](http://weibo.com/jobdeer) （``` 如果没有技术相关内容，也可以不放 ```）\n - 技术博客：http://blog.github.io ( ``` 使用GitHub Host的Big较高 ```  )\n - Github：http://github.com/geekcompany ( ``` 有原创repo的Github帐号会极大的提升你的个人品牌 ```  )\n\n - 期望职位：Java高级程序员，架构师\n - 期望薪资：税前月薪15k~20k，特别喜欢的公司可例外\n - 期望城市：北京\n\n---\n\n# 工作经历\n（工作经历按逆序排列，最新的在最前边，按公司做一级分组，公司内按二级分组）\n\n## ABC公司 （ 2012年9月 ~ 2014年9月 ）\n\n### DEF项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### GHI项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### 其他项目\n\n（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）\n\n \n## JKL公司 （ 2010年3月 ~ 2012年8月 ）\n\n### MNO项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### PQR项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n\n### 其他项目\n\n（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）\n\n---\n\n# 开源项目和作品\n（这一段用于放置工作以外的、可证明你的能力的材料）\n\n## 开源项目\n（对于程序员来讲，没有什么比Show me the code能有说服力了）\n\n - [STU](http://github.com/yourname/projectname)：项目的简要说明，Star和Fork数多的可以注明\n - [WXYZ](http://github.com/yourname/projectname)：项目的简要说明，Star和Fork数多的可以注明\n\n## 技术文章\n（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你）\n\n- [一个产品经理眼中的云计算：前生今世和未来](http://get.jobdeer.com/706.get)\n- [来自HeroKu的HTTP API 设计指南(翻译文章)](http://get.jobdeer.com/343.get) （ ```好的翻译文章可以侧证你对英文技术文档的阅读能力```）\n\n## 演讲和讲义\n（放置你代表公司在一些技术会议上做过的演讲，以及你在公司分享时制作的讲义）\n\n  - 2014架构师大会演讲：[如何通过Docker优化内部开发](http://jobdeer.com)\n - 9月公司内部分享：[云计算的前生今世](http://jobdeer.com)\n\n# 技能清单\n（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）\n\n以下均为我熟练使用的技能\n\n- Web开发：PHP/Hack/Node\n- Web框架：ThinkPHP/Yaf/Yii/Lavaral/LazyPHP\n- 前端框架：Bootstrap/AngularJS/EmberJS/HTML5/Cocos2dJS/ionic\n- 前端工具：Bower/Gulp/SaSS/LeSS/PhoneGap\n- 数据库相关：MySQL/PgSQL/PDO/SQLite\n- 版本管理、文档和自动化部署工具：Svn/Git/PHPDoc/Phing/Composer\n- 单元测试：PHPUnit/SimpleTest/Qunit\n- 云和开放平台：SAE/BAE/AWS/微博开放平台/微信应用开发\n\n## 参考技能关键字\n\n本技能关键字列表是从最近招聘Java的数百份JD中统计出来的，括号中是出现的词频。如果你的简历要投递给有机器（简历分选系统）和不如机器（不懂技术的HR）筛选简历环节的地方，请一定从下边高频关键词中选择5～10个适合你自己的。\n\n- java(730)\n- spring(305)\n- web(260)\n- mysql(250)\n- oracle(207)\n- linux(198)\n- j2ee(182)\n- javascript(177)\n- sql(176)\n- hibernate(169)\n- html(139)\n- tomcat(132)\n- struts(128)\n- jquery(116)\n- jsp(106)\n- ajax(96)\n- css(94)\n- ibatis(84)\n- mvc(77)\n- servlet(71)\n- xml(70)\n- js(62)\n- eclipse(51)\n- mybatis(51)\n- jboss(47)\n- struts2(47)\n- weblogic(46)\n- redis(46)\n- apache(45)\n- http(44)\n- shell(39)\n- python(38)\n- hadoop(37)\n- nosql(35)\n- ssh(35)\n- sqlserver(33)\n- mongodb(33)\n- svn(32)\n- uml(32)\n- json(27)\n- unix(27)\n- maven(27)\n- nginx(26)\n- webservice(25)\n- jdbc(24)\n- memcached(23)\n- tcp(22)\n- resin(22)\n- jvm(21)\n- socket(21)\n- db2(19)\n- springmvc(19)\n- websphere(16)\n- soa(16)\n- mina(14)\n- android(14)\n- extjs(13)\n- erp(12)\n- memcache(12)\n- api(11)\n- jetty(11)\n- myeclipse(11)\n- ext(10)\n- git(10)\n- jpa(10)\n- svm(9)\n- php(9)\n- jms(9)\n- ruby(9)\n- lucene(8)\n- html5(8)\n- postgresql(8)\n- crm(7)\n- javaee(7)\n- sybase(7)\n- freemarker(6)\n- cache(6)\n- jsf(6)\n- j2se(6)\n- jbpm(6)\n- cvs(6)\n- junit(6)\n- visio(6)\n- netty(6)\n- hbase(6)\n- nio(6)\n- powerdesigner(6)\n- oo(6)\n- aop(6)\n- workflow(5)\n- restful(5)\n- ios(5)\n- ant(5)\n- mssql(5)\n- orm(5)\n- rose(5)\n- solr(5)\n- webwork(5)\n- zookeeper(4)\n- soap(4)\n- o2o(4)\n- wap(4)\n- cxf(4)\n- thrift(4)\n- xmpp(3)\n- p2p(3)\n- javabean(3)\n- jee(3)\n- hdfs(3)\n- dom(3)\n- hibernate3(3)\n\n\n\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n","slug":"java","published":1,"updated":"2024-11-25T11:44:04.512Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsco002rmbs6cqcbhzdx","content":"<h1 id=\"Java程序员简历模板\"><a href=\"#Java程序员简历模板\" class=\"headerlink\" title=\"Java程序员简历模板\"></a>Java程序员简历模板</h1><p>本简历模板由国内首家互联网人才拍卖网站「 <a href=\"http://www.jobdeer.com/\">JobDeer.com</a> 」提供。</p>\n<p>（括号里的是我们的顾问编写的说明，建议在简历书写完成后统一删除）</p>\n<h2 id=\"先讲讲怎样才是一份好的技术简历\"><a href=\"#先讲讲怎样才是一份好的技术简历\" class=\"headerlink\" title=\"先讲讲怎样才是一份好的技术简历\"></a>先讲讲怎样才是一份好的技术简历</h2><p>首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。</p>\n<ul>\n<li>Feature：是什么</li>\n<li>Advantage：比别人好在哪些地方</li>\n<li>Benefit：如果雇佣你，招聘方会得到什么好处</li>\n</ul>\n<p>其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。</p>\n<p>举个例子，下边内容是虚构的：</p>\n<p>2006年，我参与了手机XX网发布系统WAPCMS的开发（<code>这部分是大家都会写的</code>）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（<code>这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。</code>）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（<code>通过量化的数字来增强可信度</code>）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（<code>这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。</code>）。</p>\n<p>有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。</p>\n<p>具体、量化、有说服力，是技术简历特别需要注重的地方。</p>\n<p>（以上内容在写完简历后，对每一段进行评估，完成后再删除）</p>\n<hr>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>（HR会打印你的简历，用于在面试的时候联系，所以联系方式放到最上边会比较方便）</p>\n<ul>\n<li>手机：135******** （<code>如果是外地手机，可注明。如经常关机，要写上最优联系时间</code>）</li>\n<li>Email：<a href=\"mailto:&#103;&#x6f;&#x6f;&#x64;&#x6d;&#97;&#110;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;\">&#103;&#x6f;&#x6f;&#x64;&#x6d;&#97;&#110;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;</a> （<code>虽然我觉得QQ邮箱无所谓，不过有些技术人员比较反感，建议用G</code>）</li>\n<li>QQ&#x2F;微信号：6*******（<code>提供一个通过网络可以联系到你的方式</code>）</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li><p>胶布帝&#x2F;男&#x2F;1990 </p>\n</li>\n<li><p>本科&#x2F;萌鹿大学计算机系 </p>\n</li>\n<li><p>工作年限：3年</p>\n</li>\n<li><p>微博：<a href=\"http://weibo.com/jobdeer\">@JobDeer</a> （<code>如果没有技术相关内容，也可以不放</code>）</p>\n</li>\n<li><p>技术博客：<a href=\"http://blog.github.io/\">http://blog.github.io</a> ( <code>使用GitHub Host的Big较高</code>  )</p>\n</li>\n<li><p>Github：<a href=\"http://github.com/geekcompany\">http://github.com/geekcompany</a> ( <code>有原创repo的Github帐号会极大的提升你的个人品牌</code>  )</p>\n</li>\n<li><p>期望职位：Java高级程序员，架构师</p>\n</li>\n<li><p>期望薪资：税前月薪15k~20k，特别喜欢的公司可例外</p>\n</li>\n<li><p>期望城市：北京</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><p>（工作经历按逆序排列，最新的在最前边，按公司做一级分组，公司内按二级分组）</p>\n<h2 id=\"ABC公司-（-2012年9月-2014年9月-）\"><a href=\"#ABC公司-（-2012年9月-2014年9月-）\" class=\"headerlink\" title=\"ABC公司 （ 2012年9月 ~ 2014年9月 ）\"></a>ABC公司 （ 2012年9月 ~ 2014年9月 ）</h2><h3 id=\"DEF项目\"><a href=\"#DEF项目\" class=\"headerlink\" title=\"DEF项目\"></a>DEF项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"GHI项目\"><a href=\"#GHI项目\" class=\"headerlink\" title=\"GHI项目\"></a>GHI项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>\n<h2 id=\"JKL公司-（-2010年3月-2012年8月-）\"><a href=\"#JKL公司-（-2010年3月-2012年8月-）\" class=\"headerlink\" title=\"JKL公司 （ 2010年3月 ~ 2012年8月 ）\"></a>JKL公司 （ 2010年3月 ~ 2012年8月 ）</h2><h3 id=\"MNO项目\"><a href=\"#MNO项目\" class=\"headerlink\" title=\"MNO项目\"></a>MNO项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"PQR项目\"><a href=\"#PQR项目\" class=\"headerlink\" title=\"PQR项目\"></a>PQR项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>\n<hr>\n<h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><p>（这一段用于放置工作以外的、可证明你的能力的材料）</p>\n<h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><p>（对于程序员来讲，没有什么比Show me the code能有说服力了）</p>\n<ul>\n<li><a href=\"http://github.com/yourname/projectname\">STU</a>：项目的简要说明，Star和Fork数多的可以注明</li>\n<li><a href=\"http://github.com/yourname/projectname\">WXYZ</a>：项目的简要说明，Star和Fork数多的可以注明</li>\n</ul>\n<h2 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h2><p>（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你）</p>\n<ul>\n<li><a href=\"http://get.jobdeer.com/706.get\">一个产品经理眼中的云计算：前生今世和未来</a></li>\n<li><a href=\"http://get.jobdeer.com/343.get\">来自HeroKu的HTTP API 设计指南(翻译文章)</a> （ <code>好的翻译文章可以侧证你对英文技术文档的阅读能力</code>）</li>\n</ul>\n<h2 id=\"演讲和讲义\"><a href=\"#演讲和讲义\" class=\"headerlink\" title=\"演讲和讲义\"></a>演讲和讲义</h2><p>（放置你代表公司在一些技术会议上做过的演讲，以及你在公司分享时制作的讲义）</p>\n<ul>\n<li>2014架构师大会演讲：<a href=\"http://jobdeer.com/\">如何通过Docker优化内部开发</a></li>\n<li>9月公司内部分享：<a href=\"http://jobdeer.com/\">云计算的前生今世</a></li>\n</ul>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）</p>\n<p>以下均为我熟练使用的技能</p>\n<ul>\n<li>Web开发：PHP&#x2F;Hack&#x2F;Node</li>\n<li>Web框架：ThinkPHP&#x2F;Yaf&#x2F;Yii&#x2F;Lavaral&#x2F;LazyPHP</li>\n<li>前端框架：Bootstrap&#x2F;AngularJS&#x2F;EmberJS&#x2F;HTML5&#x2F;Cocos2dJS&#x2F;ionic</li>\n<li>前端工具：Bower&#x2F;Gulp&#x2F;SaSS&#x2F;LeSS&#x2F;PhoneGap</li>\n<li>数据库相关：MySQL&#x2F;PgSQL&#x2F;PDO&#x2F;SQLite</li>\n<li>版本管理、文档和自动化部署工具：Svn&#x2F;Git&#x2F;PHPDoc&#x2F;Phing&#x2F;Composer</li>\n<li>单元测试：PHPUnit&#x2F;SimpleTest&#x2F;Qunit</li>\n<li>云和开放平台：SAE&#x2F;BAE&#x2F;AWS&#x2F;微博开放平台&#x2F;微信应用开发</li>\n</ul>\n<h2 id=\"参考技能关键字\"><a href=\"#参考技能关键字\" class=\"headerlink\" title=\"参考技能关键字\"></a>参考技能关键字</h2><p>本技能关键字列表是从最近招聘Java的数百份JD中统计出来的，括号中是出现的词频。如果你的简历要投递给有机器（简历分选系统）和不如机器（不懂技术的HR）筛选简历环节的地方，请一定从下边高频关键词中选择5～10个适合你自己的。</p>\n<ul>\n<li>java(730)</li>\n<li>spring(305)</li>\n<li>web(260)</li>\n<li>mysql(250)</li>\n<li>oracle(207)</li>\n<li>linux(198)</li>\n<li>j2ee(182)</li>\n<li>javascript(177)</li>\n<li>sql(176)</li>\n<li>hibernate(169)</li>\n<li>html(139)</li>\n<li>tomcat(132)</li>\n<li>struts(128)</li>\n<li>jquery(116)</li>\n<li>jsp(106)</li>\n<li>ajax(96)</li>\n<li>css(94)</li>\n<li>ibatis(84)</li>\n<li>mvc(77)</li>\n<li>servlet(71)</li>\n<li>xml(70)</li>\n<li>js(62)</li>\n<li>eclipse(51)</li>\n<li>mybatis(51)</li>\n<li>jboss(47)</li>\n<li>struts2(47)</li>\n<li>weblogic(46)</li>\n<li>redis(46)</li>\n<li>apache(45)</li>\n<li>http(44)</li>\n<li>shell(39)</li>\n<li>python(38)</li>\n<li>hadoop(37)</li>\n<li>nosql(35)</li>\n<li>ssh(35)</li>\n<li>sqlserver(33)</li>\n<li>mongodb(33)</li>\n<li>svn(32)</li>\n<li>uml(32)</li>\n<li>json(27)</li>\n<li>unix(27)</li>\n<li>maven(27)</li>\n<li>nginx(26)</li>\n<li>webservice(25)</li>\n<li>jdbc(24)</li>\n<li>memcached(23)</li>\n<li>tcp(22)</li>\n<li>resin(22)</li>\n<li>jvm(21)</li>\n<li>socket(21)</li>\n<li>db2(19)</li>\n<li>springmvc(19)</li>\n<li>websphere(16)</li>\n<li>soa(16)</li>\n<li>mina(14)</li>\n<li>android(14)</li>\n<li>extjs(13)</li>\n<li>erp(12)</li>\n<li>memcache(12)</li>\n<li>api(11)</li>\n<li>jetty(11)</li>\n<li>myeclipse(11)</li>\n<li>ext(10)</li>\n<li>git(10)</li>\n<li>jpa(10)</li>\n<li>svm(9)</li>\n<li>php(9)</li>\n<li>jms(9)</li>\n<li>ruby(9)</li>\n<li>lucene(8)</li>\n<li>html5(8)</li>\n<li>postgresql(8)</li>\n<li>crm(7)</li>\n<li>javaee(7)</li>\n<li>sybase(7)</li>\n<li>freemarker(6)</li>\n<li>cache(6)</li>\n<li>jsf(6)</li>\n<li>j2se(6)</li>\n<li>jbpm(6)</li>\n<li>cvs(6)</li>\n<li>junit(6)</li>\n<li>visio(6)</li>\n<li>netty(6)</li>\n<li>hbase(6)</li>\n<li>nio(6)</li>\n<li>powerdesigner(6)</li>\n<li>oo(6)</li>\n<li>aop(6)</li>\n<li>workflow(5)</li>\n<li>restful(5)</li>\n<li>ios(5)</li>\n<li>ant(5)</li>\n<li>mssql(5)</li>\n<li>orm(5)</li>\n<li>rose(5)</li>\n<li>solr(5)</li>\n<li>webwork(5)</li>\n<li>zookeeper(4)</li>\n<li>soap(4)</li>\n<li>o2o(4)</li>\n<li>wap(4)</li>\n<li>cxf(4)</li>\n<li>thrift(4)</li>\n<li>xmpp(3)</li>\n<li>p2p(3)</li>\n<li>javabean(3)</li>\n<li>jee(3)</li>\n<li>hdfs(3)</li>\n<li>dom(3)</li>\n<li>hibernate3(3)</li>\n</ul>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","excerpt":"","more":"<h1 id=\"Java程序员简历模板\"><a href=\"#Java程序员简历模板\" class=\"headerlink\" title=\"Java程序员简历模板\"></a>Java程序员简历模板</h1><p>本简历模板由国内首家互联网人才拍卖网站「 <a href=\"http://www.jobdeer.com/\">JobDeer.com</a> 」提供。</p>\n<p>（括号里的是我们的顾问编写的说明，建议在简历书写完成后统一删除）</p>\n<h2 id=\"先讲讲怎样才是一份好的技术简历\"><a href=\"#先讲讲怎样才是一份好的技术简历\" class=\"headerlink\" title=\"先讲讲怎样才是一份好的技术简历\"></a>先讲讲怎样才是一份好的技术简历</h2><p>首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。</p>\n<ul>\n<li>Feature：是什么</li>\n<li>Advantage：比别人好在哪些地方</li>\n<li>Benefit：如果雇佣你，招聘方会得到什么好处</li>\n</ul>\n<p>其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。</p>\n<p>举个例子，下边内容是虚构的：</p>\n<p>2006年，我参与了手机XX网发布系统WAPCMS的开发（<code>这部分是大家都会写的</code>）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（<code>这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。</code>）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（<code>通过量化的数字来增强可信度</code>）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（<code>这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。</code>）。</p>\n<p>有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。</p>\n<p>具体、量化、有说服力，是技术简历特别需要注重的地方。</p>\n<p>（以上内容在写完简历后，对每一段进行评估，完成后再删除）</p>\n<hr>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>（HR会打印你的简历，用于在面试的时候联系，所以联系方式放到最上边会比较方便）</p>\n<ul>\n<li>手机：135******** （<code>如果是外地手机，可注明。如经常关机，要写上最优联系时间</code>）</li>\n<li>Email：<a href=\"mailto:&#103;&#x6f;&#x6f;&#x64;&#x6d;&#97;&#110;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;\">&#103;&#x6f;&#x6f;&#x64;&#x6d;&#97;&#110;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;</a> （<code>虽然我觉得QQ邮箱无所谓，不过有些技术人员比较反感，建议用G</code>）</li>\n<li>QQ&#x2F;微信号：6*******（<code>提供一个通过网络可以联系到你的方式</code>）</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li><p>胶布帝&#x2F;男&#x2F;1990 </p>\n</li>\n<li><p>本科&#x2F;萌鹿大学计算机系 </p>\n</li>\n<li><p>工作年限：3年</p>\n</li>\n<li><p>微博：<a href=\"http://weibo.com/jobdeer\">@JobDeer</a> （<code>如果没有技术相关内容，也可以不放</code>）</p>\n</li>\n<li><p>技术博客：<a href=\"http://blog.github.io/\">http://blog.github.io</a> ( <code>使用GitHub Host的Big较高</code>  )</p>\n</li>\n<li><p>Github：<a href=\"http://github.com/geekcompany\">http://github.com/geekcompany</a> ( <code>有原创repo的Github帐号会极大的提升你的个人品牌</code>  )</p>\n</li>\n<li><p>期望职位：Java高级程序员，架构师</p>\n</li>\n<li><p>期望薪资：税前月薪15k~20k，特别喜欢的公司可例外</p>\n</li>\n<li><p>期望城市：北京</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><p>（工作经历按逆序排列，最新的在最前边，按公司做一级分组，公司内按二级分组）</p>\n<h2 id=\"ABC公司-（-2012年9月-2014年9月-）\"><a href=\"#ABC公司-（-2012年9月-2014年9月-）\" class=\"headerlink\" title=\"ABC公司 （ 2012年9月 ~ 2014年9月 ）\"></a>ABC公司 （ 2012年9月 ~ 2014年9月 ）</h2><h3 id=\"DEF项目\"><a href=\"#DEF项目\" class=\"headerlink\" title=\"DEF项目\"></a>DEF项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"GHI项目\"><a href=\"#GHI项目\" class=\"headerlink\" title=\"GHI项目\"></a>GHI项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>\n<h2 id=\"JKL公司-（-2010年3月-2012年8月-）\"><a href=\"#JKL公司-（-2010年3月-2012年8月-）\" class=\"headerlink\" title=\"JKL公司 （ 2010年3月 ~ 2012年8月 ）\"></a>JKL公司 （ 2010年3月 ~ 2012年8月 ）</h2><h3 id=\"MNO项目\"><a href=\"#MNO项目\" class=\"headerlink\" title=\"MNO项目\"></a>MNO项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"PQR项目\"><a href=\"#PQR项目\" class=\"headerlink\" title=\"PQR项目\"></a>PQR项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色&#x2F;和别人不一样&#x2F;成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>\n<hr>\n<h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><p>（这一段用于放置工作以外的、可证明你的能力的材料）</p>\n<h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><p>（对于程序员来讲，没有什么比Show me the code能有说服力了）</p>\n<ul>\n<li><a href=\"http://github.com/yourname/projectname\">STU</a>：项目的简要说明，Star和Fork数多的可以注明</li>\n<li><a href=\"http://github.com/yourname/projectname\">WXYZ</a>：项目的简要说明，Star和Fork数多的可以注明</li>\n</ul>\n<h2 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h2><p>（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你）</p>\n<ul>\n<li><a href=\"http://get.jobdeer.com/706.get\">一个产品经理眼中的云计算：前生今世和未来</a></li>\n<li><a href=\"http://get.jobdeer.com/343.get\">来自HeroKu的HTTP API 设计指南(翻译文章)</a> （ <code>好的翻译文章可以侧证你对英文技术文档的阅读能力</code>）</li>\n</ul>\n<h2 id=\"演讲和讲义\"><a href=\"#演讲和讲义\" class=\"headerlink\" title=\"演讲和讲义\"></a>演讲和讲义</h2><p>（放置你代表公司在一些技术会议上做过的演讲，以及你在公司分享时制作的讲义）</p>\n<ul>\n<li>2014架构师大会演讲：<a href=\"http://jobdeer.com/\">如何通过Docker优化内部开发</a></li>\n<li>9月公司内部分享：<a href=\"http://jobdeer.com/\">云计算的前生今世</a></li>\n</ul>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）</p>\n<p>以下均为我熟练使用的技能</p>\n<ul>\n<li>Web开发：PHP&#x2F;Hack&#x2F;Node</li>\n<li>Web框架：ThinkPHP&#x2F;Yaf&#x2F;Yii&#x2F;Lavaral&#x2F;LazyPHP</li>\n<li>前端框架：Bootstrap&#x2F;AngularJS&#x2F;EmberJS&#x2F;HTML5&#x2F;Cocos2dJS&#x2F;ionic</li>\n<li>前端工具：Bower&#x2F;Gulp&#x2F;SaSS&#x2F;LeSS&#x2F;PhoneGap</li>\n<li>数据库相关：MySQL&#x2F;PgSQL&#x2F;PDO&#x2F;SQLite</li>\n<li>版本管理、文档和自动化部署工具：Svn&#x2F;Git&#x2F;PHPDoc&#x2F;Phing&#x2F;Composer</li>\n<li>单元测试：PHPUnit&#x2F;SimpleTest&#x2F;Qunit</li>\n<li>云和开放平台：SAE&#x2F;BAE&#x2F;AWS&#x2F;微博开放平台&#x2F;微信应用开发</li>\n</ul>\n<h2 id=\"参考技能关键字\"><a href=\"#参考技能关键字\" class=\"headerlink\" title=\"参考技能关键字\"></a>参考技能关键字</h2><p>本技能关键字列表是从最近招聘Java的数百份JD中统计出来的，括号中是出现的词频。如果你的简历要投递给有机器（简历分选系统）和不如机器（不懂技术的HR）筛选简历环节的地方，请一定从下边高频关键词中选择5～10个适合你自己的。</p>\n<ul>\n<li>java(730)</li>\n<li>spring(305)</li>\n<li>web(260)</li>\n<li>mysql(250)</li>\n<li>oracle(207)</li>\n<li>linux(198)</li>\n<li>j2ee(182)</li>\n<li>javascript(177)</li>\n<li>sql(176)</li>\n<li>hibernate(169)</li>\n<li>html(139)</li>\n<li>tomcat(132)</li>\n<li>struts(128)</li>\n<li>jquery(116)</li>\n<li>jsp(106)</li>\n<li>ajax(96)</li>\n<li>css(94)</li>\n<li>ibatis(84)</li>\n<li>mvc(77)</li>\n<li>servlet(71)</li>\n<li>xml(70)</li>\n<li>js(62)</li>\n<li>eclipse(51)</li>\n<li>mybatis(51)</li>\n<li>jboss(47)</li>\n<li>struts2(47)</li>\n<li>weblogic(46)</li>\n<li>redis(46)</li>\n<li>apache(45)</li>\n<li>http(44)</li>\n<li>shell(39)</li>\n<li>python(38)</li>\n<li>hadoop(37)</li>\n<li>nosql(35)</li>\n<li>ssh(35)</li>\n<li>sqlserver(33)</li>\n<li>mongodb(33)</li>\n<li>svn(32)</li>\n<li>uml(32)</li>\n<li>json(27)</li>\n<li>unix(27)</li>\n<li>maven(27)</li>\n<li>nginx(26)</li>\n<li>webservice(25)</li>\n<li>jdbc(24)</li>\n<li>memcached(23)</li>\n<li>tcp(22)</li>\n<li>resin(22)</li>\n<li>jvm(21)</li>\n<li>socket(21)</li>\n<li>db2(19)</li>\n<li>springmvc(19)</li>\n<li>websphere(16)</li>\n<li>soa(16)</li>\n<li>mina(14)</li>\n<li>android(14)</li>\n<li>extjs(13)</li>\n<li>erp(12)</li>\n<li>memcache(12)</li>\n<li>api(11)</li>\n<li>jetty(11)</li>\n<li>myeclipse(11)</li>\n<li>ext(10)</li>\n<li>git(10)</li>\n<li>jpa(10)</li>\n<li>svm(9)</li>\n<li>php(9)</li>\n<li>jms(9)</li>\n<li>ruby(9)</li>\n<li>lucene(8)</li>\n<li>html5(8)</li>\n<li>postgresql(8)</li>\n<li>crm(7)</li>\n<li>javaee(7)</li>\n<li>sybase(7)</li>\n<li>freemarker(6)</li>\n<li>cache(6)</li>\n<li>jsf(6)</li>\n<li>j2se(6)</li>\n<li>jbpm(6)</li>\n<li>cvs(6)</li>\n<li>junit(6)</li>\n<li>visio(6)</li>\n<li>netty(6)</li>\n<li>hbase(6)</li>\n<li>nio(6)</li>\n<li>powerdesigner(6)</li>\n<li>oo(6)</li>\n<li>aop(6)</li>\n<li>workflow(5)</li>\n<li>restful(5)</li>\n<li>ios(5)</li>\n<li>ant(5)</li>\n<li>mssql(5)</li>\n<li>orm(5)</li>\n<li>rose(5)</li>\n<li>solr(5)</li>\n<li>webwork(5)</li>\n<li>zookeeper(4)</li>\n<li>soap(4)</li>\n<li>o2o(4)</li>\n<li>wap(4)</li>\n<li>cxf(4)</li>\n<li>thrift(4)</li>\n<li>xmpp(3)</li>\n<li>p2p(3)</li>\n<li>javabean(3)</li>\n<li>jee(3)</li>\n<li>hdfs(3)</li>\n<li>dom(3)</li>\n<li>hibernate3(3)</li>\n</ul>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"},{"title":"Git命令","date":"2024-07-03T09:26:20.755Z","_content":"# Git命令\n\n如果你想使用 `git` 命令来管理代码库，以下是一些常用的 Git 命令和它们的解释：\n\n### 初始化一个新的 Git 仓库\n\n```bash\n\n复制代码\ngit init\n```\n\n在当前目录下初始化一个新的 Git 仓库。\n\n### 克隆一个远程仓库\n\n```\n\n复制代码\ngit clone <repository-url>\n```\n\n克隆远程仓库到本地。\n\n### 查看仓库的状态\n\n```\n\n复制代码\ngit status\n```\n\n查看当前工作目录的状态，包括已修改但未提交的文件。\n\n### 添加文件到暂存区\n\n```\n\n复制代码\ngit add <file>\n```\n\n将指定的文件添加到暂存区。\n\n```\n\n复制代码\ngit add .\n```\n\n将所有修改的文件添加到暂存区。\n\n### 提交暂存区的改动\n\n```\n\n复制代码\ngit commit -m \"Your commit message\"\n```\n\n提交暂存区的改动，并附上提交信息。\n\n### 查看提交历史\n\n```\n\n复制代码\ngit log\n```\n\n查看提交历史记录。\n\n### 创建新分支\n\n```\n\n复制代码\ngit branch <branch-name>\n```\n\n创建一个新的分支。\n\n### 切换分支\n\n```\n\n复制代码\ngit checkout <branch-name>\n```\n\n切换到指定的分支。\n\n### 合并分支\n\n```\n\n复制代码\ngit merge <branch-name>\n```\n\n将指定分支的改动合并到当前分支。\n\n### 推送改动到远程仓库\n\n```\n\n复制代码\ngit push origin <branch-name>\n```\n\n将本地改动推送到远程仓库的指定分支。\n\n### 拉取远程仓库的改动\n\n```\n\n复制代码\ngit pull\n```\n\n从远程仓库拉取最新的改动并合并到当前分支。\n\n### 删除本地分支\n\n```\n\n复制代码\ngit branch -d <branch-name>\n```\n\n删除指定的本地分支。\n\n### 删除远程分支\n\n```\n\n复制代码\ngit push origin --delete <branch-name>\n```\n\n删除远程仓库中的指定分支。\n\n### 显示分支图\n\n```\n\n复制代码\ngit log --graph --oneline --all\n```\n\n显示所有分支的提交图。\n\n### 暂存改动（保存工作进度）\n\n```\n\n复制代码\ngit stash\n```\n\n将当前工作目录的改动保存到一个栈中，并恢复干净的工作目录。\n\n### 恢复暂存的改动\n\n```\n\n复制代码\ngit stash pop\n```\n\n恢复最近一次保存的工作进度，并从栈中删除这次记录。\n\n### 远程仓库操作\n\n添加远程仓库：\n\n```\n\n复制代码\ngit remote add origin <repository-url>\n```\n\n查看远程仓库：\n\n```\n\n复制代码\ngit remote -v\n```\n\n移除远程仓库：\n\n```\n\n复制代码\ngit remote remove origin\n```\n\n这些命令涵盖了 Git 的基本操作，能够帮助你管理代码库的版本控制。\n\n\n\n\n\n\n\n\n\n我每天使用 Git ，但是很多命令记不住。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n![img](https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n> - Workspace：工作区\n> - Index / Stage：暂存区\n> - Repository：仓库区（或本地仓库）\n> - Remote：远程仓库\n\n## 一、新建代码库\n\n> ```bash\n> # 在当前目录新建一个Git代码库\n> $ git init\n> \n> # 新建一个目录，将其初始化为Git代码库\n> $ git init [project-name]\n> \n> # 下载一个项目和它的整个代码历史\n> $ git clone [url]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 二、配置\n\nGit的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n> ```bash\n> # 显示当前的Git配置\n> $ git config --list\n> \n> # 编辑Git配置文件\n> $ git config -e [--global]\n> \n> # 设置提交代码时的用户信息\n> $ git config [--global] user.name \"[name]\"\n> $ git config [--global] user.email \"[email address]\"\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 三、增加/删除文件\n\n> ```bash\n> # 添加指定文件到暂存区\n> $ git add [file1] [file2] ...\n> \n> # 添加指定目录到暂存区，包括子目录\n> $ git add [dir]\n> \n> # 添加当前目录的所有文件到暂存区\n> $ git add .\n> \n> # 添加每个变化前，都会要求确认\n> # 对于同一个文件的多处变化，可以实现分次提交\n> $ git add -p\n> \n> # 删除工作区文件，并且将这次删除放入暂存区\n> $ git rm [file1] [file2] ...\n> \n> # 停止追踪指定文件，但该文件会保留在工作区\n> $ git rm --cached [file]\n> \n> # 改名文件，并且将这个改名放入暂存区\n> $ git mv [file-original] [file-renamed]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 四、代码提交\n\n> ```bash\n> # 提交暂存区到仓库区\n> $ git commit -m [message]\n> \n> # 提交暂存区的指定文件到仓库区\n> $ git commit [file1] [file2] ... -m [message]\n> \n> # 提交工作区自上次commit之后的变化，直接到仓库区\n> $ git commit -a\n> \n> # 提交时显示所有diff信息\n> $ git commit -v\n> \n> # 使用一次新的commit，替代上一次提交\n> # 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n> $ git commit --amend -m [message]\n> \n> # 重做上一次commit，并包括指定文件的新变化\n> $ git commit --amend [file1] [file2] ...\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 五、分支\n\n> ```bash\n> # 列出所有本地分支\n> $ git branch\n> \n> # 列出所有远程分支\n> $ git branch -r\n> \n> # 列出所有本地分支和远程分支\n> $ git branch -a\n> \n> # 新建一个分支，但依然停留在当前分支\n> $ git branch [branch-name]\n> \n> # 新建一个分支，并切换到该分支\n> $ git checkout -b [branch]\n> \n> # 新建一个分支，指向指定commit\n> $ git branch [branch] [commit]\n> \n> # 新建一个分支，与指定的远程分支建立追踪关系\n> $ git branch --track [branch] [remote-branch]\n> \n> # 切换到指定分支，并更新工作区\n> $ git checkout [branch-name]\n> \n> # 切换到上一个分支\n> $ git checkout -\n> \n> # 建立追踪关系，在现有分支与指定的远程分支之间\n> $ git branch --set-upstream [branch] [remote-branch]\n> \n> # 合并指定分支到当前分支\n> $ git merge [branch]\n> \n> # 选择一个commit，合并进当前分支\n> $ git cherry-pick [commit]\n> \n> # 删除分支\n> $ git branch -d [branch-name]\n> \n> # 删除远程分支\n> $ git push origin --delete [branch-name]\n> $ git branch -dr [remote/branch]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 六、标签\n\n> ```bash\n> # 列出所有tag\n> $ git tag\n> \n> # 新建一个tag在当前commit\n> $ git tag [tag]\n> \n> # 新建一个tag在指定commit\n> $ git tag [tag] [commit]\n> \n> # 删除本地tag\n> $ git tag -d [tag]\n> \n> # 删除远程tag\n> $ git push origin :refs/tags/[tagName]\n> \n> # 查看tag信息\n> $ git show [tag]\n> \n> # 提交指定tag\n> $ git push [remote] [tag]\n> \n> # 提交所有tag\n> $ git push [remote] --tags\n> \n> # 新建一个分支，指向某个tag\n> $ git checkout -b [branch] [tag]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 七、查看信息\n\n> ```bash\n> # 显示有变更的文件\n> $ git status\n> \n> # 显示当前分支的版本历史\n> $ git log\n> \n> # 显示commit历史，以及每次commit发生变更的文件\n> $ git log --stat\n> \n> # 搜索提交历史，根据关键词\n> $ git log -S [keyword]\n> \n> # 显示某个commit之后的所有变动，每个commit占据一行\n> $ git log [tag] HEAD --pretty=format:%s\n> \n> # 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n> $ git log [tag] HEAD --grep feature\n> \n> # 显示某个文件的版本历史，包括文件改名\n> $ git log --follow [file]\n> $ git whatchanged [file]\n> \n> # 显示指定文件相关的每一次diff\n> $ git log -p [file]\n> \n> # 显示过去5次提交\n> $ git log -5 --pretty --oneline\n> \n> # 显示所有提交过的用户，按提交次数排序\n> $ git shortlog -sn\n> \n> # 显示指定文件是什么人在什么时间修改过\n> $ git blame [file]\n> \n> # 显示暂存区和工作区的差异\n> $ git diff\n> \n> # 显示暂存区和上一个commit的差异\n> $ git diff --cached [file]\n> \n> # 显示工作区与当前分支最新commit之间的差异\n> $ git diff HEAD\n> \n> # 显示两次提交之间的差异\n> $ git diff [first-branch]...[second-branch]\n> \n> # 显示今天你写了多少行代码\n> $ git diff --shortstat \"@{0 day ago}\"\n> \n> # 显示某次提交的元数据和内容变化\n> $ git show [commit]\n> \n> # 显示某次提交发生变化的文件\n> $ git show --name-only [commit]\n> \n> # 显示某次提交时，某个文件的内容\n> $ git show [commit]:[filename]\n> \n> # 显示当前分支的最近几次提交\n> $ git reflog\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 八、远程同步\n\n> ```bash\n> # 下载远程仓库的所有变动\n> $ git fetch [remote]\n> \n> # 显示所有远程仓库\n> $ git remote -v\n> \n> # 显示某个远程仓库的信息\n> $ git remote show [remote]\n> \n> # 增加一个新的远程仓库，并命名\n> $ git remote add [shortname] [url]\n> \n> # 取回远程仓库的变化，并与本地分支合并\n> $ git pull [remote] [branch]\n> \n> # 上传本地指定分支到远程仓库\n> $ git push [remote] [branch]\n> \n> # 强行推送当前分支到远程仓库，即使有冲突\n> $ git push [remote] --force\n> \n> # 推送所有分支到远程仓库\n> $ git push [remote] --all\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 九、撤销\n\n> ```bash\n> # 恢复暂存区的指定文件到工作区\n> $ git checkout [file]\n> \n> # 恢复某个commit的指定文件到暂存区和工作区\n> $ git checkout [commit] [file]\n> \n> # 恢复暂存区的所有文件到工作区\n> $ git checkout .\n> \n> # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n> $ git reset [file]\n> \n> # 重置暂存区与工作区，与上一次commit保持一致\n> $ git reset --hard\n> \n> # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n> $ git reset [commit]\n> \n> # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n> $ git reset --hard [commit]\n> \n> # 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n> $ git reset --keep [commit]\n> \n> # 新建一个commit，用来撤销指定commit\n> # 后者的所有变化都将被前者抵消，并且应用到当前分支\n> $ git revert [commit]\n> \n> # 暂时将未提交的变化移除，稍后再移入\n> $ git stash\n> $ git stash pop\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 十、其他\n\n> ```bash\n> # 生成一个可供发布的压缩包\n> $ git archive\n> ```","source":"_posts/Git命令.md","raw":"---\ntitle: Git命令\ndate: 2024-07-03T17:26:20.755Z\ntags: []\ncategories: []\n---\n# Git命令\n\n如果你想使用 `git` 命令来管理代码库，以下是一些常用的 Git 命令和它们的解释：\n\n### 初始化一个新的 Git 仓库\n\n```bash\n\n复制代码\ngit init\n```\n\n在当前目录下初始化一个新的 Git 仓库。\n\n### 克隆一个远程仓库\n\n```\n\n复制代码\ngit clone <repository-url>\n```\n\n克隆远程仓库到本地。\n\n### 查看仓库的状态\n\n```\n\n复制代码\ngit status\n```\n\n查看当前工作目录的状态，包括已修改但未提交的文件。\n\n### 添加文件到暂存区\n\n```\n\n复制代码\ngit add <file>\n```\n\n将指定的文件添加到暂存区。\n\n```\n\n复制代码\ngit add .\n```\n\n将所有修改的文件添加到暂存区。\n\n### 提交暂存区的改动\n\n```\n\n复制代码\ngit commit -m \"Your commit message\"\n```\n\n提交暂存区的改动，并附上提交信息。\n\n### 查看提交历史\n\n```\n\n复制代码\ngit log\n```\n\n查看提交历史记录。\n\n### 创建新分支\n\n```\n\n复制代码\ngit branch <branch-name>\n```\n\n创建一个新的分支。\n\n### 切换分支\n\n```\n\n复制代码\ngit checkout <branch-name>\n```\n\n切换到指定的分支。\n\n### 合并分支\n\n```\n\n复制代码\ngit merge <branch-name>\n```\n\n将指定分支的改动合并到当前分支。\n\n### 推送改动到远程仓库\n\n```\n\n复制代码\ngit push origin <branch-name>\n```\n\n将本地改动推送到远程仓库的指定分支。\n\n### 拉取远程仓库的改动\n\n```\n\n复制代码\ngit pull\n```\n\n从远程仓库拉取最新的改动并合并到当前分支。\n\n### 删除本地分支\n\n```\n\n复制代码\ngit branch -d <branch-name>\n```\n\n删除指定的本地分支。\n\n### 删除远程分支\n\n```\n\n复制代码\ngit push origin --delete <branch-name>\n```\n\n删除远程仓库中的指定分支。\n\n### 显示分支图\n\n```\n\n复制代码\ngit log --graph --oneline --all\n```\n\n显示所有分支的提交图。\n\n### 暂存改动（保存工作进度）\n\n```\n\n复制代码\ngit stash\n```\n\n将当前工作目录的改动保存到一个栈中，并恢复干净的工作目录。\n\n### 恢复暂存的改动\n\n```\n\n复制代码\ngit stash pop\n```\n\n恢复最近一次保存的工作进度，并从栈中删除这次记录。\n\n### 远程仓库操作\n\n添加远程仓库：\n\n```\n\n复制代码\ngit remote add origin <repository-url>\n```\n\n查看远程仓库：\n\n```\n\n复制代码\ngit remote -v\n```\n\n移除远程仓库：\n\n```\n\n复制代码\ngit remote remove origin\n```\n\n这些命令涵盖了 Git 的基本操作，能够帮助你管理代码库的版本控制。\n\n\n\n\n\n\n\n\n\n我每天使用 Git ，但是很多命令记不住。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n![img](https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n> - Workspace：工作区\n> - Index / Stage：暂存区\n> - Repository：仓库区（或本地仓库）\n> - Remote：远程仓库\n\n## 一、新建代码库\n\n> ```bash\n> # 在当前目录新建一个Git代码库\n> $ git init\n> \n> # 新建一个目录，将其初始化为Git代码库\n> $ git init [project-name]\n> \n> # 下载一个项目和它的整个代码历史\n> $ git clone [url]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 二、配置\n\nGit的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n> ```bash\n> # 显示当前的Git配置\n> $ git config --list\n> \n> # 编辑Git配置文件\n> $ git config -e [--global]\n> \n> # 设置提交代码时的用户信息\n> $ git config [--global] user.name \"[name]\"\n> $ git config [--global] user.email \"[email address]\"\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 三、增加/删除文件\n\n> ```bash\n> # 添加指定文件到暂存区\n> $ git add [file1] [file2] ...\n> \n> # 添加指定目录到暂存区，包括子目录\n> $ git add [dir]\n> \n> # 添加当前目录的所有文件到暂存区\n> $ git add .\n> \n> # 添加每个变化前，都会要求确认\n> # 对于同一个文件的多处变化，可以实现分次提交\n> $ git add -p\n> \n> # 删除工作区文件，并且将这次删除放入暂存区\n> $ git rm [file1] [file2] ...\n> \n> # 停止追踪指定文件，但该文件会保留在工作区\n> $ git rm --cached [file]\n> \n> # 改名文件，并且将这个改名放入暂存区\n> $ git mv [file-original] [file-renamed]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 四、代码提交\n\n> ```bash\n> # 提交暂存区到仓库区\n> $ git commit -m [message]\n> \n> # 提交暂存区的指定文件到仓库区\n> $ git commit [file1] [file2] ... -m [message]\n> \n> # 提交工作区自上次commit之后的变化，直接到仓库区\n> $ git commit -a\n> \n> # 提交时显示所有diff信息\n> $ git commit -v\n> \n> # 使用一次新的commit，替代上一次提交\n> # 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n> $ git commit --amend -m [message]\n> \n> # 重做上一次commit，并包括指定文件的新变化\n> $ git commit --amend [file1] [file2] ...\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 五、分支\n\n> ```bash\n> # 列出所有本地分支\n> $ git branch\n> \n> # 列出所有远程分支\n> $ git branch -r\n> \n> # 列出所有本地分支和远程分支\n> $ git branch -a\n> \n> # 新建一个分支，但依然停留在当前分支\n> $ git branch [branch-name]\n> \n> # 新建一个分支，并切换到该分支\n> $ git checkout -b [branch]\n> \n> # 新建一个分支，指向指定commit\n> $ git branch [branch] [commit]\n> \n> # 新建一个分支，与指定的远程分支建立追踪关系\n> $ git branch --track [branch] [remote-branch]\n> \n> # 切换到指定分支，并更新工作区\n> $ git checkout [branch-name]\n> \n> # 切换到上一个分支\n> $ git checkout -\n> \n> # 建立追踪关系，在现有分支与指定的远程分支之间\n> $ git branch --set-upstream [branch] [remote-branch]\n> \n> # 合并指定分支到当前分支\n> $ git merge [branch]\n> \n> # 选择一个commit，合并进当前分支\n> $ git cherry-pick [commit]\n> \n> # 删除分支\n> $ git branch -d [branch-name]\n> \n> # 删除远程分支\n> $ git push origin --delete [branch-name]\n> $ git branch -dr [remote/branch]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 六、标签\n\n> ```bash\n> # 列出所有tag\n> $ git tag\n> \n> # 新建一个tag在当前commit\n> $ git tag [tag]\n> \n> # 新建一个tag在指定commit\n> $ git tag [tag] [commit]\n> \n> # 删除本地tag\n> $ git tag -d [tag]\n> \n> # 删除远程tag\n> $ git push origin :refs/tags/[tagName]\n> \n> # 查看tag信息\n> $ git show [tag]\n> \n> # 提交指定tag\n> $ git push [remote] [tag]\n> \n> # 提交所有tag\n> $ git push [remote] --tags\n> \n> # 新建一个分支，指向某个tag\n> $ git checkout -b [branch] [tag]\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 七、查看信息\n\n> ```bash\n> # 显示有变更的文件\n> $ git status\n> \n> # 显示当前分支的版本历史\n> $ git log\n> \n> # 显示commit历史，以及每次commit发生变更的文件\n> $ git log --stat\n> \n> # 搜索提交历史，根据关键词\n> $ git log -S [keyword]\n> \n> # 显示某个commit之后的所有变动，每个commit占据一行\n> $ git log [tag] HEAD --pretty=format:%s\n> \n> # 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n> $ git log [tag] HEAD --grep feature\n> \n> # 显示某个文件的版本历史，包括文件改名\n> $ git log --follow [file]\n> $ git whatchanged [file]\n> \n> # 显示指定文件相关的每一次diff\n> $ git log -p [file]\n> \n> # 显示过去5次提交\n> $ git log -5 --pretty --oneline\n> \n> # 显示所有提交过的用户，按提交次数排序\n> $ git shortlog -sn\n> \n> # 显示指定文件是什么人在什么时间修改过\n> $ git blame [file]\n> \n> # 显示暂存区和工作区的差异\n> $ git diff\n> \n> # 显示暂存区和上一个commit的差异\n> $ git diff --cached [file]\n> \n> # 显示工作区与当前分支最新commit之间的差异\n> $ git diff HEAD\n> \n> # 显示两次提交之间的差异\n> $ git diff [first-branch]...[second-branch]\n> \n> # 显示今天你写了多少行代码\n> $ git diff --shortstat \"@{0 day ago}\"\n> \n> # 显示某次提交的元数据和内容变化\n> $ git show [commit]\n> \n> # 显示某次提交发生变化的文件\n> $ git show --name-only [commit]\n> \n> # 显示某次提交时，某个文件的内容\n> $ git show [commit]:[filename]\n> \n> # 显示当前分支的最近几次提交\n> $ git reflog\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 八、远程同步\n\n> ```bash\n> # 下载远程仓库的所有变动\n> $ git fetch [remote]\n> \n> # 显示所有远程仓库\n> $ git remote -v\n> \n> # 显示某个远程仓库的信息\n> $ git remote show [remote]\n> \n> # 增加一个新的远程仓库，并命名\n> $ git remote add [shortname] [url]\n> \n> # 取回远程仓库的变化，并与本地分支合并\n> $ git pull [remote] [branch]\n> \n> # 上传本地指定分支到远程仓库\n> $ git push [remote] [branch]\n> \n> # 强行推送当前分支到远程仓库，即使有冲突\n> $ git push [remote] --force\n> \n> # 推送所有分支到远程仓库\n> $ git push [remote] --all\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 九、撤销\n\n> ```bash\n> # 恢复暂存区的指定文件到工作区\n> $ git checkout [file]\n> \n> # 恢复某个commit的指定文件到暂存区和工作区\n> $ git checkout [commit] [file]\n> \n> # 恢复暂存区的所有文件到工作区\n> $ git checkout .\n> \n> # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n> $ git reset [file]\n> \n> # 重置暂存区与工作区，与上一次commit保持一致\n> $ git reset --hard\n> \n> # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n> $ git reset [commit]\n> \n> # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n> $ git reset --hard [commit]\n> \n> # 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n> $ git reset --keep [commit]\n> \n> # 新建一个commit，用来撤销指定commit\n> # 后者的所有变化都将被前者抵消，并且应用到当前分支\n> $ git revert [commit]\n> \n> # 暂时将未提交的变化移除，稍后再移入\n> $ git stash\n> $ git stash pop\n> \n> \n> \n> \n> \n> 解释\n> ```\n\n## 十、其他\n\n> ```bash\n> # 生成一个可供发布的压缩包\n> $ git archive\n> ```","slug":"Git命令","published":1,"updated":"2024-11-25T11:44:04.522Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsco002smbs6fef50q5d","content":"<h1 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h1><p>如果你想使用 <code>git</code> 命令来管理代码库，以下是一些常用的 Git 命令和它们的解释：</p>\n<h3 id=\"初始化一个新的-Git-仓库\"><a href=\"#初始化一个新的-Git-仓库\" class=\"headerlink\" title=\"初始化一个新的 Git 仓库\"></a>初始化一个新的 Git 仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>在当前目录下初始化一个新的 Git 仓库。</p>\n<h3 id=\"克隆一个远程仓库\"><a href=\"#克隆一个远程仓库\" class=\"headerlink\" title=\"克隆一个远程仓库\"></a>克隆一个远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git clone &lt;repository-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>克隆远程仓库到本地。</p>\n<h3 id=\"查看仓库的状态\"><a href=\"#查看仓库的状态\" class=\"headerlink\" title=\"查看仓库的状态\"></a>查看仓库的状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>查看当前工作目录的状态，包括已修改但未提交的文件。</p>\n<h3 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将指定的文件添加到暂存区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p>将所有修改的文件添加到暂存区。</p>\n<h3 id=\"提交暂存区的改动\"><a href=\"#提交暂存区的改动\" class=\"headerlink\" title=\"提交暂存区的改动\"></a>提交暂存区的改动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git commit -m &quot;Your commit message&quot;</span><br></pre></td></tr></table></figure>\n\n<p>提交暂存区的改动，并附上提交信息。</p>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<p>查看提交历史记录。</p>\n<h3 id=\"创建新分支\"><a href=\"#创建新分支\" class=\"headerlink\" title=\"创建新分支\"></a>创建新分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的分支。</p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定的分支。</p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将指定分支的改动合并到当前分支。</p>\n<h3 id=\"推送改动到远程仓库\"><a href=\"#推送改动到远程仓库\" class=\"headerlink\" title=\"推送改动到远程仓库\"></a>推送改动到远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git push origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将本地改动推送到远程仓库的指定分支。</p>\n<h3 id=\"拉取远程仓库的改动\"><a href=\"#拉取远程仓库的改动\" class=\"headerlink\" title=\"拉取远程仓库的改动\"></a>拉取远程仓库的改动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>从远程仓库拉取最新的改动并合并到当前分支。</p>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>删除指定的本地分支。</p>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git push origin --delete &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>删除远程仓库中的指定分支。</p>\n<h3 id=\"显示分支图\"><a href=\"#显示分支图\" class=\"headerlink\" title=\"显示分支图\"></a>显示分支图</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git log --graph --oneline --all</span><br></pre></td></tr></table></figure>\n\n<p>显示所有分支的提交图。</p>\n<h3 id=\"暂存改动（保存工作进度）\"><a href=\"#暂存改动（保存工作进度）\" class=\"headerlink\" title=\"暂存改动（保存工作进度）\"></a>暂存改动（保存工作进度）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>将当前工作目录的改动保存到一个栈中，并恢复干净的工作目录。</p>\n<h3 id=\"恢复暂存的改动\"><a href=\"#恢复暂存的改动\" class=\"headerlink\" title=\"恢复暂存的改动\"></a>恢复暂存的改动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>恢复最近一次保存的工作进度，并从栈中删除这次记录。</p>\n<h3 id=\"远程仓库操作\"><a href=\"#远程仓库操作\" class=\"headerlink\" title=\"远程仓库操作\"></a>远程仓库操作</h3><p>添加远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git remote add origin &lt;repository-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>移除远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git remote remove origin</span><br></pre></td></tr></table></figure>\n\n<p>这些命令涵盖了 Git 的基本操作，能够帮助你管理代码库的版本控制。</p>\n<p>我每天使用 Git ，但是很多命令记不住。</p>\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>\n<p><img src=\"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"img\"></p>\n<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>\n<blockquote>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index &#x2F; Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n</blockquote>\n<h2 id=\"一、新建代码库\"><a href=\"#一、新建代码库\" class=\"headerlink\" title=\"一、新建代码库\"></a>一、新建代码库</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">&quot;[name]&quot;</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">&quot;[email address]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"三、增加-删除文件\"><a href=\"#三、增加-删除文件\" class=\"headerlink\" title=\"三、增加&#x2F;删除文件\"></a>三、增加&#x2F;删除文件</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git <span class=\"built_in\">rm</span> [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git <span class=\"built_in\">rm</span> --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [file-original] [file-renamed]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a>四、代码提交</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"五、分支\"><a href=\"#五、分支\" class=\"headerlink\" title=\"五、分支\"></a>五、分支</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"六、标签\"><a href=\"#六、标签\" class=\"headerlink\" title=\"六、标签\"></a>六、标签</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a>七、查看信息</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\">$ git diff --shortstat <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"八、远程同步\"><a href=\"#八、远程同步\" class=\"headerlink\" title=\"八、远程同步\"></a>八、远程同步</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"九、撤销\"><a href=\"#九、撤销\" class=\"headerlink\" title=\"九、撤销\"></a>九、撤销</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个可供发布的压缩包</span></span><br><span class=\"line\">$ git archive</span><br></pre></td></tr></table></figure></blockquote>\n","excerpt":"","more":"<h1 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h1><p>如果你想使用 <code>git</code> 命令来管理代码库，以下是一些常用的 Git 命令和它们的解释：</p>\n<h3 id=\"初始化一个新的-Git-仓库\"><a href=\"#初始化一个新的-Git-仓库\" class=\"headerlink\" title=\"初始化一个新的 Git 仓库\"></a>初始化一个新的 Git 仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>在当前目录下初始化一个新的 Git 仓库。</p>\n<h3 id=\"克隆一个远程仓库\"><a href=\"#克隆一个远程仓库\" class=\"headerlink\" title=\"克隆一个远程仓库\"></a>克隆一个远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git clone &lt;repository-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>克隆远程仓库到本地。</p>\n<h3 id=\"查看仓库的状态\"><a href=\"#查看仓库的状态\" class=\"headerlink\" title=\"查看仓库的状态\"></a>查看仓库的状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>查看当前工作目录的状态，包括已修改但未提交的文件。</p>\n<h3 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将指定的文件添加到暂存区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p>将所有修改的文件添加到暂存区。</p>\n<h3 id=\"提交暂存区的改动\"><a href=\"#提交暂存区的改动\" class=\"headerlink\" title=\"提交暂存区的改动\"></a>提交暂存区的改动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git commit -m &quot;Your commit message&quot;</span><br></pre></td></tr></table></figure>\n\n<p>提交暂存区的改动，并附上提交信息。</p>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<p>查看提交历史记录。</p>\n<h3 id=\"创建新分支\"><a href=\"#创建新分支\" class=\"headerlink\" title=\"创建新分支\"></a>创建新分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的分支。</p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定的分支。</p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将指定分支的改动合并到当前分支。</p>\n<h3 id=\"推送改动到远程仓库\"><a href=\"#推送改动到远程仓库\" class=\"headerlink\" title=\"推送改动到远程仓库\"></a>推送改动到远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git push origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将本地改动推送到远程仓库的指定分支。</p>\n<h3 id=\"拉取远程仓库的改动\"><a href=\"#拉取远程仓库的改动\" class=\"headerlink\" title=\"拉取远程仓库的改动\"></a>拉取远程仓库的改动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>从远程仓库拉取最新的改动并合并到当前分支。</p>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>删除指定的本地分支。</p>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git push origin --delete &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>删除远程仓库中的指定分支。</p>\n<h3 id=\"显示分支图\"><a href=\"#显示分支图\" class=\"headerlink\" title=\"显示分支图\"></a>显示分支图</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git log --graph --oneline --all</span><br></pre></td></tr></table></figure>\n\n<p>显示所有分支的提交图。</p>\n<h3 id=\"暂存改动（保存工作进度）\"><a href=\"#暂存改动（保存工作进度）\" class=\"headerlink\" title=\"暂存改动（保存工作进度）\"></a>暂存改动（保存工作进度）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>将当前工作目录的改动保存到一个栈中，并恢复干净的工作目录。</p>\n<h3 id=\"恢复暂存的改动\"><a href=\"#恢复暂存的改动\" class=\"headerlink\" title=\"恢复暂存的改动\"></a>恢复暂存的改动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>恢复最近一次保存的工作进度，并从栈中删除这次记录。</p>\n<h3 id=\"远程仓库操作\"><a href=\"#远程仓库操作\" class=\"headerlink\" title=\"远程仓库操作\"></a>远程仓库操作</h3><p>添加远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git remote add origin &lt;repository-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>移除远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">git remote remove origin</span><br></pre></td></tr></table></figure>\n\n<p>这些命令涵盖了 Git 的基本操作，能够帮助你管理代码库的版本控制。</p>\n<p>我每天使用 Git ，但是很多命令记不住。</p>\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>\n<p><img src=\"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"img\"></p>\n<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>\n<blockquote>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index &#x2F; Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n</blockquote>\n<h2 id=\"一、新建代码库\"><a href=\"#一、新建代码库\" class=\"headerlink\" title=\"一、新建代码库\"></a>一、新建代码库</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">&quot;[name]&quot;</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">&quot;[email address]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"三、增加-删除文件\"><a href=\"#三、增加-删除文件\" class=\"headerlink\" title=\"三、增加&#x2F;删除文件\"></a>三、增加&#x2F;删除文件</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git <span class=\"built_in\">rm</span> [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git <span class=\"built_in\">rm</span> --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [file-original] [file-renamed]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a>四、代码提交</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"五、分支\"><a href=\"#五、分支\" class=\"headerlink\" title=\"五、分支\"></a>五、分支</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"六、标签\"><a href=\"#六、标签\" class=\"headerlink\" title=\"六、标签\"></a>六、标签</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a>七、查看信息</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\">$ git diff --shortstat <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"八、远程同步\"><a href=\"#八、远程同步\" class=\"headerlink\" title=\"八、远程同步\"></a>八、远程同步</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"九、撤销\"><a href=\"#九、撤销\" class=\"headerlink\" title=\"九、撤销\"></a>九、撤销</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个可供发布的压缩包</span></span><br><span class=\"line\">$ git archive</span><br></pre></td></tr></table></figure></blockquote>\n"},{"title":"docker镜像相关","date":"2024-10-30T11:25:43.177Z","_content":"Docker 的常用命令非常多，以下是一些常用的基础命令，帮助你管理 Docker 镜像、容器和网络等：\n\n### 镜像相关\n- **拉取镜像**：\n  ```bash\n  docker pull <image_name>:<tag>\n  ```\n  示例：`docker pull nginx:latest`\n\n- **列出本地镜像**：\n  ```bash\n  docker images\n  ```\n\n- **删除镜像**：\n  ```bash\n  docker rmi <image_id>\n  ```\n\n### 容器相关\n- **启动容器**：\n  ```bash\n  docker run -d --name <container_name> -p <host_port>:<container_port> <image_name>\n  ```\n  示例：`docker run -d --name my-nginx -p 80:80 nginx`\n\n- **停止容器**：\n  ```bash\n  docker stop <container_id或container_name>\n  ```\n\n- **删除容器**：\n  ```bash\n  docker rm <container_id或container_name>\n  ```\n\n- **进入容器终端**：\n  ```bash\n  docker exec -it <container_id或container_name> /bin/bash\n  ```\n\n- **查看容器日志**：\n  ```bash\n  docker logs <container_id或container_name>\n  ```\n\n### 网络相关\n- **查看网络**：\n  ```bash\n  docker network ls\n  ```\n\n- **创建自定义网络**：\n  ```bash\n  docker network create <network_name>\n  ```\n\n- **将容器连接到网络**：\n  ```bash\n  docker network connect <network_name> <container_name>\n  ```\n\n### 容器状态管理\n- **列出所有正在运行的容器**：\n  ```bash\n  docker ps\n  ```\n\n- **列出所有容器（包括已停止的）**：\n  ```bash\n  docker ps -a\n  ```\n\n- **启动已停止的容器**：\n  ```bash\n  docker start <container_id或container_name>\n  ```\n\n- **自动重启容器**：\n  ```bash\n  docker run -d --restart=unless-stopped <image_name>\n  ```\n\n### 数据卷相关\n- **创建数据卷**：\n  ```bash\n  docker volume create <volume_name>\n  ```\n\n- **挂载数据卷**：\n  ```bash\n  docker run -v <volume_name>:<container_path> <image_name>\n  ```\n\n这些命令可以帮助你在大部分情况下轻松管理 Docker 环境。","source":"_posts/docker镜像相关.md","raw":"---\ntitle: docker镜像相关\ndate: 2024-10-30T19:25:43.177Z\ntags: []\ncategories: []\n---\nDocker 的常用命令非常多，以下是一些常用的基础命令，帮助你管理 Docker 镜像、容器和网络等：\n\n### 镜像相关\n- **拉取镜像**：\n  ```bash\n  docker pull <image_name>:<tag>\n  ```\n  示例：`docker pull nginx:latest`\n\n- **列出本地镜像**：\n  ```bash\n  docker images\n  ```\n\n- **删除镜像**：\n  ```bash\n  docker rmi <image_id>\n  ```\n\n### 容器相关\n- **启动容器**：\n  ```bash\n  docker run -d --name <container_name> -p <host_port>:<container_port> <image_name>\n  ```\n  示例：`docker run -d --name my-nginx -p 80:80 nginx`\n\n- **停止容器**：\n  ```bash\n  docker stop <container_id或container_name>\n  ```\n\n- **删除容器**：\n  ```bash\n  docker rm <container_id或container_name>\n  ```\n\n- **进入容器终端**：\n  ```bash\n  docker exec -it <container_id或container_name> /bin/bash\n  ```\n\n- **查看容器日志**：\n  ```bash\n  docker logs <container_id或container_name>\n  ```\n\n### 网络相关\n- **查看网络**：\n  ```bash\n  docker network ls\n  ```\n\n- **创建自定义网络**：\n  ```bash\n  docker network create <network_name>\n  ```\n\n- **将容器连接到网络**：\n  ```bash\n  docker network connect <network_name> <container_name>\n  ```\n\n### 容器状态管理\n- **列出所有正在运行的容器**：\n  ```bash\n  docker ps\n  ```\n\n- **列出所有容器（包括已停止的）**：\n  ```bash\n  docker ps -a\n  ```\n\n- **启动已停止的容器**：\n  ```bash\n  docker start <container_id或container_name>\n  ```\n\n- **自动重启容器**：\n  ```bash\n  docker run -d --restart=unless-stopped <image_name>\n  ```\n\n### 数据卷相关\n- **创建数据卷**：\n  ```bash\n  docker volume create <volume_name>\n  ```\n\n- **挂载数据卷**：\n  ```bash\n  docker run -v <volume_name>:<container_path> <image_name>\n  ```\n\n这些命令可以帮助你在大部分情况下轻松管理 Docker 环境。","slug":"docker镜像相关","published":1,"updated":"2024-11-25T11:44:04.543Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscp002tmbs63wa82969","content":"<p>Docker 的常用命令非常多，以下是一些常用的基础命令，帮助你管理 Docker 镜像、容器和网络等：</p>\n<h3 id=\"镜像相关\"><a href=\"#镜像相关\" class=\"headerlink\" title=\"镜像相关\"></a>镜像相关</h3><ul>\n<li><p><strong>拉取镜像</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;image_name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<p>示例：<code>docker pull nginx:latest</code></p>\n</li>\n<li><p><strong>列出本地镜像</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除镜像</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;image_id&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h3><ul>\n<li><p><strong>启动容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name &lt;container_name&gt; -p &lt;host_port&gt;:&lt;container_port&gt; &lt;image_name&gt;</span><br></pre></td></tr></table></figure>\n<p>示例：<code>docker run -d --name my-nginx -p 80:80 nginx</code></p>\n</li>\n<li><p><strong>停止容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>进入容器终端</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;container_id或container_name&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看容器日志</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><ul>\n<li><p><strong>查看网络</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建自定义网络</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create &lt;network_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>将容器连接到网络</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connect &lt;network_name&gt; &lt;container_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"容器状态管理\"><a href=\"#容器状态管理\" class=\"headerlink\" title=\"容器状态管理\"></a>容器状态管理</h3><ul>\n<li><p><strong>列出所有正在运行的容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>列出所有容器（包括已停止的）</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>启动已停止的容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>自动重启容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart=unless-stopped &lt;image_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数据卷相关\"><a href=\"#数据卷相关\" class=\"headerlink\" title=\"数据卷相关\"></a>数据卷相关</h3><ul>\n<li><p><strong>创建数据卷</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create &lt;volume_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>挂载数据卷</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v &lt;volume_name&gt;:&lt;container_path&gt; &lt;image_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这些命令可以帮助你在大部分情况下轻松管理 Docker 环境。</p>\n","excerpt":"","more":"<p>Docker 的常用命令非常多，以下是一些常用的基础命令，帮助你管理 Docker 镜像、容器和网络等：</p>\n<h3 id=\"镜像相关\"><a href=\"#镜像相关\" class=\"headerlink\" title=\"镜像相关\"></a>镜像相关</h3><ul>\n<li><p><strong>拉取镜像</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;image_name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<p>示例：<code>docker pull nginx:latest</code></p>\n</li>\n<li><p><strong>列出本地镜像</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除镜像</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;image_id&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h3><ul>\n<li><p><strong>启动容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name &lt;container_name&gt; -p &lt;host_port&gt;:&lt;container_port&gt; &lt;image_name&gt;</span><br></pre></td></tr></table></figure>\n<p>示例：<code>docker run -d --name my-nginx -p 80:80 nginx</code></p>\n</li>\n<li><p><strong>停止容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>进入容器终端</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;container_id或container_name&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看容器日志</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><ul>\n<li><p><strong>查看网络</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建自定义网络</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create &lt;network_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>将容器连接到网络</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connect &lt;network_name&gt; &lt;container_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"容器状态管理\"><a href=\"#容器状态管理\" class=\"headerlink\" title=\"容器状态管理\"></a>容器状态管理</h3><ul>\n<li><p><strong>列出所有正在运行的容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>列出所有容器（包括已停止的）</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>启动已停止的容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &lt;container_id或container_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>自动重启容器</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart=unless-stopped &lt;image_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数据卷相关\"><a href=\"#数据卷相关\" class=\"headerlink\" title=\"数据卷相关\"></a>数据卷相关</h3><ul>\n<li><p><strong>创建数据卷</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create &lt;volume_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>挂载数据卷</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v &lt;volume_name&gt;:&lt;container_path&gt; &lt;image_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这些命令可以帮助你在大部分情况下轻松管理 Docker 环境。</p>\n"},{"title":"CF-优选官方IP","date":"2024-11-24T10:37:56.766Z","_content":"### 脚本1：CF-优选官方IP (默认美、亚、欧三地区 强烈推荐！！！)，安卓苹果手机平板专用：\n\n\n\n```\ncurl -sSL https://ghp.ci/https://raw.githubusercontent.com/yonggekkk/Cloudflare_vless_trojan/main/cf/cf.sh -o cf.sh && chmod +x cf.sh && bash cf.sh\n```\n\n\n\n------\n\n### 脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\n\n\n\n```\ncurl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/CFcdnym.sh -o CFcdnym.sh && chmod +x CFcdnym.sh && bash CFcdnym.sh\n```\n\n\n\n------\n\n### 脚本3：CF-优选官方IP+反代IP二合一脚本（带测速），苹果安卓手机平板专用：\n\n\n\n```\ncurl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/cfip.sh -o cfip.sh && chmod +x cfip.sh && bash cfip.sh\n```","source":"_posts/CF-优选官方IP.md","raw":"---\ntitle: CF-优选官方IP\ndate: 2024-11-24T18:37:56.766Z\ntags: []\ncategories: []\n---\n### 脚本1：CF-优选官方IP (默认美、亚、欧三地区 强烈推荐！！！)，安卓苹果手机平板专用：\n\n\n\n```\ncurl -sSL https://ghp.ci/https://raw.githubusercontent.com/yonggekkk/Cloudflare_vless_trojan/main/cf/cf.sh -o cf.sh && chmod +x cf.sh && bash cf.sh\n```\n\n\n\n------\n\n### 脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\n\n\n\n```\ncurl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/CFcdnym.sh -o CFcdnym.sh && chmod +x CFcdnym.sh && bash CFcdnym.sh\n```\n\n\n\n------\n\n### 脚本3：CF-优选官方IP+反代IP二合一脚本（带测速），苹果安卓手机平板专用：\n\n\n\n```\ncurl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/cfip.sh -o cfip.sh && chmod +x cfip.sh && bash cfip.sh\n```","slug":"CF-优选官方IP","published":1,"updated":"2024-11-25T11:44:04.558Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscp002umbs6bknp59jg","content":"<h3 id=\"脚本1：CF-优选官方IP-默认美、亚、欧三地区-强烈推荐！！！-，安卓苹果手机平板专用：\"><a href=\"#脚本1：CF-优选官方IP-默认美、亚、欧三地区-强烈推荐！！！-，安卓苹果手机平板专用：\" class=\"headerlink\" title=\"脚本1：CF-优选官方IP (默认美、亚、欧三地区 强烈推荐！！！)，安卓苹果手机平板专用：\"></a>脚本1：CF-优选官方IP (默认美、亚、欧三地区 强烈推荐！！！)，安卓苹果手机平板专用：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://ghp.ci/https://raw.githubusercontent.com/yonggekkk/Cloudflare_vless_trojan/main/cf/cf.sh -o cf.sh &amp;&amp; chmod +x cf.sh &amp;&amp; bash cf.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\"><a href=\"#脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\" class=\"headerlink\" title=\"脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\"></a>脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/CFcdnym.sh -o CFcdnym.sh &amp;&amp; chmod +x CFcdnym.sh &amp;&amp; bash CFcdnym.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"脚本3：CF-优选官方IP-反代IP二合一脚本（带测速），苹果安卓手机平板专用：\"><a href=\"#脚本3：CF-优选官方IP-反代IP二合一脚本（带测速），苹果安卓手机平板专用：\" class=\"headerlink\" title=\"脚本3：CF-优选官方IP+反代IP二合一脚本（带测速），苹果安卓手机平板专用：\"></a>脚本3：CF-优选官方IP+反代IP二合一脚本（带测速），苹果安卓手机平板专用：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/cfip.sh -o cfip.sh &amp;&amp; chmod +x cfip.sh &amp;&amp; bash cfip.sh</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"脚本1：CF-优选官方IP-默认美、亚、欧三地区-强烈推荐！！！-，安卓苹果手机平板专用：\"><a href=\"#脚本1：CF-优选官方IP-默认美、亚、欧三地区-强烈推荐！！！-，安卓苹果手机平板专用：\" class=\"headerlink\" title=\"脚本1：CF-优选官方IP (默认美、亚、欧三地区 强烈推荐！！！)，安卓苹果手机平板专用：\"></a>脚本1：CF-优选官方IP (默认美、亚、欧三地区 强烈推荐！！！)，安卓苹果手机平板专用：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://ghp.ci/https://raw.githubusercontent.com/yonggekkk/Cloudflare_vless_trojan/main/cf/cf.sh -o cf.sh &amp;&amp; chmod +x cf.sh &amp;&amp; bash cf.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\"><a href=\"#脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\" class=\"headerlink\" title=\"脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：\"></a>脚本2：CF-CDN优选公共大厂域名脚本，苹果安卓手机平板专用：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/CFcdnym.sh -o CFcdnym.sh &amp;&amp; chmod +x CFcdnym.sh &amp;&amp; bash CFcdnym.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"脚本3：CF-优选官方IP-反代IP二合一脚本（带测速），苹果安卓手机平板专用：\"><a href=\"#脚本3：CF-优选官方IP-反代IP二合一脚本（带测速），苹果安卓手机平板专用：\" class=\"headerlink\" title=\"脚本3：CF-优选官方IP+反代IP二合一脚本（带测速），苹果安卓手机平板专用：\"></a>脚本3：CF-优选官方IP+反代IP二合一脚本（带测速），苹果安卓手机平板专用：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/cfip.sh -o cfip.sh &amp;&amp; chmod +x cfip.sh &amp;&amp; bash cfip.sh</span><br></pre></td></tr></table></figure>"},{"title":"docker挂载nginx失败解决","date":"2024-10-30T11:07:36.007Z","_content":"挂载`/etc/nginx`目录时出现错误，可能是由于以下原因之一：\n\n1. **配置文件路径问题**：Nginx 容器启动时需要读取默认配置文件（通常是`/etc/nginx/nginx.conf`）。如果你挂载的`/Users/ly/docker/11`目录中没有这个配置文件，Nginx 启动时会找不到配置文件而报错。\n\n2. **权限问题**：确保你挂载的主机目录`/Users/ly/docker/11`对容器是可读的。可以尝试给这个目录赋予足够权限，确保 Docker 能访问。\n\n### 解决方法\n\n1. **确保配置文件存在**：在 `Users/ly/docker/11` 目录下创建一个 `nginx.conf` 配置文件，例如可以从默认的 Nginx 配置文件复制内容过来。或者，可以用以下命令将 Nginx 默认的配置文件复制到该目录：\n   \n   ```bash\n   docker run --rm -v /Users/ly/docker/11:/backup nginx cp -r /etc/nginx /backup\n   ```\n\n2. **检查权限**：如果还是报错，检查主机目录的权限，执行：\n\n   ```bash\n   sudo chmod -R 755 /Users/ly/docker/11\n   ```\n\n完成后，重新运行你的命令应该可以启动成功。\n\n\n\n这条命令的解释如下：\n\n- `docker run --rm`：启动一个临时容器，并在容器退出后自动删除容器。\n- `-v /Users/ly/docker/11:/backup`：将主机目录 `/Users/ly/docker/11` 挂载到容器的 `/backup` 路径下，使得容器内的内容可以保存到主机目录中。\n- `nginx`：指定使用的镜像为 Nginx。\n- `cp -r /etc/nginx /backup`：在容器内部执行复制命令，将 `/etc/nginx` 目录递归复制到 `/backup`，这实际上指向主机的 `/Users/ly/docker/11`。","source":"_posts/docker挂载nginx失败解决.md","raw":"---\ntitle: docker挂载nginx失败解决\ndate: 2024-10-30T19:07:36.007Z\ntags: []\ncategories: []\n---\n挂载`/etc/nginx`目录时出现错误，可能是由于以下原因之一：\n\n1. **配置文件路径问题**：Nginx 容器启动时需要读取默认配置文件（通常是`/etc/nginx/nginx.conf`）。如果你挂载的`/Users/ly/docker/11`目录中没有这个配置文件，Nginx 启动时会找不到配置文件而报错。\n\n2. **权限问题**：确保你挂载的主机目录`/Users/ly/docker/11`对容器是可读的。可以尝试给这个目录赋予足够权限，确保 Docker 能访问。\n\n### 解决方法\n\n1. **确保配置文件存在**：在 `Users/ly/docker/11` 目录下创建一个 `nginx.conf` 配置文件，例如可以从默认的 Nginx 配置文件复制内容过来。或者，可以用以下命令将 Nginx 默认的配置文件复制到该目录：\n   \n   ```bash\n   docker run --rm -v /Users/ly/docker/11:/backup nginx cp -r /etc/nginx /backup\n   ```\n\n2. **检查权限**：如果还是报错，检查主机目录的权限，执行：\n\n   ```bash\n   sudo chmod -R 755 /Users/ly/docker/11\n   ```\n\n完成后，重新运行你的命令应该可以启动成功。\n\n\n\n这条命令的解释如下：\n\n- `docker run --rm`：启动一个临时容器，并在容器退出后自动删除容器。\n- `-v /Users/ly/docker/11:/backup`：将主机目录 `/Users/ly/docker/11` 挂载到容器的 `/backup` 路径下，使得容器内的内容可以保存到主机目录中。\n- `nginx`：指定使用的镜像为 Nginx。\n- `cp -r /etc/nginx /backup`：在容器内部执行复制命令，将 `/etc/nginx` 目录递归复制到 `/backup`，这实际上指向主机的 `/Users/ly/docker/11`。","slug":"docker挂载nginx失败解决","published":1,"updated":"2024-11-25T11:44:04.553Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscp002vmbs613k22ayi","content":"<p>挂载<code>/etc/nginx</code>目录时出现错误，可能是由于以下原因之一：</p>\n<ol>\n<li><p><strong>配置文件路径问题</strong>：Nginx 容器启动时需要读取默认配置文件（通常是<code>/etc/nginx/nginx.conf</code>）。如果你挂载的<code>/Users/ly/docker/11</code>目录中没有这个配置文件，Nginx 启动时会找不到配置文件而报错。</p>\n</li>\n<li><p><strong>权限问题</strong>：确保你挂载的主机目录<code>/Users/ly/docker/11</code>对容器是可读的。可以尝试给这个目录赋予足够权限，确保 Docker 能访问。</p>\n</li>\n</ol>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ol>\n<li><p><strong>确保配置文件存在</strong>：在 <code>Users/ly/docker/11</code> 目录下创建一个 <code>nginx.conf</code> 配置文件，例如可以从默认的 Nginx 配置文件复制内容过来。或者，可以用以下命令将 Nginx 默认的配置文件复制到该目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -v /Users/ly/docker/11:/backup nginx <span class=\"built_in\">cp</span> -r /etc/nginx /backup</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查权限</strong>：如果还是报错，检查主机目录的权限，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R 755 /Users/ly/docker/11</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>完成后，重新运行你的命令应该可以启动成功。</p>\n<p>这条命令的解释如下：</p>\n<ul>\n<li><code>docker run --rm</code>：启动一个临时容器，并在容器退出后自动删除容器。</li>\n<li><code>-v /Users/ly/docker/11:/backup</code>：将主机目录 <code>/Users/ly/docker/11</code> 挂载到容器的 <code>/backup</code> 路径下，使得容器内的内容可以保存到主机目录中。</li>\n<li><code>nginx</code>：指定使用的镜像为 Nginx。</li>\n<li><code>cp -r /etc/nginx /backup</code>：在容器内部执行复制命令，将 <code>/etc/nginx</code> 目录递归复制到 <code>/backup</code>，这实际上指向主机的 <code>/Users/ly/docker/11</code>。</li>\n</ul>\n","excerpt":"","more":"<p>挂载<code>/etc/nginx</code>目录时出现错误，可能是由于以下原因之一：</p>\n<ol>\n<li><p><strong>配置文件路径问题</strong>：Nginx 容器启动时需要读取默认配置文件（通常是<code>/etc/nginx/nginx.conf</code>）。如果你挂载的<code>/Users/ly/docker/11</code>目录中没有这个配置文件，Nginx 启动时会找不到配置文件而报错。</p>\n</li>\n<li><p><strong>权限问题</strong>：确保你挂载的主机目录<code>/Users/ly/docker/11</code>对容器是可读的。可以尝试给这个目录赋予足够权限，确保 Docker 能访问。</p>\n</li>\n</ol>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ol>\n<li><p><strong>确保配置文件存在</strong>：在 <code>Users/ly/docker/11</code> 目录下创建一个 <code>nginx.conf</code> 配置文件，例如可以从默认的 Nginx 配置文件复制内容过来。或者，可以用以下命令将 Nginx 默认的配置文件复制到该目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -v /Users/ly/docker/11:/backup nginx <span class=\"built_in\">cp</span> -r /etc/nginx /backup</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查权限</strong>：如果还是报错，检查主机目录的权限，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R 755 /Users/ly/docker/11</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>完成后，重新运行你的命令应该可以启动成功。</p>\n<p>这条命令的解释如下：</p>\n<ul>\n<li><code>docker run --rm</code>：启动一个临时容器，并在容器退出后自动删除容器。</li>\n<li><code>-v /Users/ly/docker/11:/backup</code>：将主机目录 <code>/Users/ly/docker/11</code> 挂载到容器的 <code>/backup</code> 路径下，使得容器内的内容可以保存到主机目录中。</li>\n<li><code>nginx</code>：指定使用的镜像为 Nginx。</li>\n<li><code>cp -r /etc/nginx /backup</code>：在容器内部执行复制命令，将 <code>/etc/nginx</code> 目录递归复制到 <code>/backup</code>，这实际上指向主机的 <code>/Users/ly/docker/11</code>。</li>\n</ul>\n"},{"title":"Axios","date":"2024-09-06T11:27:49.211Z","_content":"Axios 是一个基于 Promise 的 HTTP 客户端，能够在浏览器和 Node.js 中发起 HTTP 请求。它简化了与服务器的通信，支持各种请求方法（如 GET、POST、PUT 等）以及处理请求和响应的相关操作。下面是关于 Axios 的详细学习指南。\n\n### 1. **安装 Axios**\n\n在使用 Axios 之前，你需要在项目中安装它。\n\n#### 在浏览器中：\n可以通过直接在 HTML 文件中引入 CDN 链接来使用 Axios。\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n#### 在 Node.js 中：\n通过 `npm` 或 `yarn` 安装 Axios。\n\n```bash\nnpm install axios\n# or\nyarn add axios\n```\n\n### 2. **基本使用方法**\n\n#### 2.1 发起 GET 请求\n\nGET 请求通常用于从服务器获取数据。下面是一个 GET 请求的示例。\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    console.log(response.data); // 成功响应的数据\n  })\n  .catch(error => {\n    console.error(error); // 错误处理\n  });\n```\n\n#### 2.2 发起 POST 请求\n\nPOST 请求用于向服务器发送数据，例如向 API 提交表单数据。\n\n```javascript\naxios.post('https://jsonplaceholder.typicode.com/posts', {\n    title: 'foo',\n    body: 'bar',\n    userId: 1\n  })\n  .then(response => {\n    console.log(response.data); // 成功响应的数据\n  })\n  .catch(error => {\n    console.error(error); // 错误处理\n  });\n```\n\n#### 2.3 使用 async/await\nAxios 是 Promise 驱动的，所以可以使用 `async/await` 语法来简化代码。\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\n    console.log(response.data); // 成功响应的数据\n  } catch (error) {\n    console.error(error); // 错误处理\n  }\n}\nfetchData();\n```\n\n### 3. **常见请求方法**\n\n- `axios.get(url, config)`: 发起 GET 请求。\n- `axios.post(url, data, config)`: 发起 POST 请求。\n- `axios.put(url, data, config)`: 发起 PUT 请求。\n- `axios.delete(url, config)`: 发起 DELETE 请求。\n\n每种方法都会返回一个 Promise，可以通过 `then` 和 `catch` 处理响应和错误。\n\n### 4. **配置请求（Config）**\n\n你可以通过 `config` 对象来自定义请求，常见的配置选项有：\n\n- `url`: 请求地址。\n- `method`: 请求方法（如 `GET`、`POST`）。\n- `headers`: 设置 HTTP 请求头。\n- `params`: 设置 URL 查询参数。\n- `data`: 发送到服务器的数据（适用于 `POST`、`PUT` 等方法）。\n- `timeout`: 请求超时时间。\n\n#### 示例：自定义请求配置\n\n```javascript\naxios({\n  method: 'get',\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  params: {\n    userId: 1\n  },\n  headers: {\n    'Authorization': 'Bearer token'\n  },\n  timeout: 1000 // 请求超时时间（单位：毫秒）\n})\n.then(response => {\n  console.log(response.data);\n})\n.catch(error => {\n  console.error('Error fetching data:', error);\n});\n```\n\n### 5. **处理响应**\n\n响应数据包含很多有用的信息：\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    console.log(response.data); // 实际的响应数据\n    console.log(response.status); // HTTP 状态码\n    console.log(response.headers); // 响应头\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### 6. **处理错误**\n\nAxios 提供了多种方式来处理错误，可以捕获 HTTP 错误、网络错误、超时等。\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/invalid-url')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (error.response) {\n      // 请求已发送，但服务器返回了状态码非2xx\n      console.log('Error response:', error.response.data);\n      console.log('Error status:', error.response.status);\n    } else if (error.request) {\n      // 请求已发出，但没有收到响应\n      console.log('Error request:', error.request);\n    } else {\n      // 其他错误\n      console.log('Error message:', error.message);\n    }\n  });\n```\n\n### 7. **请求和响应拦截器**\n\nAxios 提供了拦截器功能，允许在请求或响应发送之前对它们进行处理。这对于处理全局错误、自动添加身份验证令牌等非常有用。\n\n#### 请求拦截器：\n\n```javascript\naxios.interceptors.request.use(config => {\n  // 在发送请求之前可以做一些处理，比如添加 token\n  config.headers.Authorization = 'Bearer token';\n  return config;\n}, error => {\n  // 处理请求错误\n  return Promise.reject(error);\n});\n```\n\n#### 响应拦截器：\n\n```javascript\naxios.interceptors.response.use(response => {\n  // 处理响应数据\n  return response;\n}, error => {\n  // 处理响应错误\n  return Promise.reject(error);\n});\n```\n\n### 8. **取消请求**\n\n使用 `CancelToken` 可以取消请求，适用于取消重复请求或当用户离开页面时取消挂起的请求。\n\n```javascript\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('https://jsonplaceholder.typicode.com/posts', {\n  cancelToken: new CancelToken(function executor(c) {\n    cancel = c; // 保存取消函数\n  })\n})\n.catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // 处理错误\n  }\n});\n\n// 随时调用取消请求\ncancel('Operation canceled by the user.');\n```\n\n### 9. **Axios 实例**\n\n你可以创建 Axios 实例来配置多个请求的通用设置（如 base URL、headers 等）。\n\n```javascript\nconst apiClient = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n\napiClient.get('/posts/1').then(response => {\n  console.log(response.data);\n});\n```\n\n### 10. **并发请求**\n\n可以使用 `axios.all` 和 `axios.spread` 来处理并发请求。\n\n```javascript\naxios.all([\n  axios.get('https://jsonplaceholder.typicode.com/posts/1'),\n  axios.get('https://jsonplaceholder.typicode.com/posts/2')\n])\n.then(axios.spread((response1, response2) => {\n  console.log(response1.data);\n  console.log(response2.data);\n}));\n```\n\n### 总结\n- **基础**：熟悉基本的请求方法（GET、POST、PUT、DELETE）。\n- **配置**：利用 `config` 自定义请求，包括设置 headers、params 等。\n- **拦截器**：通过请求和响应拦截器实现全局的处理，比如身份验证、错误处理等。\n- **取消请求**：学会使用 `CancelToken` 取消不必要的请求。\n- **并发请求**：通过 `axios.all` 处理多个并发请求。\n\n通过学习这些内容，你就可以灵活运用 Axios 发起 HTTP 请求了！\n\n\n\n\n\n## 问：async/await有什么用\n\n`async/await` 是 ES2017 (ES8) 引入的 JavaScript 语法，用于处理异步操作，提供了更简单、更可读的方式来处理 Promises。相比于传统的 `.then()` 和 `.catch()` 链式处理，`async/await` 使异步代码的编写更加像同步代码，提高了代码的可读性和维护性。\n\n### 1. **基本概念**\n\n- **`async`**：用于定义一个异步函数，返回一个 Promise。异步函数允许在其中使用 `await` 关键字。\n- **`await`**：只能在 `async` 函数中使用，等待一个 Promise 完成，并暂停函数执行，直到 Promise 解决（resolve）或拒绝（reject）。\n\n### 2. **使用示例**\n\n#### 2.1 用法示例\n\n```javascript\n// 定义异步函数\nasync function fetchData() {\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\n    console.log(response.data); // 在 Promise resolve 后输出结果\n  } catch (error) {\n    console.error('Error fetching data:', error); // 捕获错误\n  }\n}\n\n// 调用异步函数\nfetchData();\n```\n\n**解释**：\n- `async function fetchData()`：定义一个异步函数 `fetchData`。\n- `await axios.get(...)`：等待 `axios.get()` 返回的 Promise 解析后，将结果赋值给 `response`，然后继续执行后面的代码。\n- `try...catch`：用于处理可能的错误，代替 `.catch()`。\n\n#### 2.2 与 Promise 的对比\n\n使用 `Promise` 和 `.then()` 方法处理异步请求：\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error('Error fetching data:', error);\n  });\n```\n\n使用 `async/await` 处理相同的请求：\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n**区别**：\n- `async/await` 代码看起来更像同步代码，更加直观易读。\n- `then/catch` 使用链式调用，可能会导致 \"回调地狱\" 或让代码难以理解。\n\n### 3. **优势**\n\n#### 3.1 简化代码结构\n\n在不使用 `async/await` 的情况下，代码中常常需要嵌套多个 `.then()` 来处理多个异步操作：\n\n```javascript\naxios.get('/user')\n  .then(response => {\n    return axios.get(`/user/${response.data.id}/posts`);\n  })\n  .then(postsResponse => {\n    console.log(postsResponse.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n使用 `async/await`，代码变得更加平直和直观：\n\n```javascript\nasync function getUserPosts() {\n  try {\n    const userResponse = await axios.get('/user');\n    const postsResponse = await axios.get(`/user/${userResponse.data.id}/posts`);\n    console.log(postsResponse.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n#### 3.2 错误处理更方便\n\n使用 `async/await` 可以在一个 `try...catch` 块中捕获所有可能的错误，而不需要为每个 `.then()` 调用单独处理错误：\n\n```javascript\nasync function getData() {\n  try {\n    const response1 = await axios.get('/data1');\n    const response2 = await axios.get('/data2');\n    console.log(response1, response2);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n在 `then/catch` 中，你可能需要为每个异步请求分别处理错误，导致代码重复。\n\n### 4. **处理并发请求**\n\n当你需要同时执行多个异步操作时，`async/await` 和 `Promise.all` 搭配使用，可以处理并发请求：\n\n```javascript\nasync function fetchMultipleData() {\n  try {\n    const [response1, response2] = await Promise.all([\n      axios.get('https://jsonplaceholder.typicode.com/posts/1'),\n      axios.get('https://jsonplaceholder.typicode.com/posts/2')\n    ]);\n    console.log(response1.data, response2.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n**解释**：\n- `Promise.all` 接受一个数组，数组中的所有 Promise 都会并发执行，只有当所有 Promise 解决（resolve）后，才会继续执行 `await` 之后的代码。\n- 这比逐个 `await` 执行请求更高效。\n\n### 5. **注意事项**\n\n#### 5.1 `await` 只能在 `async` 函数中使用\n如果在非 `async` 函数中使用 `await`，会导致语法错误。\n\n```javascript\nfunction fetchData() {\n  const data = await axios.get('/some-url'); // 会报错\n}\n```\n\n解决方法是将函数标记为 `async`：\n\n```javascript\nasync function fetchData() {\n  const data = await axios.get('/some-url'); // 正确使用\n}\n```\n\n#### 5.2 阻塞代码执行\n虽然 `async/await` 看起来像同步代码，但它本质上还是异步的。`await` 会暂停函数的执行，直到 Promise 被解决（resolved），这意味着如果一个异步操作耗时较长，它会阻塞后续代码的执行。因此，使用时要注意避免长时间阻塞。\n\n```javascript\nasync function slowOperation() {\n  await new Promise(resolve => setTimeout(resolve, 3000)); // 阻塞3秒\n  console.log('Operation complete!');\n}\n\nslowOperation();\nconsole.log('This will be logged after 3 seconds'); // 3秒后才执行\n```\n\n#### 5.3 错误处理\n尽量使用 `try...catch` 来捕获 `await` 操作中可能发生的错误。如果没有捕获，错误可能会被静默忽略，导致调试困难。\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await axios.get('/non-existent-url');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n### 总结\n- **简洁性**：`async/await` 使异步代码更加简洁直观，接近同步代码的结构，避免回调地狱。\n- **错误处理**：可以使用 `try...catch` 统一处理异步操作中的错误。\n- **性能**：与 `Promise.all` 结合，可以并发执行多个异步任务，提升性能。\n\n通过 `async/await`，你可以更加清晰地组织异步代码，并提高代码的可维护性和可读性。","source":"_posts/Axios.md","raw":"---\ntitle: Axios\ndate: 2024-09-06T19:27:49.211Z\ntags: []\ncategories: []\n---\nAxios 是一个基于 Promise 的 HTTP 客户端，能够在浏览器和 Node.js 中发起 HTTP 请求。它简化了与服务器的通信，支持各种请求方法（如 GET、POST、PUT 等）以及处理请求和响应的相关操作。下面是关于 Axios 的详细学习指南。\n\n### 1. **安装 Axios**\n\n在使用 Axios 之前，你需要在项目中安装它。\n\n#### 在浏览器中：\n可以通过直接在 HTML 文件中引入 CDN 链接来使用 Axios。\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n#### 在 Node.js 中：\n通过 `npm` 或 `yarn` 安装 Axios。\n\n```bash\nnpm install axios\n# or\nyarn add axios\n```\n\n### 2. **基本使用方法**\n\n#### 2.1 发起 GET 请求\n\nGET 请求通常用于从服务器获取数据。下面是一个 GET 请求的示例。\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    console.log(response.data); // 成功响应的数据\n  })\n  .catch(error => {\n    console.error(error); // 错误处理\n  });\n```\n\n#### 2.2 发起 POST 请求\n\nPOST 请求用于向服务器发送数据，例如向 API 提交表单数据。\n\n```javascript\naxios.post('https://jsonplaceholder.typicode.com/posts', {\n    title: 'foo',\n    body: 'bar',\n    userId: 1\n  })\n  .then(response => {\n    console.log(response.data); // 成功响应的数据\n  })\n  .catch(error => {\n    console.error(error); // 错误处理\n  });\n```\n\n#### 2.3 使用 async/await\nAxios 是 Promise 驱动的，所以可以使用 `async/await` 语法来简化代码。\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\n    console.log(response.data); // 成功响应的数据\n  } catch (error) {\n    console.error(error); // 错误处理\n  }\n}\nfetchData();\n```\n\n### 3. **常见请求方法**\n\n- `axios.get(url, config)`: 发起 GET 请求。\n- `axios.post(url, data, config)`: 发起 POST 请求。\n- `axios.put(url, data, config)`: 发起 PUT 请求。\n- `axios.delete(url, config)`: 发起 DELETE 请求。\n\n每种方法都会返回一个 Promise，可以通过 `then` 和 `catch` 处理响应和错误。\n\n### 4. **配置请求（Config）**\n\n你可以通过 `config` 对象来自定义请求，常见的配置选项有：\n\n- `url`: 请求地址。\n- `method`: 请求方法（如 `GET`、`POST`）。\n- `headers`: 设置 HTTP 请求头。\n- `params`: 设置 URL 查询参数。\n- `data`: 发送到服务器的数据（适用于 `POST`、`PUT` 等方法）。\n- `timeout`: 请求超时时间。\n\n#### 示例：自定义请求配置\n\n```javascript\naxios({\n  method: 'get',\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  params: {\n    userId: 1\n  },\n  headers: {\n    'Authorization': 'Bearer token'\n  },\n  timeout: 1000 // 请求超时时间（单位：毫秒）\n})\n.then(response => {\n  console.log(response.data);\n})\n.catch(error => {\n  console.error('Error fetching data:', error);\n});\n```\n\n### 5. **处理响应**\n\n响应数据包含很多有用的信息：\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    console.log(response.data); // 实际的响应数据\n    console.log(response.status); // HTTP 状态码\n    console.log(response.headers); // 响应头\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### 6. **处理错误**\n\nAxios 提供了多种方式来处理错误，可以捕获 HTTP 错误、网络错误、超时等。\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/invalid-url')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (error.response) {\n      // 请求已发送，但服务器返回了状态码非2xx\n      console.log('Error response:', error.response.data);\n      console.log('Error status:', error.response.status);\n    } else if (error.request) {\n      // 请求已发出，但没有收到响应\n      console.log('Error request:', error.request);\n    } else {\n      // 其他错误\n      console.log('Error message:', error.message);\n    }\n  });\n```\n\n### 7. **请求和响应拦截器**\n\nAxios 提供了拦截器功能，允许在请求或响应发送之前对它们进行处理。这对于处理全局错误、自动添加身份验证令牌等非常有用。\n\n#### 请求拦截器：\n\n```javascript\naxios.interceptors.request.use(config => {\n  // 在发送请求之前可以做一些处理，比如添加 token\n  config.headers.Authorization = 'Bearer token';\n  return config;\n}, error => {\n  // 处理请求错误\n  return Promise.reject(error);\n});\n```\n\n#### 响应拦截器：\n\n```javascript\naxios.interceptors.response.use(response => {\n  // 处理响应数据\n  return response;\n}, error => {\n  // 处理响应错误\n  return Promise.reject(error);\n});\n```\n\n### 8. **取消请求**\n\n使用 `CancelToken` 可以取消请求，适用于取消重复请求或当用户离开页面时取消挂起的请求。\n\n```javascript\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('https://jsonplaceholder.typicode.com/posts', {\n  cancelToken: new CancelToken(function executor(c) {\n    cancel = c; // 保存取消函数\n  })\n})\n.catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // 处理错误\n  }\n});\n\n// 随时调用取消请求\ncancel('Operation canceled by the user.');\n```\n\n### 9. **Axios 实例**\n\n你可以创建 Axios 实例来配置多个请求的通用设置（如 base URL、headers 等）。\n\n```javascript\nconst apiClient = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n\napiClient.get('/posts/1').then(response => {\n  console.log(response.data);\n});\n```\n\n### 10. **并发请求**\n\n可以使用 `axios.all` 和 `axios.spread` 来处理并发请求。\n\n```javascript\naxios.all([\n  axios.get('https://jsonplaceholder.typicode.com/posts/1'),\n  axios.get('https://jsonplaceholder.typicode.com/posts/2')\n])\n.then(axios.spread((response1, response2) => {\n  console.log(response1.data);\n  console.log(response2.data);\n}));\n```\n\n### 总结\n- **基础**：熟悉基本的请求方法（GET、POST、PUT、DELETE）。\n- **配置**：利用 `config` 自定义请求，包括设置 headers、params 等。\n- **拦截器**：通过请求和响应拦截器实现全局的处理，比如身份验证、错误处理等。\n- **取消请求**：学会使用 `CancelToken` 取消不必要的请求。\n- **并发请求**：通过 `axios.all` 处理多个并发请求。\n\n通过学习这些内容，你就可以灵活运用 Axios 发起 HTTP 请求了！\n\n\n\n\n\n## 问：async/await有什么用\n\n`async/await` 是 ES2017 (ES8) 引入的 JavaScript 语法，用于处理异步操作，提供了更简单、更可读的方式来处理 Promises。相比于传统的 `.then()` 和 `.catch()` 链式处理，`async/await` 使异步代码的编写更加像同步代码，提高了代码的可读性和维护性。\n\n### 1. **基本概念**\n\n- **`async`**：用于定义一个异步函数，返回一个 Promise。异步函数允许在其中使用 `await` 关键字。\n- **`await`**：只能在 `async` 函数中使用，等待一个 Promise 完成，并暂停函数执行，直到 Promise 解决（resolve）或拒绝（reject）。\n\n### 2. **使用示例**\n\n#### 2.1 用法示例\n\n```javascript\n// 定义异步函数\nasync function fetchData() {\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\n    console.log(response.data); // 在 Promise resolve 后输出结果\n  } catch (error) {\n    console.error('Error fetching data:', error); // 捕获错误\n  }\n}\n\n// 调用异步函数\nfetchData();\n```\n\n**解释**：\n- `async function fetchData()`：定义一个异步函数 `fetchData`。\n- `await axios.get(...)`：等待 `axios.get()` 返回的 Promise 解析后，将结果赋值给 `response`，然后继续执行后面的代码。\n- `try...catch`：用于处理可能的错误，代替 `.catch()`。\n\n#### 2.2 与 Promise 的对比\n\n使用 `Promise` 和 `.then()` 方法处理异步请求：\n\n```javascript\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error('Error fetching data:', error);\n  });\n```\n\n使用 `async/await` 处理相同的请求：\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n**区别**：\n- `async/await` 代码看起来更像同步代码，更加直观易读。\n- `then/catch` 使用链式调用，可能会导致 \"回调地狱\" 或让代码难以理解。\n\n### 3. **优势**\n\n#### 3.1 简化代码结构\n\n在不使用 `async/await` 的情况下，代码中常常需要嵌套多个 `.then()` 来处理多个异步操作：\n\n```javascript\naxios.get('/user')\n  .then(response => {\n    return axios.get(`/user/${response.data.id}/posts`);\n  })\n  .then(postsResponse => {\n    console.log(postsResponse.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n使用 `async/await`，代码变得更加平直和直观：\n\n```javascript\nasync function getUserPosts() {\n  try {\n    const userResponse = await axios.get('/user');\n    const postsResponse = await axios.get(`/user/${userResponse.data.id}/posts`);\n    console.log(postsResponse.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n#### 3.2 错误处理更方便\n\n使用 `async/await` 可以在一个 `try...catch` 块中捕获所有可能的错误，而不需要为每个 `.then()` 调用单独处理错误：\n\n```javascript\nasync function getData() {\n  try {\n    const response1 = await axios.get('/data1');\n    const response2 = await axios.get('/data2');\n    console.log(response1, response2);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n在 `then/catch` 中，你可能需要为每个异步请求分别处理错误，导致代码重复。\n\n### 4. **处理并发请求**\n\n当你需要同时执行多个异步操作时，`async/await` 和 `Promise.all` 搭配使用，可以处理并发请求：\n\n```javascript\nasync function fetchMultipleData() {\n  try {\n    const [response1, response2] = await Promise.all([\n      axios.get('https://jsonplaceholder.typicode.com/posts/1'),\n      axios.get('https://jsonplaceholder.typicode.com/posts/2')\n    ]);\n    console.log(response1.data, response2.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n**解释**：\n- `Promise.all` 接受一个数组，数组中的所有 Promise 都会并发执行，只有当所有 Promise 解决（resolve）后，才会继续执行 `await` 之后的代码。\n- 这比逐个 `await` 执行请求更高效。\n\n### 5. **注意事项**\n\n#### 5.1 `await` 只能在 `async` 函数中使用\n如果在非 `async` 函数中使用 `await`，会导致语法错误。\n\n```javascript\nfunction fetchData() {\n  const data = await axios.get('/some-url'); // 会报错\n}\n```\n\n解决方法是将函数标记为 `async`：\n\n```javascript\nasync function fetchData() {\n  const data = await axios.get('/some-url'); // 正确使用\n}\n```\n\n#### 5.2 阻塞代码执行\n虽然 `async/await` 看起来像同步代码，但它本质上还是异步的。`await` 会暂停函数的执行，直到 Promise 被解决（resolved），这意味着如果一个异步操作耗时较长，它会阻塞后续代码的执行。因此，使用时要注意避免长时间阻塞。\n\n```javascript\nasync function slowOperation() {\n  await new Promise(resolve => setTimeout(resolve, 3000)); // 阻塞3秒\n  console.log('Operation complete!');\n}\n\nslowOperation();\nconsole.log('This will be logged after 3 seconds'); // 3秒后才执行\n```\n\n#### 5.3 错误处理\n尽量使用 `try...catch` 来捕获 `await` 操作中可能发生的错误。如果没有捕获，错误可能会被静默忽略，导致调试困难。\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await axios.get('/non-existent-url');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n```\n\n### 总结\n- **简洁性**：`async/await` 使异步代码更加简洁直观，接近同步代码的结构，避免回调地狱。\n- **错误处理**：可以使用 `try...catch` 统一处理异步操作中的错误。\n- **性能**：与 `Promise.all` 结合，可以并发执行多个异步任务，提升性能。\n\n通过 `async/await`，你可以更加清晰地组织异步代码，并提高代码的可维护性和可读性。","slug":"Axios","published":1,"updated":"2024-11-25T11:44:04.568Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscp002wmbs60a453bbb","content":"<p>Axios 是一个基于 Promise 的 HTTP 客户端，能够在浏览器和 Node.js 中发起 HTTP 请求。它简化了与服务器的通信，支持各种请求方法（如 GET、POST、PUT 等）以及处理请求和响应的相关操作。下面是关于 Axios 的详细学习指南。</p>\n<h3 id=\"1-安装-Axios\"><a href=\"#1-安装-Axios\" class=\"headerlink\" title=\"1. 安装 Axios\"></a>1. <strong>安装 Axios</strong></h3><p>在使用 Axios 之前，你需要在项目中安装它。</p>\n<h4 id=\"在浏览器中：\"><a href=\"#在浏览器中：\" class=\"headerlink\" title=\"在浏览器中：\"></a>在浏览器中：</h4><p>可以通过直接在 HTML 文件中引入 CDN 链接来使用 Axios。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Node-js-中：\"><a href=\"#在-Node-js-中：\" class=\"headerlink\" title=\"在 Node.js 中：\"></a>在 Node.js 中：</h4><p>通过 <code>npm</code> 或 <code>yarn</code> 安装 Axios。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">yarn add axios</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-基本使用方法\"><a href=\"#2-基本使用方法\" class=\"headerlink\" title=\"2. 基本使用方法\"></a>2. <strong>基本使用方法</strong></h3><h4 id=\"2-1-发起-GET-请求\"><a href=\"#2-1-发起-GET-请求\" class=\"headerlink\" title=\"2.1 发起 GET 请求\"></a>2.1 发起 GET 请求</h4><p>GET 请求通常用于从服务器获取数据。下面是一个 GET 请求的示例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 成功响应的数据</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-发起-POST-请求\"><a href=\"#2-2-发起-POST-请求\" class=\"headerlink\" title=\"2.2 发起 POST 请求\"></a>2.2 发起 POST 请求</h4><p>POST 请求用于向服务器发送数据，例如向 API 提交表单数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 成功响应的数据</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-使用-async-await\"><a href=\"#2-3-使用-async-await\" class=\"headerlink\" title=\"2.3 使用 async&#x2F;await\"></a>2.3 使用 async&#x2F;await</h4><p>Axios 是 Promise 驱动的，所以可以使用 <code>async/await</code> 语法来简化代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 成功响应的数据</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-常见请求方法\"><a href=\"#3-常见请求方法\" class=\"headerlink\" title=\"3. 常见请求方法\"></a>3. <strong>常见请求方法</strong></h3><ul>\n<li><code>axios.get(url, config)</code>: 发起 GET 请求。</li>\n<li><code>axios.post(url, data, config)</code>: 发起 POST 请求。</li>\n<li><code>axios.put(url, data, config)</code>: 发起 PUT 请求。</li>\n<li><code>axios.delete(url, config)</code>: 发起 DELETE 请求。</li>\n</ul>\n<p>每种方法都会返回一个 Promise，可以通过 <code>then</code> 和 <code>catch</code> 处理响应和错误。</p>\n<h3 id=\"4-配置请求（Config）\"><a href=\"#4-配置请求（Config）\" class=\"headerlink\" title=\"4. 配置请求（Config）\"></a>4. <strong>配置请求（Config）</strong></h3><p>你可以通过 <code>config</code> 对象来自定义请求，常见的配置选项有：</p>\n<ul>\n<li><code>url</code>: 请求地址。</li>\n<li><code>method</code>: 请求方法（如 <code>GET</code>、<code>POST</code>）。</li>\n<li><code>headers</code>: 设置 HTTP 请求头。</li>\n<li><code>params</code>: 设置 URL 查询参数。</li>\n<li><code>data</code>: 发送到服务器的数据（适用于 <code>POST</code>、<code>PUT</code> 等方法）。</li>\n<li><code>timeout</code>: 请求超时时间。</li>\n</ul>\n<h4 id=\"示例：自定义请求配置\"><a href=\"#示例：自定义请求配置\" class=\"headerlink\" title=\"示例：自定义请求配置\"></a>示例：自定义请求配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer token&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span> <span class=\"comment\">// 请求超时时间（单位：毫秒）</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-处理响应\"><a href=\"#5-处理响应\" class=\"headerlink\" title=\"5. 处理响应\"></a>5. <strong>处理响应</strong></h3><p>响应数据包含很多有用的信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 实际的响应数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">status</span>); <span class=\"comment\">// HTTP 状态码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">headers</span>); <span class=\"comment\">// 响应头</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-处理错误\"><a href=\"#6-处理错误\" class=\"headerlink\" title=\"6. 处理错误\"></a>6. <strong>处理错误</strong></h3><p>Axios 提供了多种方式来处理错误，可以捕获 HTTP 错误、网络错误、超时等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/invalid-url&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.<span class=\"property\">response</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发送，但服务器返回了状态码非2xx</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error response:&#x27;</span>, error.<span class=\"property\">response</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error status:&#x27;</span>, error.<span class=\"property\">response</span>.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error.<span class=\"property\">request</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但没有收到响应</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error request:&#x27;</span>, error.<span class=\"property\">request</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 其他错误</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error message:&#x27;</span>, error.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-请求和响应拦截器\"><a href=\"#7-请求和响应拦截器\" class=\"headerlink\" title=\"7. 请求和响应拦截器\"></a>7. <strong>请求和响应拦截器</strong></h3><p>Axios 提供了拦截器功能，允许在请求或响应发送之前对它们进行处理。这对于处理全局错误、自动添加身份验证令牌等非常有用。</p>\n<h4 id=\"请求拦截器：\"><a href=\"#请求拦截器：\" class=\"headerlink\" title=\"请求拦截器：\"></a>请求拦截器：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在发送请求之前可以做一些处理，比如添加 token</span></span><br><span class=\"line\">  config.<span class=\"property\">headers</span>.<span class=\"property\">Authorization</span> = <span class=\"string\">&#x27;Bearer token&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理请求错误</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"响应拦截器：\"><a href=\"#响应拦截器：\" class=\"headerlink\" title=\"响应拦截器：\"></a>响应拦截器：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理响应数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理响应错误</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-取消请求\"><a href=\"#8-取消请求\" class=\"headerlink\" title=\"8. 取消请求\"></a>8. <strong>取消请求</strong></h3><p>使用 <code>CancelToken</code> 可以取消请求，适用于取消重复请求或当用户离开页面时取消挂起的请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CancelToken</span> = axios.<span class=\"property\">CancelToken</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancel;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">cancelToken</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">CancelToken</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">executor</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">    cancel = c; <span class=\"comment\">// 保存取消函数</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">thrown</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (axios.<span class=\"title function_\">isCancel</span>(thrown)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request canceled&#x27;</span>, thrown.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随时调用取消请求</span></span><br><span class=\"line\"><span class=\"title function_\">cancel</span>(<span class=\"string\">&#x27;Operation canceled by the user.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-Axios-实例\"><a href=\"#9-Axios-实例\" class=\"headerlink\" title=\"9. Axios 实例\"></a>9. <strong>Axios 实例</strong></h3><p>你可以创建 Axios 实例来配置多个请求的通用设置（如 base URL、headers 等）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> apiClient = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>: <span class=\"string\">&#x27;foobar&#x27;</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">apiClient.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/posts/1&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-并发请求\"><a href=\"#10-并发请求\" class=\"headerlink\" title=\"10. 并发请求\"></a>10. <strong>并发请求</strong></h3><p>可以使用 <code>axios.all</code> 和 <code>axios.spread</code> 来处理并发请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">  axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>),</span><br><span class=\"line\">  axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/2&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(axios.<span class=\"title function_\">spread</span>(<span class=\"function\">(<span class=\"params\">response1, response2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response1.<span class=\"property\">data</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response2.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>基础</strong>：熟悉基本的请求方法（GET、POST、PUT、DELETE）。</li>\n<li><strong>配置</strong>：利用 <code>config</code> 自定义请求，包括设置 headers、params 等。</li>\n<li><strong>拦截器</strong>：通过请求和响应拦截器实现全局的处理，比如身份验证、错误处理等。</li>\n<li><strong>取消请求</strong>：学会使用 <code>CancelToken</code> 取消不必要的请求。</li>\n<li><strong>并发请求</strong>：通过 <code>axios.all</code> 处理多个并发请求。</li>\n</ul>\n<p>通过学习这些内容，你就可以灵活运用 Axios 发起 HTTP 请求了！</p>\n<h2 id=\"问：async-await有什么用\"><a href=\"#问：async-await有什么用\" class=\"headerlink\" title=\"问：async&#x2F;await有什么用\"></a>问：async&#x2F;await有什么用</h2><p><code>async/await</code> 是 ES2017 (ES8) 引入的 JavaScript 语法，用于处理异步操作，提供了更简单、更可读的方式来处理 Promises。相比于传统的 <code>.then()</code> 和 <code>.catch()</code> 链式处理，<code>async/await</code> 使异步代码的编写更加像同步代码，提高了代码的可读性和维护性。</p>\n<h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. <strong>基本概念</strong></h3><ul>\n<li>**<code>async</code>**：用于定义一个异步函数，返回一个 Promise。异步函数允许在其中使用 <code>await</code> 关键字。</li>\n<li>**<code>await</code>**：只能在 <code>async</code> 函数中使用，等待一个 Promise 完成，并暂停函数执行，直到 Promise 解决（resolve）或拒绝（reject）。</li>\n</ul>\n<h3 id=\"2-使用示例\"><a href=\"#2-使用示例\" class=\"headerlink\" title=\"2. 使用示例\"></a>2. <strong>使用示例</strong></h3><h4 id=\"2-1-用法示例\"><a href=\"#2-1-用法示例\" class=\"headerlink\" title=\"2.1 用法示例\"></a>2.1 用法示例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义异步函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 在 Promise resolve 后输出结果</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error); <span class=\"comment\">// 捕获错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用异步函数</span></span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><code>async function fetchData()</code>：定义一个异步函数 <code>fetchData</code>。</li>\n<li><code>await axios.get(...)</code>：等待 <code>axios.get()</code> 返回的 Promise 解析后，将结果赋值给 <code>response</code>，然后继续执行后面的代码。</li>\n<li><code>try...catch</code>：用于处理可能的错误，代替 <code>.catch()</code>。</li>\n</ul>\n<h4 id=\"2-2-与-Promise-的对比\"><a href=\"#2-2-与-Promise-的对比\" class=\"headerlink\" title=\"2.2 与 Promise 的对比\"></a>2.2 与 Promise 的对比</h4><p>使用 <code>Promise</code> 和 <code>.then()</code> 方法处理异步请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>async/await</code> 处理相同的请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>区别</strong>：</p>\n<ul>\n<li><code>async/await</code> 代码看起来更像同步代码，更加直观易读。</li>\n<li><code>then/catch</code> 使用链式调用，可能会导致 “回调地狱” 或让代码难以理解。</li>\n</ul>\n<h3 id=\"3-优势\"><a href=\"#3-优势\" class=\"headerlink\" title=\"3. 优势\"></a>3. <strong>优势</strong></h3><h4 id=\"3-1-简化代码结构\"><a href=\"#3-1-简化代码结构\" class=\"headerlink\" title=\"3.1 简化代码结构\"></a>3.1 简化代码结构</h4><p>在不使用 <code>async/await</code> 的情况下，代码中常常需要嵌套多个 <code>.then()</code> 来处理多个异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`/user/<span class=\"subst\">$&#123;response.data.id&#125;</span>/posts`</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">postsResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(postsResponse.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>async/await</code>，代码变得更加平直和直观：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUserPosts</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userResponse = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> postsResponse = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`/user/<span class=\"subst\">$&#123;userResponse.data.id&#125;</span>/posts`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(postsResponse.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-错误处理更方便\"><a href=\"#3-2-错误处理更方便\" class=\"headerlink\" title=\"3.2 错误处理更方便\"></a>3.2 错误处理更方便</h4><p>使用 <code>async/await</code> 可以在一个 <code>try...catch</code> 块中捕获所有可能的错误，而不需要为每个 <code>.then()</code> 调用单独处理错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response1 = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/data1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response2 = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/data2&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response1, response2);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>then/catch</code> 中，你可能需要为每个异步请求分别处理错误，导致代码重复。</p>\n<h3 id=\"4-处理并发请求\"><a href=\"#4-处理并发请求\" class=\"headerlink\" title=\"4. 处理并发请求\"></a>4. <strong>处理并发请求</strong></h3><p>当你需要同时执行多个异步操作时，<code>async/await</code> 和 <code>Promise.all</code> 搭配使用，可以处理并发请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchMultipleData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [response1, response2] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">      axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>),</span><br><span class=\"line\">      axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/2&#x27;</span>)</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response1.<span class=\"property\">data</span>, response2.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><code>Promise.all</code> 接受一个数组，数组中的所有 Promise 都会并发执行，只有当所有 Promise 解决（resolve）后，才会继续执行 <code>await</code> 之后的代码。</li>\n<li>这比逐个 <code>await</code> 执行请求更高效。</li>\n</ul>\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. <strong>注意事项</strong></h3><h4 id=\"5-1-await-只能在-async-函数中使用\"><a href=\"#5-1-await-只能在-async-函数中使用\" class=\"headerlink\" title=\"5.1 await 只能在 async 函数中使用\"></a>5.1 <code>await</code> 只能在 <code>async</code> 函数中使用</h4><p>如果在非 <code>async</code> 函数中使用 <code>await</code>，会导致语法错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/some-url&#x27;</span>); <span class=\"comment\">// 会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法是将函数标记为 <code>async</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/some-url&#x27;</span>); <span class=\"comment\">// 正确使用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-阻塞代码执行\"><a href=\"#5-2-阻塞代码执行\" class=\"headerlink\" title=\"5.2 阻塞代码执行\"></a>5.2 阻塞代码执行</h4><p>虽然 <code>async/await</code> 看起来像同步代码，但它本质上还是异步的。<code>await</code> 会暂停函数的执行，直到 Promise 被解决（resolved），这意味着如果一个异步操作耗时较长，它会阻塞后续代码的执行。因此，使用时要注意避免长时间阻塞。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">slowOperation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">3000</span>)); <span class=\"comment\">// 阻塞3秒</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Operation complete!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">slowOperation</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This will be logged after 3 seconds&#x27;</span>); <span class=\"comment\">// 3秒后才执行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-错误处理\"><a href=\"#5-3-错误处理\" class=\"headerlink\" title=\"5.3 错误处理\"></a>5.3 错误处理</h4><p>尽量使用 <code>try...catch</code> 来捕获 <code>await</code> 操作中可能发生的错误。如果没有捕获，错误可能会被静默忽略，导致调试困难。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/non-existent-url&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>简洁性</strong>：<code>async/await</code> 使异步代码更加简洁直观，接近同步代码的结构，避免回调地狱。</li>\n<li><strong>错误处理</strong>：可以使用 <code>try...catch</code> 统一处理异步操作中的错误。</li>\n<li><strong>性能</strong>：与 <code>Promise.all</code> 结合，可以并发执行多个异步任务，提升性能。</li>\n</ul>\n<p>通过 <code>async/await</code>，你可以更加清晰地组织异步代码，并提高代码的可维护性和可读性。</p>\n","excerpt":"","more":"<p>Axios 是一个基于 Promise 的 HTTP 客户端，能够在浏览器和 Node.js 中发起 HTTP 请求。它简化了与服务器的通信，支持各种请求方法（如 GET、POST、PUT 等）以及处理请求和响应的相关操作。下面是关于 Axios 的详细学习指南。</p>\n<h3 id=\"1-安装-Axios\"><a href=\"#1-安装-Axios\" class=\"headerlink\" title=\"1. 安装 Axios\"></a>1. <strong>安装 Axios</strong></h3><p>在使用 Axios 之前，你需要在项目中安装它。</p>\n<h4 id=\"在浏览器中：\"><a href=\"#在浏览器中：\" class=\"headerlink\" title=\"在浏览器中：\"></a>在浏览器中：</h4><p>可以通过直接在 HTML 文件中引入 CDN 链接来使用 Axios。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Node-js-中：\"><a href=\"#在-Node-js-中：\" class=\"headerlink\" title=\"在 Node.js 中：\"></a>在 Node.js 中：</h4><p>通过 <code>npm</code> 或 <code>yarn</code> 安装 Axios。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">yarn add axios</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-基本使用方法\"><a href=\"#2-基本使用方法\" class=\"headerlink\" title=\"2. 基本使用方法\"></a>2. <strong>基本使用方法</strong></h3><h4 id=\"2-1-发起-GET-请求\"><a href=\"#2-1-发起-GET-请求\" class=\"headerlink\" title=\"2.1 发起 GET 请求\"></a>2.1 发起 GET 请求</h4><p>GET 请求通常用于从服务器获取数据。下面是一个 GET 请求的示例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 成功响应的数据</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-发起-POST-请求\"><a href=\"#2-2-发起-POST-请求\" class=\"headerlink\" title=\"2.2 发起 POST 请求\"></a>2.2 发起 POST 请求</h4><p>POST 请求用于向服务器发送数据，例如向 API 提交表单数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 成功响应的数据</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-使用-async-await\"><a href=\"#2-3-使用-async-await\" class=\"headerlink\" title=\"2.3 使用 async&#x2F;await\"></a>2.3 使用 async&#x2F;await</h4><p>Axios 是 Promise 驱动的，所以可以使用 <code>async/await</code> 语法来简化代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 成功响应的数据</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-常见请求方法\"><a href=\"#3-常见请求方法\" class=\"headerlink\" title=\"3. 常见请求方法\"></a>3. <strong>常见请求方法</strong></h3><ul>\n<li><code>axios.get(url, config)</code>: 发起 GET 请求。</li>\n<li><code>axios.post(url, data, config)</code>: 发起 POST 请求。</li>\n<li><code>axios.put(url, data, config)</code>: 发起 PUT 请求。</li>\n<li><code>axios.delete(url, config)</code>: 发起 DELETE 请求。</li>\n</ul>\n<p>每种方法都会返回一个 Promise，可以通过 <code>then</code> 和 <code>catch</code> 处理响应和错误。</p>\n<h3 id=\"4-配置请求（Config）\"><a href=\"#4-配置请求（Config）\" class=\"headerlink\" title=\"4. 配置请求（Config）\"></a>4. <strong>配置请求（Config）</strong></h3><p>你可以通过 <code>config</code> 对象来自定义请求，常见的配置选项有：</p>\n<ul>\n<li><code>url</code>: 请求地址。</li>\n<li><code>method</code>: 请求方法（如 <code>GET</code>、<code>POST</code>）。</li>\n<li><code>headers</code>: 设置 HTTP 请求头。</li>\n<li><code>params</code>: 设置 URL 查询参数。</li>\n<li><code>data</code>: 发送到服务器的数据（适用于 <code>POST</code>、<code>PUT</code> 等方法）。</li>\n<li><code>timeout</code>: 请求超时时间。</li>\n</ul>\n<h4 id=\"示例：自定义请求配置\"><a href=\"#示例：自定义请求配置\" class=\"headerlink\" title=\"示例：自定义请求配置\"></a>示例：自定义请求配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer token&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span> <span class=\"comment\">// 请求超时时间（单位：毫秒）</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-处理响应\"><a href=\"#5-处理响应\" class=\"headerlink\" title=\"5. 处理响应\"></a>5. <strong>处理响应</strong></h3><p>响应数据包含很多有用的信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 实际的响应数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">status</span>); <span class=\"comment\">// HTTP 状态码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">headers</span>); <span class=\"comment\">// 响应头</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-处理错误\"><a href=\"#6-处理错误\" class=\"headerlink\" title=\"6. 处理错误\"></a>6. <strong>处理错误</strong></h3><p>Axios 提供了多种方式来处理错误，可以捕获 HTTP 错误、网络错误、超时等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/invalid-url&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.<span class=\"property\">response</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发送，但服务器返回了状态码非2xx</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error response:&#x27;</span>, error.<span class=\"property\">response</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error status:&#x27;</span>, error.<span class=\"property\">response</span>.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error.<span class=\"property\">request</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但没有收到响应</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error request:&#x27;</span>, error.<span class=\"property\">request</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 其他错误</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error message:&#x27;</span>, error.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-请求和响应拦截器\"><a href=\"#7-请求和响应拦截器\" class=\"headerlink\" title=\"7. 请求和响应拦截器\"></a>7. <strong>请求和响应拦截器</strong></h3><p>Axios 提供了拦截器功能，允许在请求或响应发送之前对它们进行处理。这对于处理全局错误、自动添加身份验证令牌等非常有用。</p>\n<h4 id=\"请求拦截器：\"><a href=\"#请求拦截器：\" class=\"headerlink\" title=\"请求拦截器：\"></a>请求拦截器：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在发送请求之前可以做一些处理，比如添加 token</span></span><br><span class=\"line\">  config.<span class=\"property\">headers</span>.<span class=\"property\">Authorization</span> = <span class=\"string\">&#x27;Bearer token&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理请求错误</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"响应拦截器：\"><a href=\"#响应拦截器：\" class=\"headerlink\" title=\"响应拦截器：\"></a>响应拦截器：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理响应数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理响应错误</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-取消请求\"><a href=\"#8-取消请求\" class=\"headerlink\" title=\"8. 取消请求\"></a>8. <strong>取消请求</strong></h3><p>使用 <code>CancelToken</code> 可以取消请求，适用于取消重复请求或当用户离开页面时取消挂起的请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CancelToken</span> = axios.<span class=\"property\">CancelToken</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancel;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">cancelToken</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">CancelToken</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">executor</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">    cancel = c; <span class=\"comment\">// 保存取消函数</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">thrown</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (axios.<span class=\"title function_\">isCancel</span>(thrown)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request canceled&#x27;</span>, thrown.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随时调用取消请求</span></span><br><span class=\"line\"><span class=\"title function_\">cancel</span>(<span class=\"string\">&#x27;Operation canceled by the user.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-Axios-实例\"><a href=\"#9-Axios-实例\" class=\"headerlink\" title=\"9. Axios 实例\"></a>9. <strong>Axios 实例</strong></h3><p>你可以创建 Axios 实例来配置多个请求的通用设置（如 base URL、headers 等）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> apiClient = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>: <span class=\"string\">&#x27;foobar&#x27;</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">apiClient.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/posts/1&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-并发请求\"><a href=\"#10-并发请求\" class=\"headerlink\" title=\"10. 并发请求\"></a>10. <strong>并发请求</strong></h3><p>可以使用 <code>axios.all</code> 和 <code>axios.spread</code> 来处理并发请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">  axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>),</span><br><span class=\"line\">  axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/2&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(axios.<span class=\"title function_\">spread</span>(<span class=\"function\">(<span class=\"params\">response1, response2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response1.<span class=\"property\">data</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response2.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>基础</strong>：熟悉基本的请求方法（GET、POST、PUT、DELETE）。</li>\n<li><strong>配置</strong>：利用 <code>config</code> 自定义请求，包括设置 headers、params 等。</li>\n<li><strong>拦截器</strong>：通过请求和响应拦截器实现全局的处理，比如身份验证、错误处理等。</li>\n<li><strong>取消请求</strong>：学会使用 <code>CancelToken</code> 取消不必要的请求。</li>\n<li><strong>并发请求</strong>：通过 <code>axios.all</code> 处理多个并发请求。</li>\n</ul>\n<p>通过学习这些内容，你就可以灵活运用 Axios 发起 HTTP 请求了！</p>\n<h2 id=\"问：async-await有什么用\"><a href=\"#问：async-await有什么用\" class=\"headerlink\" title=\"问：async&#x2F;await有什么用\"></a>问：async&#x2F;await有什么用</h2><p><code>async/await</code> 是 ES2017 (ES8) 引入的 JavaScript 语法，用于处理异步操作，提供了更简单、更可读的方式来处理 Promises。相比于传统的 <code>.then()</code> 和 <code>.catch()</code> 链式处理，<code>async/await</code> 使异步代码的编写更加像同步代码，提高了代码的可读性和维护性。</p>\n<h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. <strong>基本概念</strong></h3><ul>\n<li>**<code>async</code>**：用于定义一个异步函数，返回一个 Promise。异步函数允许在其中使用 <code>await</code> 关键字。</li>\n<li>**<code>await</code>**：只能在 <code>async</code> 函数中使用，等待一个 Promise 完成，并暂停函数执行，直到 Promise 解决（resolve）或拒绝（reject）。</li>\n</ul>\n<h3 id=\"2-使用示例\"><a href=\"#2-使用示例\" class=\"headerlink\" title=\"2. 使用示例\"></a>2. <strong>使用示例</strong></h3><h4 id=\"2-1-用法示例\"><a href=\"#2-1-用法示例\" class=\"headerlink\" title=\"2.1 用法示例\"></a>2.1 用法示例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义异步函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>); <span class=\"comment\">// 在 Promise resolve 后输出结果</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error); <span class=\"comment\">// 捕获错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用异步函数</span></span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><code>async function fetchData()</code>：定义一个异步函数 <code>fetchData</code>。</li>\n<li><code>await axios.get(...)</code>：等待 <code>axios.get()</code> 返回的 Promise 解析后，将结果赋值给 <code>response</code>，然后继续执行后面的代码。</li>\n<li><code>try...catch</code>：用于处理可能的错误，代替 <code>.catch()</code>。</li>\n</ul>\n<h4 id=\"2-2-与-Promise-的对比\"><a href=\"#2-2-与-Promise-的对比\" class=\"headerlink\" title=\"2.2 与 Promise 的对比\"></a>2.2 与 Promise 的对比</h4><p>使用 <code>Promise</code> 和 <code>.then()</code> 方法处理异步请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>async/await</code> 处理相同的请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>区别</strong>：</p>\n<ul>\n<li><code>async/await</code> 代码看起来更像同步代码，更加直观易读。</li>\n<li><code>then/catch</code> 使用链式调用，可能会导致 “回调地狱” 或让代码难以理解。</li>\n</ul>\n<h3 id=\"3-优势\"><a href=\"#3-优势\" class=\"headerlink\" title=\"3. 优势\"></a>3. <strong>优势</strong></h3><h4 id=\"3-1-简化代码结构\"><a href=\"#3-1-简化代码结构\" class=\"headerlink\" title=\"3.1 简化代码结构\"></a>3.1 简化代码结构</h4><p>在不使用 <code>async/await</code> 的情况下，代码中常常需要嵌套多个 <code>.then()</code> 来处理多个异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`/user/<span class=\"subst\">$&#123;response.data.id&#125;</span>/posts`</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">postsResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(postsResponse.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>async/await</code>，代码变得更加平直和直观：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUserPosts</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userResponse = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> postsResponse = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`/user/<span class=\"subst\">$&#123;userResponse.data.id&#125;</span>/posts`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(postsResponse.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-错误处理更方便\"><a href=\"#3-2-错误处理更方便\" class=\"headerlink\" title=\"3.2 错误处理更方便\"></a>3.2 错误处理更方便</h4><p>使用 <code>async/await</code> 可以在一个 <code>try...catch</code> 块中捕获所有可能的错误，而不需要为每个 <code>.then()</code> 调用单独处理错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response1 = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/data1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response2 = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/data2&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response1, response2);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>then/catch</code> 中，你可能需要为每个异步请求分别处理错误，导致代码重复。</p>\n<h3 id=\"4-处理并发请求\"><a href=\"#4-处理并发请求\" class=\"headerlink\" title=\"4. 处理并发请求\"></a>4. <strong>处理并发请求</strong></h3><p>当你需要同时执行多个异步操作时，<code>async/await</code> 和 <code>Promise.all</code> 搭配使用，可以处理并发请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchMultipleData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [response1, response2] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">      axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>),</span><br><span class=\"line\">      axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/posts/2&#x27;</span>)</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response1.<span class=\"property\">data</span>, response2.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><code>Promise.all</code> 接受一个数组，数组中的所有 Promise 都会并发执行，只有当所有 Promise 解决（resolve）后，才会继续执行 <code>await</code> 之后的代码。</li>\n<li>这比逐个 <code>await</code> 执行请求更高效。</li>\n</ul>\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. <strong>注意事项</strong></h3><h4 id=\"5-1-await-只能在-async-函数中使用\"><a href=\"#5-1-await-只能在-async-函数中使用\" class=\"headerlink\" title=\"5.1 await 只能在 async 函数中使用\"></a>5.1 <code>await</code> 只能在 <code>async</code> 函数中使用</h4><p>如果在非 <code>async</code> 函数中使用 <code>await</code>，会导致语法错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/some-url&#x27;</span>); <span class=\"comment\">// 会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法是将函数标记为 <code>async</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/some-url&#x27;</span>); <span class=\"comment\">// 正确使用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-阻塞代码执行\"><a href=\"#5-2-阻塞代码执行\" class=\"headerlink\" title=\"5.2 阻塞代码执行\"></a>5.2 阻塞代码执行</h4><p>虽然 <code>async/await</code> 看起来像同步代码，但它本质上还是异步的。<code>await</code> 会暂停函数的执行，直到 Promise 被解决（resolved），这意味着如果一个异步操作耗时较长，它会阻塞后续代码的执行。因此，使用时要注意避免长时间阻塞。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">slowOperation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">3000</span>)); <span class=\"comment\">// 阻塞3秒</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Operation complete!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">slowOperation</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This will be logged after 3 seconds&#x27;</span>); <span class=\"comment\">// 3秒后才执行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-错误处理\"><a href=\"#5-3-错误处理\" class=\"headerlink\" title=\"5.3 错误处理\"></a>5.3 错误处理</h4><p>尽量使用 <code>try...catch</code> 来捕获 <code>await</code> 操作中可能发生的错误。如果没有捕获，错误可能会被静默忽略，导致调试困难。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/non-existent-url&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>简洁性</strong>：<code>async/await</code> 使异步代码更加简洁直观，接近同步代码的结构，避免回调地狱。</li>\n<li><strong>错误处理</strong>：可以使用 <code>try...catch</code> 统一处理异步操作中的错误。</li>\n<li><strong>性能</strong>：与 <code>Promise.all</code> 结合，可以并发执行多个异步任务，提升性能。</li>\n</ul>\n<p>通过 <code>async/await</code>，你可以更加清晰地组织异步代码，并提高代码的可维护性和可读性。</p>\n"},{"title":"axios封装request","date":"2024-07-28T06:58:06.538Z","_content":"axios封装request\n\n在JavaScript中使用axios进行HTTP请求的封装，可以创建一个用于封装axios的实例，并且可以添加全局配置、拦截器等。以下是一个简单的封装例子：\n\n```javascript\nimport axios from 'axios';\n \n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API, // api的base_url\n  timeout: 5000 // 请求超时时间\n});\n \n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 可以在这里添加请求头等信息\n    // 例如：config.headers['Authorization'] = 'Bearer your-token';\n    return config;\n  },\n  error => {\n    // 请求错误处理\n    console.log(error); // for debug\n    Promise.reject(error);\n  }\n);\n \n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // 对响应数据做处理，例如只返回data部分\n    const res = response.data;\n    // 如果返回的状态码为200，说明成功，可以直接返回数据\n    if (res.code === 200) {\n      return res;\n    } else {\n      // 其他状态码都当作错误处理\n      // 可以在这里根据错误状态码进行一些操作，比如登录过期提醒用户重新登录等\n      console.log('err' + res.message); // for debug\n      Promise.reject(new Error(res.message));\n    }\n  },\n  error => {\n    // 服务器状态码不为200时的错误处理\n    console.log('err' + error); // for debug\n    return Promise.reject(error);\n  }\n);\n \nexport default service;\n```\n\n在上述代码中，我们创建了一个axios实例，并为这个实例添加了请求拦截器和响应拦截器。请求拦截器用于在请求发送前做一些处理，如添加token、请求头等；响应拦截器用于处理服务器响应，根据响应状态码进行相应的操作。\n\n使用封装后的axios实例发送请求的方法如下：\n\n```javascript\nimport service from '@/utils/request';\n \n// 发送GET请求\nservice.get('/someUrl')\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n \n// 发送POST请求\nservice.post('/someUrl', { data: 'your data' })\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n```\n\n在实际应用中，你可以根据自己的需求对这个封装进行相应的调整和扩展。","source":"_posts/axios封装request.md","raw":"---\ntitle: axios封装request\ndate: 2024-07-28T14:58:06.538Z\ntags: []\ncategories: []\n---\naxios封装request\n\n在JavaScript中使用axios进行HTTP请求的封装，可以创建一个用于封装axios的实例，并且可以添加全局配置、拦截器等。以下是一个简单的封装例子：\n\n```javascript\nimport axios from 'axios';\n \n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API, // api的base_url\n  timeout: 5000 // 请求超时时间\n});\n \n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 可以在这里添加请求头等信息\n    // 例如：config.headers['Authorization'] = 'Bearer your-token';\n    return config;\n  },\n  error => {\n    // 请求错误处理\n    console.log(error); // for debug\n    Promise.reject(error);\n  }\n);\n \n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // 对响应数据做处理，例如只返回data部分\n    const res = response.data;\n    // 如果返回的状态码为200，说明成功，可以直接返回数据\n    if (res.code === 200) {\n      return res;\n    } else {\n      // 其他状态码都当作错误处理\n      // 可以在这里根据错误状态码进行一些操作，比如登录过期提醒用户重新登录等\n      console.log('err' + res.message); // for debug\n      Promise.reject(new Error(res.message));\n    }\n  },\n  error => {\n    // 服务器状态码不为200时的错误处理\n    console.log('err' + error); // for debug\n    return Promise.reject(error);\n  }\n);\n \nexport default service;\n```\n\n在上述代码中，我们创建了一个axios实例，并为这个实例添加了请求拦截器和响应拦截器。请求拦截器用于在请求发送前做一些处理，如添加token、请求头等；响应拦截器用于处理服务器响应，根据响应状态码进行相应的操作。\n\n使用封装后的axios实例发送请求的方法如下：\n\n```javascript\nimport service from '@/utils/request';\n \n// 发送GET请求\nservice.get('/someUrl')\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n \n// 发送POST请求\nservice.post('/someUrl', { data: 'your data' })\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n```\n\n在实际应用中，你可以根据自己的需求对这个封装进行相应的调整和扩展。","slug":"axios封装request","published":1,"updated":"2024-11-25T11:44:04.563Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscp002xmbs6fwx0cbsu","content":"<p>axios封装request</p>\n<p>在JavaScript中使用axios进行HTTP请求的封装，可以创建一个用于封装axios的实例，并且可以添加全局配置、拦截器等。以下是一个简单的封装例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 创建axios实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: process.<span class=\"property\">env</span>.<span class=\"property\">VUE_APP_BASE_API</span>, <span class=\"comment\">// api的base_url</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span> <span class=\"comment\">// 请求超时时间</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以在这里添加请求头等信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer your-token&#x27;;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 请求错误处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error); <span class=\"comment\">// for debug</span></span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对响应数据做处理，例如只返回data部分</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = response.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果返回的状态码为200，说明成功，可以直接返回数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.<span class=\"property\">code</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 其他状态码都当作错误处理</span></span><br><span class=\"line\">      <span class=\"comment\">// 可以在这里根据错误状态码进行一些操作，比如登录过期提醒用户重新登录等</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span> + res.<span class=\"property\">message</span>); <span class=\"comment\">// for debug</span></span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(res.<span class=\"property\">message</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务器状态码不为200时的错误处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span> + error); <span class=\"comment\">// for debug</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> service;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，我们创建了一个axios实例，并为这个实例添加了请求拦截器和响应拦截器。请求拦截器用于在请求发送前做一些处理，如添加token、请求头等；响应拦截器用于处理服务器响应，根据响应状态码进行相应的操作。</p>\n<p>使用封装后的axios实例发送请求的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> service <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/request&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 发送GET请求</span></span><br><span class=\"line\">service.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/someUrl&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 发送POST请求</span></span><br><span class=\"line\">service.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/someUrl&#x27;</span>, &#123; <span class=\"attr\">data</span>: <span class=\"string\">&#x27;your data&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在实际应用中，你可以根据自己的需求对这个封装进行相应的调整和扩展。</p>\n","excerpt":"","more":"<p>axios封装request</p>\n<p>在JavaScript中使用axios进行HTTP请求的封装，可以创建一个用于封装axios的实例，并且可以添加全局配置、拦截器等。以下是一个简单的封装例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 创建axios实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: process.<span class=\"property\">env</span>.<span class=\"property\">VUE_APP_BASE_API</span>, <span class=\"comment\">// api的base_url</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span> <span class=\"comment\">// 请求超时时间</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以在这里添加请求头等信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer your-token&#x27;;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 请求错误处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error); <span class=\"comment\">// for debug</span></span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对响应数据做处理，例如只返回data部分</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = response.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果返回的状态码为200，说明成功，可以直接返回数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.<span class=\"property\">code</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 其他状态码都当作错误处理</span></span><br><span class=\"line\">      <span class=\"comment\">// 可以在这里根据错误状态码进行一些操作，比如登录过期提醒用户重新登录等</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span> + res.<span class=\"property\">message</span>); <span class=\"comment\">// for debug</span></span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(res.<span class=\"property\">message</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务器状态码不为200时的错误处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span> + error); <span class=\"comment\">// for debug</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> service;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，我们创建了一个axios实例，并为这个实例添加了请求拦截器和响应拦截器。请求拦截器用于在请求发送前做一些处理，如添加token、请求头等；响应拦截器用于处理服务器响应，根据响应状态码进行相应的操作。</p>\n<p>使用封装后的axios实例发送请求的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> service <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/request&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 发送GET请求</span></span><br><span class=\"line\">service.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/someUrl&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 发送POST请求</span></span><br><span class=\"line\">service.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/someUrl&#x27;</span>, &#123; <span class=\"attr\">data</span>: <span class=\"string\">&#x27;your data&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在实际应用中，你可以根据自己的需求对这个封装进行相应的调整和扩展。</p>\n"},{"title":"Java复习","date":"2024-08-07T01:58:38.255Z","_content":"[TOC]\n\n\n\n\n\n\n\n# Java数据结构\n\n###  数组（arrays）\n\n数组（Arrays）是一种基本的数据结构，可以存储固定大小的相同类型的元素。\n\n```\nint[] array = new int[5];\n```\n\n- **特点：** 固定大小，存储相同类型的元素。\n- **优点：** 随机访问元素效率高。\n- **缺点：** 大小固定，插入和删除元素相对较慢。\n\n\n\n### 列表（Lists）\n\nJava 提供了多种列表实现，如 ArrayList 和 LinkedList。\n\n```\nList<String> arrayList = new ArrayList<>();\nList<Integer> linkedList = new LinkedList<>();\n```\n\n**ArrayList:**\n\n- **特点：** 动态数组，可变大小。\n- **优点：** 高效的随机访问和快速尾部插入。\n- **缺点：** 中间插入和删除相对较慢。\n\n**LinkedList:**\n\n- **特点：** 双向链表，元素之间通过指针连接。\n- **优点：** 插入和删除元素高效，迭代器性能好。\n- **缺点：** 随机访问相对较慢。\n\n### 集合（Sets）\n\n集合（Sets）用于存储不重复的元素，常见的实现有 HashSet 和 TreeSet。\n\n```\nSet<String> hashSet = new HashSet<>();\nSet<Integer> treeSet = new TreeSet<>();\n```\n\n**HashSet:**\n\n- **特点：** 无序集合，基于HashMap实现。\n- **优点：** 高效的查找和插入操作。\n- **缺点：** 不保证顺序。\n\n**TreeSet:**\n\n- **特点：**TreeSet 是有序集合，底层基于红黑树实现，不允许重复元素。\n- **优点：** 提供自动排序功能，适用于需要按顺序存储元素的场景。\n- **缺点：** 性能相对较差，不允许插入 null 元素。\n\n### 映射（Maps）\n\n映射（Maps）用于存储键值对，常见的实现有 HashMap 和 TreeMap。\n\n```\nMap<String, Integer> hashMap = new HashMap<>();\nMap<String, Integer> treeMap = new TreeMap<>();\n```\n\n**HashMap:**\n\n- **特点：** 基于哈希表实现的键值对存储结构。\n- **优点：** 高效的查找、插入和删除操作。\n- **缺点：** 无序，不保证顺序。\n\n**TreeMap:**\n\n- **特点：** 基于红黑树实现的有序键值对存储结构。\n- **优点：** 有序，支持按照键的顺序遍历。\n- **缺点：** 插入和删除相对较慢。\n\n### 栈（Stack）\n\n栈（Stack）是一种线性数据结构，它按照后进先出（Last In, First Out，LIFO）的原则管理元素。在栈中，新元素被添加到栈的顶部，而只能从栈的顶部移除元素。这就意味着最后添加的元素是第一个被移除的。\n\n```\nStack<Integer> stack = new Stack<>();\n```\n\n**Stack 类:**\n\n- **特点：** 代表一个栈，通常按照后进先出（LIFO）的顺序操作元素。\n\n### 队列（Queue）\n\n队列（Queue）遵循先进先出（FIFO）原则，常见的实现有 LinkedList 和 PriorityQueue。\n\n```\nQueue<String> queue = new LinkedList<>();\n```\n\n**Queue 接口:**\n\n- **特点：** 代表一个队列，通常按照先进先出（FIFO）的顺序操作元素。\n- **实现类：** LinkedList, PriorityQueue, ArrayDeque。\n\n### 堆（Heap）\n\n堆（Heap）优先队列的基础，可以实现最大堆和最小堆。\n\n```\nPriorityQueue<Integer> minHeap = new PriorityQueue<>();\nPriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n```\n\n### 树（Trees）\n\nJava 提供了 TreeNode 类型，可以用于构建二叉树等数据结构。\n\n```\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n```\n\n### 图（Graphs）\n\n图的表示通常需要自定义数据结构或使用图库，Java 没有内建的图类。\n\n以上介绍的只是 Java 中一些常见的数据结构，实际上还有很多其他的数据结构和算法可以根据具体问题选择使用。\n\n\n\n------\n\n\n\n\n\n# Java 集合框架\n\n集合框架被设计成要满足以下几个目标。\n\n- 该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。\n- 该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。\n- 对一个集合的扩展和适应必须是简单的。\n\n## 集合接口\n\n集合框架定义了一些接口。本节提供了每个接口的概述：\n\n| 序号 | 接口描述                                                     |\n| :--- | :----------------------------------------------------------- |\n| 1    | Collection 接口 Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。 |\n| 2    | List 接口 List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序（插入顺序）的对象。 |\n| 3    | Set Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。 |\n| 4    | SortedSet  继承于Set保存有序的集合。                         |\n| 5    | Map Map 接口存储一组键值对象，提供key（键）到value（值）的映射。 |\n| 6    | Map.Entry  描述在一个Map中的一个元素（键/值对）。是一个 Map 的内部接口。 |\n| 7    | SortedMap 继承于 Map，使 Key 保持在升序排列。                |\n| 8    | Enumeration 这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。 |\n\n### Set和List的区别\n\n- 1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。\n- 2. Set 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 **<实现类有HashSet,TreeSet>**。\n- 3. List 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 List 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 **<实现类有ArrayList,LinkedList,Vector>** 。\n\n## 集合实现类（集合类）\n\nJava提供了一套实现了Collection接口的标准集合类。其中一些是具体类，这些类可以直接拿来使用，而另外一些是抽象类，提供了接口的部分实现。\n\n标准集合类汇总于下表：\n\n| 序号 | 类描述                                                       |\n| :--- | :----------------------------------------------------------- |\n| 1    | **AbstractCollection**  实现了大部分的集合接口。             |\n| 2    | **AbstractList**  继承于AbstractCollection 并且实现了大部分List接口。 |\n| 3    | **AbstractSequentialList**  继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。 |\n| 4    | [LinkedList](https://www.runoob.com/java/java-linkedlist.html) 该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如： `List list=Collections.synchronizedList(newLinkedList(...));`LinkedList 查找效率低。 |\n| 5    | [ArrayList](https://www.runoob.com/java/java-arraylist.html) 该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。 |\n| 6    | **AbstractSet**  继承于AbstractCollection 并且实现了大部分Set接口。 |\n| 7    | [HashSet](https://www.runoob.com/java/java-hashset.html) 该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。 |\n| 8    | LinkedHashSet 具有可预知迭代顺序的 `Set` 接口的哈希表和链接列表实现。 |\n| 9    | TreeSet 该类实现了Set接口，可以实现排序等功能。              |\n| 10   | **AbstractMap**  实现了大部分的Map接口。                     |\n| 11   | [HashMap](https://www.runoob.com/java/java-hashmap.html) HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。 |\n| 12   | TreeMap 继承了AbstractMap，并且使用一颗树。                  |\n| 13   | WeakHashMap 继承AbstractMap类，使用弱密钥的哈希表。          |\n| 14   | LinkedHashMap 继承于HashMap，使用元素的自然顺序对元素进行排序. |\n| 15   | IdentityHashMap 继承AbstractMap类，比较文档时使用引用相等。  |\n\n在前面的教程中已经讨论通过java.util包中定义的类，如下所示：\n\n| 序号 | 类描述                                                       |\n| :--- | :----------------------------------------------------------- |\n| 1    | Vector 该类和ArrayList非常相似，但是该类是同步的，可以用在多线程的情况，该类允许设置默认的增长长度，默认扩容方式为原来的2倍。 |\n| 2    | Stack 栈是Vector的一个子类，它实现了一个标准的后进先出的栈。 |\n| 3    | Dictionary Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。 |\n| 4    | Hashtable Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。 |\n| 5    | Properties Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。 |\n| 6    | BitSet 一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。 |\n\n------\n\n## 集合算法\n\n集合框架定义了几种算法，可用于集合和映射。这些算法被定义为集合类的静态方法。\n\n在尝试比较不兼容的类型时，一些方法能够抛出 ClassCastException异常。当试图修改一个不可修改的集合时，抛出UnsupportedOperationException异常。\n\n集合定义三个静态的变量：EMPTY_SET，EMPTY_LIST，EMPTY_MAP的。这些变量都不可改变。\n\n\n\n| 序号 | 算法描述                                               |\n| :--- | :----------------------------------------------------- |\n| 1    | Collection Algorithms 这里是一个列表中的所有算法实现。 |\n\n------\n\n## 如何使用迭代器\n\n通常情况下，你会希望遍历一个集合中的元素。例如，显示集合中的每个元素。\n\n一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架，但是还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了[Iterator](https://www.runoob.com/java/java-iterator.html) 接口或 ListIterator接口。\n\n迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator 继承了 Iterator，以允许双向遍历列表和修改元素。\n\n| 序号 | 迭代器方法描述                                               |\n| :--- | :----------------------------------------------------------- |\n| 1    | [使用 Java Iterator](https://www.runoob.com/java/java-iterator.html) 这里通过实例列出 Iterator 和 ListIterator 接口提供的所有方法。 |\n\n### 遍历 ArrayList\n\n## 实例\n\nimport java.util.*;  public class Test{ public static void main(String[] args) {     List<String> list=new ArrayList<String>();     list.add(\"Hello\");     list.add(\"World\");     list.add(\"HAHAHAHA\");     //第一种遍历方法使用 For-Each 遍历 List     for (String str : list) {            //也可以改写 for(int i=0;i<list.size();i++) 这种形式        System.out.println(str);     }      //第二种遍历，把链表变为数组相关的内容进行遍历     String[] strArray=new String[list.size()];     list.toArray(strArray);     for(int i=0;i<strArray.length;i++) //这里也可以改写为  for(String str:strArray) 这种形式     {        System.out.println(strArray[i]);     }         //第三种遍历 使用迭代器进行相关遍历          Iterator<String> ite=list.iterator();     while(ite.hasNext())//判断下一个元素之后有值     {         System.out.println(ite.next());     } } }\n\n**解析：** \n\n三种方法都是用来遍历ArrayList集合，第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度。\n\n### 遍历 Map\n\n## 实例\n\n```java\nimport java.util.*;\n \npublic class Test{\n     public static void main(String[] args) {\n      Map<String, String> map = new HashMap<String, String>();\n      map.put(\"1\", \"value1\");\n      map.put(\"2\", \"value2\");\n      map.put(\"3\", \"value3\");\n      \n      //第一种：普遍使用，二次取值\n      System.out.println(\"通过Map.keySet遍历key和value：\");\n      for (String key : map.keySet()) {\n       System.out.println(\"key= \"+ key + \" and value= \" + map.get(key));\n      }\n      \n      //第二种\n      System.out.println(\"通过Map.entrySet使用iterator遍历key和value：\");\n      Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\n      while (it.hasNext()) {\n       Map.Entry<String, String> entry = it.next();\n       System.out.println(\"key= \" + entry.getKey() + \" and value= \" + entry.getValue());\n      }\n      \n      //第三种：推荐，尤其是容量大时\n      System.out.println(\"通过Map.entrySet遍历key和value\");\n      for (Map.Entry<String, String> entry : map.entrySet()) {\n       System.out.println(\"key= \" + entry.getKey() + \" and value= \" + entry.getValue());\n      }\n    \n      //第四种\n      System.out.println(\"通过Map.values()遍历所有的value，但不能遍历key\");\n      for (String v : map.values()) {\n       System.out.println(\"value= \" + v);\n      }\n     }\n}\n```\n\n\n\n------\n\n## 如何使用比较器\n\nTreeSet和TreeMap的按照排序顺序来存储元素. 然而，这是通过比较器来精确定义按照什么样的排序顺序。\n\n这个接口可以让我们以不同的方式来排序一个集合。\n\n| 序号 | 比较器方法描述                                               |\n| :--- | :----------------------------------------------------------- |\n| 1    | 使用 Java Comparator 这里通过实例列出Comparator接口提供的所有方法 |\n\n\n\n# Java ArrayList\n\nArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。\n\nArrayList 继承了 AbstractList ，并实现了 List 接口。\n\nArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n```java\nimport java.util.ArrayList; // 引入 ArrayList 类\n\nArrayList<E> objectName =new ArrayList<>();　 // 初始化\n```\n\n- **E**: 泛型数据类型，用于设置 objectName 的数据类型，**只能为引用数据类型**。\n- **objectName**: 对象名。\n\nArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。\n\n### 添加元素\n\nArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 **add()** 方法:\n\n### 访问元素\n\n访问 ArrayList 中的元素可以使用 **get()** 方法：\n\n**注意**：数组的索引值从 0 开始。\n\n### 修改元素\n\n如果要修改 ArrayList 中的元素可以使用 **set()** 方法， set(int index, E element) 方法的第一个参数是索引（index），表示要替换的元素的位置，第二个参数是新元素（element），表示要设置的新值：\n\n### 删除元素\n\n如果要删除 ArrayList 中的元素可以使用 **remove()** 方法：\n\n### 计算大小\n\n如果要计算 ArrayList 中的元素数量可以使用 size() 方法：\n\n### 迭代数组列表\n\n我们可以使用 for 来迭代数组列表中的元素：\n\n也可以使用 for-each 来迭代元素：\n\n### ArrayList 排序\n\nCollections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。\n\n## Java ArrayList 方法\n\nJava ArrayList 常用方法列表如下：\n\n| 方法                                                         | 描述                                          |\n| :----------------------------------------------------------- | :-------------------------------------------- |\n| [add()](https://www.runoob.com/java/java-arraylist-add.html) | 将元素插入到指定位置的 arraylist 中           |\n| [addAll()](https://www.runoob.com/java/java-arraylist-addall.html) | 添加集合中的所有元素到 arraylist 中           |\n| [clear()](https://www.runoob.com/java/java-arraylist-clear.html) | 删除 arraylist 中的所有元素                   |\n| [clone()](https://www.runoob.com/java/java-arraylist-clone.html) | 复制一份 arraylist                            |\n| [contains()](https://www.runoob.com/java/java-arraylist-contains.html) | 判断元素是否在 arraylist                      |\n| [get()](https://www.runoob.com/java/java-arraylist-get.html) | 通过索引值获取 arraylist 中的元素             |\n| [indexOf()](https://www.runoob.com/java/java-arraylist-indexof.html) | 返回 arraylist 中元素的索引值                 |\n| [removeAll()](https://www.runoob.com/java/java-arraylist-removeall.html) | 删除存在于指定集合中的 arraylist 里的所有元素 |\n| [remove()](https://www.runoob.com/java/java-arraylist-remove.html) | 删除 arraylist 里的单个元素                   |\n| [size()](https://www.runoob.com/java/java-arraylist-size.html) | 返回 arraylist 里元素数量                     |\n| [isEmpty()](https://www.runoob.com/java/java-arraylist-isempty.html) | 判断 arraylist 是否为空                       |\n| [subList()](https://www.runoob.com/java/java-arraylist-sublist.html) | 截取部分 arraylist 的元素                     |\n| [set()](https://www.runoob.com/java/java-arraylist-set.html) | 替换 arraylist 中指定索引的元素               |\n| [sort()](https://www.runoob.com/java/java-arraylist-sort.html) | 对 arraylist 元素进行排序                     |\n| [toArray()](https://www.runoob.com/java/java-arraylist-toarray.html) | 将 arraylist 转换为数组                       |\n| [toString()](https://www.runoob.com/java/java-arraylist-tostring.html) | 将 arraylist 转换为字符串                     |\n| [ensureCapacity](https://www.runoob.com/java/java-arraylist-surecapacity.html)() | 设置指定容量大小的 arraylist                  |\n| [lastIndexOf()](https://www.runoob.com/java/java-arraylist-lastindexof.html) | 返回指定元素在 arraylist 中最后一次出现的位置 |\n| [retainAll()](https://www.runoob.com/java/java-arraylist-retainall.html) | 保留 arraylist 中在指定集合中也存在的那些元素 |\n| [containsAll()](https://www.runoob.com/java/java-arraylist-containsall.html) | 查看 arraylist 是否包含指定集合中的所有元素   |\n| [trimToSize()](https://www.runoob.com/java/java-arraylist-trimtosize.html) | 将 arraylist 中的容量调整为数组中的元素个数   |\n| [removeRange()](https://www.runoob.com/java/java-arraylist-removerange.html) | 删除 arraylist 中指定索引之间存在的元素       |\n| [replaceAll()](https://www.runoob.com/java/java-arraylist-replaceall.html) | 将给定的操作内容替换掉数组中每一个元素        |\n| [removeIf()](https://www.runoob.com/java/java-arraylist-removeif.html) | 删除所有满足特定条件的 arraylist 元素         |\n| [forEach()](https://www.runoob.com/java/java-arraylist-foreach.html) | 遍历 arraylist 中每一个元素并执行特定操作     |\n\n# Java LinkedList\n\n链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。\n\n链表可分为单向链表和双向链表。\n\n一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png)\n\n一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png)\n\nJava LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。\n\n与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。\n\n**以下情况使用 ArrayList :**\n\n- 频繁访问列表中的某一个元素。\n- 只需要在列表末尾进行添加和删除元素操作。\n\n**以下情况使用 LinkedList :**\n\n- 你需要通过循环迭代来访问列表中的某些元素。\n- 需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。\n\nLinkedList 继承了 AbstractSequentialList 类。\n\nLinkedList 实现了 Queue 接口，可作为队列使用。\n\nLinkedList 实现了 List 接口，可进行列表的相关操作。\n\nLinkedList 实现了 Deque 接口，可作为队列使用。\n\nLinkedList 实现了 Cloneable 接口，可实现克隆。\n\nLinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。\n\n\n\nLinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n```java\n// 引入 LinkedList 类\nimport java.util.LinkedList; \n\nLinkedList<E> list = new LinkedList<E>();   // 普通创建方法\n或者\nLinkedList<E> list = new LinkedList(Collection<? extends E> c); // 使用集合创建链表\n```\n\n### 常用方法\n\n| 方法                                           | 描述                                                         |\n| ---------------------------------------------- | :----------------------------------------------------------- |\n| public boolean add(E e)                        | 链表末尾添加元素，返回是否成功，成功为 true，失败为 false。  |\n| public void add(int index, E element)          | 向指定位置插入元素。                                         |\n| public boolean addAll(Collection c)            | 将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。 |\n| public boolean addAll(int index, Collection c) | 将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。 |\n| public void addFirst(E e)                      | 元素添加到头部。                                             |\n| public void addLast(E e)                       | 元素添加到尾部。                                             |\n| public boolean offer(E e)                      | 向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。 |\n| public boolean offerFirst(E e)                 | 头部插入元素，返回是否成功，成功为 true，失败为 false。      |\n| public boolean offerLast(E e)                  | 尾部插入元素，返回是否成功，成功为 true，失败为 false。      |\n| public void clear()                            | 清空链表。                                                   |\n| public E removeFirst()                         | 删除并返回第一个元素。                                       |\n| public E removeLast()                          | 删除并返回最后一个元素。                                     |\n| public boolean remove(Object o)                | 删除某一元素，返回是否成功，成功为 true，失败为 false。      |\n| public E remove(int index)                     | 删除指定位置的元素。                                         |\n| public E poll()                                | 删除并返回第一个元素。                                       |\n| public E remove()                              | 删除并返回第一个元素。                                       |\n| public boolean contains(Object o)              | 判断是否含有某一元素。                                       |\n| public E get(int index)                        | 返回指定位置的元素。                                         |\n| public E getFirst()                            | 返回第一个元素。                                             |\n| public E getLast()                             | 返回最后一个元素。                                           |\n| public int indexOf(Object o)                   | 查找指定元素从前往后第一次出现的索引。                       |\n| public int lastIndexOf(Object o)               | 查找指定元素最后一次出现的索引。                             |\n| public E peek()                                | 返回第一个元素。                                             |\n| public E element()                             | 返回第一个元素。                                             |\n| public E peekFirst()                           | 返回头部元素。                                               |\n| public E peekLast()                            | 返回尾部元素。                                               |\n| public E set(int index, E element)             | 设置指定位置的元素。                                         |\n| public Object clone()                          | 克隆该列表。                                                 |\n| public Iterator descendingIterator()           | 返回倒序迭代器。                                             |\n| public int size()                              | 返回链表元素个数。                                           |\n| public ListIterator listIterator(int index)    | 返回从指定位置开始到末尾的迭代器。                           |\n| public Object[] toArray()                      | 返回一个由链表元素组成的数组。                               |\n| public T[] toArray(T[] a)                      | 返回一个由链表元素转换类型而成的数组。                       |\n\n\n\n# Java HashSet\n\nHashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。\n\nHashSet 允许有 null 值。\n\nHashSet 是无序的，即不会记录插入的顺序。\n\nHashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。\n\nHashSet 实现了 Set 接口。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/07/java-hashset-hierarchy.png)\n\nHashSet 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。\n\n\n\n# Java HashMap\n\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\n\nHashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。\n\nHashMap 是无序的，即不会记录插入的顺序。\n\nHashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/07/WV9wXLl.png)\n\nHashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。\n\n## Java HashMap 方法\n\nhashmap\n\nJava HashMap 常用方法列表如下：\n\n| 方法                                                         | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [clear()](https://www.runoob.com/java/java-hashmap-clear.html) | 删除 hashMap 中的所有键/值对                                 |\n| [clone()](https://www.runoob.com/java/java-hashmap-clone.html) | 复制一份 hashMap                                             |\n| [isEmpty()](https://www.runoob.com/java/java-hashmap-isempty.html) | 判断 hashMap 是否为空                                        |\n| [size()](https://www.runoob.com/java/java-hashmap-size.html) | 计算 hashMap 中键/值对的数量                                 |\n| [put()](https://www.runoob.com/java/java-hashmap-put.html)   | 将键/值对添加到 hashMap 中                                   |\n| [putAll()](https://www.runoob.com/java/java-hashmap-putall.html) | 将所有键/值对添加到 hashMap 中                               |\n| [putIfAbsent()](https://www.runoob.com/java/java-hashmap-putifabsent.html) | 如果 hashMap 中不存在指定的键，则将指定的键/值对插入到 hashMap 中。 |\n| [remove()](https://www.runoob.com/java/java-hashmap-remove.html) | 删除 hashMap 中指定键 key 的映射关系                         |\n| [containsKey()](https://www.runoob.com/java/java-hashmap-containskey.html) | 检查 hashMap 中是否存在指定的 key 对应的映射关系。           |\n| [containsValue()](https://www.runoob.com/java/java-hashmap-containsvalue.html) | 检查 hashMap 中是否存在指定的 value 对应的映射关系。         |\n| [replace()](https://www.runoob.com/java/java-hashmap-replace.html) | 替换 hashMap 中是指定的 key 对应的 value。                   |\n| [replaceAll()](https://www.runoob.com/java/java-hashmap-replaceall.html) | 将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。    |\n| [get()](https://www.runoob.com/java/java-hashmap-get.html)   | 获取指定 key 对应对 value                                    |\n| [getOrDefault()](https://www.runoob.com/java/java-hashmap-getordefault.html) | 获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值 |\n| [forEach()](https://www.runoob.com/java/java-hashmap-foreach.html) | 对 hashMap 中的每个映射执行指定的操作。                      |\n| [entrySet()](https://www.runoob.com/java/java-hashmap-entryset.html) | 返回 hashMap 中所有映射项的集合集合视图。                    |\n| [keySet](https://www.runoob.com/java/java-hashmap-keyset.html)() | 返回 hashMap 中所有 key 组成的集合视图。                     |\n| [values()](https://www.runoob.com/java/java-hashmap-values.html) | 返回 hashMap 中存在的所有 value 值。                         |\n| [merge()](https://www.runoob.com/java/java-hashmap-merge.html) | 添加键值对到 hashMap 中                                      |\n| [compute()](https://www.runoob.com/java/java-hashmap-compute.html) | 对 hashMap 中指定 key 的值进行重新计算                       |\n| [computeIfAbsent()](https://www.runoob.com/java/java-hashmap-computeifabsent.html) | 对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中 |\n| [computeIfPresent()](https://www.runoob.com/java/java-hashmap-computeifpresent.html) | 对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。 |\n\n# Java Iterator（迭代器）\n\nJava迭代器（Iterator）是 Java 集合框架中的一种机制，是一种用于遍历集合（如列表、集合和映射等）的接口。\n\n它提供了一种统一的方式来访问集合中的元素，而不需要了解底层集合的具体实现细节。\n\nJava Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 [ArrayList](https://www.runoob.com/java/java-arraylist.html) 和 [HashSet](https://www.runoob.com/java/java-hashset.html) 等集合。\n\nIterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/07/ListIterator-Class-Diagram.jpg)\n\n迭代器接口定义了几个方法，最常用的是以下三个：\n\n- **next()** - 返回迭代器的下一个元素，并将迭代器的指针移到下一个位置。\n- **hasNext()** - 用于判断集合中是否还有下一个元素可以访问。\n- **remove()** - 从集合中删除迭代器最后访问的元素（可选操作）。\n\nIterator 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n```\nimport java.util.Iterator; // 引入 Iterator 类\n```\n\n通过使用迭代器，我们可以逐个访问集合中的元素，而不需要使用传统的 for 循环或索引。这种方式更加简洁和灵活，并且适用于各种类型的集合。\n\n### 获取一个迭代器\n\n集合想获取一个迭代器可以使用 iterator() 方法:\n\n## 实例\n\n```java\n*// 引入 ArrayList 和 Iterator 类*\n**import** java.util.ArrayList;\n**import** java.util.Iterator;\n\n**public** **class** RunoobTest {\n  **public** **static** **void** main(String[] args) {\n\n​    *// 创建集合*\n​    ArrayList<String> sites = **new** ArrayList<String>();\n​    sites.add(\"Google\");\n​    sites.add(\"Runoob\");\n​    sites.add(\"Taobao\");\n​    sites.add(\"Zhihu\");\n\n​    *// 获取迭代器*\n​    Iterator<String> it = sites.iterator();\n\n​    *// 输出集合中的第一个元素*\n​    System.out.println(it.next());\n  }\n}\n```\n执行以上代码，输出结果如下：\n\n```java\nGoogle\n```\n\n# Java 序列化\n\nJava 序列化是一种将对象转换为字节流的过程，以便可以将对象保存到磁盘上，将其传输到网络上，或者将其存储在内存中，以后再进行反序列化，将字节流重新转换为对象。\n\n序列化在 Java 中是通过 **java.io.Serializable** 接口来实现的，该接口没有任何方法，只是一个标记接口，用于标识类可以被序列化。\n\n当你序列化对象时，你把它包装成一个特殊文件，可以保存、传输或存储。反序列化则是打开这个文件，读取序列化的数据，然后将其还原为对象，以便在程序中使用。\n\n**序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。**\n\n实现 Serializable 接口： 要使一个类可序列化，需要让该类实现 java.io.Serializable 接口，这告诉 Java 编译器这个类可以被序列化，例如：\n\n## 实例\n\n**import** java.io.Serializable;\n\n**public** **class** MyClass **implements** Serializable {\n  *// 类的成员和方法*\n}\n\n**序列化对象：** 使用 ObjectOutputStream 类来将对象序列化为字节流，以下是一个简单的实例：\n\n## 实例\n\nMyClass obj = **new** MyClass();\n**try** {\n  FileOutputStream fileOut = **new** FileOutputStream(\"object.ser\");\n  ObjectOutputStream out = **new** ObjectOutputStream(fileOut);\n  out.writeObject(obj);\n  out.close();\n  fileOut.close();\n} **catch** (IOException e) {\n  e.printStackTrace();\n}\n\n上述代码将一个名为 \"object.ser\" 的文件中的 obj 对象序列化。\n\n**反序列化对象：** 使用 ObjectInputStream 类来从字节流中反序列化对象，以下是一个简单的实例：\n\n## 实例\n\nMyClass obj = **null**;\n**try** {\n  FileInputStream fileIn = **new** FileInputStream(\"object.ser\");\n  ObjectInputStream in = **new** ObjectInputStream(fileIn);\n  obj = (MyClass) in.readObject();\n  in.close();\n  fileIn.close();\n} **catch** (IOException e) {\n  e.printStackTrace();\n} **catch** (ClassNotFoundException e) {\n  e.printStackTrace();\n}\n\n上述代码从 \"object.ser\" 文件中读取字节流并将其反序列化为一个 MyClass 对象。\n\n类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。\n\nObjectOutputStream 类包含很多写方法来写各种数据类型，但是一个特别的方法例外：\n\npublic final void writeObject(Object x) throws IOException\n\n上面的方法序列化一个对象，并将它发送到输出流。相似的 ObjectInputStream 类包含如下反序列化一个对象的方法：\n\npublic final Object readObject() throws IOException,                                  ClassNotFoundException\n\n该方法从流中取出下一个对象，并将对象反序列化。它的返回值为Object，因此，你需要将它转换成合适的数据类型。\n\n### 实例\n\n为了演示序列化在 Java 中是怎样工作的，我将使用之前教程中提到的 Employee 类，假设我们定义了如下的 Employee 类，该类实现了Serializable 接口。\n\n## Employee.java 文件代码：\n\npublic class Employee implements java.io.Serializable {   public String name;   public String address;   public transient int SSN;   public int number;   public void mailCheck()   {      System.out.println(\"Mailing a check to \" + name                           + \" \" + address);   } }\n\n请注意，一个类的对象要想序列化成功，必须满足两个条件：\n\n该类必须实现 java.io.Serializable 接口。\n\n该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。\n\n如果你想知道一个 Java 标准类是否是可序列化的，请查看该类的文档。检验一个类的实例是否能序列化十分简单， 只需要查看该类有没有实现 java.io.Serializable接口。\n\n------\n\n## 序列化对象\n\nObjectOutputStream 类用来序列化一个对象，如下的 SerializeDemo 例子实例化了一个 Employee 对象，并将该对象序列化到一个文件中。\n\n该程序执行后，就创建了一个名为 employee.ser 文件。该程序没有任何输出，但是你可以通过代码研读来理解程序的作用。\n\n**注意：** 当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名。\n\n## SerializeDemo.java 文件代码：\n\nimport java.io.*;  public class SerializeDemo {   public static void main(String [] args)   {      Employee e = new Employee();      e.name = \"Reyan Ali\";      e.address = \"Phokka Kuan, Ambehta Peer\";      e.SSN = 11122333;      e.number = 101;      try      {         FileOutputStream fileOut =         new FileOutputStream(\"/tmp/employee.ser\");         ObjectOutputStream out = new ObjectOutputStream(fileOut);         out.writeObject(e);         out.close();         fileOut.close();         System.out.printf(\"Serialized data is saved in /tmp/employee.ser\");      }catch(IOException i)      {          i.printStackTrace();      }   } }\n\n------\n\n## 反序列化对象\n\n下面的 DeserializeDemo 程序实例了反序列化，/tmp/employee.ser 存储了 Employee 对象。\n\n## DeserializeDemo.java 文件代码：\n\nimport java.io.*;  public class DeserializeDemo {   public static void main(String [] args)   {      Employee e = null;      try      {         FileInputStream fileIn = new FileInputStream(\"/tmp/employee.ser\");         ObjectInputStream in = new ObjectInputStream(fileIn);         e = (Employee) in.readObject();         in.close();         fileIn.close();      }catch(IOException i)      {         i.printStackTrace();         return;      }catch(ClassNotFoundException c)      {         System.out.println(\"Employee class not found\");         c.printStackTrace();         return;      }      System.out.println(\"Deserialized Employee...\");      System.out.println(\"Name: \" + e.name);      System.out.println(\"Address: \" + e.address);      System.out.println(\"SSN: \" + e.SSN);      System.out.println(\"Number: \" + e.number);    } }\n\n以上程序编译运行结果如下所示：\n\n```\nDeserialized Employee...\nName: Reyan Ali\nAddress:Phokka Kuan, Ambehta Peer\nSSN: 0\nNumber:101\n```\n\n这里要注意以下要点：\n\nreadObject() 方法中的 try/catch代码块尝试捕获 ClassNotFoundException 异常。对于 JVM 可以反序列化对象，它必须是能够找到字节码的类。如果JVM在反序列化对象的过程中找不到该类，则抛出一个 ClassNotFoundException 异常。\n\n注意，readObject() 方法的返回值被转化成 Employee 引用。\n\n当对象被序列化时，属性 SSN 的值为 111222333，但是因为该属性是短暂的，该值没有被发送到输出流。所以反序列化后 Employee 对象的 SSN 属性为 0。\n\n\n\n# Java 网络编程\n\n\n\n# Java 多线程编程\n\nJava 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。\n\n多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。\n\n这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。\n\n多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。\n\n\n\n## 一个线程的生命周期\n\n线程是一个动态执行的过程，它也有一个从产生到死亡的过程。\n\n下图显示了一个线程完整的生命周期。\n\n![img](https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg)\n\n- 新建状态:\n\n  使用 **new** 关键字和 **Thread** 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 **start()** 这个线程。\n\n- 就绪状态:\n\n  当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n- 运行状态:\n\n  如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\n\n- 阻塞状态:\n\n  如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： \n\n  - 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。\n  - 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。\n  - 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。\n\n- 死亡状态: \n\n  一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\n\n------\n\n## 线程的优先级\n\n每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。\n\nJava 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。\n\n默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。\n\n具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\n\n------\n\n## 创建一个线程\n\nJava 提供了三种创建线程的方法：\n\n- **通过实现 Runnable 接口；**\n- **通过继承 Thread 类本身；**\n- **通过 Callable 和 Future 创建线程。**\n\n------\n\n## 通过实现 Runnable 接口来创建线程\n\n创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。\n\n为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：\n\n\n\npublic void run()\n\n你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。\n\n在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。\n\nThread 定义了几个构造方法，下面的这个是我们经常使用的：\n\nThread(Runnable threadOb,String threadName);\n\n这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。\n\n新线程创建之后，你调用它的 start() 方法它才会运行。\n\nvoid start();\n\n下面是一个创建线程并开始让它执行的实例：\n\n## 实例\n\nclass RunnableDemo implements Runnable {   private Thread t;   private String threadName;      RunnableDemo( String name) {      threadName = name;      System.out.println(\"Creating \" +  threadName );   }      public void run() {      System.out.println(\"Running \" +  threadName );      try {         for(int i = 4; i > 0; i--) {            System.out.println(\"Thread: \" + threadName + \", \" + i);            // 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(\"Thread \" +  threadName + \" interrupted.\");      }      System.out.println(\"Thread \" +  threadName + \" exiting.\");   }      public void start () {      System.out.println(\"Starting \" +  threadName );      if (t == null) {         t = new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      RunnableDemo R1 = new RunnableDemo( \"Thread-1\");      R1.start();            RunnableDemo R2 = new RunnableDemo( \"Thread-2\");      R2.start();   }    }\n\n编译以上程序运行结果如下：\n\n```\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n```\n\n------\n\n## 通过继承Thread来创建线程\n\n创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。\n\n继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。\n\n该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。\n\n## 实例\n\nclass ThreadDemo extends Thread {   private Thread t;   private String threadName;      ThreadDemo( String name) {      threadName = name;      System.out.println(\"Creating \" +  threadName );   }      public void run() {      System.out.println(\"Running \" +  threadName );      try {         for(int i = 4; i > 0; i--) {            System.out.println(\"Thread: \" + threadName + \", \" + i);            // 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(\"Thread \" +  threadName + \" interrupted.\");      }      System.out.println(\"Thread \" +  threadName + \" exiting.\");   }      public void start () {      System.out.println(\"Starting \" +  threadName );      if (t == null) {         t = new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      ThreadDemo T1 = new ThreadDemo( \"Thread-1\");      T1.start();            ThreadDemo T2 = new ThreadDemo( \"Thread-2\");      T2.start();   }    }\n\n编译以上程序运行结果如下：\n\n```\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n```\n\n------\n\n## Thread 方法\n\n下表列出了Thread类的一些重要方法：\n\n| **序号** |                         **方法描述**                         |\n| :------- | :----------------------------------------------------------: |\n| 1        | **public void start()** 使该线程开始执行；**Java** 虚拟机调用该线程的 run 方法。 |\n| 2        | **public void run()** 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。 |\n| 3        | **public final void setName(String name)** 改变线程名称，使之与参数 name 相同。 |\n| 4        | **public final void setPriority(int priority)**  更改线程的优先级。 |\n| 5        | **public final void setDaemon(boolean on)** 将该线程标记为守护线程或用户线程。 |\n| 6        | **public final void join(long millisec)** 等待该线程终止的时间最长为 millis 毫秒。 |\n| 7        |            **public void interrupt()** 中断线程。            |\n| 8        | **public final boolean isAlive()** 测试线程是否处于活动状态。 |\n\n上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。\n\n| **序号** |                         **方法描述**                         |\n| :------- | :----------------------------------------------------------: |\n| 1        | **public static void yield()** 暂停当前正在执行的线程对象，并执行其他线程。 |\n| 2        | **public static void sleep(long millisec)** 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。 |\n| 3        | **public static boolean holdsLock(Object x)** 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。 |\n| 4        | **public static Thread currentThread()** 返回对当前正在执行的线程对象的引用。 |\n| 5        | **public static void dumpStack()** 将当前线程的堆栈跟踪打印至标准错误流。 |\n\n### 实例\n\n如下的ThreadClassDemo 程序演示了Thread类的一些方法：\n\n## DisplayMessage.java 文件代码：\n\n// 文件名 : DisplayMessage.java // 通过实现 Runnable 接口创建线程 public class DisplayMessage implements Runnable {   private String message;      public DisplayMessage(String message) {      this.message = message;   }      public void run() {      while(true) {         System.out.println(message);      }   } }\n\n## GuessANumber.java 文件代码：\n\n// 文件名 : GuessANumber.java // 通过继承 Thread 类创建线程  public class GuessANumber extends Thread {   private int number;   public GuessANumber(int number) {      this.number = number;   }      public void run() {      int counter = 0;      int guess = 0;      do {         guess = (int) (Math.random() * 100 + 1);         System.out.println(this.getName() + \" guesses \" + guess);         counter++;      } while(guess != number);      System.out.println(\"** Correct!\" + this.getName() + \"in\" + counter + \"guesses.**\");   } }\n\n## ThreadClassDemo.java 文件代码：\n\n// 文件名 : ThreadClassDemo.java public class ThreadClassDemo {    public static void main(String [] args) {      Runnable hello = new DisplayMessage(\"Hello\");      Thread thread1 = new Thread(hello);      thread1.setDaemon(true);      thread1.setName(\"hello\");      System.out.println(\"Starting hello thread...\");      thread1.start();            Runnable bye = new DisplayMessage(\"Goodbye\");      Thread thread2 = new Thread(bye);      thread2.setPriority(Thread.MIN_PRIORITY);      thread2.setDaemon(true);      System.out.println(\"Starting goodbye thread...\");      thread2.start();       System.out.println(\"Starting thread3...\");      Thread thread3 = new GuessANumber(27);      thread3.start();      try {         thread3.join();      }catch(InterruptedException e) {         System.out.println(\"Thread interrupted.\");      }      System.out.println(\"Starting thread4...\");      Thread thread4 = new GuessANumber(75);            thread4.start();      System.out.println(\"main() is ending...\");   } }\n\n运行结果如下，每一次运行的结果都不一样。\n\n```\nStarting hello thread...\nStarting goodbye thread...\nHello\nHello\nHello\nHello\nHello\nHello\nGoodbye\nGoodbye\nGoodbye\nGoodbye\nGoodbye\n.......\n```\n\n------\n\n## 通过 Callable 和 Future 创建线程\n\n- 1. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。\n- 2. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。\n- 3. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。\n- 4. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。\n\n## 实例\n\npublic class CallableThreadTest implements Callable<Integer> {    public static void main(String[] args)      {          CallableThreadTest ctt = new CallableThreadTest();          FutureTask<Integer> ft = new FutureTask<>(ctt);          for(int i = 0;i < 100;i++)          {              System.out.println(Thread.currentThread().getName()+\" 的循环变量i的值\"+i);              if(i==20)              {                  new Thread(ft,\"有返回值的线程\").start();              }          }          try          {              System.out.println(\"子线程的返回值：\"+ft.get());          } catch (InterruptedException e)          {              e.printStackTrace();          } catch (ExecutionException e)          {              e.printStackTrace();          }        }    @Override      public Integer call() throws Exception      {          int i = 0;          for(;i<100;i++)          {              System.out.println(Thread.currentThread().getName()+\" \"+i);          }          return i;      }   }\n\n------\n\n## 创建线程的三种方式的对比\n\n- 1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n- 2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。\n\n------\n\n## 线程的几个主要概念\n\n在多线程编程时，你需要了解以下几个概念：\n\n- 线程同步\n- 线程间通信\n- 线程死锁\n- 线程控制：挂起、停止和恢复\n\n------\n\n## 多线程的使用\n\n有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。\n\n通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。\n\n请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU 花费在上下文的切换的时间将多于执行程序的时间！\n\n\n\n\n\n\n\n------\n\n\n\n# Java 实例\n\n本章节我们将为大家介绍 Java 常用的实例，通过实例学习我们可以更快的掌握 Java 的应用。\n\n------\n\n## Java 环境设置实例\n\n1. [Java 实例 – 如何编译一个Java 文件？](https://www.runoob.com/java/env-compile.html)\n2. [Java 实例 – Java 如何运行一个编译过的类文件?](https://www.runoob.com/java/env-run.html)\n3. [Java 实例 - 如何执行指定class文件目录（classpath）？](https://www.runoob.com/java/env-classpath.html)\n4. [Java 实例 – 如何查看当前 Java 运行的版本?](https://www.runoob.com/java/env-version.html)\n\n------\n\n## Java 字符串\n\n1. [Java 实例 – 字符串比较](https://www.runoob.com/java/string-compare.html)\n2. [Java 实例 - 查找字符串最后一次出现的位置](https://www.runoob.com/java/string-last-occurance.html)\n3. [Java 实例 - 删除字符串中的一个字符](https://www.runoob.com/java/string-removing-char.html)\n4. [Java 实例 - 字符串替换](https://www.runoob.com/java/string-replace.html)\n5. [Java 实例 - 字符串反转](https://www.runoob.com/java/string-reverse.html)\n6. [Java 实例 - 字符串查找](https://www.runoob.com/java/string-search.html)\n7. [Java 实例 - 字符串分割](https://www.runoob.com/java/string-split.html)\n8. [Java 实例 - 字符串分割(StringTokenizer)](https://www.runoob.com/java/java-stringtokenizer-example.html)\n9. [Java 实例 - 字符串小写转大写](https://www.runoob.com/java/string-uppercase.html)\n10. [Java 实例 - 测试两个字符串区域是否相等](https://www.runoob.com/java/string-regionmatch.html)\n11. [Java 实例 - 字符串性能比较测试](https://www.runoob.com/java/string-performance.html)\n12. [Java 实例 - 字符串优化](https://www.runoob.com/java/string-optimization.html)\n13. [Java 实例 - 字符串格式化](https://www.runoob.com/java/string-format.html)\n14. [Java 实例 - 连接字符串](https://www.runoob.com/java/string-concatenation.html)\n\n------\n\n## Java 数组\n\n1. [Java 实例 – 数组排序及元素查找](https://www.runoob.com/java/arrays-search.html)\n2. [Java 实例 – 数组添加元素](https://www.runoob.com/java/arrays-insert.html)\n3. [Java 实例 – 获取数组长度](https://www.runoob.com/java/arrays-upperbound.html)\n4. [Java 实例 – 数组反转](https://www.runoob.com/java/arrays-reverse.html)\n5. [Java 实例 – 数组输出](https://www.runoob.com/java/arrays-output.html)\n6. [Java 实例 – 数组获取最大和最小值](https://www.runoob.com/java/arrays-min-max.html)\n7. [Java 实例 – 数组合并](https://www.runoob.com/java/arrays_merge.html)\n8. [Java 实例 – 数组填充](https://www.runoob.com/java/arrays-fill.html)\n9. [Java 实例 – 数组扩容](https://www.runoob.com/java/arrays-extension.html)\n10. [Java 实例 – 查找数组中的重复元素](https://www.runoob.com/java/arrays-compare.html)\n11. [Java 实例 – 删除数组元素](https://www.runoob.com/java/arrays-remove.html)\n12. [Java 实例 – 数组差集](https://www.runoob.com/java/arrays-removeall.html)\n13. [Java 实例 – 数组交集](https://www.runoob.com/java/arrays-retainall.html)\n14. [Java 实例 – 在数组中查找指定元素](https://www.runoob.com/java/arrays-find.html)\n15. [Java 实例 – 判断数组是否相等](https://www.runoob.com/java/arrays-equal.html)\n16. [Java 实例 - 数组并集](https://www.runoob.com/java/arrays-union.html)\n\n------\n\n## Java 时间处理\n\n1. [Java 实例 - 格式化时间（SimpleDateFormat）](https://www.runoob.com/java/date-time-am-pm.html)\n2. [Java 实例 - 获取当前时间](https://www.runoob.com/java/date-time-datetime.html)\n3. [Java 实例 - 获取年份、月份等](https://www.runoob.com/java/date-year-month.html)\n4. [Java 实例 - 时间戳转换成时间](https://www.runoob.com/java/date-timestamp2date.html)\n\n------\n\n## Java 方法\n\n1. [Java 实例 – 方法重载](https://www.runoob.com/java/method-overloading.html)\n2. [Java 实例 – 输出数组元素](https://www.runoob.com/java/method-array.html)\n3. [Java 实例 – 汉诺塔算法](https://www.runoob.com/java/method-tower.html)\n4. [Java 实例 – 斐波那契数列](https://www.runoob.com/java/method-fibonacci.html)\n5. [Java 实例 – 阶乘](https://www.runoob.com/java/method-factorial.html)\n6. [Java 实例 – 方法覆盖](https://www.runoob.com/java/java/method-override.html)\n7. [Java 实例 – instanceOf 关键字用法](https://www.runoob.com/java/java/method-instanceof.html)\n8. [Java 实例 – break 关键字用法](https://www.runoob.com/java/java/method-break.html)\n9. [Java 实例 – continue 关键字用法](https://www.runoob.com/java/java/method-continue.html)\n10. [Java 实例 – 标签(Label)](https://www.runoob.com/java/java/method-label.html)\n11. [Java 实例 – enum 和 switch 语句使用](https://www.runoob.com/java/java/method-enum.html)\n12. [Java 实例 – Enum（枚举）构造函数及方法的使用](https://www.runoob.com/java/java/method-enum1.html)\n13. [Java 实例 – for 和 foreach循环使用](https://www.runoob.com/java/java/method-for.html)\n14. [Java 实例 – Varargs 可变参数使用](https://www.runoob.com/java/java/method-varargs.html)\n15. [Java 实例 – 重载(overloading)方法中使用 Varargs](https://www.runoob.com/java/java/method-varargs1.html)\n\n------\n\n## 打印图形\n\n1. [Java 实例 – 打印菱形](https://www.runoob.com/java/java-print-diamond.html)\n2. [Java 实例 – 九九乘法表](https://www.runoob.com/java/java-print-multiplicationtable.html)\n3. [Java 实例 – 打印三角形](https://www.runoob.com/java/java-print-the-triangle.html)\n4. [Java 实例 – 打印倒立的三角形](https://www.runoob.com/java/java-print-invertedtriangle.html)\n5. [Java 实例 – 打印平行四边形](https://www.runoob.com/java/java-print-parallelogram.html)\n6. [Java 实例 – 打印矩形](https://www.runoob.com/java/java-print-rect.html)\n\n------\n\n## Java 文件操作\n\n1. [Java 实例 - 文件写入](https://www.runoob.com/java/file-write.html)\n2. [Java 实例 - 读取文件内容](https://www.runoob.com/java/file-read.html)\n3. [Java 实例 - 删除文件](https://www.runoob.com/java/file-delete.html)\n4. [Java 实例 - 将文件内容复制到另一个文件](https://www.runoob.com/java/file-copy.html)\n5. [Java 实例 - 向文件中追加数据](https://www.runoob.com/java/file-append.html)\n6. [Java 实例 - 创建临时文件](https://www.runoob.com/java/file-create-temp.html)\n7. [Java 实例 - 修改文件最后的修改日期](https://www.runoob.com/java/file-date-modify.html)\n8. [Java 实例 - 获取文件大小](https://www.runoob.com/java/file-size.html)\n9. [Java 实例 - 文件重命名](https://www.runoob.com/java/file-rename.html)\n10. [Java 实例 - 设置文件只读](https://www.runoob.com/java/file-read-only.html)\n11. [Java 实例 - 检测文件是否存在](https://www.runoob.com/java/file-exist.html)\n12. [Java 实例 - 在指定目录中创建文件](https://www.runoob.com/java/file-dir.html)\n13. [Java 实例 - 获取文件修改时间](https://www.runoob.com/java/file-date.html)\n14. [Java 实例 - 创建文件](https://www.runoob.com/java/file-create.html)\n15. [Java 实例 - 文件路径比较](https://www.runoob.com/java/file-compare.html)\n\n------\n\n## Java 目录操作\n\n1. [Java 实例 - 递归创建目录](https://www.runoob.com/java/dir-create.html)\n2. [Java 实例 - 删除目录](https://www.runoob.com/java/dir-delete.html)\n3. [Java 实例 - 判断目录是否为空](https://www.runoob.com/java/dir-empty.html)\n4. [Java 实例 - 判断文件是否隐藏](https://www.runoob.com/java/dir-hidden.html)\n5. [Java 实例 - 获取目录大小](https://www.runoob.com/java/dir-size.html)\n6. [Java 实例 - 在指定目录中查找文件](https://www.runoob.com/java/dir-search.html)\n7. [Java 实例 - 获取文件的上级目录](https://www.runoob.com/java/dir-parent.html)\n8. [Java 实例 - 获取目录最后修改时间](https://www.runoob.com/java/dir-modification.html)\n9. [Java 实例 - 打印目录结构](https://www.runoob.com/java/dir-hierarchy.html)\n10. [Java 实例 - 遍历指定目录下的所有目录](https://www.runoob.com/java/dir-display.html)\n11. [Java 实例 - 遍历指定目录下的所有文件](https://www.runoob.com/java/dir-sub.html)\n12. [Java 实例 - 在指定目录中查找文件](https://www.runoob.com/java/dir-search-file.html)\n13. [Java 实例 - 遍历系统根目录](https://www.runoob.com/java/dir-root.html)\n14. [Java 实例 - 查看当前工作目录](https://www.runoob.com/java/dir-current.html)\n15. [Java 实例 - 遍历目录](https://www.runoob.com/java/dir-traverse.html)\n\n------\n\n## Java 异常处理\n\n1. [Java 实例 - 异常处理方法](https://www.runoob.com/java/exception-method.html)\n2. [Java 实例 - 多个异常处理（多个catch）](https://www.runoob.com/java/exception-hierarchy.html)\n3. [Java 实例 - Finally的用法](https://www.runoob.com/java/exception-finally.html)\n4. [Java 实例 - 使用 catch 处理异常](https://www.runoob.com/java/exception-catch.html)\n5. [Java 实例 - 多线程异常处理](https://www.runoob.com/java/exception-thread.html)\n6. [Java 实例 - 获取异常的堆栈信息](https://www.runoob.com/java/exception-printstack.html)\n7. [Java 实例 - 重载方法异常处理](https://www.runoob.com/java/exception-overloaded-method.html)\n8. [Java 实例 - 链试异常](https://www.runoob.com/java/exception-chain.html)\n9. [Java 实例 - 自定义异常](https://www.runoob.com/java/exception-user.html)\n\n------\n\n## Java 数据结构\n\n1. [Java 实例 – 数字求和运算](https://www.runoob.com/java/data-add.html)\n2. [Java 实例 – 利用堆栈将中缀表达式转换成后缀 ](https://www.runoob.com/java/data-intopost.html)\n3. [Java 实例 – 在链表（LinkedList）的开头和结 ](https://www.runoob.com/java/data-insert.html)\n4. [Java 实例 – 获取链表（LinkedList）的第一个 ](https://www.runoob.com/java/data-element.html)\n5. [Java 实例 – 删除链表中的元素](https://www.runoob.com/java/data-replace.html)\n6. [Java 实例 – 获取链表的元素](https://www.runoob.com/java/data_linklist.html)\n7. [Java 实例 – 获取向量元素的索引值](https://www.runoob.com/java/data-vecsort.html)\n8. [Java 实例 – 栈的实现](https://www.runoob.com/java/data-stack.html)\n9. [Java 实例 – 链表元素查找](https://www.runoob.com/java/data-search.html)\n10. [Java 实例 – 压栈出栈的方法实现字符串反转](https://www.runoob.com/java/data-reverse.html)\n11. [Java 实例 – 队列（Queue）用法](https://www.runoob.com/java/data-queue.html)\n12. [Java 实例 – 获取向量的最大元素](https://www.runoob.com/java/data-vec-max.html)\n13. [Java 实例 – 链表修改](https://www.runoob.com/java/data-update.html)\n14. [Java 实例 – 旋转向量](https://www.runoob.com/java/data-swap.html)\n\n------\n\n## Java 集合\n\n1. [Java 实例 – 数组转集合](https://www.runoob.com/java/collection-array.html)\n2. [Java 实例 – 集合比较](https://www.runoob.com/java/collection-compare.html)\n3. [Java 实例 – HashMap遍历](https://www.runoob.com/java/collection-iterate.html)\n4. [Java 实例 – 集合长度](https://www.runoob.com/java/collection-size.html)\n5. [Java 实例 – 集合打乱顺序](https://www.runoob.com/java/collection-shuffle.html)\n6. [Java 实例 – 集合遍历](https://www.runoob.com/java/collection-iterator.html)\n7. [Java 实例 – 集合反转](https://www.runoob.com/java/collection-reverse.html)\n8. [Java 实例 – 删除集合中指定元素](https://www.runoob.com/java/collection-remove.html)\n9. [Java 实例 – 只读集合](https://www.runoob.com/java/collection-readonly.html)\n10. [Java 实例 – 集合输出](https://www.runoob.com/java/collection-print.html)\n11. [Java 实例 – 集合转数组](https://www.runoob.com/java/collection-conversion.html)\n12. [Java 实例 – List 循环移动元素](https://www.runoob.com/java/collection-rotate.html)\n13. [Java 实例 – 查找 List 中的最大最小值](https://www.runoob.com/java/collection-minmax.html)\n14. [Java 实例 – 遍历 HashTable 的键值](https://www.runoob.com/java/collection-hashtable-key.html)\n15. [Java 实例 – 使用 Enumeration 遍历 HashTable](https://www.runoob.com/java/collection-enumeration.html)\n16. [Java 实例 – 集合中添加不同类型元素](https://www.runoob.com/java/collection-all.html)\n17. [Java 实例 – List 元素替换](https://www.runoob.com/java/collection-replace.html)\n18. [Java 实例 – List 截取](https://www.runoob.com/java/collection-sublist.html)\n\n------\n\n## Java 网络实例\n\n1. [Java 实例 – 获取指定主机的IP地址](https://www.runoob.com/java/net-address.html)\n2. [Java 实例 – 查看端口是否已使用](https://www.runoob.com/java/net-port.html)\n3. [Java 实例 – 获取本机ip地址及主机名](https://www.runoob.com/java/net-localip.html)\n4. [Java 实例 – 获取远程文件大小](https://www.runoob.com/java/net-serverfile.html)\n5. [Java 实例 – Socket 实现多线程服务器程序](https://www.runoob.com/java/net-multisoc.html)\n6. [Java 实例 – 查看主机指定文件的最后修改时间](https://www.runoob.com/java/net-filetime.html)\n7. [Java 实例 – 使用 Socket 连接到指定主机](https://www.runoob.com/java/net-connected.html)\n8. [Java 实例 – 网页抓取](https://www.runoob.com/java/net-webpage.html)\n9. [Java 实例 – 获取 URL响应头的日期信息](https://www.runoob.com/java/net-urldate.html)\n10. [Java 实例 – 获取 URL 响应头信息](https://www.runoob.com/java/net-url-header.html)\n11. [Java 实例 – 解析 URL](https://www.runoob.com/java/net-url.html)\n12. [Java 实例 – ServerSocket 和 Socket 通信实例](https://www.runoob.com/java/net-serversocket-socket.html)\n\n------\n\n## Java 线程\n\n1. [Java 实例 – 查看线程是否存活](https://www.runoob.com/java/thread-alive.html)\n2. [Java 实例 – 获取当前线程名称](https://www.runoob.com/java/thread-name.html)\n3. [Java 实例 – 状态监测](https://www.runoob.com/java/thread-monitor.html)\n4. [Java 实例 – 线程优先级设置](https://www.runoob.com/java/thread-getpri.html)\n5. [Java 实例 – 死锁及解决方法](https://www.runoob.com/java/thread-deadlock.html)\n6. [Java 实例 – 获取线程id](https://www.runoob.com/java/thread-id.html)\n7. [Java 实例 – 线程挂起](https://www.runoob.com/java/thread-suspend.html)\n8. [Java 实例 – 终止线程](https://www.runoob.com/java/thread-stop.html)\n9. [Java 实例 – 生产者/消费者问题](https://www.runoob.com/html/thread-procon.html)\n10. [Java 实例 – 获取线程状态](https://www.runoob.com/java/thread-status.html)\n11. [Java 实例 – 获取所有线程](https://www.runoob.com/java/thread-showall.html)\n12. [Java 实例 – 查看线程优先级](https://www.runoob.com/java/thread-priorityinfo.html)\n13. [Java 实例 – 中断线程](https://www.runoob.com/java/thread-interrupt.html)\n","source":"_posts/Java复习.md","raw":"---\ntitle: Java复习\ndate: 2024-08-07T09:58:38.255Z\ntags: []\ncategories: []\n---\n[TOC]\n\n\n\n\n\n\n\n# Java数据结构\n\n###  数组（arrays）\n\n数组（Arrays）是一种基本的数据结构，可以存储固定大小的相同类型的元素。\n\n```\nint[] array = new int[5];\n```\n\n- **特点：** 固定大小，存储相同类型的元素。\n- **优点：** 随机访问元素效率高。\n- **缺点：** 大小固定，插入和删除元素相对较慢。\n\n\n\n### 列表（Lists）\n\nJava 提供了多种列表实现，如 ArrayList 和 LinkedList。\n\n```\nList<String> arrayList = new ArrayList<>();\nList<Integer> linkedList = new LinkedList<>();\n```\n\n**ArrayList:**\n\n- **特点：** 动态数组，可变大小。\n- **优点：** 高效的随机访问和快速尾部插入。\n- **缺点：** 中间插入和删除相对较慢。\n\n**LinkedList:**\n\n- **特点：** 双向链表，元素之间通过指针连接。\n- **优点：** 插入和删除元素高效，迭代器性能好。\n- **缺点：** 随机访问相对较慢。\n\n### 集合（Sets）\n\n集合（Sets）用于存储不重复的元素，常见的实现有 HashSet 和 TreeSet。\n\n```\nSet<String> hashSet = new HashSet<>();\nSet<Integer> treeSet = new TreeSet<>();\n```\n\n**HashSet:**\n\n- **特点：** 无序集合，基于HashMap实现。\n- **优点：** 高效的查找和插入操作。\n- **缺点：** 不保证顺序。\n\n**TreeSet:**\n\n- **特点：**TreeSet 是有序集合，底层基于红黑树实现，不允许重复元素。\n- **优点：** 提供自动排序功能，适用于需要按顺序存储元素的场景。\n- **缺点：** 性能相对较差，不允许插入 null 元素。\n\n### 映射（Maps）\n\n映射（Maps）用于存储键值对，常见的实现有 HashMap 和 TreeMap。\n\n```\nMap<String, Integer> hashMap = new HashMap<>();\nMap<String, Integer> treeMap = new TreeMap<>();\n```\n\n**HashMap:**\n\n- **特点：** 基于哈希表实现的键值对存储结构。\n- **优点：** 高效的查找、插入和删除操作。\n- **缺点：** 无序，不保证顺序。\n\n**TreeMap:**\n\n- **特点：** 基于红黑树实现的有序键值对存储结构。\n- **优点：** 有序，支持按照键的顺序遍历。\n- **缺点：** 插入和删除相对较慢。\n\n### 栈（Stack）\n\n栈（Stack）是一种线性数据结构，它按照后进先出（Last In, First Out，LIFO）的原则管理元素。在栈中，新元素被添加到栈的顶部，而只能从栈的顶部移除元素。这就意味着最后添加的元素是第一个被移除的。\n\n```\nStack<Integer> stack = new Stack<>();\n```\n\n**Stack 类:**\n\n- **特点：** 代表一个栈，通常按照后进先出（LIFO）的顺序操作元素。\n\n### 队列（Queue）\n\n队列（Queue）遵循先进先出（FIFO）原则，常见的实现有 LinkedList 和 PriorityQueue。\n\n```\nQueue<String> queue = new LinkedList<>();\n```\n\n**Queue 接口:**\n\n- **特点：** 代表一个队列，通常按照先进先出（FIFO）的顺序操作元素。\n- **实现类：** LinkedList, PriorityQueue, ArrayDeque。\n\n### 堆（Heap）\n\n堆（Heap）优先队列的基础，可以实现最大堆和最小堆。\n\n```\nPriorityQueue<Integer> minHeap = new PriorityQueue<>();\nPriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n```\n\n### 树（Trees）\n\nJava 提供了 TreeNode 类型，可以用于构建二叉树等数据结构。\n\n```\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n```\n\n### 图（Graphs）\n\n图的表示通常需要自定义数据结构或使用图库，Java 没有内建的图类。\n\n以上介绍的只是 Java 中一些常见的数据结构，实际上还有很多其他的数据结构和算法可以根据具体问题选择使用。\n\n\n\n------\n\n\n\n\n\n# Java 集合框架\n\n集合框架被设计成要满足以下几个目标。\n\n- 该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。\n- 该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。\n- 对一个集合的扩展和适应必须是简单的。\n\n## 集合接口\n\n集合框架定义了一些接口。本节提供了每个接口的概述：\n\n| 序号 | 接口描述                                                     |\n| :--- | :----------------------------------------------------------- |\n| 1    | Collection 接口 Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。 |\n| 2    | List 接口 List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序（插入顺序）的对象。 |\n| 3    | Set Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。 |\n| 4    | SortedSet  继承于Set保存有序的集合。                         |\n| 5    | Map Map 接口存储一组键值对象，提供key（键）到value（值）的映射。 |\n| 6    | Map.Entry  描述在一个Map中的一个元素（键/值对）。是一个 Map 的内部接口。 |\n| 7    | SortedMap 继承于 Map，使 Key 保持在升序排列。                |\n| 8    | Enumeration 这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。 |\n\n### Set和List的区别\n\n- 1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。\n- 2. Set 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 **<实现类有HashSet,TreeSet>**。\n- 3. List 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 List 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 **<实现类有ArrayList,LinkedList,Vector>** 。\n\n## 集合实现类（集合类）\n\nJava提供了一套实现了Collection接口的标准集合类。其中一些是具体类，这些类可以直接拿来使用，而另外一些是抽象类，提供了接口的部分实现。\n\n标准集合类汇总于下表：\n\n| 序号 | 类描述                                                       |\n| :--- | :----------------------------------------------------------- |\n| 1    | **AbstractCollection**  实现了大部分的集合接口。             |\n| 2    | **AbstractList**  继承于AbstractCollection 并且实现了大部分List接口。 |\n| 3    | **AbstractSequentialList**  继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。 |\n| 4    | [LinkedList](https://www.runoob.com/java/java-linkedlist.html) 该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如： `List list=Collections.synchronizedList(newLinkedList(...));`LinkedList 查找效率低。 |\n| 5    | [ArrayList](https://www.runoob.com/java/java-arraylist.html) 该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。 |\n| 6    | **AbstractSet**  继承于AbstractCollection 并且实现了大部分Set接口。 |\n| 7    | [HashSet](https://www.runoob.com/java/java-hashset.html) 该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。 |\n| 8    | LinkedHashSet 具有可预知迭代顺序的 `Set` 接口的哈希表和链接列表实现。 |\n| 9    | TreeSet 该类实现了Set接口，可以实现排序等功能。              |\n| 10   | **AbstractMap**  实现了大部分的Map接口。                     |\n| 11   | [HashMap](https://www.runoob.com/java/java-hashmap.html) HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。 |\n| 12   | TreeMap 继承了AbstractMap，并且使用一颗树。                  |\n| 13   | WeakHashMap 继承AbstractMap类，使用弱密钥的哈希表。          |\n| 14   | LinkedHashMap 继承于HashMap，使用元素的自然顺序对元素进行排序. |\n| 15   | IdentityHashMap 继承AbstractMap类，比较文档时使用引用相等。  |\n\n在前面的教程中已经讨论通过java.util包中定义的类，如下所示：\n\n| 序号 | 类描述                                                       |\n| :--- | :----------------------------------------------------------- |\n| 1    | Vector 该类和ArrayList非常相似，但是该类是同步的，可以用在多线程的情况，该类允许设置默认的增长长度，默认扩容方式为原来的2倍。 |\n| 2    | Stack 栈是Vector的一个子类，它实现了一个标准的后进先出的栈。 |\n| 3    | Dictionary Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。 |\n| 4    | Hashtable Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。 |\n| 5    | Properties Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。 |\n| 6    | BitSet 一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。 |\n\n------\n\n## 集合算法\n\n集合框架定义了几种算法，可用于集合和映射。这些算法被定义为集合类的静态方法。\n\n在尝试比较不兼容的类型时，一些方法能够抛出 ClassCastException异常。当试图修改一个不可修改的集合时，抛出UnsupportedOperationException异常。\n\n集合定义三个静态的变量：EMPTY_SET，EMPTY_LIST，EMPTY_MAP的。这些变量都不可改变。\n\n\n\n| 序号 | 算法描述                                               |\n| :--- | :----------------------------------------------------- |\n| 1    | Collection Algorithms 这里是一个列表中的所有算法实现。 |\n\n------\n\n## 如何使用迭代器\n\n通常情况下，你会希望遍历一个集合中的元素。例如，显示集合中的每个元素。\n\n一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架，但是还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了[Iterator](https://www.runoob.com/java/java-iterator.html) 接口或 ListIterator接口。\n\n迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator 继承了 Iterator，以允许双向遍历列表和修改元素。\n\n| 序号 | 迭代器方法描述                                               |\n| :--- | :----------------------------------------------------------- |\n| 1    | [使用 Java Iterator](https://www.runoob.com/java/java-iterator.html) 这里通过实例列出 Iterator 和 ListIterator 接口提供的所有方法。 |\n\n### 遍历 ArrayList\n\n## 实例\n\nimport java.util.*;  public class Test{ public static void main(String[] args) {     List<String> list=new ArrayList<String>();     list.add(\"Hello\");     list.add(\"World\");     list.add(\"HAHAHAHA\");     //第一种遍历方法使用 For-Each 遍历 List     for (String str : list) {            //也可以改写 for(int i=0;i<list.size();i++) 这种形式        System.out.println(str);     }      //第二种遍历，把链表变为数组相关的内容进行遍历     String[] strArray=new String[list.size()];     list.toArray(strArray);     for(int i=0;i<strArray.length;i++) //这里也可以改写为  for(String str:strArray) 这种形式     {        System.out.println(strArray[i]);     }         //第三种遍历 使用迭代器进行相关遍历          Iterator<String> ite=list.iterator();     while(ite.hasNext())//判断下一个元素之后有值     {         System.out.println(ite.next());     } } }\n\n**解析：** \n\n三种方法都是用来遍历ArrayList集合，第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度。\n\n### 遍历 Map\n\n## 实例\n\n```java\nimport java.util.*;\n \npublic class Test{\n     public static void main(String[] args) {\n      Map<String, String> map = new HashMap<String, String>();\n      map.put(\"1\", \"value1\");\n      map.put(\"2\", \"value2\");\n      map.put(\"3\", \"value3\");\n      \n      //第一种：普遍使用，二次取值\n      System.out.println(\"通过Map.keySet遍历key和value：\");\n      for (String key : map.keySet()) {\n       System.out.println(\"key= \"+ key + \" and value= \" + map.get(key));\n      }\n      \n      //第二种\n      System.out.println(\"通过Map.entrySet使用iterator遍历key和value：\");\n      Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\n      while (it.hasNext()) {\n       Map.Entry<String, String> entry = it.next();\n       System.out.println(\"key= \" + entry.getKey() + \" and value= \" + entry.getValue());\n      }\n      \n      //第三种：推荐，尤其是容量大时\n      System.out.println(\"通过Map.entrySet遍历key和value\");\n      for (Map.Entry<String, String> entry : map.entrySet()) {\n       System.out.println(\"key= \" + entry.getKey() + \" and value= \" + entry.getValue());\n      }\n    \n      //第四种\n      System.out.println(\"通过Map.values()遍历所有的value，但不能遍历key\");\n      for (String v : map.values()) {\n       System.out.println(\"value= \" + v);\n      }\n     }\n}\n```\n\n\n\n------\n\n## 如何使用比较器\n\nTreeSet和TreeMap的按照排序顺序来存储元素. 然而，这是通过比较器来精确定义按照什么样的排序顺序。\n\n这个接口可以让我们以不同的方式来排序一个集合。\n\n| 序号 | 比较器方法描述                                               |\n| :--- | :----------------------------------------------------------- |\n| 1    | 使用 Java Comparator 这里通过实例列出Comparator接口提供的所有方法 |\n\n\n\n# Java ArrayList\n\nArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。\n\nArrayList 继承了 AbstractList ，并实现了 List 接口。\n\nArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n```java\nimport java.util.ArrayList; // 引入 ArrayList 类\n\nArrayList<E> objectName =new ArrayList<>();　 // 初始化\n```\n\n- **E**: 泛型数据类型，用于设置 objectName 的数据类型，**只能为引用数据类型**。\n- **objectName**: 对象名。\n\nArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。\n\n### 添加元素\n\nArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 **add()** 方法:\n\n### 访问元素\n\n访问 ArrayList 中的元素可以使用 **get()** 方法：\n\n**注意**：数组的索引值从 0 开始。\n\n### 修改元素\n\n如果要修改 ArrayList 中的元素可以使用 **set()** 方法， set(int index, E element) 方法的第一个参数是索引（index），表示要替换的元素的位置，第二个参数是新元素（element），表示要设置的新值：\n\n### 删除元素\n\n如果要删除 ArrayList 中的元素可以使用 **remove()** 方法：\n\n### 计算大小\n\n如果要计算 ArrayList 中的元素数量可以使用 size() 方法：\n\n### 迭代数组列表\n\n我们可以使用 for 来迭代数组列表中的元素：\n\n也可以使用 for-each 来迭代元素：\n\n### ArrayList 排序\n\nCollections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。\n\n## Java ArrayList 方法\n\nJava ArrayList 常用方法列表如下：\n\n| 方法                                                         | 描述                                          |\n| :----------------------------------------------------------- | :-------------------------------------------- |\n| [add()](https://www.runoob.com/java/java-arraylist-add.html) | 将元素插入到指定位置的 arraylist 中           |\n| [addAll()](https://www.runoob.com/java/java-arraylist-addall.html) | 添加集合中的所有元素到 arraylist 中           |\n| [clear()](https://www.runoob.com/java/java-arraylist-clear.html) | 删除 arraylist 中的所有元素                   |\n| [clone()](https://www.runoob.com/java/java-arraylist-clone.html) | 复制一份 arraylist                            |\n| [contains()](https://www.runoob.com/java/java-arraylist-contains.html) | 判断元素是否在 arraylist                      |\n| [get()](https://www.runoob.com/java/java-arraylist-get.html) | 通过索引值获取 arraylist 中的元素             |\n| [indexOf()](https://www.runoob.com/java/java-arraylist-indexof.html) | 返回 arraylist 中元素的索引值                 |\n| [removeAll()](https://www.runoob.com/java/java-arraylist-removeall.html) | 删除存在于指定集合中的 arraylist 里的所有元素 |\n| [remove()](https://www.runoob.com/java/java-arraylist-remove.html) | 删除 arraylist 里的单个元素                   |\n| [size()](https://www.runoob.com/java/java-arraylist-size.html) | 返回 arraylist 里元素数量                     |\n| [isEmpty()](https://www.runoob.com/java/java-arraylist-isempty.html) | 判断 arraylist 是否为空                       |\n| [subList()](https://www.runoob.com/java/java-arraylist-sublist.html) | 截取部分 arraylist 的元素                     |\n| [set()](https://www.runoob.com/java/java-arraylist-set.html) | 替换 arraylist 中指定索引的元素               |\n| [sort()](https://www.runoob.com/java/java-arraylist-sort.html) | 对 arraylist 元素进行排序                     |\n| [toArray()](https://www.runoob.com/java/java-arraylist-toarray.html) | 将 arraylist 转换为数组                       |\n| [toString()](https://www.runoob.com/java/java-arraylist-tostring.html) | 将 arraylist 转换为字符串                     |\n| [ensureCapacity](https://www.runoob.com/java/java-arraylist-surecapacity.html)() | 设置指定容量大小的 arraylist                  |\n| [lastIndexOf()](https://www.runoob.com/java/java-arraylist-lastindexof.html) | 返回指定元素在 arraylist 中最后一次出现的位置 |\n| [retainAll()](https://www.runoob.com/java/java-arraylist-retainall.html) | 保留 arraylist 中在指定集合中也存在的那些元素 |\n| [containsAll()](https://www.runoob.com/java/java-arraylist-containsall.html) | 查看 arraylist 是否包含指定集合中的所有元素   |\n| [trimToSize()](https://www.runoob.com/java/java-arraylist-trimtosize.html) | 将 arraylist 中的容量调整为数组中的元素个数   |\n| [removeRange()](https://www.runoob.com/java/java-arraylist-removerange.html) | 删除 arraylist 中指定索引之间存在的元素       |\n| [replaceAll()](https://www.runoob.com/java/java-arraylist-replaceall.html) | 将给定的操作内容替换掉数组中每一个元素        |\n| [removeIf()](https://www.runoob.com/java/java-arraylist-removeif.html) | 删除所有满足特定条件的 arraylist 元素         |\n| [forEach()](https://www.runoob.com/java/java-arraylist-foreach.html) | 遍历 arraylist 中每一个元素并执行特定操作     |\n\n# Java LinkedList\n\n链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。\n\n链表可分为单向链表和双向链表。\n\n一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png)\n\n一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png)\n\nJava LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。\n\n与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。\n\n**以下情况使用 ArrayList :**\n\n- 频繁访问列表中的某一个元素。\n- 只需要在列表末尾进行添加和删除元素操作。\n\n**以下情况使用 LinkedList :**\n\n- 你需要通过循环迭代来访问列表中的某些元素。\n- 需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。\n\nLinkedList 继承了 AbstractSequentialList 类。\n\nLinkedList 实现了 Queue 接口，可作为队列使用。\n\nLinkedList 实现了 List 接口，可进行列表的相关操作。\n\nLinkedList 实现了 Deque 接口，可作为队列使用。\n\nLinkedList 实现了 Cloneable 接口，可实现克隆。\n\nLinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。\n\n\n\nLinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n```java\n// 引入 LinkedList 类\nimport java.util.LinkedList; \n\nLinkedList<E> list = new LinkedList<E>();   // 普通创建方法\n或者\nLinkedList<E> list = new LinkedList(Collection<? extends E> c); // 使用集合创建链表\n```\n\n### 常用方法\n\n| 方法                                           | 描述                                                         |\n| ---------------------------------------------- | :----------------------------------------------------------- |\n| public boolean add(E e)                        | 链表末尾添加元素，返回是否成功，成功为 true，失败为 false。  |\n| public void add(int index, E element)          | 向指定位置插入元素。                                         |\n| public boolean addAll(Collection c)            | 将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。 |\n| public boolean addAll(int index, Collection c) | 将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。 |\n| public void addFirst(E e)                      | 元素添加到头部。                                             |\n| public void addLast(E e)                       | 元素添加到尾部。                                             |\n| public boolean offer(E e)                      | 向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。 |\n| public boolean offerFirst(E e)                 | 头部插入元素，返回是否成功，成功为 true，失败为 false。      |\n| public boolean offerLast(E e)                  | 尾部插入元素，返回是否成功，成功为 true，失败为 false。      |\n| public void clear()                            | 清空链表。                                                   |\n| public E removeFirst()                         | 删除并返回第一个元素。                                       |\n| public E removeLast()                          | 删除并返回最后一个元素。                                     |\n| public boolean remove(Object o)                | 删除某一元素，返回是否成功，成功为 true，失败为 false。      |\n| public E remove(int index)                     | 删除指定位置的元素。                                         |\n| public E poll()                                | 删除并返回第一个元素。                                       |\n| public E remove()                              | 删除并返回第一个元素。                                       |\n| public boolean contains(Object o)              | 判断是否含有某一元素。                                       |\n| public E get(int index)                        | 返回指定位置的元素。                                         |\n| public E getFirst()                            | 返回第一个元素。                                             |\n| public E getLast()                             | 返回最后一个元素。                                           |\n| public int indexOf(Object o)                   | 查找指定元素从前往后第一次出现的索引。                       |\n| public int lastIndexOf(Object o)               | 查找指定元素最后一次出现的索引。                             |\n| public E peek()                                | 返回第一个元素。                                             |\n| public E element()                             | 返回第一个元素。                                             |\n| public E peekFirst()                           | 返回头部元素。                                               |\n| public E peekLast()                            | 返回尾部元素。                                               |\n| public E set(int index, E element)             | 设置指定位置的元素。                                         |\n| public Object clone()                          | 克隆该列表。                                                 |\n| public Iterator descendingIterator()           | 返回倒序迭代器。                                             |\n| public int size()                              | 返回链表元素个数。                                           |\n| public ListIterator listIterator(int index)    | 返回从指定位置开始到末尾的迭代器。                           |\n| public Object[] toArray()                      | 返回一个由链表元素组成的数组。                               |\n| public T[] toArray(T[] a)                      | 返回一个由链表元素转换类型而成的数组。                       |\n\n\n\n# Java HashSet\n\nHashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。\n\nHashSet 允许有 null 值。\n\nHashSet 是无序的，即不会记录插入的顺序。\n\nHashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。\n\nHashSet 实现了 Set 接口。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/07/java-hashset-hierarchy.png)\n\nHashSet 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。\n\n\n\n# Java HashMap\n\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\n\nHashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。\n\nHashMap 是无序的，即不会记录插入的顺序。\n\nHashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/07/WV9wXLl.png)\n\nHashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。\n\n## Java HashMap 方法\n\nhashmap\n\nJava HashMap 常用方法列表如下：\n\n| 方法                                                         | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [clear()](https://www.runoob.com/java/java-hashmap-clear.html) | 删除 hashMap 中的所有键/值对                                 |\n| [clone()](https://www.runoob.com/java/java-hashmap-clone.html) | 复制一份 hashMap                                             |\n| [isEmpty()](https://www.runoob.com/java/java-hashmap-isempty.html) | 判断 hashMap 是否为空                                        |\n| [size()](https://www.runoob.com/java/java-hashmap-size.html) | 计算 hashMap 中键/值对的数量                                 |\n| [put()](https://www.runoob.com/java/java-hashmap-put.html)   | 将键/值对添加到 hashMap 中                                   |\n| [putAll()](https://www.runoob.com/java/java-hashmap-putall.html) | 将所有键/值对添加到 hashMap 中                               |\n| [putIfAbsent()](https://www.runoob.com/java/java-hashmap-putifabsent.html) | 如果 hashMap 中不存在指定的键，则将指定的键/值对插入到 hashMap 中。 |\n| [remove()](https://www.runoob.com/java/java-hashmap-remove.html) | 删除 hashMap 中指定键 key 的映射关系                         |\n| [containsKey()](https://www.runoob.com/java/java-hashmap-containskey.html) | 检查 hashMap 中是否存在指定的 key 对应的映射关系。           |\n| [containsValue()](https://www.runoob.com/java/java-hashmap-containsvalue.html) | 检查 hashMap 中是否存在指定的 value 对应的映射关系。         |\n| [replace()](https://www.runoob.com/java/java-hashmap-replace.html) | 替换 hashMap 中是指定的 key 对应的 value。                   |\n| [replaceAll()](https://www.runoob.com/java/java-hashmap-replaceall.html) | 将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。    |\n| [get()](https://www.runoob.com/java/java-hashmap-get.html)   | 获取指定 key 对应对 value                                    |\n| [getOrDefault()](https://www.runoob.com/java/java-hashmap-getordefault.html) | 获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值 |\n| [forEach()](https://www.runoob.com/java/java-hashmap-foreach.html) | 对 hashMap 中的每个映射执行指定的操作。                      |\n| [entrySet()](https://www.runoob.com/java/java-hashmap-entryset.html) | 返回 hashMap 中所有映射项的集合集合视图。                    |\n| [keySet](https://www.runoob.com/java/java-hashmap-keyset.html)() | 返回 hashMap 中所有 key 组成的集合视图。                     |\n| [values()](https://www.runoob.com/java/java-hashmap-values.html) | 返回 hashMap 中存在的所有 value 值。                         |\n| [merge()](https://www.runoob.com/java/java-hashmap-merge.html) | 添加键值对到 hashMap 中                                      |\n| [compute()](https://www.runoob.com/java/java-hashmap-compute.html) | 对 hashMap 中指定 key 的值进行重新计算                       |\n| [computeIfAbsent()](https://www.runoob.com/java/java-hashmap-computeifabsent.html) | 对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中 |\n| [computeIfPresent()](https://www.runoob.com/java/java-hashmap-computeifpresent.html) | 对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。 |\n\n# Java Iterator（迭代器）\n\nJava迭代器（Iterator）是 Java 集合框架中的一种机制，是一种用于遍历集合（如列表、集合和映射等）的接口。\n\n它提供了一种统一的方式来访问集合中的元素，而不需要了解底层集合的具体实现细节。\n\nJava Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 [ArrayList](https://www.runoob.com/java/java-arraylist.html) 和 [HashSet](https://www.runoob.com/java/java-hashset.html) 等集合。\n\nIterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。\n\n![img](https://www.runoob.com/wp-content/uploads/2020/07/ListIterator-Class-Diagram.jpg)\n\n迭代器接口定义了几个方法，最常用的是以下三个：\n\n- **next()** - 返回迭代器的下一个元素，并将迭代器的指针移到下一个位置。\n- **hasNext()** - 用于判断集合中是否还有下一个元素可以访问。\n- **remove()** - 从集合中删除迭代器最后访问的元素（可选操作）。\n\nIterator 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n```\nimport java.util.Iterator; // 引入 Iterator 类\n```\n\n通过使用迭代器，我们可以逐个访问集合中的元素，而不需要使用传统的 for 循环或索引。这种方式更加简洁和灵活，并且适用于各种类型的集合。\n\n### 获取一个迭代器\n\n集合想获取一个迭代器可以使用 iterator() 方法:\n\n## 实例\n\n```java\n*// 引入 ArrayList 和 Iterator 类*\n**import** java.util.ArrayList;\n**import** java.util.Iterator;\n\n**public** **class** RunoobTest {\n  **public** **static** **void** main(String[] args) {\n\n​    *// 创建集合*\n​    ArrayList<String> sites = **new** ArrayList<String>();\n​    sites.add(\"Google\");\n​    sites.add(\"Runoob\");\n​    sites.add(\"Taobao\");\n​    sites.add(\"Zhihu\");\n\n​    *// 获取迭代器*\n​    Iterator<String> it = sites.iterator();\n\n​    *// 输出集合中的第一个元素*\n​    System.out.println(it.next());\n  }\n}\n```\n执行以上代码，输出结果如下：\n\n```java\nGoogle\n```\n\n# Java 序列化\n\nJava 序列化是一种将对象转换为字节流的过程，以便可以将对象保存到磁盘上，将其传输到网络上，或者将其存储在内存中，以后再进行反序列化，将字节流重新转换为对象。\n\n序列化在 Java 中是通过 **java.io.Serializable** 接口来实现的，该接口没有任何方法，只是一个标记接口，用于标识类可以被序列化。\n\n当你序列化对象时，你把它包装成一个特殊文件，可以保存、传输或存储。反序列化则是打开这个文件，读取序列化的数据，然后将其还原为对象，以便在程序中使用。\n\n**序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。**\n\n实现 Serializable 接口： 要使一个类可序列化，需要让该类实现 java.io.Serializable 接口，这告诉 Java 编译器这个类可以被序列化，例如：\n\n## 实例\n\n**import** java.io.Serializable;\n\n**public** **class** MyClass **implements** Serializable {\n  *// 类的成员和方法*\n}\n\n**序列化对象：** 使用 ObjectOutputStream 类来将对象序列化为字节流，以下是一个简单的实例：\n\n## 实例\n\nMyClass obj = **new** MyClass();\n**try** {\n  FileOutputStream fileOut = **new** FileOutputStream(\"object.ser\");\n  ObjectOutputStream out = **new** ObjectOutputStream(fileOut);\n  out.writeObject(obj);\n  out.close();\n  fileOut.close();\n} **catch** (IOException e) {\n  e.printStackTrace();\n}\n\n上述代码将一个名为 \"object.ser\" 的文件中的 obj 对象序列化。\n\n**反序列化对象：** 使用 ObjectInputStream 类来从字节流中反序列化对象，以下是一个简单的实例：\n\n## 实例\n\nMyClass obj = **null**;\n**try** {\n  FileInputStream fileIn = **new** FileInputStream(\"object.ser\");\n  ObjectInputStream in = **new** ObjectInputStream(fileIn);\n  obj = (MyClass) in.readObject();\n  in.close();\n  fileIn.close();\n} **catch** (IOException e) {\n  e.printStackTrace();\n} **catch** (ClassNotFoundException e) {\n  e.printStackTrace();\n}\n\n上述代码从 \"object.ser\" 文件中读取字节流并将其反序列化为一个 MyClass 对象。\n\n类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。\n\nObjectOutputStream 类包含很多写方法来写各种数据类型，但是一个特别的方法例外：\n\npublic final void writeObject(Object x) throws IOException\n\n上面的方法序列化一个对象，并将它发送到输出流。相似的 ObjectInputStream 类包含如下反序列化一个对象的方法：\n\npublic final Object readObject() throws IOException,                                  ClassNotFoundException\n\n该方法从流中取出下一个对象，并将对象反序列化。它的返回值为Object，因此，你需要将它转换成合适的数据类型。\n\n### 实例\n\n为了演示序列化在 Java 中是怎样工作的，我将使用之前教程中提到的 Employee 类，假设我们定义了如下的 Employee 类，该类实现了Serializable 接口。\n\n## Employee.java 文件代码：\n\npublic class Employee implements java.io.Serializable {   public String name;   public String address;   public transient int SSN;   public int number;   public void mailCheck()   {      System.out.println(\"Mailing a check to \" + name                           + \" \" + address);   } }\n\n请注意，一个类的对象要想序列化成功，必须满足两个条件：\n\n该类必须实现 java.io.Serializable 接口。\n\n该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。\n\n如果你想知道一个 Java 标准类是否是可序列化的，请查看该类的文档。检验一个类的实例是否能序列化十分简单， 只需要查看该类有没有实现 java.io.Serializable接口。\n\n------\n\n## 序列化对象\n\nObjectOutputStream 类用来序列化一个对象，如下的 SerializeDemo 例子实例化了一个 Employee 对象，并将该对象序列化到一个文件中。\n\n该程序执行后，就创建了一个名为 employee.ser 文件。该程序没有任何输出，但是你可以通过代码研读来理解程序的作用。\n\n**注意：** 当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名。\n\n## SerializeDemo.java 文件代码：\n\nimport java.io.*;  public class SerializeDemo {   public static void main(String [] args)   {      Employee e = new Employee();      e.name = \"Reyan Ali\";      e.address = \"Phokka Kuan, Ambehta Peer\";      e.SSN = 11122333;      e.number = 101;      try      {         FileOutputStream fileOut =         new FileOutputStream(\"/tmp/employee.ser\");         ObjectOutputStream out = new ObjectOutputStream(fileOut);         out.writeObject(e);         out.close();         fileOut.close();         System.out.printf(\"Serialized data is saved in /tmp/employee.ser\");      }catch(IOException i)      {          i.printStackTrace();      }   } }\n\n------\n\n## 反序列化对象\n\n下面的 DeserializeDemo 程序实例了反序列化，/tmp/employee.ser 存储了 Employee 对象。\n\n## DeserializeDemo.java 文件代码：\n\nimport java.io.*;  public class DeserializeDemo {   public static void main(String [] args)   {      Employee e = null;      try      {         FileInputStream fileIn = new FileInputStream(\"/tmp/employee.ser\");         ObjectInputStream in = new ObjectInputStream(fileIn);         e = (Employee) in.readObject();         in.close();         fileIn.close();      }catch(IOException i)      {         i.printStackTrace();         return;      }catch(ClassNotFoundException c)      {         System.out.println(\"Employee class not found\");         c.printStackTrace();         return;      }      System.out.println(\"Deserialized Employee...\");      System.out.println(\"Name: \" + e.name);      System.out.println(\"Address: \" + e.address);      System.out.println(\"SSN: \" + e.SSN);      System.out.println(\"Number: \" + e.number);    } }\n\n以上程序编译运行结果如下所示：\n\n```\nDeserialized Employee...\nName: Reyan Ali\nAddress:Phokka Kuan, Ambehta Peer\nSSN: 0\nNumber:101\n```\n\n这里要注意以下要点：\n\nreadObject() 方法中的 try/catch代码块尝试捕获 ClassNotFoundException 异常。对于 JVM 可以反序列化对象，它必须是能够找到字节码的类。如果JVM在反序列化对象的过程中找不到该类，则抛出一个 ClassNotFoundException 异常。\n\n注意，readObject() 方法的返回值被转化成 Employee 引用。\n\n当对象被序列化时，属性 SSN 的值为 111222333，但是因为该属性是短暂的，该值没有被发送到输出流。所以反序列化后 Employee 对象的 SSN 属性为 0。\n\n\n\n# Java 网络编程\n\n\n\n# Java 多线程编程\n\nJava 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。\n\n多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。\n\n这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。\n\n多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。\n\n\n\n## 一个线程的生命周期\n\n线程是一个动态执行的过程，它也有一个从产生到死亡的过程。\n\n下图显示了一个线程完整的生命周期。\n\n![img](https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg)\n\n- 新建状态:\n\n  使用 **new** 关键字和 **Thread** 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 **start()** 这个线程。\n\n- 就绪状态:\n\n  当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n- 运行状态:\n\n  如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\n\n- 阻塞状态:\n\n  如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： \n\n  - 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。\n  - 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。\n  - 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。\n\n- 死亡状态: \n\n  一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\n\n------\n\n## 线程的优先级\n\n每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。\n\nJava 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。\n\n默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。\n\n具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\n\n------\n\n## 创建一个线程\n\nJava 提供了三种创建线程的方法：\n\n- **通过实现 Runnable 接口；**\n- **通过继承 Thread 类本身；**\n- **通过 Callable 和 Future 创建线程。**\n\n------\n\n## 通过实现 Runnable 接口来创建线程\n\n创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。\n\n为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：\n\n\n\npublic void run()\n\n你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。\n\n在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。\n\nThread 定义了几个构造方法，下面的这个是我们经常使用的：\n\nThread(Runnable threadOb,String threadName);\n\n这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。\n\n新线程创建之后，你调用它的 start() 方法它才会运行。\n\nvoid start();\n\n下面是一个创建线程并开始让它执行的实例：\n\n## 实例\n\nclass RunnableDemo implements Runnable {   private Thread t;   private String threadName;      RunnableDemo( String name) {      threadName = name;      System.out.println(\"Creating \" +  threadName );   }      public void run() {      System.out.println(\"Running \" +  threadName );      try {         for(int i = 4; i > 0; i--) {            System.out.println(\"Thread: \" + threadName + \", \" + i);            // 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(\"Thread \" +  threadName + \" interrupted.\");      }      System.out.println(\"Thread \" +  threadName + \" exiting.\");   }      public void start () {      System.out.println(\"Starting \" +  threadName );      if (t == null) {         t = new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      RunnableDemo R1 = new RunnableDemo( \"Thread-1\");      R1.start();            RunnableDemo R2 = new RunnableDemo( \"Thread-2\");      R2.start();   }    }\n\n编译以上程序运行结果如下：\n\n```\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n```\n\n------\n\n## 通过继承Thread来创建线程\n\n创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。\n\n继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。\n\n该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。\n\n## 实例\n\nclass ThreadDemo extends Thread {   private Thread t;   private String threadName;      ThreadDemo( String name) {      threadName = name;      System.out.println(\"Creating \" +  threadName );   }      public void run() {      System.out.println(\"Running \" +  threadName );      try {         for(int i = 4; i > 0; i--) {            System.out.println(\"Thread: \" + threadName + \", \" + i);            // 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(\"Thread \" +  threadName + \" interrupted.\");      }      System.out.println(\"Thread \" +  threadName + \" exiting.\");   }      public void start () {      System.out.println(\"Starting \" +  threadName );      if (t == null) {         t = new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      ThreadDemo T1 = new ThreadDemo( \"Thread-1\");      T1.start();            ThreadDemo T2 = new ThreadDemo( \"Thread-2\");      T2.start();   }    }\n\n编译以上程序运行结果如下：\n\n```\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n```\n\n------\n\n## Thread 方法\n\n下表列出了Thread类的一些重要方法：\n\n| **序号** |                         **方法描述**                         |\n| :------- | :----------------------------------------------------------: |\n| 1        | **public void start()** 使该线程开始执行；**Java** 虚拟机调用该线程的 run 方法。 |\n| 2        | **public void run()** 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。 |\n| 3        | **public final void setName(String name)** 改变线程名称，使之与参数 name 相同。 |\n| 4        | **public final void setPriority(int priority)**  更改线程的优先级。 |\n| 5        | **public final void setDaemon(boolean on)** 将该线程标记为守护线程或用户线程。 |\n| 6        | **public final void join(long millisec)** 等待该线程终止的时间最长为 millis 毫秒。 |\n| 7        |            **public void interrupt()** 中断线程。            |\n| 8        | **public final boolean isAlive()** 测试线程是否处于活动状态。 |\n\n上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。\n\n| **序号** |                         **方法描述**                         |\n| :------- | :----------------------------------------------------------: |\n| 1        | **public static void yield()** 暂停当前正在执行的线程对象，并执行其他线程。 |\n| 2        | **public static void sleep(long millisec)** 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。 |\n| 3        | **public static boolean holdsLock(Object x)** 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。 |\n| 4        | **public static Thread currentThread()** 返回对当前正在执行的线程对象的引用。 |\n| 5        | **public static void dumpStack()** 将当前线程的堆栈跟踪打印至标准错误流。 |\n\n### 实例\n\n如下的ThreadClassDemo 程序演示了Thread类的一些方法：\n\n## DisplayMessage.java 文件代码：\n\n// 文件名 : DisplayMessage.java // 通过实现 Runnable 接口创建线程 public class DisplayMessage implements Runnable {   private String message;      public DisplayMessage(String message) {      this.message = message;   }      public void run() {      while(true) {         System.out.println(message);      }   } }\n\n## GuessANumber.java 文件代码：\n\n// 文件名 : GuessANumber.java // 通过继承 Thread 类创建线程  public class GuessANumber extends Thread {   private int number;   public GuessANumber(int number) {      this.number = number;   }      public void run() {      int counter = 0;      int guess = 0;      do {         guess = (int) (Math.random() * 100 + 1);         System.out.println(this.getName() + \" guesses \" + guess);         counter++;      } while(guess != number);      System.out.println(\"** Correct!\" + this.getName() + \"in\" + counter + \"guesses.**\");   } }\n\n## ThreadClassDemo.java 文件代码：\n\n// 文件名 : ThreadClassDemo.java public class ThreadClassDemo {    public static void main(String [] args) {      Runnable hello = new DisplayMessage(\"Hello\");      Thread thread1 = new Thread(hello);      thread1.setDaemon(true);      thread1.setName(\"hello\");      System.out.println(\"Starting hello thread...\");      thread1.start();            Runnable bye = new DisplayMessage(\"Goodbye\");      Thread thread2 = new Thread(bye);      thread2.setPriority(Thread.MIN_PRIORITY);      thread2.setDaemon(true);      System.out.println(\"Starting goodbye thread...\");      thread2.start();       System.out.println(\"Starting thread3...\");      Thread thread3 = new GuessANumber(27);      thread3.start();      try {         thread3.join();      }catch(InterruptedException e) {         System.out.println(\"Thread interrupted.\");      }      System.out.println(\"Starting thread4...\");      Thread thread4 = new GuessANumber(75);            thread4.start();      System.out.println(\"main() is ending...\");   } }\n\n运行结果如下，每一次运行的结果都不一样。\n\n```\nStarting hello thread...\nStarting goodbye thread...\nHello\nHello\nHello\nHello\nHello\nHello\nGoodbye\nGoodbye\nGoodbye\nGoodbye\nGoodbye\n.......\n```\n\n------\n\n## 通过 Callable 和 Future 创建线程\n\n- 1. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。\n- 2. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。\n- 3. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。\n- 4. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。\n\n## 实例\n\npublic class CallableThreadTest implements Callable<Integer> {    public static void main(String[] args)      {          CallableThreadTest ctt = new CallableThreadTest();          FutureTask<Integer> ft = new FutureTask<>(ctt);          for(int i = 0;i < 100;i++)          {              System.out.println(Thread.currentThread().getName()+\" 的循环变量i的值\"+i);              if(i==20)              {                  new Thread(ft,\"有返回值的线程\").start();              }          }          try          {              System.out.println(\"子线程的返回值：\"+ft.get());          } catch (InterruptedException e)          {              e.printStackTrace();          } catch (ExecutionException e)          {              e.printStackTrace();          }        }    @Override      public Integer call() throws Exception      {          int i = 0;          for(;i<100;i++)          {              System.out.println(Thread.currentThread().getName()+\" \"+i);          }          return i;      }   }\n\n------\n\n## 创建线程的三种方式的对比\n\n- 1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n- 2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。\n\n------\n\n## 线程的几个主要概念\n\n在多线程编程时，你需要了解以下几个概念：\n\n- 线程同步\n- 线程间通信\n- 线程死锁\n- 线程控制：挂起、停止和恢复\n\n------\n\n## 多线程的使用\n\n有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。\n\n通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。\n\n请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU 花费在上下文的切换的时间将多于执行程序的时间！\n\n\n\n\n\n\n\n------\n\n\n\n# Java 实例\n\n本章节我们将为大家介绍 Java 常用的实例，通过实例学习我们可以更快的掌握 Java 的应用。\n\n------\n\n## Java 环境设置实例\n\n1. [Java 实例 – 如何编译一个Java 文件？](https://www.runoob.com/java/env-compile.html)\n2. [Java 实例 – Java 如何运行一个编译过的类文件?](https://www.runoob.com/java/env-run.html)\n3. [Java 实例 - 如何执行指定class文件目录（classpath）？](https://www.runoob.com/java/env-classpath.html)\n4. [Java 实例 – 如何查看当前 Java 运行的版本?](https://www.runoob.com/java/env-version.html)\n\n------\n\n## Java 字符串\n\n1. [Java 实例 – 字符串比较](https://www.runoob.com/java/string-compare.html)\n2. [Java 实例 - 查找字符串最后一次出现的位置](https://www.runoob.com/java/string-last-occurance.html)\n3. [Java 实例 - 删除字符串中的一个字符](https://www.runoob.com/java/string-removing-char.html)\n4. [Java 实例 - 字符串替换](https://www.runoob.com/java/string-replace.html)\n5. [Java 实例 - 字符串反转](https://www.runoob.com/java/string-reverse.html)\n6. [Java 实例 - 字符串查找](https://www.runoob.com/java/string-search.html)\n7. [Java 实例 - 字符串分割](https://www.runoob.com/java/string-split.html)\n8. [Java 实例 - 字符串分割(StringTokenizer)](https://www.runoob.com/java/java-stringtokenizer-example.html)\n9. [Java 实例 - 字符串小写转大写](https://www.runoob.com/java/string-uppercase.html)\n10. [Java 实例 - 测试两个字符串区域是否相等](https://www.runoob.com/java/string-regionmatch.html)\n11. [Java 实例 - 字符串性能比较测试](https://www.runoob.com/java/string-performance.html)\n12. [Java 实例 - 字符串优化](https://www.runoob.com/java/string-optimization.html)\n13. [Java 实例 - 字符串格式化](https://www.runoob.com/java/string-format.html)\n14. [Java 实例 - 连接字符串](https://www.runoob.com/java/string-concatenation.html)\n\n------\n\n## Java 数组\n\n1. [Java 实例 – 数组排序及元素查找](https://www.runoob.com/java/arrays-search.html)\n2. [Java 实例 – 数组添加元素](https://www.runoob.com/java/arrays-insert.html)\n3. [Java 实例 – 获取数组长度](https://www.runoob.com/java/arrays-upperbound.html)\n4. [Java 实例 – 数组反转](https://www.runoob.com/java/arrays-reverse.html)\n5. [Java 实例 – 数组输出](https://www.runoob.com/java/arrays-output.html)\n6. [Java 实例 – 数组获取最大和最小值](https://www.runoob.com/java/arrays-min-max.html)\n7. [Java 实例 – 数组合并](https://www.runoob.com/java/arrays_merge.html)\n8. [Java 实例 – 数组填充](https://www.runoob.com/java/arrays-fill.html)\n9. [Java 实例 – 数组扩容](https://www.runoob.com/java/arrays-extension.html)\n10. [Java 实例 – 查找数组中的重复元素](https://www.runoob.com/java/arrays-compare.html)\n11. [Java 实例 – 删除数组元素](https://www.runoob.com/java/arrays-remove.html)\n12. [Java 实例 – 数组差集](https://www.runoob.com/java/arrays-removeall.html)\n13. [Java 实例 – 数组交集](https://www.runoob.com/java/arrays-retainall.html)\n14. [Java 实例 – 在数组中查找指定元素](https://www.runoob.com/java/arrays-find.html)\n15. [Java 实例 – 判断数组是否相等](https://www.runoob.com/java/arrays-equal.html)\n16. [Java 实例 - 数组并集](https://www.runoob.com/java/arrays-union.html)\n\n------\n\n## Java 时间处理\n\n1. [Java 实例 - 格式化时间（SimpleDateFormat）](https://www.runoob.com/java/date-time-am-pm.html)\n2. [Java 实例 - 获取当前时间](https://www.runoob.com/java/date-time-datetime.html)\n3. [Java 实例 - 获取年份、月份等](https://www.runoob.com/java/date-year-month.html)\n4. [Java 实例 - 时间戳转换成时间](https://www.runoob.com/java/date-timestamp2date.html)\n\n------\n\n## Java 方法\n\n1. [Java 实例 – 方法重载](https://www.runoob.com/java/method-overloading.html)\n2. [Java 实例 – 输出数组元素](https://www.runoob.com/java/method-array.html)\n3. [Java 实例 – 汉诺塔算法](https://www.runoob.com/java/method-tower.html)\n4. [Java 实例 – 斐波那契数列](https://www.runoob.com/java/method-fibonacci.html)\n5. [Java 实例 – 阶乘](https://www.runoob.com/java/method-factorial.html)\n6. [Java 实例 – 方法覆盖](https://www.runoob.com/java/java/method-override.html)\n7. [Java 实例 – instanceOf 关键字用法](https://www.runoob.com/java/java/method-instanceof.html)\n8. [Java 实例 – break 关键字用法](https://www.runoob.com/java/java/method-break.html)\n9. [Java 实例 – continue 关键字用法](https://www.runoob.com/java/java/method-continue.html)\n10. [Java 实例 – 标签(Label)](https://www.runoob.com/java/java/method-label.html)\n11. [Java 实例 – enum 和 switch 语句使用](https://www.runoob.com/java/java/method-enum.html)\n12. [Java 实例 – Enum（枚举）构造函数及方法的使用](https://www.runoob.com/java/java/method-enum1.html)\n13. [Java 实例 – for 和 foreach循环使用](https://www.runoob.com/java/java/method-for.html)\n14. [Java 实例 – Varargs 可变参数使用](https://www.runoob.com/java/java/method-varargs.html)\n15. [Java 实例 – 重载(overloading)方法中使用 Varargs](https://www.runoob.com/java/java/method-varargs1.html)\n\n------\n\n## 打印图形\n\n1. [Java 实例 – 打印菱形](https://www.runoob.com/java/java-print-diamond.html)\n2. [Java 实例 – 九九乘法表](https://www.runoob.com/java/java-print-multiplicationtable.html)\n3. [Java 实例 – 打印三角形](https://www.runoob.com/java/java-print-the-triangle.html)\n4. [Java 实例 – 打印倒立的三角形](https://www.runoob.com/java/java-print-invertedtriangle.html)\n5. [Java 实例 – 打印平行四边形](https://www.runoob.com/java/java-print-parallelogram.html)\n6. [Java 实例 – 打印矩形](https://www.runoob.com/java/java-print-rect.html)\n\n------\n\n## Java 文件操作\n\n1. [Java 实例 - 文件写入](https://www.runoob.com/java/file-write.html)\n2. [Java 实例 - 读取文件内容](https://www.runoob.com/java/file-read.html)\n3. [Java 实例 - 删除文件](https://www.runoob.com/java/file-delete.html)\n4. [Java 实例 - 将文件内容复制到另一个文件](https://www.runoob.com/java/file-copy.html)\n5. [Java 实例 - 向文件中追加数据](https://www.runoob.com/java/file-append.html)\n6. [Java 实例 - 创建临时文件](https://www.runoob.com/java/file-create-temp.html)\n7. [Java 实例 - 修改文件最后的修改日期](https://www.runoob.com/java/file-date-modify.html)\n8. [Java 实例 - 获取文件大小](https://www.runoob.com/java/file-size.html)\n9. [Java 实例 - 文件重命名](https://www.runoob.com/java/file-rename.html)\n10. [Java 实例 - 设置文件只读](https://www.runoob.com/java/file-read-only.html)\n11. [Java 实例 - 检测文件是否存在](https://www.runoob.com/java/file-exist.html)\n12. [Java 实例 - 在指定目录中创建文件](https://www.runoob.com/java/file-dir.html)\n13. [Java 实例 - 获取文件修改时间](https://www.runoob.com/java/file-date.html)\n14. [Java 实例 - 创建文件](https://www.runoob.com/java/file-create.html)\n15. [Java 实例 - 文件路径比较](https://www.runoob.com/java/file-compare.html)\n\n------\n\n## Java 目录操作\n\n1. [Java 实例 - 递归创建目录](https://www.runoob.com/java/dir-create.html)\n2. [Java 实例 - 删除目录](https://www.runoob.com/java/dir-delete.html)\n3. [Java 实例 - 判断目录是否为空](https://www.runoob.com/java/dir-empty.html)\n4. [Java 实例 - 判断文件是否隐藏](https://www.runoob.com/java/dir-hidden.html)\n5. [Java 实例 - 获取目录大小](https://www.runoob.com/java/dir-size.html)\n6. [Java 实例 - 在指定目录中查找文件](https://www.runoob.com/java/dir-search.html)\n7. [Java 实例 - 获取文件的上级目录](https://www.runoob.com/java/dir-parent.html)\n8. [Java 实例 - 获取目录最后修改时间](https://www.runoob.com/java/dir-modification.html)\n9. [Java 实例 - 打印目录结构](https://www.runoob.com/java/dir-hierarchy.html)\n10. [Java 实例 - 遍历指定目录下的所有目录](https://www.runoob.com/java/dir-display.html)\n11. [Java 实例 - 遍历指定目录下的所有文件](https://www.runoob.com/java/dir-sub.html)\n12. [Java 实例 - 在指定目录中查找文件](https://www.runoob.com/java/dir-search-file.html)\n13. [Java 实例 - 遍历系统根目录](https://www.runoob.com/java/dir-root.html)\n14. [Java 实例 - 查看当前工作目录](https://www.runoob.com/java/dir-current.html)\n15. [Java 实例 - 遍历目录](https://www.runoob.com/java/dir-traverse.html)\n\n------\n\n## Java 异常处理\n\n1. [Java 实例 - 异常处理方法](https://www.runoob.com/java/exception-method.html)\n2. [Java 实例 - 多个异常处理（多个catch）](https://www.runoob.com/java/exception-hierarchy.html)\n3. [Java 实例 - Finally的用法](https://www.runoob.com/java/exception-finally.html)\n4. [Java 实例 - 使用 catch 处理异常](https://www.runoob.com/java/exception-catch.html)\n5. [Java 实例 - 多线程异常处理](https://www.runoob.com/java/exception-thread.html)\n6. [Java 实例 - 获取异常的堆栈信息](https://www.runoob.com/java/exception-printstack.html)\n7. [Java 实例 - 重载方法异常处理](https://www.runoob.com/java/exception-overloaded-method.html)\n8. [Java 实例 - 链试异常](https://www.runoob.com/java/exception-chain.html)\n9. [Java 实例 - 自定义异常](https://www.runoob.com/java/exception-user.html)\n\n------\n\n## Java 数据结构\n\n1. [Java 实例 – 数字求和运算](https://www.runoob.com/java/data-add.html)\n2. [Java 实例 – 利用堆栈将中缀表达式转换成后缀 ](https://www.runoob.com/java/data-intopost.html)\n3. [Java 实例 – 在链表（LinkedList）的开头和结 ](https://www.runoob.com/java/data-insert.html)\n4. [Java 实例 – 获取链表（LinkedList）的第一个 ](https://www.runoob.com/java/data-element.html)\n5. [Java 实例 – 删除链表中的元素](https://www.runoob.com/java/data-replace.html)\n6. [Java 实例 – 获取链表的元素](https://www.runoob.com/java/data_linklist.html)\n7. [Java 实例 – 获取向量元素的索引值](https://www.runoob.com/java/data-vecsort.html)\n8. [Java 实例 – 栈的实现](https://www.runoob.com/java/data-stack.html)\n9. [Java 实例 – 链表元素查找](https://www.runoob.com/java/data-search.html)\n10. [Java 实例 – 压栈出栈的方法实现字符串反转](https://www.runoob.com/java/data-reverse.html)\n11. [Java 实例 – 队列（Queue）用法](https://www.runoob.com/java/data-queue.html)\n12. [Java 实例 – 获取向量的最大元素](https://www.runoob.com/java/data-vec-max.html)\n13. [Java 实例 – 链表修改](https://www.runoob.com/java/data-update.html)\n14. [Java 实例 – 旋转向量](https://www.runoob.com/java/data-swap.html)\n\n------\n\n## Java 集合\n\n1. [Java 实例 – 数组转集合](https://www.runoob.com/java/collection-array.html)\n2. [Java 实例 – 集合比较](https://www.runoob.com/java/collection-compare.html)\n3. [Java 实例 – HashMap遍历](https://www.runoob.com/java/collection-iterate.html)\n4. [Java 实例 – 集合长度](https://www.runoob.com/java/collection-size.html)\n5. [Java 实例 – 集合打乱顺序](https://www.runoob.com/java/collection-shuffle.html)\n6. [Java 实例 – 集合遍历](https://www.runoob.com/java/collection-iterator.html)\n7. [Java 实例 – 集合反转](https://www.runoob.com/java/collection-reverse.html)\n8. [Java 实例 – 删除集合中指定元素](https://www.runoob.com/java/collection-remove.html)\n9. [Java 实例 – 只读集合](https://www.runoob.com/java/collection-readonly.html)\n10. [Java 实例 – 集合输出](https://www.runoob.com/java/collection-print.html)\n11. [Java 实例 – 集合转数组](https://www.runoob.com/java/collection-conversion.html)\n12. [Java 实例 – List 循环移动元素](https://www.runoob.com/java/collection-rotate.html)\n13. [Java 实例 – 查找 List 中的最大最小值](https://www.runoob.com/java/collection-minmax.html)\n14. [Java 实例 – 遍历 HashTable 的键值](https://www.runoob.com/java/collection-hashtable-key.html)\n15. [Java 实例 – 使用 Enumeration 遍历 HashTable](https://www.runoob.com/java/collection-enumeration.html)\n16. [Java 实例 – 集合中添加不同类型元素](https://www.runoob.com/java/collection-all.html)\n17. [Java 实例 – List 元素替换](https://www.runoob.com/java/collection-replace.html)\n18. [Java 实例 – List 截取](https://www.runoob.com/java/collection-sublist.html)\n\n------\n\n## Java 网络实例\n\n1. [Java 实例 – 获取指定主机的IP地址](https://www.runoob.com/java/net-address.html)\n2. [Java 实例 – 查看端口是否已使用](https://www.runoob.com/java/net-port.html)\n3. [Java 实例 – 获取本机ip地址及主机名](https://www.runoob.com/java/net-localip.html)\n4. [Java 实例 – 获取远程文件大小](https://www.runoob.com/java/net-serverfile.html)\n5. [Java 实例 – Socket 实现多线程服务器程序](https://www.runoob.com/java/net-multisoc.html)\n6. [Java 实例 – 查看主机指定文件的最后修改时间](https://www.runoob.com/java/net-filetime.html)\n7. [Java 实例 – 使用 Socket 连接到指定主机](https://www.runoob.com/java/net-connected.html)\n8. [Java 实例 – 网页抓取](https://www.runoob.com/java/net-webpage.html)\n9. [Java 实例 – 获取 URL响应头的日期信息](https://www.runoob.com/java/net-urldate.html)\n10. [Java 实例 – 获取 URL 响应头信息](https://www.runoob.com/java/net-url-header.html)\n11. [Java 实例 – 解析 URL](https://www.runoob.com/java/net-url.html)\n12. [Java 实例 – ServerSocket 和 Socket 通信实例](https://www.runoob.com/java/net-serversocket-socket.html)\n\n------\n\n## Java 线程\n\n1. [Java 实例 – 查看线程是否存活](https://www.runoob.com/java/thread-alive.html)\n2. [Java 实例 – 获取当前线程名称](https://www.runoob.com/java/thread-name.html)\n3. [Java 实例 – 状态监测](https://www.runoob.com/java/thread-monitor.html)\n4. [Java 实例 – 线程优先级设置](https://www.runoob.com/java/thread-getpri.html)\n5. [Java 实例 – 死锁及解决方法](https://www.runoob.com/java/thread-deadlock.html)\n6. [Java 实例 – 获取线程id](https://www.runoob.com/java/thread-id.html)\n7. [Java 实例 – 线程挂起](https://www.runoob.com/java/thread-suspend.html)\n8. [Java 实例 – 终止线程](https://www.runoob.com/java/thread-stop.html)\n9. [Java 实例 – 生产者/消费者问题](https://www.runoob.com/html/thread-procon.html)\n10. [Java 实例 – 获取线程状态](https://www.runoob.com/java/thread-status.html)\n11. [Java 实例 – 获取所有线程](https://www.runoob.com/java/thread-showall.html)\n12. [Java 实例 – 查看线程优先级](https://www.runoob.com/java/thread-priorityinfo.html)\n13. [Java 实例 – 中断线程](https://www.runoob.com/java/thread-interrupt.html)\n","slug":"Java复习","published":1,"updated":"2024-11-25T11:44:04.506Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscq002ymbs69pycgws9","content":"<p>[TOC]</p>\n<h1 id=\"Java数据结构\"><a href=\"#Java数据结构\" class=\"headerlink\" title=\"Java数据结构\"></a>Java数据结构</h1><h3 id=\"数组（arrays）\"><a href=\"#数组（arrays）\" class=\"headerlink\" title=\"数组（arrays）\"></a>数组（arrays）</h3><p>数组（Arrays）是一种基本的数据结构，可以存储固定大小的相同类型的元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] array = new int[5];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>特点：</strong> 固定大小，存储相同类型的元素。</li>\n<li><strong>优点：</strong> 随机访问元素效率高。</li>\n<li><strong>缺点：</strong> 大小固定，插入和删除元素相对较慢。</li>\n</ul>\n<h3 id=\"列表（Lists）\"><a href=\"#列表（Lists）\" class=\"headerlink\" title=\"列表（Lists）\"></a>列表（Lists）</h3><p>Java 提供了多种列表实现，如 ArrayList 和 LinkedList。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; arrayList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>ArrayList:</strong></p>\n<ul>\n<li><strong>特点：</strong> 动态数组，可变大小。</li>\n<li><strong>优点：</strong> 高效的随机访问和快速尾部插入。</li>\n<li><strong>缺点：</strong> 中间插入和删除相对较慢。</li>\n</ul>\n<p><strong>LinkedList:</strong></p>\n<ul>\n<li><strong>特点：</strong> 双向链表，元素之间通过指针连接。</li>\n<li><strong>优点：</strong> 插入和删除元素高效，迭代器性能好。</li>\n<li><strong>缺点：</strong> 随机访问相对较慢。</li>\n</ul>\n<h3 id=\"集合（Sets）\"><a href=\"#集合（Sets）\" class=\"headerlink\" title=\"集合（Sets）\"></a>集合（Sets）</h3><p>集合（Sets）用于存储不重复的元素，常见的实现有 HashSet 和 TreeSet。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;String&gt; hashSet = new HashSet&lt;&gt;();</span><br><span class=\"line\">Set&lt;Integer&gt; treeSet = new TreeSet&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>HashSet:</strong></p>\n<ul>\n<li><strong>特点：</strong> 无序集合，基于HashMap实现。</li>\n<li><strong>优点：</strong> 高效的查找和插入操作。</li>\n<li><strong>缺点：</strong> 不保证顺序。</li>\n</ul>\n<p><strong>TreeSet:</strong></p>\n<ul>\n<li><strong>特点：</strong>TreeSet 是有序集合，底层基于红黑树实现，不允许重复元素。</li>\n<li><strong>优点：</strong> 提供自动排序功能，适用于需要按顺序存储元素的场景。</li>\n<li><strong>缺点：</strong> 性能相对较差，不允许插入 null 元素。</li>\n</ul>\n<h3 id=\"映射（Maps）\"><a href=\"#映射（Maps）\" class=\"headerlink\" title=\"映射（Maps）\"></a>映射（Maps）</h3><p>映射（Maps）用于存储键值对，常见的实现有 HashMap 和 TreeMap。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">Map&lt;String, Integer&gt; treeMap = new TreeMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>HashMap:</strong></p>\n<ul>\n<li><strong>特点：</strong> 基于哈希表实现的键值对存储结构。</li>\n<li><strong>优点：</strong> 高效的查找、插入和删除操作。</li>\n<li><strong>缺点：</strong> 无序，不保证顺序。</li>\n</ul>\n<p><strong>TreeMap:</strong></p>\n<ul>\n<li><strong>特点：</strong> 基于红黑树实现的有序键值对存储结构。</li>\n<li><strong>优点：</strong> 有序，支持按照键的顺序遍历。</li>\n<li><strong>缺点：</strong> 插入和删除相对较慢。</li>\n</ul>\n<h3 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h3><p>栈（Stack）是一种线性数据结构，它按照后进先出（Last In, First Out，LIFO）的原则管理元素。在栈中，新元素被添加到栈的顶部，而只能从栈的顶部移除元素。这就意味着最后添加的元素是第一个被移除的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Stack 类:</strong></p>\n<ul>\n<li><strong>特点：</strong> 代表一个栈，通常按照后进先出（LIFO）的顺序操作元素。</li>\n</ul>\n<h3 id=\"队列（Queue）\"><a href=\"#队列（Queue）\" class=\"headerlink\" title=\"队列（Queue）\"></a>队列（Queue）</h3><p>队列（Queue）遵循先进先出（FIFO）原则，常见的实现有 LinkedList 和 PriorityQueue。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Queue 接口:</strong></p>\n<ul>\n<li><strong>特点：</strong> 代表一个队列，通常按照先进先出（FIFO）的顺序操作元素。</li>\n<li><strong>实现类：</strong> LinkedList, PriorityQueue, ArrayDeque。</li>\n</ul>\n<h3 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h3><p>堆（Heap）优先队列的基础，可以实现最大堆和最小堆。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();</span><br><span class=\"line\">PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;(Collections.reverseOrder());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"树（Trees）\"><a href=\"#树（Trees）\" class=\"headerlink\" title=\"树（Trees）\"></a>树（Trees）</h3><p>Java 提供了 TreeNode 类型，可以用于构建二叉树等数据结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TreeNode &#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图（Graphs）\"><a href=\"#图（Graphs）\" class=\"headerlink\" title=\"图（Graphs）\"></a>图（Graphs）</h3><p>图的表示通常需要自定义数据结构或使用图库，Java 没有内建的图类。</p>\n<p>以上介绍的只是 Java 中一些常见的数据结构，实际上还有很多其他的数据结构和算法可以根据具体问题选择使用。</p>\n<hr>\n<h1 id=\"Java-集合框架\"><a href=\"#Java-集合框架\" class=\"headerlink\" title=\"Java 集合框架\"></a>Java 集合框架</h1><p>集合框架被设计成要满足以下几个目标。</p>\n<ul>\n<li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li>\n<li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li>\n<li>对一个集合的扩展和适应必须是简单的。</li>\n</ul>\n<h2 id=\"集合接口\"><a href=\"#集合接口\" class=\"headerlink\" title=\"集合接口\"></a>集合接口</h2><p>集合框架定义了一些接口。本节提供了每个接口的概述：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">接口描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Collection 接口 Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">List 接口 List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序（插入顺序）的对象。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Set Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">SortedSet  继承于Set保存有序的集合。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Map Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">Map.Entry  描述在一个Map中的一个元素（键&#x2F;值对）。是一个 Map 的内部接口。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">SortedMap 继承于 Map，使 Key 保持在升序排列。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">Enumeration 这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</td>\n</tr>\n</tbody></table>\n<h3 id=\"Set和List的区别\"><a href=\"#Set和List的区别\" class=\"headerlink\" title=\"Set和List的区别\"></a>Set和List的区别</h3><ul>\n<li><ol>\n<li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Set 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 **&lt;实现类有HashSet,TreeSet&gt;**。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>List 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 List 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> 。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"集合实现类（集合类）\"><a href=\"#集合实现类（集合类）\" class=\"headerlink\" title=\"集合实现类（集合类）\"></a>集合实现类（集合类）</h2><p>Java提供了一套实现了Collection接口的标准集合类。其中一些是具体类，这些类可以直接拿来使用，而另外一些是抽象类，提供了接口的部分实现。</p>\n<p>标准集合类汇总于下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">类描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><strong>AbstractCollection</strong>  实现了大部分的集合接口。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><strong>AbstractList</strong>  继承于AbstractCollection 并且实现了大部分List接口。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><strong>AbstractSequentialList</strong>  继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-linkedlist.html\">LinkedList</a> 该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如： <code>List list=Collections.synchronizedList(newLinkedList(...));</code>LinkedList 查找效率低。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist.html\">ArrayList</a> 该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><strong>AbstractSet</strong>  继承于AbstractCollection 并且实现了大部分Set接口。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashset.html\">HashSet</a> 该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">LinkedHashSet 具有可预知迭代顺序的 <code>Set</code> 接口的哈希表和链接列表实现。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">TreeSet 该类实现了Set接口，可以实现排序等功能。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><strong>AbstractMap</strong>  实现了大部分的Map接口。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap.html\">HashMap</a> HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">TreeMap 继承了AbstractMap，并且使用一颗树。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">WeakHashMap 继承AbstractMap类，使用弱密钥的哈希表。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">LinkedHashMap 继承于HashMap，使用元素的自然顺序对元素进行排序.</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">IdentityHashMap 继承AbstractMap类，比较文档时使用引用相等。</td>\n</tr>\n</tbody></table>\n<p>在前面的教程中已经讨论通过java.util包中定义的类，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">类描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Vector 该类和ArrayList非常相似，但是该类是同步的，可以用在多线程的情况，该类允许设置默认的增长长度，默认扩容方式为原来的2倍。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Stack 栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Dictionary Dictionary 类是一个抽象类，用来存储键&#x2F;值对，作用和Map类相似。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Hashtable Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Properties Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">BitSet 一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"集合算法\"><a href=\"#集合算法\" class=\"headerlink\" title=\"集合算法\"></a>集合算法</h2><p>集合框架定义了几种算法，可用于集合和映射。这些算法被定义为集合类的静态方法。</p>\n<p>在尝试比较不兼容的类型时，一些方法能够抛出 ClassCastException异常。当试图修改一个不可修改的集合时，抛出UnsupportedOperationException异常。</p>\n<p>集合定义三个静态的变量：EMPTY_SET，EMPTY_LIST，EMPTY_MAP的。这些变量都不可改变。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">算法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Collection Algorithms 这里是一个列表中的所有算法实现。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"如何使用迭代器\"><a href=\"#如何使用迭代器\" class=\"headerlink\" title=\"如何使用迭代器\"></a>如何使用迭代器</h2><p>通常情况下，你会希望遍历一个集合中的元素。例如，显示集合中的每个元素。</p>\n<p>一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架，但是还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了<a href=\"https://www.runoob.com/java/java-iterator.html\">Iterator</a> 接口或 ListIterator接口。</p>\n<p>迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator 继承了 Iterator，以允许双向遍历列表和修改元素。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">迭代器方法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-iterator.html\">使用 Java Iterator</a> 这里通过实例列出 Iterator 和 ListIterator 接口提供的所有方法。</td>\n</tr>\n</tbody></table>\n<h3 id=\"遍历-ArrayList\"><a href=\"#遍历-ArrayList\" class=\"headerlink\" title=\"遍历 ArrayList\"></a>遍历 ArrayList</h3><h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>import java.util.*;  public class Test{ public static void main(String[] args) {     List<String> list&#x3D;new ArrayList<String>();     list.add(“Hello”);     list.add(“World”);     list.add(“HAHAHAHA”);     &#x2F;&#x2F;第一种遍历方法使用 For-Each 遍历 List     for (String str : list) {            &#x2F;&#x2F;也可以改写 for(int i&#x3D;0;i&lt;list.size();i++) 这种形式        System.out.println(str);     }      &#x2F;&#x2F;第二种遍历，把链表变为数组相关的内容进行遍历     String[] strArray&#x3D;new String[list.size()];     list.toArray(strArray);     for(int i&#x3D;0;i&lt;strArray.length;i++) &#x2F;&#x2F;这里也可以改写为  for(String str:strArray) 这种形式     {        System.out.println(strArray[i]);     }         &#x2F;&#x2F;第三种遍历 使用迭代器进行相关遍历          Iterator<String> ite&#x3D;list.iterator();     while(ite.hasNext())&#x2F;&#x2F;判断下一个元素之后有值     {         System.out.println(ite.next());     } } }</p>\n<p><strong>解析：</strong> </p>\n<p>三种方法都是用来遍历ArrayList集合，第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度。</p>\n<h3 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h3><h2 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, String&gt;();</span><br><span class=\"line\">      map.put(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\">      map.put(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>);</span><br><span class=\"line\">      map.put(<span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;value3&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//第一种：普遍使用，二次取值</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;key= &quot;</span>+ key + <span class=\"string\">&quot; and value= &quot;</span> + map.get(key));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//第二种</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class=\"line\">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">       Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//第三种：推荐，尤其是容量大时</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">//第四种</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (String v : map.values()) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;value= &quot;</span> + v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"如何使用比较器\"><a href=\"#如何使用比较器\" class=\"headerlink\" title=\"如何使用比较器\"></a>如何使用比较器</h2><p>TreeSet和TreeMap的按照排序顺序来存储元素. 然而，这是通过比较器来精确定义按照什么样的排序顺序。</p>\n<p>这个接口可以让我们以不同的方式来排序一个集合。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">比较器方法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">使用 Java Comparator 这里通过实例列出Comparator接口提供的所有方法</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-ArrayList\"><a href=\"#Java-ArrayList\" class=\"headerlink\" title=\"Java ArrayList\"></a>Java ArrayList</h1><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p>\n<p>ArrayList 继承了 AbstractList ，并实现了 List 接口。</p>\n<p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList; <span class=\"comment\">// 引入 ArrayList 类</span></span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;E&gt; objectName =<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();　 <span class=\"comment\">// 初始化</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>E</strong>: 泛型数据类型，用于设置 objectName 的数据类型，<strong>只能为引用数据类型</strong>。</li>\n<li><strong>objectName</strong>: 对象名。</li>\n</ul>\n<p>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><p>ArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 <strong>add()</strong> 方法:</p>\n<h3 id=\"访问元素\"><a href=\"#访问元素\" class=\"headerlink\" title=\"访问元素\"></a>访问元素</h3><p>访问 ArrayList 中的元素可以使用 <strong>get()</strong> 方法：</p>\n<p><strong>注意</strong>：数组的索引值从 0 开始。</p>\n<h3 id=\"修改元素\"><a href=\"#修改元素\" class=\"headerlink\" title=\"修改元素\"></a>修改元素</h3><p>如果要修改 ArrayList 中的元素可以使用 <strong>set()</strong> 方法， set(int index, E element) 方法的第一个参数是索引（index），表示要替换的元素的位置，第二个参数是新元素（element），表示要设置的新值：</p>\n<h3 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><p>如果要删除 ArrayList 中的元素可以使用 <strong>remove()</strong> 方法：</p>\n<h3 id=\"计算大小\"><a href=\"#计算大小\" class=\"headerlink\" title=\"计算大小\"></a>计算大小</h3><p>如果要计算 ArrayList 中的元素数量可以使用 size() 方法：</p>\n<h3 id=\"迭代数组列表\"><a href=\"#迭代数组列表\" class=\"headerlink\" title=\"迭代数组列表\"></a>迭代数组列表</h3><p>我们可以使用 for 来迭代数组列表中的元素：</p>\n<p>也可以使用 for-each 来迭代元素：</p>\n<h3 id=\"ArrayList-排序\"><a href=\"#ArrayList-排序\" class=\"headerlink\" title=\"ArrayList 排序\"></a>ArrayList 排序</h3><p>Collections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。</p>\n<h2 id=\"Java-ArrayList-方法\"><a href=\"#Java-ArrayList-方法\" class=\"headerlink\" title=\"Java ArrayList 方法\"></a>Java ArrayList 方法</h2><p>Java ArrayList 常用方法列表如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-add.html\">add()</a></td>\n<td align=\"left\">将元素插入到指定位置的 arraylist 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-addall.html\">addAll()</a></td>\n<td align=\"left\">添加集合中的所有元素到 arraylist 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-clear.html\">clear()</a></td>\n<td align=\"left\">删除 arraylist 中的所有元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-clone.html\">clone()</a></td>\n<td align=\"left\">复制一份 arraylist</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-contains.html\">contains()</a></td>\n<td align=\"left\">判断元素是否在 arraylist</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-get.html\">get()</a></td>\n<td align=\"left\">通过索引值获取 arraylist 中的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-indexof.html\">indexOf()</a></td>\n<td align=\"left\">返回 arraylist 中元素的索引值</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-removeall.html\">removeAll()</a></td>\n<td align=\"left\">删除存在于指定集合中的 arraylist 里的所有元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-remove.html\">remove()</a></td>\n<td align=\"left\">删除 arraylist 里的单个元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-size.html\">size()</a></td>\n<td align=\"left\">返回 arraylist 里元素数量</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-isempty.html\">isEmpty()</a></td>\n<td align=\"left\">判断 arraylist 是否为空</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-sublist.html\">subList()</a></td>\n<td align=\"left\">截取部分 arraylist 的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-set.html\">set()</a></td>\n<td align=\"left\">替换 arraylist 中指定索引的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-sort.html\">sort()</a></td>\n<td align=\"left\">对 arraylist 元素进行排序</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-toarray.html\">toArray()</a></td>\n<td align=\"left\">将 arraylist 转换为数组</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-tostring.html\">toString()</a></td>\n<td align=\"left\">将 arraylist 转换为字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-surecapacity.html\">ensureCapacity</a>()</td>\n<td align=\"left\">设置指定容量大小的 arraylist</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-lastindexof.html\">lastIndexOf()</a></td>\n<td align=\"left\">返回指定元素在 arraylist 中最后一次出现的位置</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-retainall.html\">retainAll()</a></td>\n<td align=\"left\">保留 arraylist 中在指定集合中也存在的那些元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-containsall.html\">containsAll()</a></td>\n<td align=\"left\">查看 arraylist 是否包含指定集合中的所有元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-trimtosize.html\">trimToSize()</a></td>\n<td align=\"left\">将 arraylist 中的容量调整为数组中的元素个数</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-removerange.html\">removeRange()</a></td>\n<td align=\"left\">删除 arraylist 中指定索引之间存在的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-replaceall.html\">replaceAll()</a></td>\n<td align=\"left\">将给定的操作内容替换掉数组中每一个元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-removeif.html\">removeIf()</a></td>\n<td align=\"left\">删除所有满足特定条件的 arraylist 元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-foreach.html\">forEach()</a></td>\n<td align=\"left\">遍历 arraylist 中每一个元素并执行特定操作</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-LinkedList\"><a href=\"#Java-LinkedList\" class=\"headerlink\" title=\"Java LinkedList\"></a>Java LinkedList</h1><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p>\n<p>链表可分为单向链表和双向链表。</p>\n<p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png\" alt=\"img\"></p>\n<p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png\" alt=\"img\"></p>\n<p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p>\n<p>与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。</p>\n<p><strong>以下情况使用 ArrayList :</strong></p>\n<ul>\n<li>频繁访问列表中的某一个元素。</li>\n<li>只需要在列表末尾进行添加和删除元素操作。</li>\n</ul>\n<p><strong>以下情况使用 LinkedList :</strong></p>\n<ul>\n<li>你需要通过循环迭代来访问列表中的某些元素。</li>\n<li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li>\n</ul>\n<p>LinkedList 继承了 AbstractSequentialList 类。</p>\n<p>LinkedList 实现了 Queue 接口，可作为队列使用。</p>\n<p>LinkedList 实现了 List 接口，可进行列表的相关操作。</p>\n<p>LinkedList 实现了 Deque 接口，可作为队列使用。</p>\n<p>LinkedList 实现了 Cloneable 接口，可实现克隆。</p>\n<p>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p>\n<p>LinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 LinkedList 类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList; </span><br><span class=\"line\"></span><br><span class=\"line\">LinkedList&lt;E&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;E&gt;();   <span class=\"comment\">// 普通创建方法</span></span><br><span class=\"line\">或者</span><br><span class=\"line\">LinkedList&lt;E&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>(Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">E</span>&gt; c); <span class=\"comment\">// 使用集合创建链表</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean add(E e)</td>\n<td align=\"left\">链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public void add(int index, E element)</td>\n<td align=\"left\">向指定位置插入元素。</td>\n</tr>\n<tr>\n<td>public boolean addAll(Collection c)</td>\n<td align=\"left\">将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public boolean addAll(int index, Collection c)</td>\n<td align=\"left\">将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public void addFirst(E e)</td>\n<td align=\"left\">元素添加到头部。</td>\n</tr>\n<tr>\n<td>public void addLast(E e)</td>\n<td align=\"left\">元素添加到尾部。</td>\n</tr>\n<tr>\n<td>public boolean offer(E e)</td>\n<td align=\"left\">向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public boolean offerFirst(E e)</td>\n<td align=\"left\">头部插入元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public boolean offerLast(E e)</td>\n<td align=\"left\">尾部插入元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public void clear()</td>\n<td align=\"left\">清空链表。</td>\n</tr>\n<tr>\n<td>public E removeFirst()</td>\n<td align=\"left\">删除并返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E removeLast()</td>\n<td align=\"left\">删除并返回最后一个元素。</td>\n</tr>\n<tr>\n<td>public boolean remove(Object o)</td>\n<td align=\"left\">删除某一元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public E remove(int index)</td>\n<td align=\"left\">删除指定位置的元素。</td>\n</tr>\n<tr>\n<td>public E poll()</td>\n<td align=\"left\">删除并返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E remove()</td>\n<td align=\"left\">删除并返回第一个元素。</td>\n</tr>\n<tr>\n<td>public boolean contains(Object o)</td>\n<td align=\"left\">判断是否含有某一元素。</td>\n</tr>\n<tr>\n<td>public E get(int index)</td>\n<td align=\"left\">返回指定位置的元素。</td>\n</tr>\n<tr>\n<td>public E getFirst()</td>\n<td align=\"left\">返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E getLast()</td>\n<td align=\"left\">返回最后一个元素。</td>\n</tr>\n<tr>\n<td>public int indexOf(Object o)</td>\n<td align=\"left\">查找指定元素从前往后第一次出现的索引。</td>\n</tr>\n<tr>\n<td>public int lastIndexOf(Object o)</td>\n<td align=\"left\">查找指定元素最后一次出现的索引。</td>\n</tr>\n<tr>\n<td>public E peek()</td>\n<td align=\"left\">返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E element()</td>\n<td align=\"left\">返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E peekFirst()</td>\n<td align=\"left\">返回头部元素。</td>\n</tr>\n<tr>\n<td>public E peekLast()</td>\n<td align=\"left\">返回尾部元素。</td>\n</tr>\n<tr>\n<td>public E set(int index, E element)</td>\n<td align=\"left\">设置指定位置的元素。</td>\n</tr>\n<tr>\n<td>public Object clone()</td>\n<td align=\"left\">克隆该列表。</td>\n</tr>\n<tr>\n<td>public Iterator descendingIterator()</td>\n<td align=\"left\">返回倒序迭代器。</td>\n</tr>\n<tr>\n<td>public int size()</td>\n<td align=\"left\">返回链表元素个数。</td>\n</tr>\n<tr>\n<td>public ListIterator listIterator(int index)</td>\n<td align=\"left\">返回从指定位置开始到末尾的迭代器。</td>\n</tr>\n<tr>\n<td>public Object[] toArray()</td>\n<td align=\"left\">返回一个由链表元素组成的数组。</td>\n</tr>\n<tr>\n<td>public T[] toArray(T[] a)</td>\n<td align=\"left\">返回一个由链表元素转换类型而成的数组。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-HashSet\"><a href=\"#Java-HashSet\" class=\"headerlink\" title=\"Java HashSet\"></a>Java HashSet</h1><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p>\n<p>HashSet 允许有 null 值。</p>\n<p>HashSet 是无序的，即不会记录插入的顺序。</p>\n<p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</p>\n<p>HashSet 实现了 Set 接口。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/07/java-hashset-hierarchy.png\" alt=\"img\"></p>\n<p>HashSet 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。</p>\n<h1 id=\"Java-HashMap\"><a href=\"#Java-HashMap\" class=\"headerlink\" title=\"Java HashMap\"></a>Java HashMap</h1><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>\n<p>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。</p>\n<p>HashMap 是无序的，即不会记录插入的顺序。</p>\n<p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/07/WV9wXLl.png\" alt=\"img\"></p>\n<p>HashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。</p>\n<h2 id=\"Java-HashMap-方法\"><a href=\"#Java-HashMap-方法\" class=\"headerlink\" title=\"Java HashMap 方法\"></a>Java HashMap 方法</h2><p>hashmap</p>\n<p>Java HashMap 常用方法列表如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-clear.html\">clear()</a></td>\n<td align=\"left\">删除 hashMap 中的所有键&#x2F;值对</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-clone.html\">clone()</a></td>\n<td align=\"left\">复制一份 hashMap</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-isempty.html\">isEmpty()</a></td>\n<td align=\"left\">判断 hashMap 是否为空</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-size.html\">size()</a></td>\n<td align=\"left\">计算 hashMap 中键&#x2F;值对的数量</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-put.html\">put()</a></td>\n<td align=\"left\">将键&#x2F;值对添加到 hashMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-putall.html\">putAll()</a></td>\n<td align=\"left\">将所有键&#x2F;值对添加到 hashMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-putifabsent.html\">putIfAbsent()</a></td>\n<td align=\"left\">如果 hashMap 中不存在指定的键，则将指定的键&#x2F;值对插入到 hashMap 中。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-remove.html\">remove()</a></td>\n<td align=\"left\">删除 hashMap 中指定键 key 的映射关系</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-containskey.html\">containsKey()</a></td>\n<td align=\"left\">检查 hashMap 中是否存在指定的 key 对应的映射关系。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-containsvalue.html\">containsValue()</a></td>\n<td align=\"left\">检查 hashMap 中是否存在指定的 value 对应的映射关系。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-replace.html\">replace()</a></td>\n<td align=\"left\">替换 hashMap 中是指定的 key 对应的 value。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-replaceall.html\">replaceAll()</a></td>\n<td align=\"left\">将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-get.html\">get()</a></td>\n<td align=\"left\">获取指定 key 对应对 value</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-getordefault.html\">getOrDefault()</a></td>\n<td align=\"left\">获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-foreach.html\">forEach()</a></td>\n<td align=\"left\">对 hashMap 中的每个映射执行指定的操作。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-entryset.html\">entrySet()</a></td>\n<td align=\"left\">返回 hashMap 中所有映射项的集合集合视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-keyset.html\">keySet</a>()</td>\n<td align=\"left\">返回 hashMap 中所有 key 组成的集合视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-values.html\">values()</a></td>\n<td align=\"left\">返回 hashMap 中存在的所有 value 值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-merge.html\">merge()</a></td>\n<td align=\"left\">添加键值对到 hashMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-compute.html\">compute()</a></td>\n<td align=\"left\">对 hashMap 中指定 key 的值进行重新计算</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-computeifabsent.html\">computeIfAbsent()</a></td>\n<td align=\"left\">对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-computeifpresent.html\">computeIfPresent()</a></td>\n<td align=\"left\">对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-Iterator（迭代器）\"><a href=\"#Java-Iterator（迭代器）\" class=\"headerlink\" title=\"Java Iterator（迭代器）\"></a>Java Iterator（迭代器）</h1><p>Java迭代器（Iterator）是 Java 集合框架中的一种机制，是一种用于遍历集合（如列表、集合和映射等）的接口。</p>\n<p>它提供了一种统一的方式来访问集合中的元素，而不需要了解底层集合的具体实现细节。</p>\n<p>Java Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 <a href=\"https://www.runoob.com/java/java-arraylist.html\">ArrayList</a> 和 <a href=\"https://www.runoob.com/java/java-hashset.html\">HashSet</a> 等集合。</p>\n<p>Iterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/07/ListIterator-Class-Diagram.jpg\" alt=\"img\"></p>\n<p>迭代器接口定义了几个方法，最常用的是以下三个：</p>\n<ul>\n<li><strong>next()</strong> - 返回迭代器的下一个元素，并将迭代器的指针移到下一个位置。</li>\n<li><strong>hasNext()</strong> - 用于判断集合中是否还有下一个元素可以访问。</li>\n<li><strong>remove()</strong> - 从集合中删除迭代器最后访问的元素（可选操作）。</li>\n</ul>\n<p>Iterator 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Iterator; // 引入 Iterator 类</span><br></pre></td></tr></table></figure>\n\n<p>通过使用迭代器，我们可以逐个访问集合中的元素，而不需要使用传统的 for 循环或索引。这种方式更加简洁和灵活，并且适用于各种类型的集合。</p>\n<h3 id=\"获取一个迭代器\"><a href=\"#获取一个迭代器\" class=\"headerlink\" title=\"获取一个迭代器\"></a>获取一个迭代器</h3><p>集合想获取一个迭代器可以使用 iterator() 方法:</p>\n<h2 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"comment\">// 引入 ArrayList 和 Iterator 类*</span></span><br><span class=\"line\">**<span class=\"keyword\">import</span>** java.util.ArrayList;</span><br><span class=\"line\">**<span class=\"keyword\">import</span>** java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"keyword\">public</span>** **class** RunoobTest &#123;</span><br><span class=\"line\">  **<span class=\"keyword\">public</span>** **<span class=\"keyword\">static</span>** **<span class=\"keyword\">void</span>** main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    *<span class=\"comment\">// 创建集合*</span></span><br><span class=\"line\">​    ArrayList&lt;String&gt; sites = **<span class=\"keyword\">new</span>** ArrayList&lt;String&gt;();</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Google&quot;</span>);</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Taobao&quot;</span>);</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Zhihu&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">​    *<span class=\"comment\">// 获取迭代器*</span></span><br><span class=\"line\">​    Iterator&lt;String&gt; it = sites.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">​    *<span class=\"comment\">// 输出集合中的第一个元素*</span></span><br><span class=\"line\">​    System.out.println(it.next());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，输出结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java-序列化\"><a href=\"#Java-序列化\" class=\"headerlink\" title=\"Java 序列化\"></a>Java 序列化</h1><p>Java 序列化是一种将对象转换为字节流的过程，以便可以将对象保存到磁盘上，将其传输到网络上，或者将其存储在内存中，以后再进行反序列化，将字节流重新转换为对象。</p>\n<p>序列化在 Java 中是通过 <strong>java.io.Serializable</strong> 接口来实现的，该接口没有任何方法，只是一个标记接口，用于标识类可以被序列化。</p>\n<p>当你序列化对象时，你把它包装成一个特殊文件，可以保存、传输或存储。反序列化则是打开这个文件，读取序列化的数据，然后将其还原为对象，以便在程序中使用。</p>\n<p><strong>序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。</strong></p>\n<p>实现 Serializable 接口： 要使一个类可序列化，需要让该类实现 java.io.Serializable 接口，这告诉 Java 编译器这个类可以被序列化，例如：</p>\n<h2 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p><strong>import</strong> java.io.Serializable;</p>\n<p><strong>public</strong> <strong>class</strong> MyClass <strong>implements</strong> Serializable {<br>  <em>&#x2F;&#x2F; 类的成员和方法</em><br>}</p>\n<p><strong>序列化对象：</strong> 使用 ObjectOutputStream 类来将对象序列化为字节流，以下是一个简单的实例：</p>\n<h2 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>MyClass obj &#x3D; <strong>new</strong> MyClass();<br><strong>try</strong> {<br>  FileOutputStream fileOut &#x3D; <strong>new</strong> FileOutputStream(“object.ser”);<br>  ObjectOutputStream out &#x3D; <strong>new</strong> ObjectOutputStream(fileOut);<br>  out.writeObject(obj);<br>  out.close();<br>  fileOut.close();<br>} <strong>catch</strong> (IOException e) {<br>  e.printStackTrace();<br>}</p>\n<p>上述代码将一个名为 “object.ser” 的文件中的 obj 对象序列化。</p>\n<p><strong>反序列化对象：</strong> 使用 ObjectInputStream 类来从字节流中反序列化对象，以下是一个简单的实例：</p>\n<h2 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>MyClass obj &#x3D; <strong>null</strong>;<br><strong>try</strong> {<br>  FileInputStream fileIn &#x3D; <strong>new</strong> FileInputStream(“object.ser”);<br>  ObjectInputStream in &#x3D; <strong>new</strong> ObjectInputStream(fileIn);<br>  obj &#x3D; (MyClass) in.readObject();<br>  in.close();<br>  fileIn.close();<br>} <strong>catch</strong> (IOException e) {<br>  e.printStackTrace();<br>} <strong>catch</strong> (ClassNotFoundException e) {<br>  e.printStackTrace();<br>}</p>\n<p>上述代码从 “object.ser” 文件中读取字节流并将其反序列化为一个 MyClass 对象。</p>\n<p>类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。</p>\n<p>ObjectOutputStream 类包含很多写方法来写各种数据类型，但是一个特别的方法例外：</p>\n<p>public final void writeObject(Object x) throws IOException</p>\n<p>上面的方法序列化一个对象，并将它发送到输出流。相似的 ObjectInputStream 类包含如下反序列化一个对象的方法：</p>\n<p>public final Object readObject() throws IOException,                                  ClassNotFoundException</p>\n<p>该方法从流中取出下一个对象，并将对象反序列化。它的返回值为Object，因此，你需要将它转换成合适的数据类型。</p>\n<h3 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>为了演示序列化在 Java 中是怎样工作的，我将使用之前教程中提到的 Employee 类，假设我们定义了如下的 Employee 类，该类实现了Serializable 接口。</p>\n<h2 id=\"Employee-java-文件代码：\"><a href=\"#Employee-java-文件代码：\" class=\"headerlink\" title=\"Employee.java 文件代码：\"></a>Employee.java 文件代码：</h2><p>public class Employee implements java.io.Serializable {   public String name;   public String address;   public transient int SSN;   public int number;   public void mailCheck()   {      System.out.println(“Mailing a check to “ + name                           + “ “ + address);   } }</p>\n<p>请注意，一个类的对象要想序列化成功，必须满足两个条件：</p>\n<p>该类必须实现 java.io.Serializable 接口。</p>\n<p>该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</p>\n<p>如果你想知道一个 Java 标准类是否是可序列化的，请查看该类的文档。检验一个类的实例是否能序列化十分简单， 只需要查看该类有没有实现 java.io.Serializable接口。</p>\n<hr>\n<h2 id=\"序列化对象\"><a href=\"#序列化对象\" class=\"headerlink\" title=\"序列化对象\"></a>序列化对象</h2><p>ObjectOutputStream 类用来序列化一个对象，如下的 SerializeDemo 例子实例化了一个 Employee 对象，并将该对象序列化到一个文件中。</p>\n<p>该程序执行后，就创建了一个名为 employee.ser 文件。该程序没有任何输出，但是你可以通过代码研读来理解程序的作用。</p>\n<p><strong>注意：</strong> 当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名。</p>\n<h2 id=\"SerializeDemo-java-文件代码：\"><a href=\"#SerializeDemo-java-文件代码：\" class=\"headerlink\" title=\"SerializeDemo.java 文件代码：\"></a>SerializeDemo.java 文件代码：</h2><p>import java.io.*;  public class SerializeDemo {   public static void main(String [] args)   {      Employee e &#x3D; new Employee();      e.name &#x3D; “Reyan Ali”;      e.address &#x3D; “Phokka Kuan, Ambehta Peer”;      e.SSN &#x3D; 11122333;      e.number &#x3D; 101;      try      {         FileOutputStream fileOut &#x3D;         new FileOutputStream(“&#x2F;tmp&#x2F;employee.ser”);         ObjectOutputStream out &#x3D; new ObjectOutputStream(fileOut);         out.writeObject(e);         out.close();         fileOut.close();         System.out.printf(“Serialized data is saved in &#x2F;tmp&#x2F;employee.ser”);      }catch(IOException i)      {          i.printStackTrace();      }   } }</p>\n<hr>\n<h2 id=\"反序列化对象\"><a href=\"#反序列化对象\" class=\"headerlink\" title=\"反序列化对象\"></a>反序列化对象</h2><p>下面的 DeserializeDemo 程序实例了反序列化，&#x2F;tmp&#x2F;employee.ser 存储了 Employee 对象。</p>\n<h2 id=\"DeserializeDemo-java-文件代码：\"><a href=\"#DeserializeDemo-java-文件代码：\" class=\"headerlink\" title=\"DeserializeDemo.java 文件代码：\"></a>DeserializeDemo.java 文件代码：</h2><p>import java.io.*;  public class DeserializeDemo {   public static void main(String [] args)   {      Employee e &#x3D; null;      try      {         FileInputStream fileIn &#x3D; new FileInputStream(“&#x2F;tmp&#x2F;employee.ser”);         ObjectInputStream in &#x3D; new ObjectInputStream(fileIn);         e &#x3D; (Employee) in.readObject();         in.close();         fileIn.close();      }catch(IOException i)      {         i.printStackTrace();         return;      }catch(ClassNotFoundException c)      {         System.out.println(“Employee class not found”);         c.printStackTrace();         return;      }      System.out.println(“Deserialized Employee…”);      System.out.println(“Name: “ + e.name);      System.out.println(“Address: “ + e.address);      System.out.println(“SSN: “ + e.SSN);      System.out.println(“Number: “ + e.number);    } }</p>\n<p>以上程序编译运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deserialized Employee...</span><br><span class=\"line\">Name: Reyan Ali</span><br><span class=\"line\">Address:Phokka Kuan, Ambehta Peer</span><br><span class=\"line\">SSN: 0</span><br><span class=\"line\">Number:101</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意以下要点：</p>\n<p>readObject() 方法中的 try&#x2F;catch代码块尝试捕获 ClassNotFoundException 异常。对于 JVM 可以反序列化对象，它必须是能够找到字节码的类。如果JVM在反序列化对象的过程中找不到该类，则抛出一个 ClassNotFoundException 异常。</p>\n<p>注意，readObject() 方法的返回值被转化成 Employee 引用。</p>\n<p>当对象被序列化时，属性 SSN 的值为 111222333，但是因为该属性是短暂的，该值没有被发送到输出流。所以反序列化后 Employee 对象的 SSN 属性为 0。</p>\n<h1 id=\"Java-网络编程\"><a href=\"#Java-网络编程\" class=\"headerlink\" title=\"Java 网络编程\"></a>Java 网络编程</h1><h1 id=\"Java-多线程编程\"><a href=\"#Java-多线程编程\" class=\"headerlink\" title=\"Java 多线程编程\"></a>Java 多线程编程</h1><p>Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<p>多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。</p>\n<p>这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p>\n<p>多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。</p>\n<h2 id=\"一个线程的生命周期\"><a href=\"#一个线程的生命周期\" class=\"headerlink\" title=\"一个线程的生命周期\"></a>一个线程的生命周期</h2><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p>\n<p>下图显示了一个线程完整的生命周期。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg\" alt=\"img\"></p>\n<ul>\n<li><p>新建状态:</p>\n<p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p>\n</li>\n<li><p>就绪状态:</p>\n<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</li>\n<li><p>运行状态:</p>\n<p>如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li><p>阻塞状态:</p>\n<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： </p>\n<ul>\n<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>\n<li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态。</li>\n</ul>\n</li>\n<li><p>死亡状态: </p>\n<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h2><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p>\n<p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p>\n<p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p>\n<p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>\n<hr>\n<h2 id=\"创建一个线程\"><a href=\"#创建一个线程\" class=\"headerlink\" title=\"创建一个线程\"></a>创建一个线程</h2><p>Java 提供了三种创建线程的方法：</p>\n<ul>\n<li><strong>通过实现 Runnable 接口；</strong></li>\n<li><strong>通过继承 Thread 类本身；</strong></li>\n<li><strong>通过 Callable 和 Future 创建线程。</strong></li>\n</ul>\n<hr>\n<h2 id=\"通过实现-Runnable-接口来创建线程\"><a href=\"#通过实现-Runnable-接口来创建线程\" class=\"headerlink\" title=\"通过实现 Runnable 接口来创建线程\"></a>通过实现 Runnable 接口来创建线程</h2><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p>\n<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p>\n<p>public void run()</p>\n<p>你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p>\n<p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p>\n<p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p>\n<p>Thread(Runnable threadOb,String threadName);</p>\n<p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p>\n<p>新线程创建之后，你调用它的 start() 方法它才会运行。</p>\n<p>void start();</p>\n<p>下面是一个创建线程并开始让它执行的实例：</p>\n<h2 id=\"实例-7\"><a href=\"#实例-7\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>class RunnableDemo implements Runnable {   private Thread t;   private String threadName;      RunnableDemo( String name) {      threadName &#x3D; name;      System.out.println(“Creating “ +  threadName );   }      public void run() {      System.out.println(“Running “ +  threadName );      try {         for(int i &#x3D; 4; i &gt; 0; i–) {            System.out.println(“Thread: “ + threadName + “, “ + i);            &#x2F;&#x2F; 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(“Thread “ +  threadName + “ interrupted.”);      }      System.out.println(“Thread “ +  threadName + “ exiting.”);   }      public void start () {      System.out.println(“Starting “ +  threadName );      if (t &#x3D;&#x3D; null) {         t &#x3D; new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      RunnableDemo R1 &#x3D; new RunnableDemo( “Thread-1”);      R1.start();            RunnableDemo R2 &#x3D; new RunnableDemo( “Thread-2”);      R2.start();   }    }</p>\n<p>编译以上程序运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating Thread-1</span><br><span class=\"line\">Starting Thread-1</span><br><span class=\"line\">Creating Thread-2</span><br><span class=\"line\">Starting Thread-2</span><br><span class=\"line\">Running Thread-1</span><br><span class=\"line\">Thread: Thread-1, 4</span><br><span class=\"line\">Running Thread-2</span><br><span class=\"line\">Thread: Thread-2, 4</span><br><span class=\"line\">Thread: Thread-1, 3</span><br><span class=\"line\">Thread: Thread-2, 3</span><br><span class=\"line\">Thread: Thread-1, 2</span><br><span class=\"line\">Thread: Thread-2, 2</span><br><span class=\"line\">Thread: Thread-1, 1</span><br><span class=\"line\">Thread: Thread-2, 1</span><br><span class=\"line\">Thread Thread-1 exiting.</span><br><span class=\"line\">Thread Thread-2 exiting.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"通过继承Thread来创建线程\"><a href=\"#通过继承Thread来创建线程\" class=\"headerlink\" title=\"通过继承Thread来创建线程\"></a>通过继承Thread来创建线程</h2><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p>\n<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<h2 id=\"实例-8\"><a href=\"#实例-8\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>class ThreadDemo extends Thread {   private Thread t;   private String threadName;      ThreadDemo( String name) {      threadName &#x3D; name;      System.out.println(“Creating “ +  threadName );   }      public void run() {      System.out.println(“Running “ +  threadName );      try {         for(int i &#x3D; 4; i &gt; 0; i–) {            System.out.println(“Thread: “ + threadName + “, “ + i);            &#x2F;&#x2F; 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(“Thread “ +  threadName + “ interrupted.”);      }      System.out.println(“Thread “ +  threadName + “ exiting.”);   }      public void start () {      System.out.println(“Starting “ +  threadName );      if (t &#x3D;&#x3D; null) {         t &#x3D; new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      ThreadDemo T1 &#x3D; new ThreadDemo( “Thread-1”);      T1.start();            ThreadDemo T2 &#x3D; new ThreadDemo( “Thread-2”);      T2.start();   }    }</p>\n<p>编译以上程序运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating Thread-1</span><br><span class=\"line\">Starting Thread-1</span><br><span class=\"line\">Creating Thread-2</span><br><span class=\"line\">Starting Thread-2</span><br><span class=\"line\">Running Thread-1</span><br><span class=\"line\">Thread: Thread-1, 4</span><br><span class=\"line\">Running Thread-2</span><br><span class=\"line\">Thread: Thread-2, 4</span><br><span class=\"line\">Thread: Thread-1, 3</span><br><span class=\"line\">Thread: Thread-2, 3</span><br><span class=\"line\">Thread: Thread-1, 2</span><br><span class=\"line\">Thread: Thread-2, 2</span><br><span class=\"line\">Thread: Thread-1, 1</span><br><span class=\"line\">Thread: Thread-2, 1</span><br><span class=\"line\">Thread Thread-1 exiting.</span><br><span class=\"line\">Thread Thread-2 exiting.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Thread-方法\"><a href=\"#Thread-方法\" class=\"headerlink\" title=\"Thread 方法\"></a>Thread 方法</h2><p>下表列出了Thread类的一些重要方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>序号</strong></th>\n<th align=\"center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"center\"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"center\"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"center\"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"center\"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"center\"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"center\"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"center\"><strong>public void interrupt()</strong> 中断线程。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"center\"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td>\n</tr>\n</tbody></table>\n<p>上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>序号</strong></th>\n<th align=\"center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"center\"><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"center\"><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"center\"><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"center\"><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"center\"><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td>\n</tr>\n</tbody></table>\n<h3 id=\"实例-9\"><a href=\"#实例-9\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>如下的ThreadClassDemo 程序演示了Thread类的一些方法：</p>\n<h2 id=\"DisplayMessage-java-文件代码：\"><a href=\"#DisplayMessage-java-文件代码：\" class=\"headerlink\" title=\"DisplayMessage.java 文件代码：\"></a>DisplayMessage.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : DisplayMessage.java &#x2F;&#x2F; 通过实现 Runnable 接口创建线程 public class DisplayMessage implements Runnable {   private String message;      public DisplayMessage(String message) {      this.message &#x3D; message;   }      public void run() {      while(true) {         System.out.println(message);      }   } }</p>\n<h2 id=\"GuessANumber-java-文件代码：\"><a href=\"#GuessANumber-java-文件代码：\" class=\"headerlink\" title=\"GuessANumber.java 文件代码：\"></a>GuessANumber.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : GuessANumber.java &#x2F;&#x2F; 通过继承 Thread 类创建线程  public class GuessANumber extends Thread {   private int number;   public GuessANumber(int number) {      this.number &#x3D; number;   }      public void run() {      int counter &#x3D; 0;      int guess &#x3D; 0;      do {         guess &#x3D; (int) (Math.random() * 100 + 1);         System.out.println(this.getName() + “ guesses “ + guess);         counter++;      } while(guess !&#x3D; number);      System.out.println(“** Correct!” + this.getName() + “in” + counter + “guesses.**”);   } }</p>\n<h2 id=\"ThreadClassDemo-java-文件代码：\"><a href=\"#ThreadClassDemo-java-文件代码：\" class=\"headerlink\" title=\"ThreadClassDemo.java 文件代码：\"></a>ThreadClassDemo.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : ThreadClassDemo.java public class ThreadClassDemo {    public static void main(String [] args) {      Runnable hello &#x3D; new DisplayMessage(“Hello”);      Thread thread1 &#x3D; new Thread(hello);      thread1.setDaemon(true);      thread1.setName(“hello”);      System.out.println(“Starting hello thread…”);      thread1.start();            Runnable bye &#x3D; new DisplayMessage(“Goodbye”);      Thread thread2 &#x3D; new Thread(bye);      thread2.setPriority(Thread.MIN_PRIORITY);      thread2.setDaemon(true);      System.out.println(“Starting goodbye thread…”);      thread2.start();       System.out.println(“Starting thread3…”);      Thread thread3 &#x3D; new GuessANumber(27);      thread3.start();      try {         thread3.join();      }catch(InterruptedException e) {         System.out.println(“Thread interrupted.”);      }      System.out.println(“Starting thread4…”);      Thread thread4 &#x3D; new GuessANumber(75);            thread4.start();      System.out.println(“main() is ending…”);   } }</p>\n<p>运行结果如下，每一次运行的结果都不一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting hello thread...</span><br><span class=\"line\">Starting goodbye thread...</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">.......</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"通过-Callable-和-Future-创建线程\"><a href=\"#通过-Callable-和-Future-创建线程\" class=\"headerlink\" title=\"通过 Callable 和 Future 创建线程\"></a>通过 Callable 和 Future 创建线程</h2><ul>\n<li><ol>\n<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"实例-10\"><a href=\"#实例-10\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>public class CallableThreadTest implements Callable<Integer> {    public static void main(String[] args)      {          CallableThreadTest ctt &#x3D; new CallableThreadTest();          FutureTask<Integer> ft &#x3D; new FutureTask&lt;&gt;(ctt);          for(int i &#x3D; 0;i &lt; 100;i++)          {              System.out.println(Thread.currentThread().getName()+” 的循环变量i的值”+i);              if(i&#x3D;&#x3D;20)              {                  new Thread(ft,”有返回值的线程”).start();              }          }          try          {              System.out.println(“子线程的返回值：”+ft.get());          } catch (InterruptedException e)          {              e.printStackTrace();          } catch (ExecutionException e)          {              e.printStackTrace();          }        }    @Override      public Integer call() throws Exception      {          int i &#x3D; 0;          for(;i&lt;100;i++)          {              System.out.println(Thread.currentThread().getName()+” “+i);          }          return i;      }   }</p>\n<hr>\n<h2 id=\"创建线程的三种方式的对比\"><a href=\"#创建线程的三种方式的对比\" class=\"headerlink\" title=\"创建线程的三种方式的对比\"></a>创建线程的三种方式的对比</h2><ul>\n<li><ol>\n<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"线程的几个主要概念\"><a href=\"#线程的几个主要概念\" class=\"headerlink\" title=\"线程的几个主要概念\"></a>线程的几个主要概念</h2><p>在多线程编程时，你需要了解以下几个概念：</p>\n<ul>\n<li>线程同步</li>\n<li>线程间通信</li>\n<li>线程死锁</li>\n<li>线程控制：挂起、停止和恢复</li>\n</ul>\n<hr>\n<h2 id=\"多线程的使用\"><a href=\"#多线程的使用\" class=\"headerlink\" title=\"多线程的使用\"></a>多线程的使用</h2><p>有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。</p>\n<p>通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。</p>\n<p>请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU 花费在上下文的切换的时间将多于执行程序的时间！</p>\n<hr>\n<h1 id=\"Java-实例\"><a href=\"#Java-实例\" class=\"headerlink\" title=\"Java 实例\"></a>Java 实例</h1><p>本章节我们将为大家介绍 Java 常用的实例，通过实例学习我们可以更快的掌握 Java 的应用。</p>\n<hr>\n<h2 id=\"Java-环境设置实例\"><a href=\"#Java-环境设置实例\" class=\"headerlink\" title=\"Java 环境设置实例\"></a>Java 环境设置实例</h2><ol>\n<li><a href=\"https://www.runoob.com/java/env-compile.html\">Java 实例 – 如何编译一个Java 文件？</a></li>\n<li><a href=\"https://www.runoob.com/java/env-run.html\">Java 实例 – Java 如何运行一个编译过的类文件?</a></li>\n<li><a href=\"https://www.runoob.com/java/env-classpath.html\">Java 实例 - 如何执行指定class文件目录（classpath）？</a></li>\n<li><a href=\"https://www.runoob.com/java/env-version.html\">Java 实例 – 如何查看当前 Java 运行的版本?</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-字符串\"><a href=\"#Java-字符串\" class=\"headerlink\" title=\"Java 字符串\"></a>Java 字符串</h2><ol>\n<li><a href=\"https://www.runoob.com/java/string-compare.html\">Java 实例 – 字符串比较</a></li>\n<li><a href=\"https://www.runoob.com/java/string-last-occurance.html\">Java 实例 - 查找字符串最后一次出现的位置</a></li>\n<li><a href=\"https://www.runoob.com/java/string-removing-char.html\">Java 实例 - 删除字符串中的一个字符</a></li>\n<li><a href=\"https://www.runoob.com/java/string-replace.html\">Java 实例 - 字符串替换</a></li>\n<li><a href=\"https://www.runoob.com/java/string-reverse.html\">Java 实例 - 字符串反转</a></li>\n<li><a href=\"https://www.runoob.com/java/string-search.html\">Java 实例 - 字符串查找</a></li>\n<li><a href=\"https://www.runoob.com/java/string-split.html\">Java 实例 - 字符串分割</a></li>\n<li><a href=\"https://www.runoob.com/java/java-stringtokenizer-example.html\">Java 实例 - 字符串分割(StringTokenizer)</a></li>\n<li><a href=\"https://www.runoob.com/java/string-uppercase.html\">Java 实例 - 字符串小写转大写</a></li>\n<li><a href=\"https://www.runoob.com/java/string-regionmatch.html\">Java 实例 - 测试两个字符串区域是否相等</a></li>\n<li><a href=\"https://www.runoob.com/java/string-performance.html\">Java 实例 - 字符串性能比较测试</a></li>\n<li><a href=\"https://www.runoob.com/java/string-optimization.html\">Java 实例 - 字符串优化</a></li>\n<li><a href=\"https://www.runoob.com/java/string-format.html\">Java 实例 - 字符串格式化</a></li>\n<li><a href=\"https://www.runoob.com/java/string-concatenation.html\">Java 实例 - 连接字符串</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-数组\"><a href=\"#Java-数组\" class=\"headerlink\" title=\"Java 数组\"></a>Java 数组</h2><ol>\n<li><a href=\"https://www.runoob.com/java/arrays-search.html\">Java 实例 – 数组排序及元素查找</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-insert.html\">Java 实例 – 数组添加元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-upperbound.html\">Java 实例 – 获取数组长度</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-reverse.html\">Java 实例 – 数组反转</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-output.html\">Java 实例 – 数组输出</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-min-max.html\">Java 实例 – 数组获取最大和最小值</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays_merge.html\">Java 实例 – 数组合并</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-fill.html\">Java 实例 – 数组填充</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-extension.html\">Java 实例 – 数组扩容</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-compare.html\">Java 实例 – 查找数组中的重复元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-remove.html\">Java 实例 – 删除数组元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-removeall.html\">Java 实例 – 数组差集</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-retainall.html\">Java 实例 – 数组交集</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-find.html\">Java 实例 – 在数组中查找指定元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-equal.html\">Java 实例 – 判断数组是否相等</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-union.html\">Java 实例 - 数组并集</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-时间处理\"><a href=\"#Java-时间处理\" class=\"headerlink\" title=\"Java 时间处理\"></a>Java 时间处理</h2><ol>\n<li><a href=\"https://www.runoob.com/java/date-time-am-pm.html\">Java 实例 - 格式化时间（SimpleDateFormat）</a></li>\n<li><a href=\"https://www.runoob.com/java/date-time-datetime.html\">Java 实例 - 获取当前时间</a></li>\n<li><a href=\"https://www.runoob.com/java/date-year-month.html\">Java 实例 - 获取年份、月份等</a></li>\n<li><a href=\"https://www.runoob.com/java/date-timestamp2date.html\">Java 实例 - 时间戳转换成时间</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-方法\"><a href=\"#Java-方法\" class=\"headerlink\" title=\"Java 方法\"></a>Java 方法</h2><ol>\n<li><a href=\"https://www.runoob.com/java/method-overloading.html\">Java 实例 – 方法重载</a></li>\n<li><a href=\"https://www.runoob.com/java/method-array.html\">Java 实例 – 输出数组元素</a></li>\n<li><a href=\"https://www.runoob.com/java/method-tower.html\">Java 实例 – 汉诺塔算法</a></li>\n<li><a href=\"https://www.runoob.com/java/method-fibonacci.html\">Java 实例 – 斐波那契数列</a></li>\n<li><a href=\"https://www.runoob.com/java/method-factorial.html\">Java 实例 – 阶乘</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-override.html\">Java 实例 – 方法覆盖</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-instanceof.html\">Java 实例 – instanceOf 关键字用法</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-break.html\">Java 实例 – break 关键字用法</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-continue.html\">Java 实例 – continue 关键字用法</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-label.html\">Java 实例 – 标签(Label)</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-enum.html\">Java 实例 – enum 和 switch 语句使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-enum1.html\">Java 实例 – Enum（枚举）构造函数及方法的使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-for.html\">Java 实例 – for 和 foreach循环使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-varargs.html\">Java 实例 – Varargs 可变参数使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-varargs1.html\">Java 实例 – 重载(overloading)方法中使用 Varargs</a></li>\n</ol>\n<hr>\n<h2 id=\"打印图形\"><a href=\"#打印图形\" class=\"headerlink\" title=\"打印图形\"></a>打印图形</h2><ol>\n<li><a href=\"https://www.runoob.com/java/java-print-diamond.html\">Java 实例 – 打印菱形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-multiplicationtable.html\">Java 实例 – 九九乘法表</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-the-triangle.html\">Java 实例 – 打印三角形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-invertedtriangle.html\">Java 实例 – 打印倒立的三角形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-parallelogram.html\">Java 实例 – 打印平行四边形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-rect.html\">Java 实例 – 打印矩形</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-文件操作\"><a href=\"#Java-文件操作\" class=\"headerlink\" title=\"Java 文件操作\"></a>Java 文件操作</h2><ol>\n<li><a href=\"https://www.runoob.com/java/file-write.html\">Java 实例 - 文件写入</a></li>\n<li><a href=\"https://www.runoob.com/java/file-read.html\">Java 实例 - 读取文件内容</a></li>\n<li><a href=\"https://www.runoob.com/java/file-delete.html\">Java 实例 - 删除文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-copy.html\">Java 实例 - 将文件内容复制到另一个文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-append.html\">Java 实例 - 向文件中追加数据</a></li>\n<li><a href=\"https://www.runoob.com/java/file-create-temp.html\">Java 实例 - 创建临时文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-date-modify.html\">Java 实例 - 修改文件最后的修改日期</a></li>\n<li><a href=\"https://www.runoob.com/java/file-size.html\">Java 实例 - 获取文件大小</a></li>\n<li><a href=\"https://www.runoob.com/java/file-rename.html\">Java 实例 - 文件重命名</a></li>\n<li><a href=\"https://www.runoob.com/java/file-read-only.html\">Java 实例 - 设置文件只读</a></li>\n<li><a href=\"https://www.runoob.com/java/file-exist.html\">Java 实例 - 检测文件是否存在</a></li>\n<li><a href=\"https://www.runoob.com/java/file-dir.html\">Java 实例 - 在指定目录中创建文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-date.html\">Java 实例 - 获取文件修改时间</a></li>\n<li><a href=\"https://www.runoob.com/java/file-create.html\">Java 实例 - 创建文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-compare.html\">Java 实例 - 文件路径比较</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-目录操作\"><a href=\"#Java-目录操作\" class=\"headerlink\" title=\"Java 目录操作\"></a>Java 目录操作</h2><ol>\n<li><a href=\"https://www.runoob.com/java/dir-create.html\">Java 实例 - 递归创建目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-delete.html\">Java 实例 - 删除目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-empty.html\">Java 实例 - 判断目录是否为空</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-hidden.html\">Java 实例 - 判断文件是否隐藏</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-size.html\">Java 实例 - 获取目录大小</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-search.html\">Java 实例 - 在指定目录中查找文件</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-parent.html\">Java 实例 - 获取文件的上级目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-modification.html\">Java 实例 - 获取目录最后修改时间</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-hierarchy.html\">Java 实例 - 打印目录结构</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-display.html\">Java 实例 - 遍历指定目录下的所有目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-sub.html\">Java 实例 - 遍历指定目录下的所有文件</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-search-file.html\">Java 实例 - 在指定目录中查找文件</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-root.html\">Java 实例 - 遍历系统根目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-current.html\">Java 实例 - 查看当前工作目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-traverse.html\">Java 实例 - 遍历目录</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-异常处理\"><a href=\"#Java-异常处理\" class=\"headerlink\" title=\"Java 异常处理\"></a>Java 异常处理</h2><ol>\n<li><a href=\"https://www.runoob.com/java/exception-method.html\">Java 实例 - 异常处理方法</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-hierarchy.html\">Java 实例 - 多个异常处理（多个catch）</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-finally.html\">Java 实例 - Finally的用法</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-catch.html\">Java 实例 - 使用 catch 处理异常</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-thread.html\">Java 实例 - 多线程异常处理</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-printstack.html\">Java 实例 - 获取异常的堆栈信息</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-overloaded-method.html\">Java 实例 - 重载方法异常处理</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-chain.html\">Java 实例 - 链试异常</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-user.html\">Java 实例 - 自定义异常</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-数据结构\"><a href=\"#Java-数据结构\" class=\"headerlink\" title=\"Java 数据结构\"></a>Java 数据结构</h2><ol>\n<li><a href=\"https://www.runoob.com/java/data-add.html\">Java 实例 – 数字求和运算</a></li>\n<li><a href=\"https://www.runoob.com/java/data-intopost.html\">Java 实例 – 利用堆栈将中缀表达式转换成后缀 </a></li>\n<li><a href=\"https://www.runoob.com/java/data-insert.html\">Java 实例 – 在链表（LinkedList）的开头和结 </a></li>\n<li><a href=\"https://www.runoob.com/java/data-element.html\">Java 实例 – 获取链表（LinkedList）的第一个 </a></li>\n<li><a href=\"https://www.runoob.com/java/data-replace.html\">Java 实例 – 删除链表中的元素</a></li>\n<li><a href=\"https://www.runoob.com/java/data_linklist.html\">Java 实例 – 获取链表的元素</a></li>\n<li><a href=\"https://www.runoob.com/java/data-vecsort.html\">Java 实例 – 获取向量元素的索引值</a></li>\n<li><a href=\"https://www.runoob.com/java/data-stack.html\">Java 实例 – 栈的实现</a></li>\n<li><a href=\"https://www.runoob.com/java/data-search.html\">Java 实例 – 链表元素查找</a></li>\n<li><a href=\"https://www.runoob.com/java/data-reverse.html\">Java 实例 – 压栈出栈的方法实现字符串反转</a></li>\n<li><a href=\"https://www.runoob.com/java/data-queue.html\">Java 实例 – 队列（Queue）用法</a></li>\n<li><a href=\"https://www.runoob.com/java/data-vec-max.html\">Java 实例 – 获取向量的最大元素</a></li>\n<li><a href=\"https://www.runoob.com/java/data-update.html\">Java 实例 – 链表修改</a></li>\n<li><a href=\"https://www.runoob.com/java/data-swap.html\">Java 实例 – 旋转向量</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-集合\"><a href=\"#Java-集合\" class=\"headerlink\" title=\"Java 集合\"></a>Java 集合</h2><ol>\n<li><a href=\"https://www.runoob.com/java/collection-array.html\">Java 实例 – 数组转集合</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-compare.html\">Java 实例 – 集合比较</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-iterate.html\">Java 实例 – HashMap遍历</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-size.html\">Java 实例 – 集合长度</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-shuffle.html\">Java 实例 – 集合打乱顺序</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-iterator.html\">Java 实例 – 集合遍历</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-reverse.html\">Java 实例 – 集合反转</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-remove.html\">Java 实例 – 删除集合中指定元素</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-readonly.html\">Java 实例 – 只读集合</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-print.html\">Java 实例 – 集合输出</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-conversion.html\">Java 实例 – 集合转数组</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-rotate.html\">Java 实例 – List 循环移动元素</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-minmax.html\">Java 实例 – 查找 List 中的最大最小值</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-hashtable-key.html\">Java 实例 – 遍历 HashTable 的键值</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-enumeration.html\">Java 实例 – 使用 Enumeration 遍历 HashTable</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-all.html\">Java 实例 – 集合中添加不同类型元素</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-replace.html\">Java 实例 – List 元素替换</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-sublist.html\">Java 实例 – List 截取</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-网络实例\"><a href=\"#Java-网络实例\" class=\"headerlink\" title=\"Java 网络实例\"></a>Java 网络实例</h2><ol>\n<li><a href=\"https://www.runoob.com/java/net-address.html\">Java 实例 – 获取指定主机的IP地址</a></li>\n<li><a href=\"https://www.runoob.com/java/net-port.html\">Java 实例 – 查看端口是否已使用</a></li>\n<li><a href=\"https://www.runoob.com/java/net-localip.html\">Java 实例 – 获取本机ip地址及主机名</a></li>\n<li><a href=\"https://www.runoob.com/java/net-serverfile.html\">Java 实例 – 获取远程文件大小</a></li>\n<li><a href=\"https://www.runoob.com/java/net-multisoc.html\">Java 实例 – Socket 实现多线程服务器程序</a></li>\n<li><a href=\"https://www.runoob.com/java/net-filetime.html\">Java 实例 – 查看主机指定文件的最后修改时间</a></li>\n<li><a href=\"https://www.runoob.com/java/net-connected.html\">Java 实例 – 使用 Socket 连接到指定主机</a></li>\n<li><a href=\"https://www.runoob.com/java/net-webpage.html\">Java 实例 – 网页抓取</a></li>\n<li><a href=\"https://www.runoob.com/java/net-urldate.html\">Java 实例 – 获取 URL响应头的日期信息</a></li>\n<li><a href=\"https://www.runoob.com/java/net-url-header.html\">Java 实例 – 获取 URL 响应头信息</a></li>\n<li><a href=\"https://www.runoob.com/java/net-url.html\">Java 实例 – 解析 URL</a></li>\n<li><a href=\"https://www.runoob.com/java/net-serversocket-socket.html\">Java 实例 – ServerSocket 和 Socket 通信实例</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-线程\"><a href=\"#Java-线程\" class=\"headerlink\" title=\"Java 线程\"></a>Java 线程</h2><ol>\n<li><a href=\"https://www.runoob.com/java/thread-alive.html\">Java 实例 – 查看线程是否存活</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-name.html\">Java 实例 – 获取当前线程名称</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-monitor.html\">Java 实例 – 状态监测</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-getpri.html\">Java 实例 – 线程优先级设置</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-deadlock.html\">Java 实例 – 死锁及解决方法</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-id.html\">Java 实例 – 获取线程id</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-suspend.html\">Java 实例 – 线程挂起</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-stop.html\">Java 实例 – 终止线程</a></li>\n<li><a href=\"https://www.runoob.com/html/thread-procon.html\">Java 实例 – 生产者&#x2F;消费者问题</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-status.html\">Java 实例 – 获取线程状态</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-showall.html\">Java 实例 – 获取所有线程</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-priorityinfo.html\">Java 实例 – 查看线程优先级</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-interrupt.html\">Java 实例 – 中断线程</a></li>\n</ol>\n","excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"Java数据结构\"><a href=\"#Java数据结构\" class=\"headerlink\" title=\"Java数据结构\"></a>Java数据结构</h1><h3 id=\"数组（arrays）\"><a href=\"#数组（arrays）\" class=\"headerlink\" title=\"数组（arrays）\"></a>数组（arrays）</h3><p>数组（Arrays）是一种基本的数据结构，可以存储固定大小的相同类型的元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] array = new int[5];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>特点：</strong> 固定大小，存储相同类型的元素。</li>\n<li><strong>优点：</strong> 随机访问元素效率高。</li>\n<li><strong>缺点：</strong> 大小固定，插入和删除元素相对较慢。</li>\n</ul>\n<h3 id=\"列表（Lists）\"><a href=\"#列表（Lists）\" class=\"headerlink\" title=\"列表（Lists）\"></a>列表（Lists）</h3><p>Java 提供了多种列表实现，如 ArrayList 和 LinkedList。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; arrayList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>ArrayList:</strong></p>\n<ul>\n<li><strong>特点：</strong> 动态数组，可变大小。</li>\n<li><strong>优点：</strong> 高效的随机访问和快速尾部插入。</li>\n<li><strong>缺点：</strong> 中间插入和删除相对较慢。</li>\n</ul>\n<p><strong>LinkedList:</strong></p>\n<ul>\n<li><strong>特点：</strong> 双向链表，元素之间通过指针连接。</li>\n<li><strong>优点：</strong> 插入和删除元素高效，迭代器性能好。</li>\n<li><strong>缺点：</strong> 随机访问相对较慢。</li>\n</ul>\n<h3 id=\"集合（Sets）\"><a href=\"#集合（Sets）\" class=\"headerlink\" title=\"集合（Sets）\"></a>集合（Sets）</h3><p>集合（Sets）用于存储不重复的元素，常见的实现有 HashSet 和 TreeSet。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;String&gt; hashSet = new HashSet&lt;&gt;();</span><br><span class=\"line\">Set&lt;Integer&gt; treeSet = new TreeSet&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>HashSet:</strong></p>\n<ul>\n<li><strong>特点：</strong> 无序集合，基于HashMap实现。</li>\n<li><strong>优点：</strong> 高效的查找和插入操作。</li>\n<li><strong>缺点：</strong> 不保证顺序。</li>\n</ul>\n<p><strong>TreeSet:</strong></p>\n<ul>\n<li><strong>特点：</strong>TreeSet 是有序集合，底层基于红黑树实现，不允许重复元素。</li>\n<li><strong>优点：</strong> 提供自动排序功能，适用于需要按顺序存储元素的场景。</li>\n<li><strong>缺点：</strong> 性能相对较差，不允许插入 null 元素。</li>\n</ul>\n<h3 id=\"映射（Maps）\"><a href=\"#映射（Maps）\" class=\"headerlink\" title=\"映射（Maps）\"></a>映射（Maps）</h3><p>映射（Maps）用于存储键值对，常见的实现有 HashMap 和 TreeMap。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">Map&lt;String, Integer&gt; treeMap = new TreeMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>HashMap:</strong></p>\n<ul>\n<li><strong>特点：</strong> 基于哈希表实现的键值对存储结构。</li>\n<li><strong>优点：</strong> 高效的查找、插入和删除操作。</li>\n<li><strong>缺点：</strong> 无序，不保证顺序。</li>\n</ul>\n<p><strong>TreeMap:</strong></p>\n<ul>\n<li><strong>特点：</strong> 基于红黑树实现的有序键值对存储结构。</li>\n<li><strong>优点：</strong> 有序，支持按照键的顺序遍历。</li>\n<li><strong>缺点：</strong> 插入和删除相对较慢。</li>\n</ul>\n<h3 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h3><p>栈（Stack）是一种线性数据结构，它按照后进先出（Last In, First Out，LIFO）的原则管理元素。在栈中，新元素被添加到栈的顶部，而只能从栈的顶部移除元素。这就意味着最后添加的元素是第一个被移除的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Stack 类:</strong></p>\n<ul>\n<li><strong>特点：</strong> 代表一个栈，通常按照后进先出（LIFO）的顺序操作元素。</li>\n</ul>\n<h3 id=\"队列（Queue）\"><a href=\"#队列（Queue）\" class=\"headerlink\" title=\"队列（Queue）\"></a>队列（Queue）</h3><p>队列（Queue）遵循先进先出（FIFO）原则，常见的实现有 LinkedList 和 PriorityQueue。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Queue 接口:</strong></p>\n<ul>\n<li><strong>特点：</strong> 代表一个队列，通常按照先进先出（FIFO）的顺序操作元素。</li>\n<li><strong>实现类：</strong> LinkedList, PriorityQueue, ArrayDeque。</li>\n</ul>\n<h3 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h3><p>堆（Heap）优先队列的基础，可以实现最大堆和最小堆。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();</span><br><span class=\"line\">PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;(Collections.reverseOrder());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"树（Trees）\"><a href=\"#树（Trees）\" class=\"headerlink\" title=\"树（Trees）\"></a>树（Trees）</h3><p>Java 提供了 TreeNode 类型，可以用于构建二叉树等数据结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TreeNode &#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图（Graphs）\"><a href=\"#图（Graphs）\" class=\"headerlink\" title=\"图（Graphs）\"></a>图（Graphs）</h3><p>图的表示通常需要自定义数据结构或使用图库，Java 没有内建的图类。</p>\n<p>以上介绍的只是 Java 中一些常见的数据结构，实际上还有很多其他的数据结构和算法可以根据具体问题选择使用。</p>\n<hr>\n<h1 id=\"Java-集合框架\"><a href=\"#Java-集合框架\" class=\"headerlink\" title=\"Java 集合框架\"></a>Java 集合框架</h1><p>集合框架被设计成要满足以下几个目标。</p>\n<ul>\n<li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li>\n<li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li>\n<li>对一个集合的扩展和适应必须是简单的。</li>\n</ul>\n<h2 id=\"集合接口\"><a href=\"#集合接口\" class=\"headerlink\" title=\"集合接口\"></a>集合接口</h2><p>集合框架定义了一些接口。本节提供了每个接口的概述：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">接口描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Collection 接口 Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">List 接口 List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序（插入顺序）的对象。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Set Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">SortedSet  继承于Set保存有序的集合。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Map Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">Map.Entry  描述在一个Map中的一个元素（键&#x2F;值对）。是一个 Map 的内部接口。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">SortedMap 继承于 Map，使 Key 保持在升序排列。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">Enumeration 这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</td>\n</tr>\n</tbody></table>\n<h3 id=\"Set和List的区别\"><a href=\"#Set和List的区别\" class=\"headerlink\" title=\"Set和List的区别\"></a>Set和List的区别</h3><ul>\n<li><ol>\n<li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Set 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 **&lt;实现类有HashSet,TreeSet&gt;**。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>List 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 List 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> 。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"集合实现类（集合类）\"><a href=\"#集合实现类（集合类）\" class=\"headerlink\" title=\"集合实现类（集合类）\"></a>集合实现类（集合类）</h2><p>Java提供了一套实现了Collection接口的标准集合类。其中一些是具体类，这些类可以直接拿来使用，而另外一些是抽象类，提供了接口的部分实现。</p>\n<p>标准集合类汇总于下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">类描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><strong>AbstractCollection</strong>  实现了大部分的集合接口。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><strong>AbstractList</strong>  继承于AbstractCollection 并且实现了大部分List接口。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><strong>AbstractSequentialList</strong>  继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-linkedlist.html\">LinkedList</a> 该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如： <code>List list=Collections.synchronizedList(newLinkedList(...));</code>LinkedList 查找效率低。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist.html\">ArrayList</a> 该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><strong>AbstractSet</strong>  继承于AbstractCollection 并且实现了大部分Set接口。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashset.html\">HashSet</a> 该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">LinkedHashSet 具有可预知迭代顺序的 <code>Set</code> 接口的哈希表和链接列表实现。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">TreeSet 该类实现了Set接口，可以实现排序等功能。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><strong>AbstractMap</strong>  实现了大部分的Map接口。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap.html\">HashMap</a> HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">TreeMap 继承了AbstractMap，并且使用一颗树。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">WeakHashMap 继承AbstractMap类，使用弱密钥的哈希表。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">LinkedHashMap 继承于HashMap，使用元素的自然顺序对元素进行排序.</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">IdentityHashMap 继承AbstractMap类，比较文档时使用引用相等。</td>\n</tr>\n</tbody></table>\n<p>在前面的教程中已经讨论通过java.util包中定义的类，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">类描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Vector 该类和ArrayList非常相似，但是该类是同步的，可以用在多线程的情况，该类允许设置默认的增长长度，默认扩容方式为原来的2倍。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Stack 栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Dictionary Dictionary 类是一个抽象类，用来存储键&#x2F;值对，作用和Map类相似。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Hashtable Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Properties Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">BitSet 一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"集合算法\"><a href=\"#集合算法\" class=\"headerlink\" title=\"集合算法\"></a>集合算法</h2><p>集合框架定义了几种算法，可用于集合和映射。这些算法被定义为集合类的静态方法。</p>\n<p>在尝试比较不兼容的类型时，一些方法能够抛出 ClassCastException异常。当试图修改一个不可修改的集合时，抛出UnsupportedOperationException异常。</p>\n<p>集合定义三个静态的变量：EMPTY_SET，EMPTY_LIST，EMPTY_MAP的。这些变量都不可改变。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">算法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Collection Algorithms 这里是一个列表中的所有算法实现。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"如何使用迭代器\"><a href=\"#如何使用迭代器\" class=\"headerlink\" title=\"如何使用迭代器\"></a>如何使用迭代器</h2><p>通常情况下，你会希望遍历一个集合中的元素。例如，显示集合中的每个元素。</p>\n<p>一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架，但是还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了<a href=\"https://www.runoob.com/java/java-iterator.html\">Iterator</a> 接口或 ListIterator接口。</p>\n<p>迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator 继承了 Iterator，以允许双向遍历列表和修改元素。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">迭代器方法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-iterator.html\">使用 Java Iterator</a> 这里通过实例列出 Iterator 和 ListIterator 接口提供的所有方法。</td>\n</tr>\n</tbody></table>\n<h3 id=\"遍历-ArrayList\"><a href=\"#遍历-ArrayList\" class=\"headerlink\" title=\"遍历 ArrayList\"></a>遍历 ArrayList</h3><h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>import java.util.*;  public class Test{ public static void main(String[] args) {     List<String> list&#x3D;new ArrayList<String>();     list.add(“Hello”);     list.add(“World”);     list.add(“HAHAHAHA”);     &#x2F;&#x2F;第一种遍历方法使用 For-Each 遍历 List     for (String str : list) {            &#x2F;&#x2F;也可以改写 for(int i&#x3D;0;i&lt;list.size();i++) 这种形式        System.out.println(str);     }      &#x2F;&#x2F;第二种遍历，把链表变为数组相关的内容进行遍历     String[] strArray&#x3D;new String[list.size()];     list.toArray(strArray);     for(int i&#x3D;0;i&lt;strArray.length;i++) &#x2F;&#x2F;这里也可以改写为  for(String str:strArray) 这种形式     {        System.out.println(strArray[i]);     }         &#x2F;&#x2F;第三种遍历 使用迭代器进行相关遍历          Iterator<String> ite&#x3D;list.iterator();     while(ite.hasNext())&#x2F;&#x2F;判断下一个元素之后有值     {         System.out.println(ite.next());     } } }</p>\n<p><strong>解析：</strong> </p>\n<p>三种方法都是用来遍历ArrayList集合，第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度。</p>\n<h3 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h3><h2 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, String&gt;();</span><br><span class=\"line\">      map.put(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\">      map.put(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>);</span><br><span class=\"line\">      map.put(<span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;value3&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//第一种：普遍使用，二次取值</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;key= &quot;</span>+ key + <span class=\"string\">&quot; and value= &quot;</span> + map.get(key));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//第二种</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class=\"line\">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">       Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//第三种：推荐，尤其是容量大时</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">//第四种</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (String v : map.values()) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;value= &quot;</span> + v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"如何使用比较器\"><a href=\"#如何使用比较器\" class=\"headerlink\" title=\"如何使用比较器\"></a>如何使用比较器</h2><p>TreeSet和TreeMap的按照排序顺序来存储元素. 然而，这是通过比较器来精确定义按照什么样的排序顺序。</p>\n<p>这个接口可以让我们以不同的方式来排序一个集合。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">比较器方法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">使用 Java Comparator 这里通过实例列出Comparator接口提供的所有方法</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-ArrayList\"><a href=\"#Java-ArrayList\" class=\"headerlink\" title=\"Java ArrayList\"></a>Java ArrayList</h1><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p>\n<p>ArrayList 继承了 AbstractList ，并实现了 List 接口。</p>\n<p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList; <span class=\"comment\">// 引入 ArrayList 类</span></span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;E&gt; objectName =<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();　 <span class=\"comment\">// 初始化</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>E</strong>: 泛型数据类型，用于设置 objectName 的数据类型，<strong>只能为引用数据类型</strong>。</li>\n<li><strong>objectName</strong>: 对象名。</li>\n</ul>\n<p>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><p>ArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 <strong>add()</strong> 方法:</p>\n<h3 id=\"访问元素\"><a href=\"#访问元素\" class=\"headerlink\" title=\"访问元素\"></a>访问元素</h3><p>访问 ArrayList 中的元素可以使用 <strong>get()</strong> 方法：</p>\n<p><strong>注意</strong>：数组的索引值从 0 开始。</p>\n<h3 id=\"修改元素\"><a href=\"#修改元素\" class=\"headerlink\" title=\"修改元素\"></a>修改元素</h3><p>如果要修改 ArrayList 中的元素可以使用 <strong>set()</strong> 方法， set(int index, E element) 方法的第一个参数是索引（index），表示要替换的元素的位置，第二个参数是新元素（element），表示要设置的新值：</p>\n<h3 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><p>如果要删除 ArrayList 中的元素可以使用 <strong>remove()</strong> 方法：</p>\n<h3 id=\"计算大小\"><a href=\"#计算大小\" class=\"headerlink\" title=\"计算大小\"></a>计算大小</h3><p>如果要计算 ArrayList 中的元素数量可以使用 size() 方法：</p>\n<h3 id=\"迭代数组列表\"><a href=\"#迭代数组列表\" class=\"headerlink\" title=\"迭代数组列表\"></a>迭代数组列表</h3><p>我们可以使用 for 来迭代数组列表中的元素：</p>\n<p>也可以使用 for-each 来迭代元素：</p>\n<h3 id=\"ArrayList-排序\"><a href=\"#ArrayList-排序\" class=\"headerlink\" title=\"ArrayList 排序\"></a>ArrayList 排序</h3><p>Collections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。</p>\n<h2 id=\"Java-ArrayList-方法\"><a href=\"#Java-ArrayList-方法\" class=\"headerlink\" title=\"Java ArrayList 方法\"></a>Java ArrayList 方法</h2><p>Java ArrayList 常用方法列表如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-add.html\">add()</a></td>\n<td align=\"left\">将元素插入到指定位置的 arraylist 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-addall.html\">addAll()</a></td>\n<td align=\"left\">添加集合中的所有元素到 arraylist 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-clear.html\">clear()</a></td>\n<td align=\"left\">删除 arraylist 中的所有元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-clone.html\">clone()</a></td>\n<td align=\"left\">复制一份 arraylist</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-contains.html\">contains()</a></td>\n<td align=\"left\">判断元素是否在 arraylist</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-get.html\">get()</a></td>\n<td align=\"left\">通过索引值获取 arraylist 中的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-indexof.html\">indexOf()</a></td>\n<td align=\"left\">返回 arraylist 中元素的索引值</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-removeall.html\">removeAll()</a></td>\n<td align=\"left\">删除存在于指定集合中的 arraylist 里的所有元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-remove.html\">remove()</a></td>\n<td align=\"left\">删除 arraylist 里的单个元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-size.html\">size()</a></td>\n<td align=\"left\">返回 arraylist 里元素数量</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-isempty.html\">isEmpty()</a></td>\n<td align=\"left\">判断 arraylist 是否为空</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-sublist.html\">subList()</a></td>\n<td align=\"left\">截取部分 arraylist 的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-set.html\">set()</a></td>\n<td align=\"left\">替换 arraylist 中指定索引的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-sort.html\">sort()</a></td>\n<td align=\"left\">对 arraylist 元素进行排序</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-toarray.html\">toArray()</a></td>\n<td align=\"left\">将 arraylist 转换为数组</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-tostring.html\">toString()</a></td>\n<td align=\"left\">将 arraylist 转换为字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-surecapacity.html\">ensureCapacity</a>()</td>\n<td align=\"left\">设置指定容量大小的 arraylist</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-lastindexof.html\">lastIndexOf()</a></td>\n<td align=\"left\">返回指定元素在 arraylist 中最后一次出现的位置</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-retainall.html\">retainAll()</a></td>\n<td align=\"left\">保留 arraylist 中在指定集合中也存在的那些元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-containsall.html\">containsAll()</a></td>\n<td align=\"left\">查看 arraylist 是否包含指定集合中的所有元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-trimtosize.html\">trimToSize()</a></td>\n<td align=\"left\">将 arraylist 中的容量调整为数组中的元素个数</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-removerange.html\">removeRange()</a></td>\n<td align=\"left\">删除 arraylist 中指定索引之间存在的元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-replaceall.html\">replaceAll()</a></td>\n<td align=\"left\">将给定的操作内容替换掉数组中每一个元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-removeif.html\">removeIf()</a></td>\n<td align=\"left\">删除所有满足特定条件的 arraylist 元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-arraylist-foreach.html\">forEach()</a></td>\n<td align=\"left\">遍历 arraylist 中每一个元素并执行特定操作</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-LinkedList\"><a href=\"#Java-LinkedList\" class=\"headerlink\" title=\"Java LinkedList\"></a>Java LinkedList</h1><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p>\n<p>链表可分为单向链表和双向链表。</p>\n<p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png\" alt=\"img\"></p>\n<p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png\" alt=\"img\"></p>\n<p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p>\n<p>与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。</p>\n<p><strong>以下情况使用 ArrayList :</strong></p>\n<ul>\n<li>频繁访问列表中的某一个元素。</li>\n<li>只需要在列表末尾进行添加和删除元素操作。</li>\n</ul>\n<p><strong>以下情况使用 LinkedList :</strong></p>\n<ul>\n<li>你需要通过循环迭代来访问列表中的某些元素。</li>\n<li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li>\n</ul>\n<p>LinkedList 继承了 AbstractSequentialList 类。</p>\n<p>LinkedList 实现了 Queue 接口，可作为队列使用。</p>\n<p>LinkedList 实现了 List 接口，可进行列表的相关操作。</p>\n<p>LinkedList 实现了 Deque 接口，可作为队列使用。</p>\n<p>LinkedList 实现了 Cloneable 接口，可实现克隆。</p>\n<p>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p>\n<p>LinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 LinkedList 类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList; </span><br><span class=\"line\"></span><br><span class=\"line\">LinkedList&lt;E&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;E&gt;();   <span class=\"comment\">// 普通创建方法</span></span><br><span class=\"line\">或者</span><br><span class=\"line\">LinkedList&lt;E&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>(Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">E</span>&gt; c); <span class=\"comment\">// 使用集合创建链表</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean add(E e)</td>\n<td align=\"left\">链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public void add(int index, E element)</td>\n<td align=\"left\">向指定位置插入元素。</td>\n</tr>\n<tr>\n<td>public boolean addAll(Collection c)</td>\n<td align=\"left\">将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public boolean addAll(int index, Collection c)</td>\n<td align=\"left\">将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public void addFirst(E e)</td>\n<td align=\"left\">元素添加到头部。</td>\n</tr>\n<tr>\n<td>public void addLast(E e)</td>\n<td align=\"left\">元素添加到尾部。</td>\n</tr>\n<tr>\n<td>public boolean offer(E e)</td>\n<td align=\"left\">向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public boolean offerFirst(E e)</td>\n<td align=\"left\">头部插入元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public boolean offerLast(E e)</td>\n<td align=\"left\">尾部插入元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public void clear()</td>\n<td align=\"left\">清空链表。</td>\n</tr>\n<tr>\n<td>public E removeFirst()</td>\n<td align=\"left\">删除并返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E removeLast()</td>\n<td align=\"left\">删除并返回最后一个元素。</td>\n</tr>\n<tr>\n<td>public boolean remove(Object o)</td>\n<td align=\"left\">删除某一元素，返回是否成功，成功为 true，失败为 false。</td>\n</tr>\n<tr>\n<td>public E remove(int index)</td>\n<td align=\"left\">删除指定位置的元素。</td>\n</tr>\n<tr>\n<td>public E poll()</td>\n<td align=\"left\">删除并返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E remove()</td>\n<td align=\"left\">删除并返回第一个元素。</td>\n</tr>\n<tr>\n<td>public boolean contains(Object o)</td>\n<td align=\"left\">判断是否含有某一元素。</td>\n</tr>\n<tr>\n<td>public E get(int index)</td>\n<td align=\"left\">返回指定位置的元素。</td>\n</tr>\n<tr>\n<td>public E getFirst()</td>\n<td align=\"left\">返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E getLast()</td>\n<td align=\"left\">返回最后一个元素。</td>\n</tr>\n<tr>\n<td>public int indexOf(Object o)</td>\n<td align=\"left\">查找指定元素从前往后第一次出现的索引。</td>\n</tr>\n<tr>\n<td>public int lastIndexOf(Object o)</td>\n<td align=\"left\">查找指定元素最后一次出现的索引。</td>\n</tr>\n<tr>\n<td>public E peek()</td>\n<td align=\"left\">返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E element()</td>\n<td align=\"left\">返回第一个元素。</td>\n</tr>\n<tr>\n<td>public E peekFirst()</td>\n<td align=\"left\">返回头部元素。</td>\n</tr>\n<tr>\n<td>public E peekLast()</td>\n<td align=\"left\">返回尾部元素。</td>\n</tr>\n<tr>\n<td>public E set(int index, E element)</td>\n<td align=\"left\">设置指定位置的元素。</td>\n</tr>\n<tr>\n<td>public Object clone()</td>\n<td align=\"left\">克隆该列表。</td>\n</tr>\n<tr>\n<td>public Iterator descendingIterator()</td>\n<td align=\"left\">返回倒序迭代器。</td>\n</tr>\n<tr>\n<td>public int size()</td>\n<td align=\"left\">返回链表元素个数。</td>\n</tr>\n<tr>\n<td>public ListIterator listIterator(int index)</td>\n<td align=\"left\">返回从指定位置开始到末尾的迭代器。</td>\n</tr>\n<tr>\n<td>public Object[] toArray()</td>\n<td align=\"left\">返回一个由链表元素组成的数组。</td>\n</tr>\n<tr>\n<td>public T[] toArray(T[] a)</td>\n<td align=\"left\">返回一个由链表元素转换类型而成的数组。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-HashSet\"><a href=\"#Java-HashSet\" class=\"headerlink\" title=\"Java HashSet\"></a>Java HashSet</h1><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p>\n<p>HashSet 允许有 null 值。</p>\n<p>HashSet 是无序的，即不会记录插入的顺序。</p>\n<p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</p>\n<p>HashSet 实现了 Set 接口。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/07/java-hashset-hierarchy.png\" alt=\"img\"></p>\n<p>HashSet 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。</p>\n<h1 id=\"Java-HashMap\"><a href=\"#Java-HashMap\" class=\"headerlink\" title=\"Java HashMap\"></a>Java HashMap</h1><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>\n<p>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。</p>\n<p>HashMap 是无序的，即不会记录插入的顺序。</p>\n<p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/07/WV9wXLl.png\" alt=\"img\"></p>\n<p>HashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。</p>\n<h2 id=\"Java-HashMap-方法\"><a href=\"#Java-HashMap-方法\" class=\"headerlink\" title=\"Java HashMap 方法\"></a>Java HashMap 方法</h2><p>hashmap</p>\n<p>Java HashMap 常用方法列表如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-clear.html\">clear()</a></td>\n<td align=\"left\">删除 hashMap 中的所有键&#x2F;值对</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-clone.html\">clone()</a></td>\n<td align=\"left\">复制一份 hashMap</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-isempty.html\">isEmpty()</a></td>\n<td align=\"left\">判断 hashMap 是否为空</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-size.html\">size()</a></td>\n<td align=\"left\">计算 hashMap 中键&#x2F;值对的数量</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-put.html\">put()</a></td>\n<td align=\"left\">将键&#x2F;值对添加到 hashMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-putall.html\">putAll()</a></td>\n<td align=\"left\">将所有键&#x2F;值对添加到 hashMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-putifabsent.html\">putIfAbsent()</a></td>\n<td align=\"left\">如果 hashMap 中不存在指定的键，则将指定的键&#x2F;值对插入到 hashMap 中。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-remove.html\">remove()</a></td>\n<td align=\"left\">删除 hashMap 中指定键 key 的映射关系</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-containskey.html\">containsKey()</a></td>\n<td align=\"left\">检查 hashMap 中是否存在指定的 key 对应的映射关系。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-containsvalue.html\">containsValue()</a></td>\n<td align=\"left\">检查 hashMap 中是否存在指定的 value 对应的映射关系。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-replace.html\">replace()</a></td>\n<td align=\"left\">替换 hashMap 中是指定的 key 对应的 value。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-replaceall.html\">replaceAll()</a></td>\n<td align=\"left\">将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-get.html\">get()</a></td>\n<td align=\"left\">获取指定 key 对应对 value</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-getordefault.html\">getOrDefault()</a></td>\n<td align=\"left\">获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-foreach.html\">forEach()</a></td>\n<td align=\"left\">对 hashMap 中的每个映射执行指定的操作。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-entryset.html\">entrySet()</a></td>\n<td align=\"left\">返回 hashMap 中所有映射项的集合集合视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-keyset.html\">keySet</a>()</td>\n<td align=\"left\">返回 hashMap 中所有 key 组成的集合视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-values.html\">values()</a></td>\n<td align=\"left\">返回 hashMap 中存在的所有 value 值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-merge.html\">merge()</a></td>\n<td align=\"left\">添加键值对到 hashMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-compute.html\">compute()</a></td>\n<td align=\"left\">对 hashMap 中指定 key 的值进行重新计算</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-computeifabsent.html\">computeIfAbsent()</a></td>\n<td align=\"left\">对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/java/java-hashmap-computeifpresent.html\">computeIfPresent()</a></td>\n<td align=\"left\">对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-Iterator（迭代器）\"><a href=\"#Java-Iterator（迭代器）\" class=\"headerlink\" title=\"Java Iterator（迭代器）\"></a>Java Iterator（迭代器）</h1><p>Java迭代器（Iterator）是 Java 集合框架中的一种机制，是一种用于遍历集合（如列表、集合和映射等）的接口。</p>\n<p>它提供了一种统一的方式来访问集合中的元素，而不需要了解底层集合的具体实现细节。</p>\n<p>Java Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 <a href=\"https://www.runoob.com/java/java-arraylist.html\">ArrayList</a> 和 <a href=\"https://www.runoob.com/java/java-hashset.html\">HashSet</a> 等集合。</p>\n<p>Iterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/07/ListIterator-Class-Diagram.jpg\" alt=\"img\"></p>\n<p>迭代器接口定义了几个方法，最常用的是以下三个：</p>\n<ul>\n<li><strong>next()</strong> - 返回迭代器的下一个元素，并将迭代器的指针移到下一个位置。</li>\n<li><strong>hasNext()</strong> - 用于判断集合中是否还有下一个元素可以访问。</li>\n<li><strong>remove()</strong> - 从集合中删除迭代器最后访问的元素（可选操作）。</li>\n</ul>\n<p>Iterator 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Iterator; // 引入 Iterator 类</span><br></pre></td></tr></table></figure>\n\n<p>通过使用迭代器，我们可以逐个访问集合中的元素，而不需要使用传统的 for 循环或索引。这种方式更加简洁和灵活，并且适用于各种类型的集合。</p>\n<h3 id=\"获取一个迭代器\"><a href=\"#获取一个迭代器\" class=\"headerlink\" title=\"获取一个迭代器\"></a>获取一个迭代器</h3><p>集合想获取一个迭代器可以使用 iterator() 方法:</p>\n<h2 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"comment\">// 引入 ArrayList 和 Iterator 类*</span></span><br><span class=\"line\">**<span class=\"keyword\">import</span>** java.util.ArrayList;</span><br><span class=\"line\">**<span class=\"keyword\">import</span>** java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"keyword\">public</span>** **class** RunoobTest &#123;</span><br><span class=\"line\">  **<span class=\"keyword\">public</span>** **<span class=\"keyword\">static</span>** **<span class=\"keyword\">void</span>** main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​    *<span class=\"comment\">// 创建集合*</span></span><br><span class=\"line\">​    ArrayList&lt;String&gt; sites = **<span class=\"keyword\">new</span>** ArrayList&lt;String&gt;();</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Google&quot;</span>);</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Taobao&quot;</span>);</span><br><span class=\"line\">​    sites.add(<span class=\"string\">&quot;Zhihu&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">​    *<span class=\"comment\">// 获取迭代器*</span></span><br><span class=\"line\">​    Iterator&lt;String&gt; it = sites.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">​    *<span class=\"comment\">// 输出集合中的第一个元素*</span></span><br><span class=\"line\">​    System.out.println(it.next());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，输出结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java-序列化\"><a href=\"#Java-序列化\" class=\"headerlink\" title=\"Java 序列化\"></a>Java 序列化</h1><p>Java 序列化是一种将对象转换为字节流的过程，以便可以将对象保存到磁盘上，将其传输到网络上，或者将其存储在内存中，以后再进行反序列化，将字节流重新转换为对象。</p>\n<p>序列化在 Java 中是通过 <strong>java.io.Serializable</strong> 接口来实现的，该接口没有任何方法，只是一个标记接口，用于标识类可以被序列化。</p>\n<p>当你序列化对象时，你把它包装成一个特殊文件，可以保存、传输或存储。反序列化则是打开这个文件，读取序列化的数据，然后将其还原为对象，以便在程序中使用。</p>\n<p><strong>序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。</strong></p>\n<p>实现 Serializable 接口： 要使一个类可序列化，需要让该类实现 java.io.Serializable 接口，这告诉 Java 编译器这个类可以被序列化，例如：</p>\n<h2 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p><strong>import</strong> java.io.Serializable;</p>\n<p><strong>public</strong> <strong>class</strong> MyClass <strong>implements</strong> Serializable {<br>  <em>&#x2F;&#x2F; 类的成员和方法</em><br>}</p>\n<p><strong>序列化对象：</strong> 使用 ObjectOutputStream 类来将对象序列化为字节流，以下是一个简单的实例：</p>\n<h2 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>MyClass obj &#x3D; <strong>new</strong> MyClass();<br><strong>try</strong> {<br>  FileOutputStream fileOut &#x3D; <strong>new</strong> FileOutputStream(“object.ser”);<br>  ObjectOutputStream out &#x3D; <strong>new</strong> ObjectOutputStream(fileOut);<br>  out.writeObject(obj);<br>  out.close();<br>  fileOut.close();<br>} <strong>catch</strong> (IOException e) {<br>  e.printStackTrace();<br>}</p>\n<p>上述代码将一个名为 “object.ser” 的文件中的 obj 对象序列化。</p>\n<p><strong>反序列化对象：</strong> 使用 ObjectInputStream 类来从字节流中反序列化对象，以下是一个简单的实例：</p>\n<h2 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>MyClass obj &#x3D; <strong>null</strong>;<br><strong>try</strong> {<br>  FileInputStream fileIn &#x3D; <strong>new</strong> FileInputStream(“object.ser”);<br>  ObjectInputStream in &#x3D; <strong>new</strong> ObjectInputStream(fileIn);<br>  obj &#x3D; (MyClass) in.readObject();<br>  in.close();<br>  fileIn.close();<br>} <strong>catch</strong> (IOException e) {<br>  e.printStackTrace();<br>} <strong>catch</strong> (ClassNotFoundException e) {<br>  e.printStackTrace();<br>}</p>\n<p>上述代码从 “object.ser” 文件中读取字节流并将其反序列化为一个 MyClass 对象。</p>\n<p>类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。</p>\n<p>ObjectOutputStream 类包含很多写方法来写各种数据类型，但是一个特别的方法例外：</p>\n<p>public final void writeObject(Object x) throws IOException</p>\n<p>上面的方法序列化一个对象，并将它发送到输出流。相似的 ObjectInputStream 类包含如下反序列化一个对象的方法：</p>\n<p>public final Object readObject() throws IOException,                                  ClassNotFoundException</p>\n<p>该方法从流中取出下一个对象，并将对象反序列化。它的返回值为Object，因此，你需要将它转换成合适的数据类型。</p>\n<h3 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>为了演示序列化在 Java 中是怎样工作的，我将使用之前教程中提到的 Employee 类，假设我们定义了如下的 Employee 类，该类实现了Serializable 接口。</p>\n<h2 id=\"Employee-java-文件代码：\"><a href=\"#Employee-java-文件代码：\" class=\"headerlink\" title=\"Employee.java 文件代码：\"></a>Employee.java 文件代码：</h2><p>public class Employee implements java.io.Serializable {   public String name;   public String address;   public transient int SSN;   public int number;   public void mailCheck()   {      System.out.println(“Mailing a check to “ + name                           + “ “ + address);   } }</p>\n<p>请注意，一个类的对象要想序列化成功，必须满足两个条件：</p>\n<p>该类必须实现 java.io.Serializable 接口。</p>\n<p>该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</p>\n<p>如果你想知道一个 Java 标准类是否是可序列化的，请查看该类的文档。检验一个类的实例是否能序列化十分简单， 只需要查看该类有没有实现 java.io.Serializable接口。</p>\n<hr>\n<h2 id=\"序列化对象\"><a href=\"#序列化对象\" class=\"headerlink\" title=\"序列化对象\"></a>序列化对象</h2><p>ObjectOutputStream 类用来序列化一个对象，如下的 SerializeDemo 例子实例化了一个 Employee 对象，并将该对象序列化到一个文件中。</p>\n<p>该程序执行后，就创建了一个名为 employee.ser 文件。该程序没有任何输出，但是你可以通过代码研读来理解程序的作用。</p>\n<p><strong>注意：</strong> 当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名。</p>\n<h2 id=\"SerializeDemo-java-文件代码：\"><a href=\"#SerializeDemo-java-文件代码：\" class=\"headerlink\" title=\"SerializeDemo.java 文件代码：\"></a>SerializeDemo.java 文件代码：</h2><p>import java.io.*;  public class SerializeDemo {   public static void main(String [] args)   {      Employee e &#x3D; new Employee();      e.name &#x3D; “Reyan Ali”;      e.address &#x3D; “Phokka Kuan, Ambehta Peer”;      e.SSN &#x3D; 11122333;      e.number &#x3D; 101;      try      {         FileOutputStream fileOut &#x3D;         new FileOutputStream(“&#x2F;tmp&#x2F;employee.ser”);         ObjectOutputStream out &#x3D; new ObjectOutputStream(fileOut);         out.writeObject(e);         out.close();         fileOut.close();         System.out.printf(“Serialized data is saved in &#x2F;tmp&#x2F;employee.ser”);      }catch(IOException i)      {          i.printStackTrace();      }   } }</p>\n<hr>\n<h2 id=\"反序列化对象\"><a href=\"#反序列化对象\" class=\"headerlink\" title=\"反序列化对象\"></a>反序列化对象</h2><p>下面的 DeserializeDemo 程序实例了反序列化，&#x2F;tmp&#x2F;employee.ser 存储了 Employee 对象。</p>\n<h2 id=\"DeserializeDemo-java-文件代码：\"><a href=\"#DeserializeDemo-java-文件代码：\" class=\"headerlink\" title=\"DeserializeDemo.java 文件代码：\"></a>DeserializeDemo.java 文件代码：</h2><p>import java.io.*;  public class DeserializeDemo {   public static void main(String [] args)   {      Employee e &#x3D; null;      try      {         FileInputStream fileIn &#x3D; new FileInputStream(“&#x2F;tmp&#x2F;employee.ser”);         ObjectInputStream in &#x3D; new ObjectInputStream(fileIn);         e &#x3D; (Employee) in.readObject();         in.close();         fileIn.close();      }catch(IOException i)      {         i.printStackTrace();         return;      }catch(ClassNotFoundException c)      {         System.out.println(“Employee class not found”);         c.printStackTrace();         return;      }      System.out.println(“Deserialized Employee…”);      System.out.println(“Name: “ + e.name);      System.out.println(“Address: “ + e.address);      System.out.println(“SSN: “ + e.SSN);      System.out.println(“Number: “ + e.number);    } }</p>\n<p>以上程序编译运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deserialized Employee...</span><br><span class=\"line\">Name: Reyan Ali</span><br><span class=\"line\">Address:Phokka Kuan, Ambehta Peer</span><br><span class=\"line\">SSN: 0</span><br><span class=\"line\">Number:101</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意以下要点：</p>\n<p>readObject() 方法中的 try&#x2F;catch代码块尝试捕获 ClassNotFoundException 异常。对于 JVM 可以反序列化对象，它必须是能够找到字节码的类。如果JVM在反序列化对象的过程中找不到该类，则抛出一个 ClassNotFoundException 异常。</p>\n<p>注意，readObject() 方法的返回值被转化成 Employee 引用。</p>\n<p>当对象被序列化时，属性 SSN 的值为 111222333，但是因为该属性是短暂的，该值没有被发送到输出流。所以反序列化后 Employee 对象的 SSN 属性为 0。</p>\n<h1 id=\"Java-网络编程\"><a href=\"#Java-网络编程\" class=\"headerlink\" title=\"Java 网络编程\"></a>Java 网络编程</h1><h1 id=\"Java-多线程编程\"><a href=\"#Java-多线程编程\" class=\"headerlink\" title=\"Java 多线程编程\"></a>Java 多线程编程</h1><p>Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<p>多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。</p>\n<p>这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p>\n<p>多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。</p>\n<h2 id=\"一个线程的生命周期\"><a href=\"#一个线程的生命周期\" class=\"headerlink\" title=\"一个线程的生命周期\"></a>一个线程的生命周期</h2><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p>\n<p>下图显示了一个线程完整的生命周期。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg\" alt=\"img\"></p>\n<ul>\n<li><p>新建状态:</p>\n<p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p>\n</li>\n<li><p>就绪状态:</p>\n<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</li>\n<li><p>运行状态:</p>\n<p>如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li><p>阻塞状态:</p>\n<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： </p>\n<ul>\n<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>\n<li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态。</li>\n</ul>\n</li>\n<li><p>死亡状态: </p>\n<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h2><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p>\n<p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p>\n<p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p>\n<p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>\n<hr>\n<h2 id=\"创建一个线程\"><a href=\"#创建一个线程\" class=\"headerlink\" title=\"创建一个线程\"></a>创建一个线程</h2><p>Java 提供了三种创建线程的方法：</p>\n<ul>\n<li><strong>通过实现 Runnable 接口；</strong></li>\n<li><strong>通过继承 Thread 类本身；</strong></li>\n<li><strong>通过 Callable 和 Future 创建线程。</strong></li>\n</ul>\n<hr>\n<h2 id=\"通过实现-Runnable-接口来创建线程\"><a href=\"#通过实现-Runnable-接口来创建线程\" class=\"headerlink\" title=\"通过实现 Runnable 接口来创建线程\"></a>通过实现 Runnable 接口来创建线程</h2><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p>\n<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p>\n<p>public void run()</p>\n<p>你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p>\n<p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p>\n<p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p>\n<p>Thread(Runnable threadOb,String threadName);</p>\n<p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p>\n<p>新线程创建之后，你调用它的 start() 方法它才会运行。</p>\n<p>void start();</p>\n<p>下面是一个创建线程并开始让它执行的实例：</p>\n<h2 id=\"实例-7\"><a href=\"#实例-7\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>class RunnableDemo implements Runnable {   private Thread t;   private String threadName;      RunnableDemo( String name) {      threadName &#x3D; name;      System.out.println(“Creating “ +  threadName );   }      public void run() {      System.out.println(“Running “ +  threadName );      try {         for(int i &#x3D; 4; i &gt; 0; i–) {            System.out.println(“Thread: “ + threadName + “, “ + i);            &#x2F;&#x2F; 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(“Thread “ +  threadName + “ interrupted.”);      }      System.out.println(“Thread “ +  threadName + “ exiting.”);   }      public void start () {      System.out.println(“Starting “ +  threadName );      if (t &#x3D;&#x3D; null) {         t &#x3D; new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      RunnableDemo R1 &#x3D; new RunnableDemo( “Thread-1”);      R1.start();            RunnableDemo R2 &#x3D; new RunnableDemo( “Thread-2”);      R2.start();   }    }</p>\n<p>编译以上程序运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating Thread-1</span><br><span class=\"line\">Starting Thread-1</span><br><span class=\"line\">Creating Thread-2</span><br><span class=\"line\">Starting Thread-2</span><br><span class=\"line\">Running Thread-1</span><br><span class=\"line\">Thread: Thread-1, 4</span><br><span class=\"line\">Running Thread-2</span><br><span class=\"line\">Thread: Thread-2, 4</span><br><span class=\"line\">Thread: Thread-1, 3</span><br><span class=\"line\">Thread: Thread-2, 3</span><br><span class=\"line\">Thread: Thread-1, 2</span><br><span class=\"line\">Thread: Thread-2, 2</span><br><span class=\"line\">Thread: Thread-1, 1</span><br><span class=\"line\">Thread: Thread-2, 1</span><br><span class=\"line\">Thread Thread-1 exiting.</span><br><span class=\"line\">Thread Thread-2 exiting.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"通过继承Thread来创建线程\"><a href=\"#通过继承Thread来创建线程\" class=\"headerlink\" title=\"通过继承Thread来创建线程\"></a>通过继承Thread来创建线程</h2><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p>\n<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<h2 id=\"实例-8\"><a href=\"#实例-8\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>class ThreadDemo extends Thread {   private Thread t;   private String threadName;      ThreadDemo( String name) {      threadName &#x3D; name;      System.out.println(“Creating “ +  threadName );   }      public void run() {      System.out.println(“Running “ +  threadName );      try {         for(int i &#x3D; 4; i &gt; 0; i–) {            System.out.println(“Thread: “ + threadName + “, “ + i);            &#x2F;&#x2F; 让线程睡眠一会            Thread.sleep(50);         }      }catch (InterruptedException e) {         System.out.println(“Thread “ +  threadName + “ interrupted.”);      }      System.out.println(“Thread “ +  threadName + “ exiting.”);   }      public void start () {      System.out.println(“Starting “ +  threadName );      if (t &#x3D;&#x3D; null) {         t &#x3D; new Thread (this, threadName);         t.start ();      }   } }  public class TestThread {    public static void main(String args[]) {      ThreadDemo T1 &#x3D; new ThreadDemo( “Thread-1”);      T1.start();            ThreadDemo T2 &#x3D; new ThreadDemo( “Thread-2”);      T2.start();   }    }</p>\n<p>编译以上程序运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating Thread-1</span><br><span class=\"line\">Starting Thread-1</span><br><span class=\"line\">Creating Thread-2</span><br><span class=\"line\">Starting Thread-2</span><br><span class=\"line\">Running Thread-1</span><br><span class=\"line\">Thread: Thread-1, 4</span><br><span class=\"line\">Running Thread-2</span><br><span class=\"line\">Thread: Thread-2, 4</span><br><span class=\"line\">Thread: Thread-1, 3</span><br><span class=\"line\">Thread: Thread-2, 3</span><br><span class=\"line\">Thread: Thread-1, 2</span><br><span class=\"line\">Thread: Thread-2, 2</span><br><span class=\"line\">Thread: Thread-1, 1</span><br><span class=\"line\">Thread: Thread-2, 1</span><br><span class=\"line\">Thread Thread-1 exiting.</span><br><span class=\"line\">Thread Thread-2 exiting.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Thread-方法\"><a href=\"#Thread-方法\" class=\"headerlink\" title=\"Thread 方法\"></a>Thread 方法</h2><p>下表列出了Thread类的一些重要方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>序号</strong></th>\n<th align=\"center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"center\"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"center\"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"center\"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"center\"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"center\"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"center\"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"center\"><strong>public void interrupt()</strong> 中断线程。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"center\"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td>\n</tr>\n</tbody></table>\n<p>上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>序号</strong></th>\n<th align=\"center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"center\"><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"center\"><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"center\"><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"center\"><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"center\"><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td>\n</tr>\n</tbody></table>\n<h3 id=\"实例-9\"><a href=\"#实例-9\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>如下的ThreadClassDemo 程序演示了Thread类的一些方法：</p>\n<h2 id=\"DisplayMessage-java-文件代码：\"><a href=\"#DisplayMessage-java-文件代码：\" class=\"headerlink\" title=\"DisplayMessage.java 文件代码：\"></a>DisplayMessage.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : DisplayMessage.java &#x2F;&#x2F; 通过实现 Runnable 接口创建线程 public class DisplayMessage implements Runnable {   private String message;      public DisplayMessage(String message) {      this.message &#x3D; message;   }      public void run() {      while(true) {         System.out.println(message);      }   } }</p>\n<h2 id=\"GuessANumber-java-文件代码：\"><a href=\"#GuessANumber-java-文件代码：\" class=\"headerlink\" title=\"GuessANumber.java 文件代码：\"></a>GuessANumber.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : GuessANumber.java &#x2F;&#x2F; 通过继承 Thread 类创建线程  public class GuessANumber extends Thread {   private int number;   public GuessANumber(int number) {      this.number &#x3D; number;   }      public void run() {      int counter &#x3D; 0;      int guess &#x3D; 0;      do {         guess &#x3D; (int) (Math.random() * 100 + 1);         System.out.println(this.getName() + “ guesses “ + guess);         counter++;      } while(guess !&#x3D; number);      System.out.println(“** Correct!” + this.getName() + “in” + counter + “guesses.**”);   } }</p>\n<h2 id=\"ThreadClassDemo-java-文件代码：\"><a href=\"#ThreadClassDemo-java-文件代码：\" class=\"headerlink\" title=\"ThreadClassDemo.java 文件代码：\"></a>ThreadClassDemo.java 文件代码：</h2><p>&#x2F;&#x2F; 文件名 : ThreadClassDemo.java public class ThreadClassDemo {    public static void main(String [] args) {      Runnable hello &#x3D; new DisplayMessage(“Hello”);      Thread thread1 &#x3D; new Thread(hello);      thread1.setDaemon(true);      thread1.setName(“hello”);      System.out.println(“Starting hello thread…”);      thread1.start();            Runnable bye &#x3D; new DisplayMessage(“Goodbye”);      Thread thread2 &#x3D; new Thread(bye);      thread2.setPriority(Thread.MIN_PRIORITY);      thread2.setDaemon(true);      System.out.println(“Starting goodbye thread…”);      thread2.start();       System.out.println(“Starting thread3…”);      Thread thread3 &#x3D; new GuessANumber(27);      thread3.start();      try {         thread3.join();      }catch(InterruptedException e) {         System.out.println(“Thread interrupted.”);      }      System.out.println(“Starting thread4…”);      Thread thread4 &#x3D; new GuessANumber(75);            thread4.start();      System.out.println(“main() is ending…”);   } }</p>\n<p>运行结果如下，每一次运行的结果都不一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting hello thread...</span><br><span class=\"line\">Starting goodbye thread...</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Hello</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">Goodbye</span><br><span class=\"line\">.......</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"通过-Callable-和-Future-创建线程\"><a href=\"#通过-Callable-和-Future-创建线程\" class=\"headerlink\" title=\"通过 Callable 和 Future 创建线程\"></a>通过 Callable 和 Future 创建线程</h2><ul>\n<li><ol>\n<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"实例-10\"><a href=\"#实例-10\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>public class CallableThreadTest implements Callable<Integer> {    public static void main(String[] args)      {          CallableThreadTest ctt &#x3D; new CallableThreadTest();          FutureTask<Integer> ft &#x3D; new FutureTask&lt;&gt;(ctt);          for(int i &#x3D; 0;i &lt; 100;i++)          {              System.out.println(Thread.currentThread().getName()+” 的循环变量i的值”+i);              if(i&#x3D;&#x3D;20)              {                  new Thread(ft,”有返回值的线程”).start();              }          }          try          {              System.out.println(“子线程的返回值：”+ft.get());          } catch (InterruptedException e)          {              e.printStackTrace();          } catch (ExecutionException e)          {              e.printStackTrace();          }        }    @Override      public Integer call() throws Exception      {          int i &#x3D; 0;          for(;i&lt;100;i++)          {              System.out.println(Thread.currentThread().getName()+” “+i);          }          return i;      }   }</p>\n<hr>\n<h2 id=\"创建线程的三种方式的对比\"><a href=\"#创建线程的三种方式的对比\" class=\"headerlink\" title=\"创建线程的三种方式的对比\"></a>创建线程的三种方式的对比</h2><ul>\n<li><ol>\n<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"线程的几个主要概念\"><a href=\"#线程的几个主要概念\" class=\"headerlink\" title=\"线程的几个主要概念\"></a>线程的几个主要概念</h2><p>在多线程编程时，你需要了解以下几个概念：</p>\n<ul>\n<li>线程同步</li>\n<li>线程间通信</li>\n<li>线程死锁</li>\n<li>线程控制：挂起、停止和恢复</li>\n</ul>\n<hr>\n<h2 id=\"多线程的使用\"><a href=\"#多线程的使用\" class=\"headerlink\" title=\"多线程的使用\"></a>多线程的使用</h2><p>有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。</p>\n<p>通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。</p>\n<p>请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU 花费在上下文的切换的时间将多于执行程序的时间！</p>\n<hr>\n<h1 id=\"Java-实例\"><a href=\"#Java-实例\" class=\"headerlink\" title=\"Java 实例\"></a>Java 实例</h1><p>本章节我们将为大家介绍 Java 常用的实例，通过实例学习我们可以更快的掌握 Java 的应用。</p>\n<hr>\n<h2 id=\"Java-环境设置实例\"><a href=\"#Java-环境设置实例\" class=\"headerlink\" title=\"Java 环境设置实例\"></a>Java 环境设置实例</h2><ol>\n<li><a href=\"https://www.runoob.com/java/env-compile.html\">Java 实例 – 如何编译一个Java 文件？</a></li>\n<li><a href=\"https://www.runoob.com/java/env-run.html\">Java 实例 – Java 如何运行一个编译过的类文件?</a></li>\n<li><a href=\"https://www.runoob.com/java/env-classpath.html\">Java 实例 - 如何执行指定class文件目录（classpath）？</a></li>\n<li><a href=\"https://www.runoob.com/java/env-version.html\">Java 实例 – 如何查看当前 Java 运行的版本?</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-字符串\"><a href=\"#Java-字符串\" class=\"headerlink\" title=\"Java 字符串\"></a>Java 字符串</h2><ol>\n<li><a href=\"https://www.runoob.com/java/string-compare.html\">Java 实例 – 字符串比较</a></li>\n<li><a href=\"https://www.runoob.com/java/string-last-occurance.html\">Java 实例 - 查找字符串最后一次出现的位置</a></li>\n<li><a href=\"https://www.runoob.com/java/string-removing-char.html\">Java 实例 - 删除字符串中的一个字符</a></li>\n<li><a href=\"https://www.runoob.com/java/string-replace.html\">Java 实例 - 字符串替换</a></li>\n<li><a href=\"https://www.runoob.com/java/string-reverse.html\">Java 实例 - 字符串反转</a></li>\n<li><a href=\"https://www.runoob.com/java/string-search.html\">Java 实例 - 字符串查找</a></li>\n<li><a href=\"https://www.runoob.com/java/string-split.html\">Java 实例 - 字符串分割</a></li>\n<li><a href=\"https://www.runoob.com/java/java-stringtokenizer-example.html\">Java 实例 - 字符串分割(StringTokenizer)</a></li>\n<li><a href=\"https://www.runoob.com/java/string-uppercase.html\">Java 实例 - 字符串小写转大写</a></li>\n<li><a href=\"https://www.runoob.com/java/string-regionmatch.html\">Java 实例 - 测试两个字符串区域是否相等</a></li>\n<li><a href=\"https://www.runoob.com/java/string-performance.html\">Java 实例 - 字符串性能比较测试</a></li>\n<li><a href=\"https://www.runoob.com/java/string-optimization.html\">Java 实例 - 字符串优化</a></li>\n<li><a href=\"https://www.runoob.com/java/string-format.html\">Java 实例 - 字符串格式化</a></li>\n<li><a href=\"https://www.runoob.com/java/string-concatenation.html\">Java 实例 - 连接字符串</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-数组\"><a href=\"#Java-数组\" class=\"headerlink\" title=\"Java 数组\"></a>Java 数组</h2><ol>\n<li><a href=\"https://www.runoob.com/java/arrays-search.html\">Java 实例 – 数组排序及元素查找</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-insert.html\">Java 实例 – 数组添加元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-upperbound.html\">Java 实例 – 获取数组长度</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-reverse.html\">Java 实例 – 数组反转</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-output.html\">Java 实例 – 数组输出</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-min-max.html\">Java 实例 – 数组获取最大和最小值</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays_merge.html\">Java 实例 – 数组合并</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-fill.html\">Java 实例 – 数组填充</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-extension.html\">Java 实例 – 数组扩容</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-compare.html\">Java 实例 – 查找数组中的重复元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-remove.html\">Java 实例 – 删除数组元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-removeall.html\">Java 实例 – 数组差集</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-retainall.html\">Java 实例 – 数组交集</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-find.html\">Java 实例 – 在数组中查找指定元素</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-equal.html\">Java 实例 – 判断数组是否相等</a></li>\n<li><a href=\"https://www.runoob.com/java/arrays-union.html\">Java 实例 - 数组并集</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-时间处理\"><a href=\"#Java-时间处理\" class=\"headerlink\" title=\"Java 时间处理\"></a>Java 时间处理</h2><ol>\n<li><a href=\"https://www.runoob.com/java/date-time-am-pm.html\">Java 实例 - 格式化时间（SimpleDateFormat）</a></li>\n<li><a href=\"https://www.runoob.com/java/date-time-datetime.html\">Java 实例 - 获取当前时间</a></li>\n<li><a href=\"https://www.runoob.com/java/date-year-month.html\">Java 实例 - 获取年份、月份等</a></li>\n<li><a href=\"https://www.runoob.com/java/date-timestamp2date.html\">Java 实例 - 时间戳转换成时间</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-方法\"><a href=\"#Java-方法\" class=\"headerlink\" title=\"Java 方法\"></a>Java 方法</h2><ol>\n<li><a href=\"https://www.runoob.com/java/method-overloading.html\">Java 实例 – 方法重载</a></li>\n<li><a href=\"https://www.runoob.com/java/method-array.html\">Java 实例 – 输出数组元素</a></li>\n<li><a href=\"https://www.runoob.com/java/method-tower.html\">Java 实例 – 汉诺塔算法</a></li>\n<li><a href=\"https://www.runoob.com/java/method-fibonacci.html\">Java 实例 – 斐波那契数列</a></li>\n<li><a href=\"https://www.runoob.com/java/method-factorial.html\">Java 实例 – 阶乘</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-override.html\">Java 实例 – 方法覆盖</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-instanceof.html\">Java 实例 – instanceOf 关键字用法</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-break.html\">Java 实例 – break 关键字用法</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-continue.html\">Java 实例 – continue 关键字用法</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-label.html\">Java 实例 – 标签(Label)</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-enum.html\">Java 实例 – enum 和 switch 语句使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-enum1.html\">Java 实例 – Enum（枚举）构造函数及方法的使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-for.html\">Java 实例 – for 和 foreach循环使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-varargs.html\">Java 实例 – Varargs 可变参数使用</a></li>\n<li><a href=\"https://www.runoob.com/java/java/method-varargs1.html\">Java 实例 – 重载(overloading)方法中使用 Varargs</a></li>\n</ol>\n<hr>\n<h2 id=\"打印图形\"><a href=\"#打印图形\" class=\"headerlink\" title=\"打印图形\"></a>打印图形</h2><ol>\n<li><a href=\"https://www.runoob.com/java/java-print-diamond.html\">Java 实例 – 打印菱形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-multiplicationtable.html\">Java 实例 – 九九乘法表</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-the-triangle.html\">Java 实例 – 打印三角形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-invertedtriangle.html\">Java 实例 – 打印倒立的三角形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-parallelogram.html\">Java 实例 – 打印平行四边形</a></li>\n<li><a href=\"https://www.runoob.com/java/java-print-rect.html\">Java 实例 – 打印矩形</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-文件操作\"><a href=\"#Java-文件操作\" class=\"headerlink\" title=\"Java 文件操作\"></a>Java 文件操作</h2><ol>\n<li><a href=\"https://www.runoob.com/java/file-write.html\">Java 实例 - 文件写入</a></li>\n<li><a href=\"https://www.runoob.com/java/file-read.html\">Java 实例 - 读取文件内容</a></li>\n<li><a href=\"https://www.runoob.com/java/file-delete.html\">Java 实例 - 删除文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-copy.html\">Java 实例 - 将文件内容复制到另一个文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-append.html\">Java 实例 - 向文件中追加数据</a></li>\n<li><a href=\"https://www.runoob.com/java/file-create-temp.html\">Java 实例 - 创建临时文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-date-modify.html\">Java 实例 - 修改文件最后的修改日期</a></li>\n<li><a href=\"https://www.runoob.com/java/file-size.html\">Java 实例 - 获取文件大小</a></li>\n<li><a href=\"https://www.runoob.com/java/file-rename.html\">Java 实例 - 文件重命名</a></li>\n<li><a href=\"https://www.runoob.com/java/file-read-only.html\">Java 实例 - 设置文件只读</a></li>\n<li><a href=\"https://www.runoob.com/java/file-exist.html\">Java 实例 - 检测文件是否存在</a></li>\n<li><a href=\"https://www.runoob.com/java/file-dir.html\">Java 实例 - 在指定目录中创建文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-date.html\">Java 实例 - 获取文件修改时间</a></li>\n<li><a href=\"https://www.runoob.com/java/file-create.html\">Java 实例 - 创建文件</a></li>\n<li><a href=\"https://www.runoob.com/java/file-compare.html\">Java 实例 - 文件路径比较</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-目录操作\"><a href=\"#Java-目录操作\" class=\"headerlink\" title=\"Java 目录操作\"></a>Java 目录操作</h2><ol>\n<li><a href=\"https://www.runoob.com/java/dir-create.html\">Java 实例 - 递归创建目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-delete.html\">Java 实例 - 删除目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-empty.html\">Java 实例 - 判断目录是否为空</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-hidden.html\">Java 实例 - 判断文件是否隐藏</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-size.html\">Java 实例 - 获取目录大小</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-search.html\">Java 实例 - 在指定目录中查找文件</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-parent.html\">Java 实例 - 获取文件的上级目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-modification.html\">Java 实例 - 获取目录最后修改时间</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-hierarchy.html\">Java 实例 - 打印目录结构</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-display.html\">Java 实例 - 遍历指定目录下的所有目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-sub.html\">Java 实例 - 遍历指定目录下的所有文件</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-search-file.html\">Java 实例 - 在指定目录中查找文件</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-root.html\">Java 实例 - 遍历系统根目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-current.html\">Java 实例 - 查看当前工作目录</a></li>\n<li><a href=\"https://www.runoob.com/java/dir-traverse.html\">Java 实例 - 遍历目录</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-异常处理\"><a href=\"#Java-异常处理\" class=\"headerlink\" title=\"Java 异常处理\"></a>Java 异常处理</h2><ol>\n<li><a href=\"https://www.runoob.com/java/exception-method.html\">Java 实例 - 异常处理方法</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-hierarchy.html\">Java 实例 - 多个异常处理（多个catch）</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-finally.html\">Java 实例 - Finally的用法</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-catch.html\">Java 实例 - 使用 catch 处理异常</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-thread.html\">Java 实例 - 多线程异常处理</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-printstack.html\">Java 实例 - 获取异常的堆栈信息</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-overloaded-method.html\">Java 实例 - 重载方法异常处理</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-chain.html\">Java 实例 - 链试异常</a></li>\n<li><a href=\"https://www.runoob.com/java/exception-user.html\">Java 实例 - 自定义异常</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-数据结构\"><a href=\"#Java-数据结构\" class=\"headerlink\" title=\"Java 数据结构\"></a>Java 数据结构</h2><ol>\n<li><a href=\"https://www.runoob.com/java/data-add.html\">Java 实例 – 数字求和运算</a></li>\n<li><a href=\"https://www.runoob.com/java/data-intopost.html\">Java 实例 – 利用堆栈将中缀表达式转换成后缀 </a></li>\n<li><a href=\"https://www.runoob.com/java/data-insert.html\">Java 实例 – 在链表（LinkedList）的开头和结 </a></li>\n<li><a href=\"https://www.runoob.com/java/data-element.html\">Java 实例 – 获取链表（LinkedList）的第一个 </a></li>\n<li><a href=\"https://www.runoob.com/java/data-replace.html\">Java 实例 – 删除链表中的元素</a></li>\n<li><a href=\"https://www.runoob.com/java/data_linklist.html\">Java 实例 – 获取链表的元素</a></li>\n<li><a href=\"https://www.runoob.com/java/data-vecsort.html\">Java 实例 – 获取向量元素的索引值</a></li>\n<li><a href=\"https://www.runoob.com/java/data-stack.html\">Java 实例 – 栈的实现</a></li>\n<li><a href=\"https://www.runoob.com/java/data-search.html\">Java 实例 – 链表元素查找</a></li>\n<li><a href=\"https://www.runoob.com/java/data-reverse.html\">Java 实例 – 压栈出栈的方法实现字符串反转</a></li>\n<li><a href=\"https://www.runoob.com/java/data-queue.html\">Java 实例 – 队列（Queue）用法</a></li>\n<li><a href=\"https://www.runoob.com/java/data-vec-max.html\">Java 实例 – 获取向量的最大元素</a></li>\n<li><a href=\"https://www.runoob.com/java/data-update.html\">Java 实例 – 链表修改</a></li>\n<li><a href=\"https://www.runoob.com/java/data-swap.html\">Java 实例 – 旋转向量</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-集合\"><a href=\"#Java-集合\" class=\"headerlink\" title=\"Java 集合\"></a>Java 集合</h2><ol>\n<li><a href=\"https://www.runoob.com/java/collection-array.html\">Java 实例 – 数组转集合</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-compare.html\">Java 实例 – 集合比较</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-iterate.html\">Java 实例 – HashMap遍历</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-size.html\">Java 实例 – 集合长度</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-shuffle.html\">Java 实例 – 集合打乱顺序</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-iterator.html\">Java 实例 – 集合遍历</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-reverse.html\">Java 实例 – 集合反转</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-remove.html\">Java 实例 – 删除集合中指定元素</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-readonly.html\">Java 实例 – 只读集合</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-print.html\">Java 实例 – 集合输出</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-conversion.html\">Java 实例 – 集合转数组</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-rotate.html\">Java 实例 – List 循环移动元素</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-minmax.html\">Java 实例 – 查找 List 中的最大最小值</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-hashtable-key.html\">Java 实例 – 遍历 HashTable 的键值</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-enumeration.html\">Java 实例 – 使用 Enumeration 遍历 HashTable</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-all.html\">Java 实例 – 集合中添加不同类型元素</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-replace.html\">Java 实例 – List 元素替换</a></li>\n<li><a href=\"https://www.runoob.com/java/collection-sublist.html\">Java 实例 – List 截取</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-网络实例\"><a href=\"#Java-网络实例\" class=\"headerlink\" title=\"Java 网络实例\"></a>Java 网络实例</h2><ol>\n<li><a href=\"https://www.runoob.com/java/net-address.html\">Java 实例 – 获取指定主机的IP地址</a></li>\n<li><a href=\"https://www.runoob.com/java/net-port.html\">Java 实例 – 查看端口是否已使用</a></li>\n<li><a href=\"https://www.runoob.com/java/net-localip.html\">Java 实例 – 获取本机ip地址及主机名</a></li>\n<li><a href=\"https://www.runoob.com/java/net-serverfile.html\">Java 实例 – 获取远程文件大小</a></li>\n<li><a href=\"https://www.runoob.com/java/net-multisoc.html\">Java 实例 – Socket 实现多线程服务器程序</a></li>\n<li><a href=\"https://www.runoob.com/java/net-filetime.html\">Java 实例 – 查看主机指定文件的最后修改时间</a></li>\n<li><a href=\"https://www.runoob.com/java/net-connected.html\">Java 实例 – 使用 Socket 连接到指定主机</a></li>\n<li><a href=\"https://www.runoob.com/java/net-webpage.html\">Java 实例 – 网页抓取</a></li>\n<li><a href=\"https://www.runoob.com/java/net-urldate.html\">Java 实例 – 获取 URL响应头的日期信息</a></li>\n<li><a href=\"https://www.runoob.com/java/net-url-header.html\">Java 实例 – 获取 URL 响应头信息</a></li>\n<li><a href=\"https://www.runoob.com/java/net-url.html\">Java 实例 – 解析 URL</a></li>\n<li><a href=\"https://www.runoob.com/java/net-serversocket-socket.html\">Java 实例 – ServerSocket 和 Socket 通信实例</a></li>\n</ol>\n<hr>\n<h2 id=\"Java-线程\"><a href=\"#Java-线程\" class=\"headerlink\" title=\"Java 线程\"></a>Java 线程</h2><ol>\n<li><a href=\"https://www.runoob.com/java/thread-alive.html\">Java 实例 – 查看线程是否存活</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-name.html\">Java 实例 – 获取当前线程名称</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-monitor.html\">Java 实例 – 状态监测</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-getpri.html\">Java 实例 – 线程优先级设置</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-deadlock.html\">Java 实例 – 死锁及解决方法</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-id.html\">Java 实例 – 获取线程id</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-suspend.html\">Java 实例 – 线程挂起</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-stop.html\">Java 实例 – 终止线程</a></li>\n<li><a href=\"https://www.runoob.com/html/thread-procon.html\">Java 实例 – 生产者&#x2F;消费者问题</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-status.html\">Java 实例 – 获取线程状态</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-showall.html\">Java 实例 – 获取所有线程</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-priorityinfo.html\">Java 实例 – 查看线程优先级</a></li>\n<li><a href=\"https://www.runoob.com/java/thread-interrupt.html\">Java 实例 – 中断线程</a></li>\n</ol>\n"},{"title":"在 Nginx 的 location 配置中path路径一篇搞定","date":"2024-10-31T03:02:58.875Z","_content":"在 Nginx 的 `location` 配置中，`/path/` 和 `/path` 确实有区别，主要体现在路径的匹配规则和请求处理上：\n\n## 1. location路径匹配上的区别\n\n- **`/path/`**：匹配所有以 `/path/` 开头的请求路径，注意这里带有尾部的 `/`。\n  - 例如：`/path/file.html`、`/path/subdir/anotherfile` 都会被匹配。\n  \n- **`/path`**：匹配所有以 `/path` 开头的请求路径，不要求路径必须有尾部 `/`。\n  - 例如：`/path`, `/pathfile`, `/pathsomething` 等都可以匹配到。\n  \n\n因此，**`/path/` 更严格**，它只会匹配到包含 `/path/` 开头的路径，而 **`/path` 更宽泛**，可能会匹配到包含类似 `/pathfile` 的路径。\n\n### 2. 实际配置示例\n\n如果在 Nginx 配置中，你有 `/path` 和 `/path/` 两种 `location` 块，Nginx 会根据请求路径选择匹配度更高的配置。例如：\n\n```nginx\nserver {\n    listen 80;\n\n    # /path/ 匹配，严格用于以 /path/ 开头的请求\n    location /path/ {\n        return 200 \"Matched /path/\";\n    }\n\n    # /path 匹配，适用于更宽泛的路径\n    location /path {\n        return 200 \"Matched /path\";\n    }\n}\n```\n\n假设请求路径为 `/path/test`，Nginx 会选择 `/path/` 配置，因为它是更严格匹配的。对于 `/pathsomething`，Nginx 则会使用 `/path`。\n\n### 3. 使用建议\n\n- **`/path/`**：如果想严格匹配某个路径下的子目录，可以使用 `/path/`。\n- **`/path`**：如果不需要严格的子路径匹配，则可以使用 `/path`，或者在更通用的路径匹配下直接配置 `/path`。\n\n### 总结\n\n- **`/path/`** 是更具体的路径，只匹配以 `/path/` 开头的请求。\n- **`/path`** 则宽泛匹配，适用于 `/path` 开头的所有请求。\n\n出现 `404` 错误，通常表示 Nginx 无法找到所代理的路径。下面是一些可能的原因和解决方法：\n\n\n\n## 1. `proxy_pass` 配置问题\n在 Nginx 中，`proxy_pass` 的写法会影响路径的映射方式：\n\n- **没有斜杠** (`proxy_pass http://192.168.1.26:8080`)：Nginx 会将客户端请求路径直接附加到代理路径。例如，请求 `http://localhost:81/api/login` 会被代理为 `http://192.168.1.26:8080/api/login`。\n  \n- **带斜杠** (`proxy_pass http://192.168.1.26:8080/`)：Nginx 会将 `/api/` 替换为 `/`，把请求路径变成根路径。这意味着 `http://localhost:81/api/login` 会代理为 `http://192.168.1.26:8080/login`，从而可能导致路径错误。\n\n因此，**移除 `proxy_pass` 后的斜杠**会让路径更准确地映射到后端。\n\n### 2. 确保后端服务路径存在\n需要确认后端服务在 `http://192.168.1.26:8080` 上确实有 `/api/login` 路径。可以用浏览器直接访问 `http://192.168.1.26:8080/api/login`，确保其可用。如果这个路径不存在，Nginx 即使配置正确，也会返回 404。\n\n### 3. 检查 Nginx 日志\n查看 Nginx 的日志可以帮助排查问题：\n\n```bash\ntail -f /var/log/nginx/error.log\n```\n\n在日志中，如果看到类似路径错误或无法找到资源的信息，可能就能确认 404 的原因。这有助于确定问题是否在 Nginx 配置，还是后端服务本身。","source":"_posts/在 Nginx 的 location 配置中path路径一篇搞定.md","raw":"---\ntitle: 在 Nginx 的 location 配置中path路径一篇搞定\ndate: 2024-10-31T11:02:58.875Z\ntags: []\ncategories: []\n---\n在 Nginx 的 `location` 配置中，`/path/` 和 `/path` 确实有区别，主要体现在路径的匹配规则和请求处理上：\n\n## 1. location路径匹配上的区别\n\n- **`/path/`**：匹配所有以 `/path/` 开头的请求路径，注意这里带有尾部的 `/`。\n  - 例如：`/path/file.html`、`/path/subdir/anotherfile` 都会被匹配。\n  \n- **`/path`**：匹配所有以 `/path` 开头的请求路径，不要求路径必须有尾部 `/`。\n  - 例如：`/path`, `/pathfile`, `/pathsomething` 等都可以匹配到。\n  \n\n因此，**`/path/` 更严格**，它只会匹配到包含 `/path/` 开头的路径，而 **`/path` 更宽泛**，可能会匹配到包含类似 `/pathfile` 的路径。\n\n### 2. 实际配置示例\n\n如果在 Nginx 配置中，你有 `/path` 和 `/path/` 两种 `location` 块，Nginx 会根据请求路径选择匹配度更高的配置。例如：\n\n```nginx\nserver {\n    listen 80;\n\n    # /path/ 匹配，严格用于以 /path/ 开头的请求\n    location /path/ {\n        return 200 \"Matched /path/\";\n    }\n\n    # /path 匹配，适用于更宽泛的路径\n    location /path {\n        return 200 \"Matched /path\";\n    }\n}\n```\n\n假设请求路径为 `/path/test`，Nginx 会选择 `/path/` 配置，因为它是更严格匹配的。对于 `/pathsomething`，Nginx 则会使用 `/path`。\n\n### 3. 使用建议\n\n- **`/path/`**：如果想严格匹配某个路径下的子目录，可以使用 `/path/`。\n- **`/path`**：如果不需要严格的子路径匹配，则可以使用 `/path`，或者在更通用的路径匹配下直接配置 `/path`。\n\n### 总结\n\n- **`/path/`** 是更具体的路径，只匹配以 `/path/` 开头的请求。\n- **`/path`** 则宽泛匹配，适用于 `/path` 开头的所有请求。\n\n出现 `404` 错误，通常表示 Nginx 无法找到所代理的路径。下面是一些可能的原因和解决方法：\n\n\n\n## 1. `proxy_pass` 配置问题\n在 Nginx 中，`proxy_pass` 的写法会影响路径的映射方式：\n\n- **没有斜杠** (`proxy_pass http://192.168.1.26:8080`)：Nginx 会将客户端请求路径直接附加到代理路径。例如，请求 `http://localhost:81/api/login` 会被代理为 `http://192.168.1.26:8080/api/login`。\n  \n- **带斜杠** (`proxy_pass http://192.168.1.26:8080/`)：Nginx 会将 `/api/` 替换为 `/`，把请求路径变成根路径。这意味着 `http://localhost:81/api/login` 会代理为 `http://192.168.1.26:8080/login`，从而可能导致路径错误。\n\n因此，**移除 `proxy_pass` 后的斜杠**会让路径更准确地映射到后端。\n\n### 2. 确保后端服务路径存在\n需要确认后端服务在 `http://192.168.1.26:8080` 上确实有 `/api/login` 路径。可以用浏览器直接访问 `http://192.168.1.26:8080/api/login`，确保其可用。如果这个路径不存在，Nginx 即使配置正确，也会返回 404。\n\n### 3. 检查 Nginx 日志\n查看 Nginx 的日志可以帮助排查问题：\n\n```bash\ntail -f /var/log/nginx/error.log\n```\n\n在日志中，如果看到类似路径错误或无法找到资源的信息，可能就能确认 404 的原因。这有助于确定问题是否在 Nginx 配置，还是后端服务本身。","slug":"在 Nginx 的 location 配置中path路径一篇搞定","published":1,"updated":"2024-11-25T11:44:04.574Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscq002zmbs65lk35gn3","content":"<p>在 Nginx 的 <code>location</code> 配置中，<code>/path/</code> 和 <code>/path</code> 确实有区别，主要体现在路径的匹配规则和请求处理上：</p>\n<h2 id=\"1-location路径匹配上的区别\"><a href=\"#1-location路径匹配上的区别\" class=\"headerlink\" title=\"1. location路径匹配上的区别\"></a>1. location路径匹配上的区别</h2><ul>\n<li><p>**<code>/path/</code>**：匹配所有以 <code>/path/</code> 开头的请求路径，注意这里带有尾部的 <code>/</code>。</p>\n<ul>\n<li>例如：<code>/path/file.html</code>、<code>/path/subdir/anotherfile</code> 都会被匹配。</li>\n</ul>\n</li>\n<li><p>**<code>/path</code>**：匹配所有以 <code>/path</code> 开头的请求路径，不要求路径必须有尾部 <code>/</code>。</p>\n<ul>\n<li>例如：<code>/path</code>, <code>/pathfile</code>, <code>/pathsomething</code> 等都可以匹配到。</li>\n</ul>\n</li>\n</ul>\n<p>因此，**<code>/path/</code> 更严格**，它只会匹配到包含 <code>/path/</code> 开头的路径，而 <strong><code>/path</code> 更宽泛</strong>，可能会匹配到包含类似 <code>/pathfile</code> 的路径。</p>\n<h3 id=\"2-实际配置示例\"><a href=\"#2-实际配置示例\" class=\"headerlink\" title=\"2. 实际配置示例\"></a>2. 实际配置示例</h3><p>如果在 Nginx 配置中，你有 <code>/path</code> 和 <code>/path/</code> 两种 <code>location</code> 块，Nginx 会根据请求路径选择匹配度更高的配置。例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># /path/ 匹配，严格用于以 /path/ 开头的请求</span></span><br><span class=\"line\">    <span class=\"section\">location</span> /path/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&quot;Matched /path/&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># /path 匹配，适用于更宽泛的路径</span></span><br><span class=\"line\">    <span class=\"section\">location</span> /path &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&quot;Matched /path&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设请求路径为 <code>/path/test</code>，Nginx 会选择 <code>/path/</code> 配置，因为它是更严格匹配的。对于 <code>/pathsomething</code>，Nginx 则会使用 <code>/path</code>。</p>\n<h3 id=\"3-使用建议\"><a href=\"#3-使用建议\" class=\"headerlink\" title=\"3. 使用建议\"></a>3. 使用建议</h3><ul>\n<li>**<code>/path/</code>**：如果想严格匹配某个路径下的子目录，可以使用 <code>/path/</code>。</li>\n<li>**<code>/path</code>**：如果不需要严格的子路径匹配，则可以使用 <code>/path</code>，或者在更通用的路径匹配下直接配置 <code>/path</code>。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong><code>/path/</code></strong> 是更具体的路径，只匹配以 <code>/path/</code> 开头的请求。</li>\n<li><strong><code>/path</code></strong> 则宽泛匹配，适用于 <code>/path</code> 开头的所有请求。</li>\n</ul>\n<p>出现 <code>404</code> 错误，通常表示 Nginx 无法找到所代理的路径。下面是一些可能的原因和解决方法：</p>\n<h2 id=\"1-proxy-pass-配置问题\"><a href=\"#1-proxy-pass-配置问题\" class=\"headerlink\" title=\"1. proxy_pass 配置问题\"></a>1. <code>proxy_pass</code> 配置问题</h2><p>在 Nginx 中，<code>proxy_pass</code> 的写法会影响路径的映射方式：</p>\n<ul>\n<li><p><strong>没有斜杠</strong> (<code>proxy_pass http://192.168.1.26:8080</code>)：Nginx 会将客户端请求路径直接附加到代理路径。例如，请求 <code>http://localhost:81/api/login</code> 会被代理为 <code>http://192.168.1.26:8080/api/login</code>。</p>\n</li>\n<li><p><strong>带斜杠</strong> (<code>proxy_pass http://192.168.1.26:8080/</code>)：Nginx 会将 <code>/api/</code> 替换为 <code>/</code>，把请求路径变成根路径。这意味着 <code>http://localhost:81/api/login</code> 会代理为 <code>http://192.168.1.26:8080/login</code>，从而可能导致路径错误。</p>\n</li>\n</ul>\n<p>因此，<strong>移除 <code>proxy_pass</code> 后的斜杠</strong>会让路径更准确地映射到后端。</p>\n<h3 id=\"2-确保后端服务路径存在\"><a href=\"#2-确保后端服务路径存在\" class=\"headerlink\" title=\"2. 确保后端服务路径存在\"></a>2. 确保后端服务路径存在</h3><p>需要确认后端服务在 <code>http://192.168.1.26:8080</code> 上确实有 <code>/api/login</code> 路径。可以用浏览器直接访问 <code>http://192.168.1.26:8080/api/login</code>，确保其可用。如果这个路径不存在，Nginx 即使配置正确，也会返回 404。</p>\n<h3 id=\"3-检查-Nginx-日志\"><a href=\"#3-检查-Nginx-日志\" class=\"headerlink\" title=\"3. 检查 Nginx 日志\"></a>3. 检查 Nginx 日志</h3><p>查看 Nginx 的日志可以帮助排查问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>\n\n<p>在日志中，如果看到类似路径错误或无法找到资源的信息，可能就能确认 404 的原因。这有助于确定问题是否在 Nginx 配置，还是后端服务本身。</p>\n","excerpt":"","more":"<p>在 Nginx 的 <code>location</code> 配置中，<code>/path/</code> 和 <code>/path</code> 确实有区别，主要体现在路径的匹配规则和请求处理上：</p>\n<h2 id=\"1-location路径匹配上的区别\"><a href=\"#1-location路径匹配上的区别\" class=\"headerlink\" title=\"1. location路径匹配上的区别\"></a>1. location路径匹配上的区别</h2><ul>\n<li><p>**<code>/path/</code>**：匹配所有以 <code>/path/</code> 开头的请求路径，注意这里带有尾部的 <code>/</code>。</p>\n<ul>\n<li>例如：<code>/path/file.html</code>、<code>/path/subdir/anotherfile</code> 都会被匹配。</li>\n</ul>\n</li>\n<li><p>**<code>/path</code>**：匹配所有以 <code>/path</code> 开头的请求路径，不要求路径必须有尾部 <code>/</code>。</p>\n<ul>\n<li>例如：<code>/path</code>, <code>/pathfile</code>, <code>/pathsomething</code> 等都可以匹配到。</li>\n</ul>\n</li>\n</ul>\n<p>因此，**<code>/path/</code> 更严格**，它只会匹配到包含 <code>/path/</code> 开头的路径，而 <strong><code>/path</code> 更宽泛</strong>，可能会匹配到包含类似 <code>/pathfile</code> 的路径。</p>\n<h3 id=\"2-实际配置示例\"><a href=\"#2-实际配置示例\" class=\"headerlink\" title=\"2. 实际配置示例\"></a>2. 实际配置示例</h3><p>如果在 Nginx 配置中，你有 <code>/path</code> 和 <code>/path/</code> 两种 <code>location</code> 块，Nginx 会根据请求路径选择匹配度更高的配置。例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># /path/ 匹配，严格用于以 /path/ 开头的请求</span></span><br><span class=\"line\">    <span class=\"section\">location</span> /path/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&quot;Matched /path/&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># /path 匹配，适用于更宽泛的路径</span></span><br><span class=\"line\">    <span class=\"section\">location</span> /path &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&quot;Matched /path&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设请求路径为 <code>/path/test</code>，Nginx 会选择 <code>/path/</code> 配置，因为它是更严格匹配的。对于 <code>/pathsomething</code>，Nginx 则会使用 <code>/path</code>。</p>\n<h3 id=\"3-使用建议\"><a href=\"#3-使用建议\" class=\"headerlink\" title=\"3. 使用建议\"></a>3. 使用建议</h3><ul>\n<li>**<code>/path/</code>**：如果想严格匹配某个路径下的子目录，可以使用 <code>/path/</code>。</li>\n<li>**<code>/path</code>**：如果不需要严格的子路径匹配，则可以使用 <code>/path</code>，或者在更通用的路径匹配下直接配置 <code>/path</code>。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong><code>/path/</code></strong> 是更具体的路径，只匹配以 <code>/path/</code> 开头的请求。</li>\n<li><strong><code>/path</code></strong> 则宽泛匹配，适用于 <code>/path</code> 开头的所有请求。</li>\n</ul>\n<p>出现 <code>404</code> 错误，通常表示 Nginx 无法找到所代理的路径。下面是一些可能的原因和解决方法：</p>\n<h2 id=\"1-proxy-pass-配置问题\"><a href=\"#1-proxy-pass-配置问题\" class=\"headerlink\" title=\"1. proxy_pass 配置问题\"></a>1. <code>proxy_pass</code> 配置问题</h2><p>在 Nginx 中，<code>proxy_pass</code> 的写法会影响路径的映射方式：</p>\n<ul>\n<li><p><strong>没有斜杠</strong> (<code>proxy_pass http://192.168.1.26:8080</code>)：Nginx 会将客户端请求路径直接附加到代理路径。例如，请求 <code>http://localhost:81/api/login</code> 会被代理为 <code>http://192.168.1.26:8080/api/login</code>。</p>\n</li>\n<li><p><strong>带斜杠</strong> (<code>proxy_pass http://192.168.1.26:8080/</code>)：Nginx 会将 <code>/api/</code> 替换为 <code>/</code>，把请求路径变成根路径。这意味着 <code>http://localhost:81/api/login</code> 会代理为 <code>http://192.168.1.26:8080/login</code>，从而可能导致路径错误。</p>\n</li>\n</ul>\n<p>因此，<strong>移除 <code>proxy_pass</code> 后的斜杠</strong>会让路径更准确地映射到后端。</p>\n<h3 id=\"2-确保后端服务路径存在\"><a href=\"#2-确保后端服务路径存在\" class=\"headerlink\" title=\"2. 确保后端服务路径存在\"></a>2. 确保后端服务路径存在</h3><p>需要确认后端服务在 <code>http://192.168.1.26:8080</code> 上确实有 <code>/api/login</code> 路径。可以用浏览器直接访问 <code>http://192.168.1.26:8080/api/login</code>，确保其可用。如果这个路径不存在，Nginx 即使配置正确，也会返回 404。</p>\n<h3 id=\"3-检查-Nginx-日志\"><a href=\"#3-检查-Nginx-日志\" class=\"headerlink\" title=\"3. 检查 Nginx 日志\"></a>3. 检查 Nginx 日志</h3><p>查看 Nginx 的日志可以帮助排查问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>\n\n<p>在日志中，如果看到类似路径错误或无法找到资源的信息，可能就能确认 404 的原因。这有助于确定问题是否在 Nginx 配置，还是后端服务本身。</p>\n"},{"title":"搜索技术，普通人变强的唯一外挂。全套详细宝藏教程","date":"2024-09-05T01:16:59.787Z","_content":"**搜索技术，普通人变强的唯一外挂。全套详细宝藏教程~**\n\nAI 总结了一下：  一、搜索技术的重要性 1. 搜索技术是普通人变强的唯一外挂,可以帮助人们学习的比别人快,做的比别人好。 2. 掌握搜索技术是互联网时代获取信息的关键,可以极大程度地缩小信息差距。 二、搜索技术的分类 1. 搜索目的可分为4类:    (1) 了解信息(Know Something)    (2) 学习技能(Learn Something)     (3) 创作内容(Create Something)    (4) 完成任务(Do Something) 2. 搜索内容可分为4类:    (1) 信息资讯:新闻、事件等    (2) 知识技能:概念、教程等    (3) 素材文件:图片、视频、文档等    (4) 工具软件:各类工具、插件等 三、搜索信息资讯 1. 要快速准确,谷歌效率最高。 2. 可运用搜索语法提升效率:    (1) 限定关键词:用双引号\"\"包裹    (2) 限定标题:intitle    (3) 限定内容:intext    (4) 限定网址:inurl     (5) 限定网站:site    (6) 限定图片大小:imagesize    (7) 限定文件类型:filetype 3. 信息源头最准确可信,要注意判断来源。 四、搜索知识技能 1. 主要平台:谷歌、得到APP、优质视频网站等。 2. 注意知识质量,尽量采用一手资料。 3. 可下载研究报告、学术论文等高质量文档。 4. 视频教程可在视频网站、短视频平台获取。 五、搜索素材文件 1. 可利用免费素材网站、版权网站等。 2. 注意遵守版权,非商用基本没有风险。 3. 可用各种下载工具下载素材。 4. 需注意素材的质量、风格等符合要求。 六、搜索工具软件 1. 优先考虑在线工具。 2. 其次是软件,最后是插件。 3. 大多数需求都能找到对应的工具。 4. 可用类似网站找相似工具。 七、运用AI工具 1. ChatGPT等AI工具可直接回答问题,无需搜索。 2. 可进行追问、对比、推理等,功能强大。 3. 结合传统搜索技术和AI工具,形成超级搜索技术。 4. AI将深刻影响搜索方式,要积极运用。\n\n\n\n\n\n\n\n视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。\n\n视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。\nDetailed Summary for [一個偷偷來訪的未來人揭露我們周圍可能有很多未來人，並解釋了時間機器的原理和人類世界的真相，我們其實在一個被安排好的劇本之中，任何人都無法逃避宿命之劫 | 老高與小茉 Mr & Mrs Gao](https://www.youtube.com/watch?v=YLcz5hjqVLQ) by [Monica](https://monica.im)\n\n  [00:00](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=0) 未来人揭露时间机器的原理和人类世界的真相\n  - 提到了时间机器的原理}\n- 揭露了这个世界的真相}\n- 一个未来人在2008年7月5号早上6点45分被发现}\n      \n\n[04:05](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=245) 未来人通过时间机器回到现在体验过去的美食和建筑，感受历史的魅力\n  - 未来人将时间机器收起来，表示来旅游体验}\n- 未来人回到现在品尝过去美食，感受历史文化}\n- 未来人可以看到一些未来消失的建筑，如巴比伦的空中花园}\n      \n\n[08:10](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=490) 时间机器的原理和穿越的规则\n  - 时间越长重合越紧密，穿越可能性增加}\n- 穿越者必须活着以读取记忆}\n- 时间机器穿越范围约一百年}\n- 关系紧密的穿越方式是通过爱}\n      \n\n[12:13](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=733) 活在自己的时间节奏里，不要追逐新鲜事物\n  - 不要像机器一样活着，要像一个人一样}\n- 躺平是自我防御机制，按照自己的节奏活着}\n- 跟着自己的节奏活着，才是活着的意义}\n      \n\n[16:20](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=980) 揭示人生剧本和选择的关系\n  - 未来人揭示世界真相}\n- 人生剧本可在一定范围内自由发挥}\n- 选择对物质世界产生影响即被记录为过去}\n- 身体是过去的记载，意识是现在和未来}\n      \n\n[20:22](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1222) 行动是辨别一个人是否真的信的关键因素\n  - 喜欢与真喜欢的区别}\n- 真喜欢需要有实际行动支持}\n- 行动是改变物质世界的关键}\n      \n\n[24:26](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1466.3999938964844) 意识的力量和未来预知能力\n  - 集体潜意识控制和拉回}\n- 每个人都具有预知未来能力}\n- 肉体过去，意识现在和未来}\n- 意识在平行宇宙中游走}\n- 能够看到未来所有情况}\n\n\n\n\n\n66个Chrome技巧，科学快乐的上网呀！ - YouTube\nhttps://www.youtube.com/watch?v=MD1XE2LBKbc\n\nTranscript:\n(00:00) 谷歌家的Chrome浏览器 就是全世界最强 电脑端占了全球65%的市场份额 中国的浏览器榜上有名的 360  QQ 加起来占了1.5% Chrome遥遥领先 这条视频分享66个Chrome的使用技巧 比如在地址栏直接@Gemini 就可以直接调用谷歌的Gemini大模型 回答你的问题 这才是真正的上网 来 一个个介绍 第一 打开Chrome浏览器会自动打开一组网页 怎么设置 点击右上角的三个点 点击底部的设置 点击左侧的启动时 你可以选择打开新标签页 我喜欢第三个 打开特定网页或者一组网页 我设置了3个 还能继续添加新网页 输入网址就行了 比如我的第二个网址 是直接到达我的b站主页 创作中心后台的 互动管理的评论管理页面 这个就极其的方便 第二 cmd+T 或者点击标签页右边的加号 打开新的标签页 点击右下角的自定义Chrome 可以设置外观和主题颜色 点击更改主题\n(01:03) 你可以选择纯色或者图片 或者上传一张自己喜欢的图片 你喜欢五条悟 那就去搜一个五条悟的高清壁纸 五条悟空格 imagesize英文冒号3840x2160 就是4K的图片 保存一张你喜欢的 然后上传 好了 你现在就有了五条悟专属高清壁纸 第三 自定义Chrome下面有个快捷方式 点开它你就可以在搜索框下面 添加一些网址的快捷访问 点击快捷方式 起个名字 比如canva 输入网址 www.canva.com 那这样就可以了 注意啊如果添加的是chatgpt的网址 GPT域名改了 没有3W点了 直接就是chatgpt.com 第四 如果你想打开新的窗口 快捷键是cmd+N 这是单开一个窗口 如果是cmd + shift + N 那就是新开一个无痕浏览窗口 无痕模式下 Chrome不会保存你的浏览记录 cookie网站数据等等 这个很有用 毕竟要留清白在人间 还有两个方法打开无痕窗口 一个是右键点击Chrome图标\n(02:06) 可以打开无痕窗口 还有点击右上角的更多 也可以打开无痕窗口 第五 点击设置 您与谷歌 同步功能和谷歌服务 管理您的同步数据 自定义同步 我一般都会同步 如果在其他设备上登录Chrome浏览器 它就会自动同步所有的信息 当然这个前提是你自己的设备 否则的话 历史记录 密码和通行密钥 这两个就别勾选了 第六 设置搜索引擎 默认是谷歌就好 这样你在搜索框里面直接输入关键词 就默认调用谷歌搜索 然后高阶玩法来了 点击管理搜索引擎和网站搜索 你还可以快捷调用其他的搜索引擎 甚至网站帮你搜索 点击编辑 可以设置快捷字词 Bing的搜索快捷字词 我设置为bing 然后结合上面的键盘快捷键Tab键 你就可以直接在地址栏 快速调用bing搜索 先在地址栏输入bing 然后摁一下tab键 就会激活Bing搜索引擎 再输入关键词 得到的就是Bing的搜索结果 第七\n(03:08) 下面还有网站搜索 默认的是可以在地址栏直接搜索 标签页历史记录 书签等等 以及调用Gemini大模型 在地址栏输入 @历史记录 然后按一下Tab键 就可以搜索历史记录 我们刚刚搜过五条悟对吧 那就输入五条悟 那关于五条悟的历史记录就出来了 @书签 tab键 输入save 这个就是我收藏的书签栏 里面的一些下载视频的网址 这个很方便 第八 @Gemini 然后Tab键 就可以直接切换到与谷歌大模型 Gemini聊天 这个太方便了 你不需要打开Gemini的网址 直接在地址栏里面问问题就行了 Chrome会自己调用Gemini回答你的问题 第九 你还可以直接激活YouTube这个网站 帮你搜索 快捷字词 自己设置 我设置的是yt 直接在地址栏里面输入yt 然后按一下Tab键 再输入关键词 就可以直接打开YouTube 并给出搜索结果 第十 点击左侧的语言设置 勾选使用下面的谷歌翻译 拉到最底端 选择简体中文\n(04:10) 这样当你看到一些英文网页的时候 你可以直接右键翻译成中文 11  点下左侧的下载内容 你可以设置浏览器的默认下载位置 并且把下面两个都勾选 每次下载前 都会询问你每个文件的保存位置 这个很重要 12 击左侧的性能设置 勾选节省内存模式 这样Chrome会释放那些闲置的网页内存 你可以点击更多 选择更多工具 打开任务管理器 这样就可以去检验一下 效果显著 13 击外观设置 先看一下这个字号和字体的设置 如果你需要录屏 默认网页的字体又比较小 你可以调节字号的大小 这个是中号 这个是特大号 对比很明显 你也可以自定义字体和大小 注意啊主要影响的是这个最小字号 尽量不要超过18 如果超过18 就会超出很多网页排版的行间距了 一般16就差不多了 14 网页缩放 不需要在这里设置啊 太麻烦了 直接调用快捷键 cmd+加减号 加就是放大\n(05:13) 减就是缩小 这样就能快速缩放 cmd+0就是直接到100% 15 最后一项是使用cmd+q 退出前先显示警告 cmd+q是Mac系统自带的 退出程序的快捷键 任何程序直接cmd+q就可以退出 那对于Chrome浏览器 还是勾选一下这个退出前的警告 避免误操作 16 关掉程序是cmd+q 关掉当前页面的快捷键是cmd+w 如果不小心关掉了 想要恢复这个页面 快捷键是cmd+shift+t 这样就可以直接恢复刚刚误操作的页面 17  勾选上面这个 标签页悬停显示内存用量 然后当你把鼠标移动到对应的标签页之后 就会显示它占用的内存 18 然后是书签栏和侧边栏 你可以选择侧边栏的显示位置 左右都行 怎么打开侧边栏 点击更多 点击书签和清单 点击显示所有书签 右边就弹出了一个侧边栏 点击右上角的图钉按钮 可以把这个侧边栏 固定在上面的工具栏里 就在你头像的左边\n(06:16) 就会出现这个书签的按钮 还有一个阅读清单也是一样的 书签和清单 点击阅读清单 显示阅读清单 也可以点击图钉按钮 把它固定在工具栏里 19 只要用浏览器 就一定会用到书签栏 cmd+shift+b就可以显示书签栏 再按一遍cmd+shift+b 就可以隐藏书签栏 20 任何网页都可以收藏到书签栏 方便你下次访问 比如这是b站 你可以点击地址栏右边星标 你就可以添加到书签栏 你可以只放到书签栏里 也可以放到具体的文件夹里 我这里收藏的太多了 已经不够它显示了 你可以把高频使用的书签 拖到靠前的位置 右键点击b站这个书签 你可以修改它 你可以把这个名称直接删掉 名称太长 太占位置 删掉之后呢 就会只保留一个logo 你认识就行 这样还省空间 21 添加书签的快捷键是cmd+d 任何网页按一下cmd+d 就可以激活书签的收藏窗口 b站你已经收藏过了\n(07:20) 星标是蓝色的 没关系再按一下cmd+d 可以二次收藏 你可以把同一个网站 收录在不同的文件夹里面 所以cmd+d比这个星标更好使 22 你可以按照工作场景或者专题 建立书签文件夹 比如我有一个文件夹叫做 做视频 当我要剪辑视频的时候 这里面的网站工具我都得用上 那我就可以直接右键点击这个文件夹 然后打开全部5个标签 这样我就不用一个个的去开网页了 23 别人的书签栏也是可以直接copy给你 cmd+option+b直接进入书签管理器 或者点击右上角的更多书签和清单 书签管理器 你也可以进入 这里你可以上下拖动书签后面的3个点 进行排序 点击右上角的3个点 你可以导出整个书签 保存为一个html的文件 这个文件不同的浏览器是通用的 Safari edge 火狐都可以的 那他们导出的书签你也可以用 你直接导入书签文件就可以了 24 当你开了很多网页之后 你可以右键单击标签页 添加分组\n(08:23) 这样他们就被折叠收纳 不至于都挤在上面 如果你勾选保存分组 那这个分组呢 就会自动收藏到书签栏 25 有些网页现在来不及看 可以右键点击标签页 添加到阅读清单 等会再看 点击前面固定在工具栏里的 阅读清单按钮 你待看的网页都在这里了 26 接下来先介绍Chrome的扩展程序extensions 然后再介绍网页内容的交互 扩展程序会极大地释放你的使用效率 Web端和电脑手机一样 都算操作系统 因为Chrome浏览器市占率是全球第一 大家都用它上网 所以全球开发者们围绕Chrome浏览器的Web OS 开发了很多好用的扩展程序 我们点击右上角的更多 点击扩展程序 访问Chrome应用商店 如果你访问不了 那就想办法 抱怨 吐槽解决不了任何问题 cmd+d 我们直接把这个应用商店的页面 收藏到书签栏 拖到最左边 这个会经常用到 基本上你常用的生产力工具 都会有Chrome插件\n(09:26) 你不妨去搜搜看 27 首先推荐的必装的扩展程序 叫沉浸式翻译 安装好之后 点击右上角的扩展程序按钮 点击固定按钮 这样它就固定出现在地址栏的右边 安装好之后 在窗口右下角会出现翻译按钮 点击一下就会自动翻译 而且是中英文对照翻译的 点击设置 你可以选择不同的翻译软件 微软的谷歌的 或者Openai Claude Gemini这些大模型的也可以 这些是收费的 当然效果肯定会更好 免费的也勉强够用了 它还能翻译文档 PDF文件论文也可以对照翻译 还有个牛逼的地方是 你在网页上输入内容 然后连续按三次空格键 就会自动帮你翻译成英文 这个太牛逼了 必须安装 28 这个扩展是similarsites开发的 类似的网站 当你在浏览某个网站的时候 它会自动把和这个网站类似的 其他网站列出来 比如b站 你点击一下 它还会列出月度访问次数 b站是10个亿左右 YouTube是310个亿\n(10:29) 如果是Pexels 那么其他的一些图片素材的网站 也都会帮你列出来 这个是发现新大陆的好东西 注意身体 29 这个扩展适合国内宝宝体质 波了波了下载助手 你懂的 安装好之后 视频就都能下载了 那为了过审我就不详细演示了 你自己去搞啊 30 这个扩展是关于鼠标手势的 叫crxmouse 安装好之后 你可以设置快捷的鼠标手势 按住右键 向左滑是后退 向右滑是前进 向上滑直接到顶 画个L 关闭页面 这些你都可以去自己设置 类似的扩展有很多你自己去研究一下 31   todoist 名字里面是没有L的 就叫todoist 安装好之后 点击一下 就可以添加一些to do list清单 可以设置截止时间和优先级 你做完了呢 你就打个勾 类似的还有番茄钟之类的 其他的扩展程序 都可以去体验一下 如果你要装滴答清单 这里提醒一下 Chrome的扩展是跟国际版的Ticktick同步的 不是跟国内版的滴答清单 这里要注意一下啊\n(11:31) 32 笔记类的扩展程序就很多了 像flomoplus Google keep  Evernote  notion 有道云笔记等等多的是 安装好之后 遇到值得保存的内容 你就可以直接选中 然后右键就能直接发送到笔记的APP 33 gofullpage 这个是用来网页长截图的扩展 如果你要截取整个网页 那就用这个插件 好用的很 34  Grammarly 这个是英文写作的好帮手 你在写英文的时候 它会自动帮你纠正单词和语法的错误 也强烈推荐 35 还有很多YouTube相关的扩展程序 我在YouTube教程那个视频里面有介绍 这里我就不赘述了 需要的可以移步那个视频里面去看看 36 还有很多围绕ChatGPT Claude 这些大模型开发的扩展程序 可以方便你直接调用这些大模型的API进行问答 也有的是帮你管理 和ChatGPT对话的插件 这个就太多了 你可以先行自己去搜索一下 研究一下 回头我再专门出一期这方面的视频 37 有个神器叫tampermonkey 极其牛逼\n(12:33) 这里就不方便赘述了 自己去研究一下 如果你是Windows系统 那再跟GF结合着用 能玩的就更多了 可以说啊 有了它 很多视频网站的会员都不需要了 这里我就不方便演示了啊 38 日常怎么挖掘好用的生产力扩展程序 两个路子 第一个是问GPT 有哪些生产力相关的 必装的Chrome扩展程序 让他给你列一些 第二个是去谷歌搜索 best productivity Chrome extensions 网页的内容 YouTube的视频都去看一看 肯定能够发现一些宝藏 39 关于扩展程序的管理 点击扩展程序按钮 常用的呢 你就给它固定在地址栏的右边 不常用的 你可以点击管理扩展程序 然后把它关掉 因为如果你装了几十个扩展 都开着是很耗费内存的 大可不必 不常用的就关掉 偶尔用的时候呢 你再打开 40 对于网页里的文字内容 你可以选中部分段落 右键将所选部分翻译成中文 或者把这段内容直接作为笔记 发送到笔记软件\n(13:37) 比如直接发送到flomo 那你在Flomo就能看到同步的笔记 而且还是带网址来源的 41 遇到不理解的内容 直接复制 然后opt+空格 调出电脑端GPT 然后就可以直接复制去跟他对话询问 如果遇到无法复制的内容 也没有关系 截个屏直接复制到GPT对话框 他也能识别 42 你可以直接在网页空白处右键 然后为这个网页创建一个二维码 然后就放到其他的海报 或者公众号文章里面 也很方便 43 如果是网页内的图片 也可以右键 使用谷歌搜索这个图片的出处 你就能快速的知道 这个图片最早出现在哪里 44 有些时候你想下载图片 但是这个网站他不想让你下载 比如500PX 在这个网站 你右键点击图片是没有反应的 那你可以在空白处右键 点击检查 或者直接cmd+opt+I Windows是F12 点击network IMG 点击左边的缩略图 你就能找到你想下载的图片 注意看下面\n(14:39) 分辨率大小 2048*1152 833K就是它了 这个时候你就可以右键保存了 45 如果网页内容就是PDF文档 你也可以直接下载 也可以点击演示 进行全屏 如果是横版的PDF 效果更好 46 你可以通过网页端下载抖音视频 复制这个链接 直接到这个网址 复制进去 你就可以下载无水印的视频 波了波了前面已经介绍过 用扩展就能搞定 47 如果你要下载油管的视频 目前Chrome的扩展程序都不允许了 因为YouTube和Chrome都是谷歌的 它现在不让了 你可以在www.后面输入9X 就可以直接进入下载页面 48 如果你要下载4K甚至更高清的视频 那么就直接复制网址 然后打开save.tube 粘贴进去 自动解析 然后就可以下载 49 接下来进入到谷歌生态的协同 首先你可以注册多个不同的谷歌账户 每个账户都会关联各自的Chrome YouTube Gmail 点击右上角的账户图标\n(15:43) 你可以切换不同的账户 或者右键点击程序坞里面的图标 也可以切换不同的账户 你的谷歌账号可以授权注册 登录一切网站 你不需要再注册 直接用谷歌账号授权登录就行 50 打开谷歌搜索页面 右下角有一个设置 点击搜索设置 这里有个安全搜索 这里有3个档位 第一档滤除 直接过滤掉露骨的图片文字链接 第二档模糊处理 只对画面进行模糊处理 第三档直出 显示所有的结果 你看情况处理啊 如果是工作场景经常投屏的 你可以考虑前两档 因为经常会出现一些NSFW的内容 not safe for work 我不怕我就选第三档 51 回到搜索设置 点击其他设置 下面第三个 在新窗口中打开搜索结果 这个一定要勾选 很重要你懂的 语言和地区里面呢 你可以设置搜索结果的语言偏好 以及搜索结果的区域 默认呢是当前所在区域 就是IP地址的区域 这就是为什么你搜中文 经常会出现一些日文的内容\n(16:46) 主页也会显示日本语三个字 这跟IP有关系 52 继续点击设置 这里有个高级搜索 这里可以做更精确的搜索 比如限定关键词 限定网站文件类型 时间范围等等 如果你不知道高阶的谷歌搜索语法 那你就可以用这个高级搜索 更方便 53 继续点击设置 这里有个搜索记录 点击一下 你就可以选择自动删除 超过3个月以上的搜索记录 18个月36个月都行 你可以直接点击删除 把你的搜索记录都删掉 保护自己的隐私 要留清白在人间呐 54 右上角有个谷歌应用的图标 点击一下 所有的谷歌应用都在这里 谷歌地图YouTube 谷歌新闻 Gmail邮箱 谷歌云盘 谷歌日历 谷歌翻译 还有Gemini 在线文档表格PPT keep笔记 Chrome应用商店 谷歌全家桶都在这里 可以快速的进入其他谷歌应用 55 谷歌新闻还是可以一看的 目前是英语的新闻 如果你要练习英语 不妨一看 上面有分类 商业技术 娱乐体育等等\n(17:48) 你可以点击上面的设置按钮 选择不同的语言和地区 你可以搜索中文 比如你选中文中国 这里就会有中文区的一些新闻报道 56 谷歌日历其实是个好东西 以周为单位安排自己的工作 在哪一天 哪个时间段需要做什么事 直接用鼠标滑动 选取对应的区域就好了 57 这里有个已保存 什么东西会保存到这里呢 认准这个保存图标就行 谷歌搜索的列表里面 链接后面有三个点 点击一下 你可以选择保存 你用谷歌搜索图片的时候 点击预览之后 图片的下面也有个保存的按钮 你可以点击保存 谷歌地图上面有一些地点 你也可以保存 所有保存的链接 图片地点都能在这里看到 这个就是谷歌的已保存 58 谷歌地球 我真挺喜欢玩的 你可以用它俯瞰一下你的家乡 清晰度很高 比如说我们找一下杭州亚运村 你看啊 这个杭州亚运会的标志都还很清晰 左下角显示的是2024年2月1日的卫星图 有时候如果我们要出去旅游\n(18:51) 规划线路 你就可以先用这个上帝视角看一看 59 谷歌学术是很重要的网站 我用日本IP是无法打开谷歌学术的 得用其他地区的IP 如果你也遇到相似的问题 切换一下就好了 60 分屏功能 把鼠标悬停在左上角的全屏按钮上 会弹出一个窗口拼贴选项 左右都行 点击之后可以高效的分屏处理 你可以一边浏览网页或者视频 一边整理笔记 高效学习 61 当你把Chrome设置为默认浏览器之后 cmd+空格 打开苹果电脑的聚焦搜索功能 下面有一个Chrome浏览器的按钮 意思是直接调用Chrome进行网络搜索 它会直接打开默认浏览器Chrome 然后调用默认搜索引擎谷歌 搜索关键词一步到位 62 如果你觉得Chrome浏览器真的很棒 那你可以右键单击图标 点击选项 勾选在程序坞中保留 这样的话 它就会常伴你左右 63 再介绍一些好用的快捷键 当你在谷歌搜索界面或者YouTube界面 直接按一下键盘上的斜杠键 就可以快速定位到搜索框\n(19:55) 而且是激活光标的状态 你就可以快速的输入一些内容 64 cmd+L 直接高亮地址栏 你就可以直接输入新的搜索关键词了 如果再结合前面的快捷词条 比如说输入yt 再摁一下tab键 就调用YouTube网站搜索 一套连招下来很是顺畅 65 还是要留清白在人间 cmd+shift+delete 直接进入删除浏览记录的页面 一键删除 66 也是最后一个 如果前面的技巧你都能正常操作 最后送个提醒 当你想要追剧又不想充会员的时候 不妨试试 直接搜索剧名加在线 能帮你省下不少钱 好了 以上就是关于Chrome浏览器的使用技巧 希望对您有帮助 如果您有其他妙招 欢迎在评论区留言 最后 肯定会有人在弹幕或者评论区里面说 我们打不开Chrome应用商店 我们打不开谷歌 我们有很多功能用不上 这个是贴在我家墙上的一个标语 送给你 find a way ，bro 谢谢你的时间 下个视频再见    ","source":"_posts/搜索技术，普通人变强的唯一外挂。全套详细宝藏教程.md","raw":"---\ntitle: 搜索技术，普通人变强的唯一外挂。全套详细宝藏教程\ndate: 2024-09-05T09:16:59.787Z\ntags: []\ncategories: []\n---\n**搜索技术，普通人变强的唯一外挂。全套详细宝藏教程~**\n\nAI 总结了一下：  一、搜索技术的重要性 1. 搜索技术是普通人变强的唯一外挂,可以帮助人们学习的比别人快,做的比别人好。 2. 掌握搜索技术是互联网时代获取信息的关键,可以极大程度地缩小信息差距。 二、搜索技术的分类 1. 搜索目的可分为4类:    (1) 了解信息(Know Something)    (2) 学习技能(Learn Something)     (3) 创作内容(Create Something)    (4) 完成任务(Do Something) 2. 搜索内容可分为4类:    (1) 信息资讯:新闻、事件等    (2) 知识技能:概念、教程等    (3) 素材文件:图片、视频、文档等    (4) 工具软件:各类工具、插件等 三、搜索信息资讯 1. 要快速准确,谷歌效率最高。 2. 可运用搜索语法提升效率:    (1) 限定关键词:用双引号\"\"包裹    (2) 限定标题:intitle    (3) 限定内容:intext    (4) 限定网址:inurl     (5) 限定网站:site    (6) 限定图片大小:imagesize    (7) 限定文件类型:filetype 3. 信息源头最准确可信,要注意判断来源。 四、搜索知识技能 1. 主要平台:谷歌、得到APP、优质视频网站等。 2. 注意知识质量,尽量采用一手资料。 3. 可下载研究报告、学术论文等高质量文档。 4. 视频教程可在视频网站、短视频平台获取。 五、搜索素材文件 1. 可利用免费素材网站、版权网站等。 2. 注意遵守版权,非商用基本没有风险。 3. 可用各种下载工具下载素材。 4. 需注意素材的质量、风格等符合要求。 六、搜索工具软件 1. 优先考虑在线工具。 2. 其次是软件,最后是插件。 3. 大多数需求都能找到对应的工具。 4. 可用类似网站找相似工具。 七、运用AI工具 1. ChatGPT等AI工具可直接回答问题,无需搜索。 2. 可进行追问、对比、推理等,功能强大。 3. 结合传统搜索技术和AI工具,形成超级搜索技术。 4. AI将深刻影响搜索方式,要积极运用。\n\n\n\n\n\n\n\n视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。\n\n视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。\nDetailed Summary for [一個偷偷來訪的未來人揭露我們周圍可能有很多未來人，並解釋了時間機器的原理和人類世界的真相，我們其實在一個被安排好的劇本之中，任何人都無法逃避宿命之劫 | 老高與小茉 Mr & Mrs Gao](https://www.youtube.com/watch?v=YLcz5hjqVLQ) by [Monica](https://monica.im)\n\n  [00:00](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=0) 未来人揭露时间机器的原理和人类世界的真相\n  - 提到了时间机器的原理}\n- 揭露了这个世界的真相}\n- 一个未来人在2008年7月5号早上6点45分被发现}\n      \n\n[04:05](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=245) 未来人通过时间机器回到现在体验过去的美食和建筑，感受历史的魅力\n  - 未来人将时间机器收起来，表示来旅游体验}\n- 未来人回到现在品尝过去美食，感受历史文化}\n- 未来人可以看到一些未来消失的建筑，如巴比伦的空中花园}\n      \n\n[08:10](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=490) 时间机器的原理和穿越的规则\n  - 时间越长重合越紧密，穿越可能性增加}\n- 穿越者必须活着以读取记忆}\n- 时间机器穿越范围约一百年}\n- 关系紧密的穿越方式是通过爱}\n      \n\n[12:13](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=733) 活在自己的时间节奏里，不要追逐新鲜事物\n  - 不要像机器一样活着，要像一个人一样}\n- 躺平是自我防御机制，按照自己的节奏活着}\n- 跟着自己的节奏活着，才是活着的意义}\n      \n\n[16:20](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=980) 揭示人生剧本和选择的关系\n  - 未来人揭示世界真相}\n- 人生剧本可在一定范围内自由发挥}\n- 选择对物质世界产生影响即被记录为过去}\n- 身体是过去的记载，意识是现在和未来}\n      \n\n[20:22](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1222) 行动是辨别一个人是否真的信的关键因素\n  - 喜欢与真喜欢的区别}\n- 真喜欢需要有实际行动支持}\n- 行动是改变物质世界的关键}\n      \n\n[24:26](https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1466.3999938964844) 意识的力量和未来预知能力\n  - 集体潜意识控制和拉回}\n- 每个人都具有预知未来能力}\n- 肉体过去，意识现在和未来}\n- 意识在平行宇宙中游走}\n- 能够看到未来所有情况}\n\n\n\n\n\n66个Chrome技巧，科学快乐的上网呀！ - YouTube\nhttps://www.youtube.com/watch?v=MD1XE2LBKbc\n\nTranscript:\n(00:00) 谷歌家的Chrome浏览器 就是全世界最强 电脑端占了全球65%的市场份额 中国的浏览器榜上有名的 360  QQ 加起来占了1.5% Chrome遥遥领先 这条视频分享66个Chrome的使用技巧 比如在地址栏直接@Gemini 就可以直接调用谷歌的Gemini大模型 回答你的问题 这才是真正的上网 来 一个个介绍 第一 打开Chrome浏览器会自动打开一组网页 怎么设置 点击右上角的三个点 点击底部的设置 点击左侧的启动时 你可以选择打开新标签页 我喜欢第三个 打开特定网页或者一组网页 我设置了3个 还能继续添加新网页 输入网址就行了 比如我的第二个网址 是直接到达我的b站主页 创作中心后台的 互动管理的评论管理页面 这个就极其的方便 第二 cmd+T 或者点击标签页右边的加号 打开新的标签页 点击右下角的自定义Chrome 可以设置外观和主题颜色 点击更改主题\n(01:03) 你可以选择纯色或者图片 或者上传一张自己喜欢的图片 你喜欢五条悟 那就去搜一个五条悟的高清壁纸 五条悟空格 imagesize英文冒号3840x2160 就是4K的图片 保存一张你喜欢的 然后上传 好了 你现在就有了五条悟专属高清壁纸 第三 自定义Chrome下面有个快捷方式 点开它你就可以在搜索框下面 添加一些网址的快捷访问 点击快捷方式 起个名字 比如canva 输入网址 www.canva.com 那这样就可以了 注意啊如果添加的是chatgpt的网址 GPT域名改了 没有3W点了 直接就是chatgpt.com 第四 如果你想打开新的窗口 快捷键是cmd+N 这是单开一个窗口 如果是cmd + shift + N 那就是新开一个无痕浏览窗口 无痕模式下 Chrome不会保存你的浏览记录 cookie网站数据等等 这个很有用 毕竟要留清白在人间 还有两个方法打开无痕窗口 一个是右键点击Chrome图标\n(02:06) 可以打开无痕窗口 还有点击右上角的更多 也可以打开无痕窗口 第五 点击设置 您与谷歌 同步功能和谷歌服务 管理您的同步数据 自定义同步 我一般都会同步 如果在其他设备上登录Chrome浏览器 它就会自动同步所有的信息 当然这个前提是你自己的设备 否则的话 历史记录 密码和通行密钥 这两个就别勾选了 第六 设置搜索引擎 默认是谷歌就好 这样你在搜索框里面直接输入关键词 就默认调用谷歌搜索 然后高阶玩法来了 点击管理搜索引擎和网站搜索 你还可以快捷调用其他的搜索引擎 甚至网站帮你搜索 点击编辑 可以设置快捷字词 Bing的搜索快捷字词 我设置为bing 然后结合上面的键盘快捷键Tab键 你就可以直接在地址栏 快速调用bing搜索 先在地址栏输入bing 然后摁一下tab键 就会激活Bing搜索引擎 再输入关键词 得到的就是Bing的搜索结果 第七\n(03:08) 下面还有网站搜索 默认的是可以在地址栏直接搜索 标签页历史记录 书签等等 以及调用Gemini大模型 在地址栏输入 @历史记录 然后按一下Tab键 就可以搜索历史记录 我们刚刚搜过五条悟对吧 那就输入五条悟 那关于五条悟的历史记录就出来了 @书签 tab键 输入save 这个就是我收藏的书签栏 里面的一些下载视频的网址 这个很方便 第八 @Gemini 然后Tab键 就可以直接切换到与谷歌大模型 Gemini聊天 这个太方便了 你不需要打开Gemini的网址 直接在地址栏里面问问题就行了 Chrome会自己调用Gemini回答你的问题 第九 你还可以直接激活YouTube这个网站 帮你搜索 快捷字词 自己设置 我设置的是yt 直接在地址栏里面输入yt 然后按一下Tab键 再输入关键词 就可以直接打开YouTube 并给出搜索结果 第十 点击左侧的语言设置 勾选使用下面的谷歌翻译 拉到最底端 选择简体中文\n(04:10) 这样当你看到一些英文网页的时候 你可以直接右键翻译成中文 11  点下左侧的下载内容 你可以设置浏览器的默认下载位置 并且把下面两个都勾选 每次下载前 都会询问你每个文件的保存位置 这个很重要 12 击左侧的性能设置 勾选节省内存模式 这样Chrome会释放那些闲置的网页内存 你可以点击更多 选择更多工具 打开任务管理器 这样就可以去检验一下 效果显著 13 击外观设置 先看一下这个字号和字体的设置 如果你需要录屏 默认网页的字体又比较小 你可以调节字号的大小 这个是中号 这个是特大号 对比很明显 你也可以自定义字体和大小 注意啊主要影响的是这个最小字号 尽量不要超过18 如果超过18 就会超出很多网页排版的行间距了 一般16就差不多了 14 网页缩放 不需要在这里设置啊 太麻烦了 直接调用快捷键 cmd+加减号 加就是放大\n(05:13) 减就是缩小 这样就能快速缩放 cmd+0就是直接到100% 15 最后一项是使用cmd+q 退出前先显示警告 cmd+q是Mac系统自带的 退出程序的快捷键 任何程序直接cmd+q就可以退出 那对于Chrome浏览器 还是勾选一下这个退出前的警告 避免误操作 16 关掉程序是cmd+q 关掉当前页面的快捷键是cmd+w 如果不小心关掉了 想要恢复这个页面 快捷键是cmd+shift+t 这样就可以直接恢复刚刚误操作的页面 17  勾选上面这个 标签页悬停显示内存用量 然后当你把鼠标移动到对应的标签页之后 就会显示它占用的内存 18 然后是书签栏和侧边栏 你可以选择侧边栏的显示位置 左右都行 怎么打开侧边栏 点击更多 点击书签和清单 点击显示所有书签 右边就弹出了一个侧边栏 点击右上角的图钉按钮 可以把这个侧边栏 固定在上面的工具栏里 就在你头像的左边\n(06:16) 就会出现这个书签的按钮 还有一个阅读清单也是一样的 书签和清单 点击阅读清单 显示阅读清单 也可以点击图钉按钮 把它固定在工具栏里 19 只要用浏览器 就一定会用到书签栏 cmd+shift+b就可以显示书签栏 再按一遍cmd+shift+b 就可以隐藏书签栏 20 任何网页都可以收藏到书签栏 方便你下次访问 比如这是b站 你可以点击地址栏右边星标 你就可以添加到书签栏 你可以只放到书签栏里 也可以放到具体的文件夹里 我这里收藏的太多了 已经不够它显示了 你可以把高频使用的书签 拖到靠前的位置 右键点击b站这个书签 你可以修改它 你可以把这个名称直接删掉 名称太长 太占位置 删掉之后呢 就会只保留一个logo 你认识就行 这样还省空间 21 添加书签的快捷键是cmd+d 任何网页按一下cmd+d 就可以激活书签的收藏窗口 b站你已经收藏过了\n(07:20) 星标是蓝色的 没关系再按一下cmd+d 可以二次收藏 你可以把同一个网站 收录在不同的文件夹里面 所以cmd+d比这个星标更好使 22 你可以按照工作场景或者专题 建立书签文件夹 比如我有一个文件夹叫做 做视频 当我要剪辑视频的时候 这里面的网站工具我都得用上 那我就可以直接右键点击这个文件夹 然后打开全部5个标签 这样我就不用一个个的去开网页了 23 别人的书签栏也是可以直接copy给你 cmd+option+b直接进入书签管理器 或者点击右上角的更多书签和清单 书签管理器 你也可以进入 这里你可以上下拖动书签后面的3个点 进行排序 点击右上角的3个点 你可以导出整个书签 保存为一个html的文件 这个文件不同的浏览器是通用的 Safari edge 火狐都可以的 那他们导出的书签你也可以用 你直接导入书签文件就可以了 24 当你开了很多网页之后 你可以右键单击标签页 添加分组\n(08:23) 这样他们就被折叠收纳 不至于都挤在上面 如果你勾选保存分组 那这个分组呢 就会自动收藏到书签栏 25 有些网页现在来不及看 可以右键点击标签页 添加到阅读清单 等会再看 点击前面固定在工具栏里的 阅读清单按钮 你待看的网页都在这里了 26 接下来先介绍Chrome的扩展程序extensions 然后再介绍网页内容的交互 扩展程序会极大地释放你的使用效率 Web端和电脑手机一样 都算操作系统 因为Chrome浏览器市占率是全球第一 大家都用它上网 所以全球开发者们围绕Chrome浏览器的Web OS 开发了很多好用的扩展程序 我们点击右上角的更多 点击扩展程序 访问Chrome应用商店 如果你访问不了 那就想办法 抱怨 吐槽解决不了任何问题 cmd+d 我们直接把这个应用商店的页面 收藏到书签栏 拖到最左边 这个会经常用到 基本上你常用的生产力工具 都会有Chrome插件\n(09:26) 你不妨去搜搜看 27 首先推荐的必装的扩展程序 叫沉浸式翻译 安装好之后 点击右上角的扩展程序按钮 点击固定按钮 这样它就固定出现在地址栏的右边 安装好之后 在窗口右下角会出现翻译按钮 点击一下就会自动翻译 而且是中英文对照翻译的 点击设置 你可以选择不同的翻译软件 微软的谷歌的 或者Openai Claude Gemini这些大模型的也可以 这些是收费的 当然效果肯定会更好 免费的也勉强够用了 它还能翻译文档 PDF文件论文也可以对照翻译 还有个牛逼的地方是 你在网页上输入内容 然后连续按三次空格键 就会自动帮你翻译成英文 这个太牛逼了 必须安装 28 这个扩展是similarsites开发的 类似的网站 当你在浏览某个网站的时候 它会自动把和这个网站类似的 其他网站列出来 比如b站 你点击一下 它还会列出月度访问次数 b站是10个亿左右 YouTube是310个亿\n(10:29) 如果是Pexels 那么其他的一些图片素材的网站 也都会帮你列出来 这个是发现新大陆的好东西 注意身体 29 这个扩展适合国内宝宝体质 波了波了下载助手 你懂的 安装好之后 视频就都能下载了 那为了过审我就不详细演示了 你自己去搞啊 30 这个扩展是关于鼠标手势的 叫crxmouse 安装好之后 你可以设置快捷的鼠标手势 按住右键 向左滑是后退 向右滑是前进 向上滑直接到顶 画个L 关闭页面 这些你都可以去自己设置 类似的扩展有很多你自己去研究一下 31   todoist 名字里面是没有L的 就叫todoist 安装好之后 点击一下 就可以添加一些to do list清单 可以设置截止时间和优先级 你做完了呢 你就打个勾 类似的还有番茄钟之类的 其他的扩展程序 都可以去体验一下 如果你要装滴答清单 这里提醒一下 Chrome的扩展是跟国际版的Ticktick同步的 不是跟国内版的滴答清单 这里要注意一下啊\n(11:31) 32 笔记类的扩展程序就很多了 像flomoplus Google keep  Evernote  notion 有道云笔记等等多的是 安装好之后 遇到值得保存的内容 你就可以直接选中 然后右键就能直接发送到笔记的APP 33 gofullpage 这个是用来网页长截图的扩展 如果你要截取整个网页 那就用这个插件 好用的很 34  Grammarly 这个是英文写作的好帮手 你在写英文的时候 它会自动帮你纠正单词和语法的错误 也强烈推荐 35 还有很多YouTube相关的扩展程序 我在YouTube教程那个视频里面有介绍 这里我就不赘述了 需要的可以移步那个视频里面去看看 36 还有很多围绕ChatGPT Claude 这些大模型开发的扩展程序 可以方便你直接调用这些大模型的API进行问答 也有的是帮你管理 和ChatGPT对话的插件 这个就太多了 你可以先行自己去搜索一下 研究一下 回头我再专门出一期这方面的视频 37 有个神器叫tampermonkey 极其牛逼\n(12:33) 这里就不方便赘述了 自己去研究一下 如果你是Windows系统 那再跟GF结合着用 能玩的就更多了 可以说啊 有了它 很多视频网站的会员都不需要了 这里我就不方便演示了啊 38 日常怎么挖掘好用的生产力扩展程序 两个路子 第一个是问GPT 有哪些生产力相关的 必装的Chrome扩展程序 让他给你列一些 第二个是去谷歌搜索 best productivity Chrome extensions 网页的内容 YouTube的视频都去看一看 肯定能够发现一些宝藏 39 关于扩展程序的管理 点击扩展程序按钮 常用的呢 你就给它固定在地址栏的右边 不常用的 你可以点击管理扩展程序 然后把它关掉 因为如果你装了几十个扩展 都开着是很耗费内存的 大可不必 不常用的就关掉 偶尔用的时候呢 你再打开 40 对于网页里的文字内容 你可以选中部分段落 右键将所选部分翻译成中文 或者把这段内容直接作为笔记 发送到笔记软件\n(13:37) 比如直接发送到flomo 那你在Flomo就能看到同步的笔记 而且还是带网址来源的 41 遇到不理解的内容 直接复制 然后opt+空格 调出电脑端GPT 然后就可以直接复制去跟他对话询问 如果遇到无法复制的内容 也没有关系 截个屏直接复制到GPT对话框 他也能识别 42 你可以直接在网页空白处右键 然后为这个网页创建一个二维码 然后就放到其他的海报 或者公众号文章里面 也很方便 43 如果是网页内的图片 也可以右键 使用谷歌搜索这个图片的出处 你就能快速的知道 这个图片最早出现在哪里 44 有些时候你想下载图片 但是这个网站他不想让你下载 比如500PX 在这个网站 你右键点击图片是没有反应的 那你可以在空白处右键 点击检查 或者直接cmd+opt+I Windows是F12 点击network IMG 点击左边的缩略图 你就能找到你想下载的图片 注意看下面\n(14:39) 分辨率大小 2048*1152 833K就是它了 这个时候你就可以右键保存了 45 如果网页内容就是PDF文档 你也可以直接下载 也可以点击演示 进行全屏 如果是横版的PDF 效果更好 46 你可以通过网页端下载抖音视频 复制这个链接 直接到这个网址 复制进去 你就可以下载无水印的视频 波了波了前面已经介绍过 用扩展就能搞定 47 如果你要下载油管的视频 目前Chrome的扩展程序都不允许了 因为YouTube和Chrome都是谷歌的 它现在不让了 你可以在www.后面输入9X 就可以直接进入下载页面 48 如果你要下载4K甚至更高清的视频 那么就直接复制网址 然后打开save.tube 粘贴进去 自动解析 然后就可以下载 49 接下来进入到谷歌生态的协同 首先你可以注册多个不同的谷歌账户 每个账户都会关联各自的Chrome YouTube Gmail 点击右上角的账户图标\n(15:43) 你可以切换不同的账户 或者右键点击程序坞里面的图标 也可以切换不同的账户 你的谷歌账号可以授权注册 登录一切网站 你不需要再注册 直接用谷歌账号授权登录就行 50 打开谷歌搜索页面 右下角有一个设置 点击搜索设置 这里有个安全搜索 这里有3个档位 第一档滤除 直接过滤掉露骨的图片文字链接 第二档模糊处理 只对画面进行模糊处理 第三档直出 显示所有的结果 你看情况处理啊 如果是工作场景经常投屏的 你可以考虑前两档 因为经常会出现一些NSFW的内容 not safe for work 我不怕我就选第三档 51 回到搜索设置 点击其他设置 下面第三个 在新窗口中打开搜索结果 这个一定要勾选 很重要你懂的 语言和地区里面呢 你可以设置搜索结果的语言偏好 以及搜索结果的区域 默认呢是当前所在区域 就是IP地址的区域 这就是为什么你搜中文 经常会出现一些日文的内容\n(16:46) 主页也会显示日本语三个字 这跟IP有关系 52 继续点击设置 这里有个高级搜索 这里可以做更精确的搜索 比如限定关键词 限定网站文件类型 时间范围等等 如果你不知道高阶的谷歌搜索语法 那你就可以用这个高级搜索 更方便 53 继续点击设置 这里有个搜索记录 点击一下 你就可以选择自动删除 超过3个月以上的搜索记录 18个月36个月都行 你可以直接点击删除 把你的搜索记录都删掉 保护自己的隐私 要留清白在人间呐 54 右上角有个谷歌应用的图标 点击一下 所有的谷歌应用都在这里 谷歌地图YouTube 谷歌新闻 Gmail邮箱 谷歌云盘 谷歌日历 谷歌翻译 还有Gemini 在线文档表格PPT keep笔记 Chrome应用商店 谷歌全家桶都在这里 可以快速的进入其他谷歌应用 55 谷歌新闻还是可以一看的 目前是英语的新闻 如果你要练习英语 不妨一看 上面有分类 商业技术 娱乐体育等等\n(17:48) 你可以点击上面的设置按钮 选择不同的语言和地区 你可以搜索中文 比如你选中文中国 这里就会有中文区的一些新闻报道 56 谷歌日历其实是个好东西 以周为单位安排自己的工作 在哪一天 哪个时间段需要做什么事 直接用鼠标滑动 选取对应的区域就好了 57 这里有个已保存 什么东西会保存到这里呢 认准这个保存图标就行 谷歌搜索的列表里面 链接后面有三个点 点击一下 你可以选择保存 你用谷歌搜索图片的时候 点击预览之后 图片的下面也有个保存的按钮 你可以点击保存 谷歌地图上面有一些地点 你也可以保存 所有保存的链接 图片地点都能在这里看到 这个就是谷歌的已保存 58 谷歌地球 我真挺喜欢玩的 你可以用它俯瞰一下你的家乡 清晰度很高 比如说我们找一下杭州亚运村 你看啊 这个杭州亚运会的标志都还很清晰 左下角显示的是2024年2月1日的卫星图 有时候如果我们要出去旅游\n(18:51) 规划线路 你就可以先用这个上帝视角看一看 59 谷歌学术是很重要的网站 我用日本IP是无法打开谷歌学术的 得用其他地区的IP 如果你也遇到相似的问题 切换一下就好了 60 分屏功能 把鼠标悬停在左上角的全屏按钮上 会弹出一个窗口拼贴选项 左右都行 点击之后可以高效的分屏处理 你可以一边浏览网页或者视频 一边整理笔记 高效学习 61 当你把Chrome设置为默认浏览器之后 cmd+空格 打开苹果电脑的聚焦搜索功能 下面有一个Chrome浏览器的按钮 意思是直接调用Chrome进行网络搜索 它会直接打开默认浏览器Chrome 然后调用默认搜索引擎谷歌 搜索关键词一步到位 62 如果你觉得Chrome浏览器真的很棒 那你可以右键单击图标 点击选项 勾选在程序坞中保留 这样的话 它就会常伴你左右 63 再介绍一些好用的快捷键 当你在谷歌搜索界面或者YouTube界面 直接按一下键盘上的斜杠键 就可以快速定位到搜索框\n(19:55) 而且是激活光标的状态 你就可以快速的输入一些内容 64 cmd+L 直接高亮地址栏 你就可以直接输入新的搜索关键词了 如果再结合前面的快捷词条 比如说输入yt 再摁一下tab键 就调用YouTube网站搜索 一套连招下来很是顺畅 65 还是要留清白在人间 cmd+shift+delete 直接进入删除浏览记录的页面 一键删除 66 也是最后一个 如果前面的技巧你都能正常操作 最后送个提醒 当你想要追剧又不想充会员的时候 不妨试试 直接搜索剧名加在线 能帮你省下不少钱 好了 以上就是关于Chrome浏览器的使用技巧 希望对您有帮助 如果您有其他妙招 欢迎在评论区留言 最后 肯定会有人在弹幕或者评论区里面说 我们打不开Chrome应用商店 我们打不开谷歌 我们有很多功能用不上 这个是贴在我家墙上的一个标语 送给你 find a way ，bro 谢谢你的时间 下个视频再见    ","slug":"搜索技术，普通人变强的唯一外挂。全套详细宝藏教程","published":1,"updated":"2024-11-25T11:44:04.584Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscq0030mbs6f8036b7t","content":"<p><strong>搜索技术，普通人变强的唯一外挂。全套详细宝藏教程~</strong></p>\n<p>AI 总结了一下：  一、搜索技术的重要性 1. 搜索技术是普通人变强的唯一外挂,可以帮助人们学习的比别人快,做的比别人好。 2. 掌握搜索技术是互联网时代获取信息的关键,可以极大程度地缩小信息差距。 二、搜索技术的分类 1. 搜索目的可分为4类:    (1) 了解信息(Know Something)    (2) 学习技能(Learn Something)     (3) 创作内容(Create Something)    (4) 完成任务(Do Something) 2. 搜索内容可分为4类:    (1) 信息资讯:新闻、事件等    (2) 知识技能:概念、教程等    (3) 素材文件:图片、视频、文档等    (4) 工具软件:各类工具、插件等 三、搜索信息资讯 1. 要快速准确,谷歌效率最高。 2. 可运用搜索语法提升效率:    (1) 限定关键词:用双引号””包裹    (2) 限定标题:intitle    (3) 限定内容:intext    (4) 限定网址:inurl     (5) 限定网站:site    (6) 限定图片大小:imagesize    (7) 限定文件类型:filetype 3. 信息源头最准确可信,要注意判断来源。 四、搜索知识技能 1. 主要平台:谷歌、得到APP、优质视频网站等。 2. 注意知识质量,尽量采用一手资料。 3. 可下载研究报告、学术论文等高质量文档。 4. 视频教程可在视频网站、短视频平台获取。 五、搜索素材文件 1. 可利用免费素材网站、版权网站等。 2. 注意遵守版权,非商用基本没有风险。 3. 可用各种下载工具下载素材。 4. 需注意素材的质量、风格等符合要求。 六、搜索工具软件 1. 优先考虑在线工具。 2. 其次是软件,最后是插件。 3. 大多数需求都能找到对应的工具。 4. 可用类似网站找相似工具。 七、运用AI工具 1. ChatGPT等AI工具可直接回答问题,无需搜索。 2. 可进行追问、对比、推理等,功能强大。 3. 结合传统搜索技术和AI工具,形成超级搜索技术。 4. AI将深刻影响搜索方式,要积极运用。</p>\n<p>视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。</p>\n<p>视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。<br>Detailed Summary for <a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ\">一個偷偷來訪的未來人揭露我們周圍可能有很多未來人，並解釋了時間機器的原理和人類世界的真相，我們其實在一個被安排好的劇本之中，任何人都無法逃避宿命之劫 | 老高與小茉 Mr &amp; Mrs Gao</a> by <a href=\"https://monica.im/\">Monica</a></p>\n<p>  <a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=0\">00:00</a> 未来人揭露时间机器的原理和人类世界的真相</p>\n<ul>\n<li>提到了时间机器的原理}</li>\n<li>揭露了这个世界的真相}</li>\n<li>一个未来人在2008年7月5号早上6点45分被发现}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=245\">04:05</a> 未来人通过时间机器回到现在体验过去的美食和建筑，感受历史的魅力</p>\n<ul>\n<li>未来人将时间机器收起来，表示来旅游体验}</li>\n<li>未来人回到现在品尝过去美食，感受历史文化}</li>\n<li>未来人可以看到一些未来消失的建筑，如巴比伦的空中花园}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=490\">08:10</a> 时间机器的原理和穿越的规则</p>\n<ul>\n<li>时间越长重合越紧密，穿越可能性增加}</li>\n<li>穿越者必须活着以读取记忆}</li>\n<li>时间机器穿越范围约一百年}</li>\n<li>关系紧密的穿越方式是通过爱}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=733\">12:13</a> 活在自己的时间节奏里，不要追逐新鲜事物</p>\n<ul>\n<li>不要像机器一样活着，要像一个人一样}</li>\n<li>躺平是自我防御机制，按照自己的节奏活着}</li>\n<li>跟着自己的节奏活着，才是活着的意义}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=980\">16:20</a> 揭示人生剧本和选择的关系</p>\n<ul>\n<li>未来人揭示世界真相}</li>\n<li>人生剧本可在一定范围内自由发挥}</li>\n<li>选择对物质世界产生影响即被记录为过去}</li>\n<li>身体是过去的记载，意识是现在和未来}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1222\">20:22</a> 行动是辨别一个人是否真的信的关键因素</p>\n<ul>\n<li>喜欢与真喜欢的区别}</li>\n<li>真喜欢需要有实际行动支持}</li>\n<li>行动是改变物质世界的关键}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1466.3999938964844\">24:26</a> 意识的力量和未来预知能力</p>\n<ul>\n<li>集体潜意识控制和拉回}</li>\n<li>每个人都具有预知未来能力}</li>\n<li>肉体过去，意识现在和未来}</li>\n<li>意识在平行宇宙中游走}</li>\n<li>能够看到未来所有情况}</li>\n</ul>\n<p>66个Chrome技巧，科学快乐的上网呀！ - YouTube<br><a href=\"https://www.youtube.com/watch?v=MD1XE2LBKbc\">https://www.youtube.com/watch?v=MD1XE2LBKbc</a></p>\n<p>Transcript:<br>(00:00) 谷歌家的Chrome浏览器 就是全世界最强 电脑端占了全球65%的市场份额 中国的浏览器榜上有名的 360  QQ 加起来占了1.5% Chrome遥遥领先 这条视频分享66个Chrome的使用技巧 比如在地址栏直接@Gemini 就可以直接调用谷歌的Gemini大模型 回答你的问题 这才是真正的上网 来 一个个介绍 第一 打开Chrome浏览器会自动打开一组网页 怎么设置 点击右上角的三个点 点击底部的设置 点击左侧的启动时 你可以选择打开新标签页 我喜欢第三个 打开特定网页或者一组网页 我设置了3个 还能继续添加新网页 输入网址就行了 比如我的第二个网址 是直接到达我的b站主页 创作中心后台的 互动管理的评论管理页面 这个就极其的方便 第二 cmd+T 或者点击标签页右边的加号 打开新的标签页 点击右下角的自定义Chrome 可以设置外观和主题颜色 点击更改主题<br>(01:03) 你可以选择纯色或者图片 或者上传一张自己喜欢的图片 你喜欢五条悟 那就去搜一个五条悟的高清壁纸 五条悟空格 imagesize英文冒号3840x2160 就是4K的图片 保存一张你喜欢的 然后上传 好了 你现在就有了五条悟专属高清壁纸 第三 自定义Chrome下面有个快捷方式 点开它你就可以在搜索框下面 添加一些网址的快捷访问 点击快捷方式 起个名字 比如canva 输入网址 <a href=\"http://www.canva.com/\">www.canva.com</a> 那这样就可以了 注意啊如果添加的是chatgpt的网址 GPT域名改了 没有3W点了 直接就是chatgpt.com 第四 如果你想打开新的窗口 快捷键是cmd+N 这是单开一个窗口 如果是cmd + shift + N 那就是新开一个无痕浏览窗口 无痕模式下 Chrome不会保存你的浏览记录 cookie网站数据等等 这个很有用 毕竟要留清白在人间 还有两个方法打开无痕窗口 一个是右键点击Chrome图标<br>(02:06) 可以打开无痕窗口 还有点击右上角的更多 也可以打开无痕窗口 第五 点击设置 您与谷歌 同步功能和谷歌服务 管理您的同步数据 自定义同步 我一般都会同步 如果在其他设备上登录Chrome浏览器 它就会自动同步所有的信息 当然这个前提是你自己的设备 否则的话 历史记录 密码和通行密钥 这两个就别勾选了 第六 设置搜索引擎 默认是谷歌就好 这样你在搜索框里面直接输入关键词 就默认调用谷歌搜索 然后高阶玩法来了 点击管理搜索引擎和网站搜索 你还可以快捷调用其他的搜索引擎 甚至网站帮你搜索 点击编辑 可以设置快捷字词 Bing的搜索快捷字词 我设置为bing 然后结合上面的键盘快捷键Tab键 你就可以直接在地址栏 快速调用bing搜索 先在地址栏输入bing 然后摁一下tab键 就会激活Bing搜索引擎 再输入关键词 得到的就是Bing的搜索结果 第七<br>(03:08) 下面还有网站搜索 默认的是可以在地址栏直接搜索 标签页历史记录 书签等等 以及调用Gemini大模型 在地址栏输入 @历史记录 然后按一下Tab键 就可以搜索历史记录 我们刚刚搜过五条悟对吧 那就输入五条悟 那关于五条悟的历史记录就出来了 @书签 tab键 输入save 这个就是我收藏的书签栏 里面的一些下载视频的网址 这个很方便 第八 @Gemini 然后Tab键 就可以直接切换到与谷歌大模型 Gemini聊天 这个太方便了 你不需要打开Gemini的网址 直接在地址栏里面问问题就行了 Chrome会自己调用Gemini回答你的问题 第九 你还可以直接激活YouTube这个网站 帮你搜索 快捷字词 自己设置 我设置的是yt 直接在地址栏里面输入yt 然后按一下Tab键 再输入关键词 就可以直接打开YouTube 并给出搜索结果 第十 点击左侧的语言设置 勾选使用下面的谷歌翻译 拉到最底端 选择简体中文<br>(04:10) 这样当你看到一些英文网页的时候 你可以直接右键翻译成中文 11  点下左侧的下载内容 你可以设置浏览器的默认下载位置 并且把下面两个都勾选 每次下载前 都会询问你每个文件的保存位置 这个很重要 12 击左侧的性能设置 勾选节省内存模式 这样Chrome会释放那些闲置的网页内存 你可以点击更多 选择更多工具 打开任务管理器 这样就可以去检验一下 效果显著 13 击外观设置 先看一下这个字号和字体的设置 如果你需要录屏 默认网页的字体又比较小 你可以调节字号的大小 这个是中号 这个是特大号 对比很明显 你也可以自定义字体和大小 注意啊主要影响的是这个最小字号 尽量不要超过18 如果超过18 就会超出很多网页排版的行间距了 一般16就差不多了 14 网页缩放 不需要在这里设置啊 太麻烦了 直接调用快捷键 cmd+加减号 加就是放大<br>(05:13) 减就是缩小 这样就能快速缩放 cmd+0就是直接到100% 15 最后一项是使用cmd+q 退出前先显示警告 cmd+q是Mac系统自带的 退出程序的快捷键 任何程序直接cmd+q就可以退出 那对于Chrome浏览器 还是勾选一下这个退出前的警告 避免误操作 16 关掉程序是cmd+q 关掉当前页面的快捷键是cmd+w 如果不小心关掉了 想要恢复这个页面 快捷键是cmd+shift+t 这样就可以直接恢复刚刚误操作的页面 17  勾选上面这个 标签页悬停显示内存用量 然后当你把鼠标移动到对应的标签页之后 就会显示它占用的内存 18 然后是书签栏和侧边栏 你可以选择侧边栏的显示位置 左右都行 怎么打开侧边栏 点击更多 点击书签和清单 点击显示所有书签 右边就弹出了一个侧边栏 点击右上角的图钉按钮 可以把这个侧边栏 固定在上面的工具栏里 就在你头像的左边<br>(06:16) 就会出现这个书签的按钮 还有一个阅读清单也是一样的 书签和清单 点击阅读清单 显示阅读清单 也可以点击图钉按钮 把它固定在工具栏里 19 只要用浏览器 就一定会用到书签栏 cmd+shift+b就可以显示书签栏 再按一遍cmd+shift+b 就可以隐藏书签栏 20 任何网页都可以收藏到书签栏 方便你下次访问 比如这是b站 你可以点击地址栏右边星标 你就可以添加到书签栏 你可以只放到书签栏里 也可以放到具体的文件夹里 我这里收藏的太多了 已经不够它显示了 你可以把高频使用的书签 拖到靠前的位置 右键点击b站这个书签 你可以修改它 你可以把这个名称直接删掉 名称太长 太占位置 删掉之后呢 就会只保留一个logo 你认识就行 这样还省空间 21 添加书签的快捷键是cmd+d 任何网页按一下cmd+d 就可以激活书签的收藏窗口 b站你已经收藏过了<br>(07:20) 星标是蓝色的 没关系再按一下cmd+d 可以二次收藏 你可以把同一个网站 收录在不同的文件夹里面 所以cmd+d比这个星标更好使 22 你可以按照工作场景或者专题 建立书签文件夹 比如我有一个文件夹叫做 做视频 当我要剪辑视频的时候 这里面的网站工具我都得用上 那我就可以直接右键点击这个文件夹 然后打开全部5个标签 这样我就不用一个个的去开网页了 23 别人的书签栏也是可以直接copy给你 cmd+option+b直接进入书签管理器 或者点击右上角的更多书签和清单 书签管理器 你也可以进入 这里你可以上下拖动书签后面的3个点 进行排序 点击右上角的3个点 你可以导出整个书签 保存为一个html的文件 这个文件不同的浏览器是通用的 Safari edge 火狐都可以的 那他们导出的书签你也可以用 你直接导入书签文件就可以了 24 当你开了很多网页之后 你可以右键单击标签页 添加分组<br>(08:23) 这样他们就被折叠收纳 不至于都挤在上面 如果你勾选保存分组 那这个分组呢 就会自动收藏到书签栏 25 有些网页现在来不及看 可以右键点击标签页 添加到阅读清单 等会再看 点击前面固定在工具栏里的 阅读清单按钮 你待看的网页都在这里了 26 接下来先介绍Chrome的扩展程序extensions 然后再介绍网页内容的交互 扩展程序会极大地释放你的使用效率 Web端和电脑手机一样 都算操作系统 因为Chrome浏览器市占率是全球第一 大家都用它上网 所以全球开发者们围绕Chrome浏览器的Web OS 开发了很多好用的扩展程序 我们点击右上角的更多 点击扩展程序 访问Chrome应用商店 如果你访问不了 那就想办法 抱怨 吐槽解决不了任何问题 cmd+d 我们直接把这个应用商店的页面 收藏到书签栏 拖到最左边 这个会经常用到 基本上你常用的生产力工具 都会有Chrome插件<br>(09:26) 你不妨去搜搜看 27 首先推荐的必装的扩展程序 叫沉浸式翻译 安装好之后 点击右上角的扩展程序按钮 点击固定按钮 这样它就固定出现在地址栏的右边 安装好之后 在窗口右下角会出现翻译按钮 点击一下就会自动翻译 而且是中英文对照翻译的 点击设置 你可以选择不同的翻译软件 微软的谷歌的 或者Openai Claude Gemini这些大模型的也可以 这些是收费的 当然效果肯定会更好 免费的也勉强够用了 它还能翻译文档 PDF文件论文也可以对照翻译 还有个牛逼的地方是 你在网页上输入内容 然后连续按三次空格键 就会自动帮你翻译成英文 这个太牛逼了 必须安装 28 这个扩展是similarsites开发的 类似的网站 当你在浏览某个网站的时候 它会自动把和这个网站类似的 其他网站列出来 比如b站 你点击一下 它还会列出月度访问次数 b站是10个亿左右 YouTube是310个亿<br>(10:29) 如果是Pexels 那么其他的一些图片素材的网站 也都会帮你列出来 这个是发现新大陆的好东西 注意身体 29 这个扩展适合国内宝宝体质 波了波了下载助手 你懂的 安装好之后 视频就都能下载了 那为了过审我就不详细演示了 你自己去搞啊 30 这个扩展是关于鼠标手势的 叫crxmouse 安装好之后 你可以设置快捷的鼠标手势 按住右键 向左滑是后退 向右滑是前进 向上滑直接到顶 画个L 关闭页面 这些你都可以去自己设置 类似的扩展有很多你自己去研究一下 31   todoist 名字里面是没有L的 就叫todoist 安装好之后 点击一下 就可以添加一些to do list清单 可以设置截止时间和优先级 你做完了呢 你就打个勾 类似的还有番茄钟之类的 其他的扩展程序 都可以去体验一下 如果你要装滴答清单 这里提醒一下 Chrome的扩展是跟国际版的Ticktick同步的 不是跟国内版的滴答清单 这里要注意一下啊<br>(11:31) 32 笔记类的扩展程序就很多了 像flomoplus Google keep  Evernote  notion 有道云笔记等等多的是 安装好之后 遇到值得保存的内容 你就可以直接选中 然后右键就能直接发送到笔记的APP 33 gofullpage 这个是用来网页长截图的扩展 如果你要截取整个网页 那就用这个插件 好用的很 34  Grammarly 这个是英文写作的好帮手 你在写英文的时候 它会自动帮你纠正单词和语法的错误 也强烈推荐 35 还有很多YouTube相关的扩展程序 我在YouTube教程那个视频里面有介绍 这里我就不赘述了 需要的可以移步那个视频里面去看看 36 还有很多围绕ChatGPT Claude 这些大模型开发的扩展程序 可以方便你直接调用这些大模型的API进行问答 也有的是帮你管理 和ChatGPT对话的插件 这个就太多了 你可以先行自己去搜索一下 研究一下 回头我再专门出一期这方面的视频 37 有个神器叫tampermonkey 极其牛逼<br>(12:33) 这里就不方便赘述了 自己去研究一下 如果你是Windows系统 那再跟GF结合着用 能玩的就更多了 可以说啊 有了它 很多视频网站的会员都不需要了 这里我就不方便演示了啊 38 日常怎么挖掘好用的生产力扩展程序 两个路子 第一个是问GPT 有哪些生产力相关的 必装的Chrome扩展程序 让他给你列一些 第二个是去谷歌搜索 best productivity Chrome extensions 网页的内容 YouTube的视频都去看一看 肯定能够发现一些宝藏 39 关于扩展程序的管理 点击扩展程序按钮 常用的呢 你就给它固定在地址栏的右边 不常用的 你可以点击管理扩展程序 然后把它关掉 因为如果你装了几十个扩展 都开着是很耗费内存的 大可不必 不常用的就关掉 偶尔用的时候呢 你再打开 40 对于网页里的文字内容 你可以选中部分段落 右键将所选部分翻译成中文 或者把这段内容直接作为笔记 发送到笔记软件<br>(13:37) 比如直接发送到flomo 那你在Flomo就能看到同步的笔记 而且还是带网址来源的 41 遇到不理解的内容 直接复制 然后opt+空格 调出电脑端GPT 然后就可以直接复制去跟他对话询问 如果遇到无法复制的内容 也没有关系 截个屏直接复制到GPT对话框 他也能识别 42 你可以直接在网页空白处右键 然后为这个网页创建一个二维码 然后就放到其他的海报 或者公众号文章里面 也很方便 43 如果是网页内的图片 也可以右键 使用谷歌搜索这个图片的出处 你就能快速的知道 这个图片最早出现在哪里 44 有些时候你想下载图片 但是这个网站他不想让你下载 比如500PX 在这个网站 你右键点击图片是没有反应的 那你可以在空白处右键 点击检查 或者直接cmd+opt+I Windows是F12 点击network IMG 点击左边的缩略图 你就能找到你想下载的图片 注意看下面<br>(14:39) 分辨率大小 2048*1152 833K就是它了 这个时候你就可以右键保存了 45 如果网页内容就是PDF文档 你也可以直接下载 也可以点击演示 进行全屏 如果是横版的PDF 效果更好 46 你可以通过网页端下载抖音视频 复制这个链接 直接到这个网址 复制进去 你就可以下载无水印的视频 波了波了前面已经介绍过 用扩展就能搞定 47 如果你要下载油管的视频 目前Chrome的扩展程序都不允许了 因为YouTube和Chrome都是谷歌的 它现在不让了 你可以在www.后面输入9X 就可以直接进入下载页面 48 如果你要下载4K甚至更高清的视频 那么就直接复制网址 然后打开save.tube 粘贴进去 自动解析 然后就可以下载 49 接下来进入到谷歌生态的协同 首先你可以注册多个不同的谷歌账户 每个账户都会关联各自的Chrome YouTube Gmail 点击右上角的账户图标<br>(15:43) 你可以切换不同的账户 或者右键点击程序坞里面的图标 也可以切换不同的账户 你的谷歌账号可以授权注册 登录一切网站 你不需要再注册 直接用谷歌账号授权登录就行 50 打开谷歌搜索页面 右下角有一个设置 点击搜索设置 这里有个安全搜索 这里有3个档位 第一档滤除 直接过滤掉露骨的图片文字链接 第二档模糊处理 只对画面进行模糊处理 第三档直出 显示所有的结果 你看情况处理啊 如果是工作场景经常投屏的 你可以考虑前两档 因为经常会出现一些NSFW的内容 not safe for work 我不怕我就选第三档 51 回到搜索设置 点击其他设置 下面第三个 在新窗口中打开搜索结果 这个一定要勾选 很重要你懂的 语言和地区里面呢 你可以设置搜索结果的语言偏好 以及搜索结果的区域 默认呢是当前所在区域 就是IP地址的区域 这就是为什么你搜中文 经常会出现一些日文的内容<br>(16:46) 主页也会显示日本语三个字 这跟IP有关系 52 继续点击设置 这里有个高级搜索 这里可以做更精确的搜索 比如限定关键词 限定网站文件类型 时间范围等等 如果你不知道高阶的谷歌搜索语法 那你就可以用这个高级搜索 更方便 53 继续点击设置 这里有个搜索记录 点击一下 你就可以选择自动删除 超过3个月以上的搜索记录 18个月36个月都行 你可以直接点击删除 把你的搜索记录都删掉 保护自己的隐私 要留清白在人间呐 54 右上角有个谷歌应用的图标 点击一下 所有的谷歌应用都在这里 谷歌地图YouTube 谷歌新闻 Gmail邮箱 谷歌云盘 谷歌日历 谷歌翻译 还有Gemini 在线文档表格PPT keep笔记 Chrome应用商店 谷歌全家桶都在这里 可以快速的进入其他谷歌应用 55 谷歌新闻还是可以一看的 目前是英语的新闻 如果你要练习英语 不妨一看 上面有分类 商业技术 娱乐体育等等<br>(17:48) 你可以点击上面的设置按钮 选择不同的语言和地区 你可以搜索中文 比如你选中文中国 这里就会有中文区的一些新闻报道 56 谷歌日历其实是个好东西 以周为单位安排自己的工作 在哪一天 哪个时间段需要做什么事 直接用鼠标滑动 选取对应的区域就好了 57 这里有个已保存 什么东西会保存到这里呢 认准这个保存图标就行 谷歌搜索的列表里面 链接后面有三个点 点击一下 你可以选择保存 你用谷歌搜索图片的时候 点击预览之后 图片的下面也有个保存的按钮 你可以点击保存 谷歌地图上面有一些地点 你也可以保存 所有保存的链接 图片地点都能在这里看到 这个就是谷歌的已保存 58 谷歌地球 我真挺喜欢玩的 你可以用它俯瞰一下你的家乡 清晰度很高 比如说我们找一下杭州亚运村 你看啊 这个杭州亚运会的标志都还很清晰 左下角显示的是2024年2月1日的卫星图 有时候如果我们要出去旅游<br>(18:51) 规划线路 你就可以先用这个上帝视角看一看 59 谷歌学术是很重要的网站 我用日本IP是无法打开谷歌学术的 得用其他地区的IP 如果你也遇到相似的问题 切换一下就好了 60 分屏功能 把鼠标悬停在左上角的全屏按钮上 会弹出一个窗口拼贴选项 左右都行 点击之后可以高效的分屏处理 你可以一边浏览网页或者视频 一边整理笔记 高效学习 61 当你把Chrome设置为默认浏览器之后 cmd+空格 打开苹果电脑的聚焦搜索功能 下面有一个Chrome浏览器的按钮 意思是直接调用Chrome进行网络搜索 它会直接打开默认浏览器Chrome 然后调用默认搜索引擎谷歌 搜索关键词一步到位 62 如果你觉得Chrome浏览器真的很棒 那你可以右键单击图标 点击选项 勾选在程序坞中保留 这样的话 它就会常伴你左右 63 再介绍一些好用的快捷键 当你在谷歌搜索界面或者YouTube界面 直接按一下键盘上的斜杠键 就可以快速定位到搜索框<br>(19:55) 而且是激活光标的状态 你就可以快速的输入一些内容 64 cmd+L 直接高亮地址栏 你就可以直接输入新的搜索关键词了 如果再结合前面的快捷词条 比如说输入yt 再摁一下tab键 就调用YouTube网站搜索 一套连招下来很是顺畅 65 还是要留清白在人间 cmd+shift+delete 直接进入删除浏览记录的页面 一键删除 66 也是最后一个 如果前面的技巧你都能正常操作 最后送个提醒 当你想要追剧又不想充会员的时候 不妨试试 直接搜索剧名加在线 能帮你省下不少钱 好了 以上就是关于Chrome浏览器的使用技巧 希望对您有帮助 如果您有其他妙招 欢迎在评论区留言 最后 肯定会有人在弹幕或者评论区里面说 我们打不开Chrome应用商店 我们打不开谷歌 我们有很多功能用不上 这个是贴在我家墙上的一个标语 送给你 find a way ，bro 谢谢你的时间 下个视频再见    </p>\n","excerpt":"","more":"<p><strong>搜索技术，普通人变强的唯一外挂。全套详细宝藏教程~</strong></p>\n<p>AI 总结了一下：  一、搜索技术的重要性 1. 搜索技术是普通人变强的唯一外挂,可以帮助人们学习的比别人快,做的比别人好。 2. 掌握搜索技术是互联网时代获取信息的关键,可以极大程度地缩小信息差距。 二、搜索技术的分类 1. 搜索目的可分为4类:    (1) 了解信息(Know Something)    (2) 学习技能(Learn Something)     (3) 创作内容(Create Something)    (4) 完成任务(Do Something) 2. 搜索内容可分为4类:    (1) 信息资讯:新闻、事件等    (2) 知识技能:概念、教程等    (3) 素材文件:图片、视频、文档等    (4) 工具软件:各类工具、插件等 三、搜索信息资讯 1. 要快速准确,谷歌效率最高。 2. 可运用搜索语法提升效率:    (1) 限定关键词:用双引号””包裹    (2) 限定标题:intitle    (3) 限定内容:intext    (4) 限定网址:inurl     (5) 限定网站:site    (6) 限定图片大小:imagesize    (7) 限定文件类型:filetype 3. 信息源头最准确可信,要注意判断来源。 四、搜索知识技能 1. 主要平台:谷歌、得到APP、优质视频网站等。 2. 注意知识质量,尽量采用一手资料。 3. 可下载研究报告、学术论文等高质量文档。 4. 视频教程可在视频网站、短视频平台获取。 五、搜索素材文件 1. 可利用免费素材网站、版权网站等。 2. 注意遵守版权,非商用基本没有风险。 3. 可用各种下载工具下载素材。 4. 需注意素材的质量、风格等符合要求。 六、搜索工具软件 1. 优先考虑在线工具。 2. 其次是软件,最后是插件。 3. 大多数需求都能找到对应的工具。 4. 可用类似网站找相似工具。 七、运用AI工具 1. ChatGPT等AI工具可直接回答问题,无需搜索。 2. 可进行追问、对比、推理等,功能强大。 3. 结合传统搜索技术和AI工具,形成超级搜索技术。 4. AI将深刻影响搜索方式,要积极运用。</p>\n<p>视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。</p>\n<p>视频讲述了一位未来人揭示时间旅行的原理和人类世界的真相，指出我们生活在一个被安排好的剧本中，无法逃避命运。未来人通过时间机器回到过去体验消失的事物，并强调我们每个人的生活都有一个既定的剧本，尽管有一定的自由发挥空间。视频还提到我们可以预知未来，因为意识可以在未来的所有平行宇宙中游走。<br>Detailed Summary for <a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ\">一個偷偷來訪的未來人揭露我們周圍可能有很多未來人，並解釋了時間機器的原理和人類世界的真相，我們其實在一個被安排好的劇本之中，任何人都無法逃避宿命之劫 | 老高與小茉 Mr &amp; Mrs Gao</a> by <a href=\"https://monica.im/\">Monica</a></p>\n<p>  <a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=0\">00:00</a> 未来人揭露时间机器的原理和人类世界的真相</p>\n<ul>\n<li>提到了时间机器的原理}</li>\n<li>揭露了这个世界的真相}</li>\n<li>一个未来人在2008年7月5号早上6点45分被发现}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=245\">04:05</a> 未来人通过时间机器回到现在体验过去的美食和建筑，感受历史的魅力</p>\n<ul>\n<li>未来人将时间机器收起来，表示来旅游体验}</li>\n<li>未来人回到现在品尝过去美食，感受历史文化}</li>\n<li>未来人可以看到一些未来消失的建筑，如巴比伦的空中花园}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=490\">08:10</a> 时间机器的原理和穿越的规则</p>\n<ul>\n<li>时间越长重合越紧密，穿越可能性增加}</li>\n<li>穿越者必须活着以读取记忆}</li>\n<li>时间机器穿越范围约一百年}</li>\n<li>关系紧密的穿越方式是通过爱}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=733\">12:13</a> 活在自己的时间节奏里，不要追逐新鲜事物</p>\n<ul>\n<li>不要像机器一样活着，要像一个人一样}</li>\n<li>躺平是自我防御机制，按照自己的节奏活着}</li>\n<li>跟着自己的节奏活着，才是活着的意义}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=980\">16:20</a> 揭示人生剧本和选择的关系</p>\n<ul>\n<li>未来人揭示世界真相}</li>\n<li>人生剧本可在一定范围内自由发挥}</li>\n<li>选择对物质世界产生影响即被记录为过去}</li>\n<li>身体是过去的记载，意识是现在和未来}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1222\">20:22</a> 行动是辨别一个人是否真的信的关键因素</p>\n<ul>\n<li>喜欢与真喜欢的区别}</li>\n<li>真喜欢需要有实际行动支持}</li>\n<li>行动是改变物质世界的关键}</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=YLcz5hjqVLQ&t=1466.3999938964844\">24:26</a> 意识的力量和未来预知能力</p>\n<ul>\n<li>集体潜意识控制和拉回}</li>\n<li>每个人都具有预知未来能力}</li>\n<li>肉体过去，意识现在和未来}</li>\n<li>意识在平行宇宙中游走}</li>\n<li>能够看到未来所有情况}</li>\n</ul>\n<p>66个Chrome技巧，科学快乐的上网呀！ - YouTube<br><a href=\"https://www.youtube.com/watch?v=MD1XE2LBKbc\">https://www.youtube.com/watch?v=MD1XE2LBKbc</a></p>\n<p>Transcript:<br>(00:00) 谷歌家的Chrome浏览器 就是全世界最强 电脑端占了全球65%的市场份额 中国的浏览器榜上有名的 360  QQ 加起来占了1.5% Chrome遥遥领先 这条视频分享66个Chrome的使用技巧 比如在地址栏直接@Gemini 就可以直接调用谷歌的Gemini大模型 回答你的问题 这才是真正的上网 来 一个个介绍 第一 打开Chrome浏览器会自动打开一组网页 怎么设置 点击右上角的三个点 点击底部的设置 点击左侧的启动时 你可以选择打开新标签页 我喜欢第三个 打开特定网页或者一组网页 我设置了3个 还能继续添加新网页 输入网址就行了 比如我的第二个网址 是直接到达我的b站主页 创作中心后台的 互动管理的评论管理页面 这个就极其的方便 第二 cmd+T 或者点击标签页右边的加号 打开新的标签页 点击右下角的自定义Chrome 可以设置外观和主题颜色 点击更改主题<br>(01:03) 你可以选择纯色或者图片 或者上传一张自己喜欢的图片 你喜欢五条悟 那就去搜一个五条悟的高清壁纸 五条悟空格 imagesize英文冒号3840x2160 就是4K的图片 保存一张你喜欢的 然后上传 好了 你现在就有了五条悟专属高清壁纸 第三 自定义Chrome下面有个快捷方式 点开它你就可以在搜索框下面 添加一些网址的快捷访问 点击快捷方式 起个名字 比如canva 输入网址 <a href=\"http://www.canva.com/\">www.canva.com</a> 那这样就可以了 注意啊如果添加的是chatgpt的网址 GPT域名改了 没有3W点了 直接就是chatgpt.com 第四 如果你想打开新的窗口 快捷键是cmd+N 这是单开一个窗口 如果是cmd + shift + N 那就是新开一个无痕浏览窗口 无痕模式下 Chrome不会保存你的浏览记录 cookie网站数据等等 这个很有用 毕竟要留清白在人间 还有两个方法打开无痕窗口 一个是右键点击Chrome图标<br>(02:06) 可以打开无痕窗口 还有点击右上角的更多 也可以打开无痕窗口 第五 点击设置 您与谷歌 同步功能和谷歌服务 管理您的同步数据 自定义同步 我一般都会同步 如果在其他设备上登录Chrome浏览器 它就会自动同步所有的信息 当然这个前提是你自己的设备 否则的话 历史记录 密码和通行密钥 这两个就别勾选了 第六 设置搜索引擎 默认是谷歌就好 这样你在搜索框里面直接输入关键词 就默认调用谷歌搜索 然后高阶玩法来了 点击管理搜索引擎和网站搜索 你还可以快捷调用其他的搜索引擎 甚至网站帮你搜索 点击编辑 可以设置快捷字词 Bing的搜索快捷字词 我设置为bing 然后结合上面的键盘快捷键Tab键 你就可以直接在地址栏 快速调用bing搜索 先在地址栏输入bing 然后摁一下tab键 就会激活Bing搜索引擎 再输入关键词 得到的就是Bing的搜索结果 第七<br>(03:08) 下面还有网站搜索 默认的是可以在地址栏直接搜索 标签页历史记录 书签等等 以及调用Gemini大模型 在地址栏输入 @历史记录 然后按一下Tab键 就可以搜索历史记录 我们刚刚搜过五条悟对吧 那就输入五条悟 那关于五条悟的历史记录就出来了 @书签 tab键 输入save 这个就是我收藏的书签栏 里面的一些下载视频的网址 这个很方便 第八 @Gemini 然后Tab键 就可以直接切换到与谷歌大模型 Gemini聊天 这个太方便了 你不需要打开Gemini的网址 直接在地址栏里面问问题就行了 Chrome会自己调用Gemini回答你的问题 第九 你还可以直接激活YouTube这个网站 帮你搜索 快捷字词 自己设置 我设置的是yt 直接在地址栏里面输入yt 然后按一下Tab键 再输入关键词 就可以直接打开YouTube 并给出搜索结果 第十 点击左侧的语言设置 勾选使用下面的谷歌翻译 拉到最底端 选择简体中文<br>(04:10) 这样当你看到一些英文网页的时候 你可以直接右键翻译成中文 11  点下左侧的下载内容 你可以设置浏览器的默认下载位置 并且把下面两个都勾选 每次下载前 都会询问你每个文件的保存位置 这个很重要 12 击左侧的性能设置 勾选节省内存模式 这样Chrome会释放那些闲置的网页内存 你可以点击更多 选择更多工具 打开任务管理器 这样就可以去检验一下 效果显著 13 击外观设置 先看一下这个字号和字体的设置 如果你需要录屏 默认网页的字体又比较小 你可以调节字号的大小 这个是中号 这个是特大号 对比很明显 你也可以自定义字体和大小 注意啊主要影响的是这个最小字号 尽量不要超过18 如果超过18 就会超出很多网页排版的行间距了 一般16就差不多了 14 网页缩放 不需要在这里设置啊 太麻烦了 直接调用快捷键 cmd+加减号 加就是放大<br>(05:13) 减就是缩小 这样就能快速缩放 cmd+0就是直接到100% 15 最后一项是使用cmd+q 退出前先显示警告 cmd+q是Mac系统自带的 退出程序的快捷键 任何程序直接cmd+q就可以退出 那对于Chrome浏览器 还是勾选一下这个退出前的警告 避免误操作 16 关掉程序是cmd+q 关掉当前页面的快捷键是cmd+w 如果不小心关掉了 想要恢复这个页面 快捷键是cmd+shift+t 这样就可以直接恢复刚刚误操作的页面 17  勾选上面这个 标签页悬停显示内存用量 然后当你把鼠标移动到对应的标签页之后 就会显示它占用的内存 18 然后是书签栏和侧边栏 你可以选择侧边栏的显示位置 左右都行 怎么打开侧边栏 点击更多 点击书签和清单 点击显示所有书签 右边就弹出了一个侧边栏 点击右上角的图钉按钮 可以把这个侧边栏 固定在上面的工具栏里 就在你头像的左边<br>(06:16) 就会出现这个书签的按钮 还有一个阅读清单也是一样的 书签和清单 点击阅读清单 显示阅读清单 也可以点击图钉按钮 把它固定在工具栏里 19 只要用浏览器 就一定会用到书签栏 cmd+shift+b就可以显示书签栏 再按一遍cmd+shift+b 就可以隐藏书签栏 20 任何网页都可以收藏到书签栏 方便你下次访问 比如这是b站 你可以点击地址栏右边星标 你就可以添加到书签栏 你可以只放到书签栏里 也可以放到具体的文件夹里 我这里收藏的太多了 已经不够它显示了 你可以把高频使用的书签 拖到靠前的位置 右键点击b站这个书签 你可以修改它 你可以把这个名称直接删掉 名称太长 太占位置 删掉之后呢 就会只保留一个logo 你认识就行 这样还省空间 21 添加书签的快捷键是cmd+d 任何网页按一下cmd+d 就可以激活书签的收藏窗口 b站你已经收藏过了<br>(07:20) 星标是蓝色的 没关系再按一下cmd+d 可以二次收藏 你可以把同一个网站 收录在不同的文件夹里面 所以cmd+d比这个星标更好使 22 你可以按照工作场景或者专题 建立书签文件夹 比如我有一个文件夹叫做 做视频 当我要剪辑视频的时候 这里面的网站工具我都得用上 那我就可以直接右键点击这个文件夹 然后打开全部5个标签 这样我就不用一个个的去开网页了 23 别人的书签栏也是可以直接copy给你 cmd+option+b直接进入书签管理器 或者点击右上角的更多书签和清单 书签管理器 你也可以进入 这里你可以上下拖动书签后面的3个点 进行排序 点击右上角的3个点 你可以导出整个书签 保存为一个html的文件 这个文件不同的浏览器是通用的 Safari edge 火狐都可以的 那他们导出的书签你也可以用 你直接导入书签文件就可以了 24 当你开了很多网页之后 你可以右键单击标签页 添加分组<br>(08:23) 这样他们就被折叠收纳 不至于都挤在上面 如果你勾选保存分组 那这个分组呢 就会自动收藏到书签栏 25 有些网页现在来不及看 可以右键点击标签页 添加到阅读清单 等会再看 点击前面固定在工具栏里的 阅读清单按钮 你待看的网页都在这里了 26 接下来先介绍Chrome的扩展程序extensions 然后再介绍网页内容的交互 扩展程序会极大地释放你的使用效率 Web端和电脑手机一样 都算操作系统 因为Chrome浏览器市占率是全球第一 大家都用它上网 所以全球开发者们围绕Chrome浏览器的Web OS 开发了很多好用的扩展程序 我们点击右上角的更多 点击扩展程序 访问Chrome应用商店 如果你访问不了 那就想办法 抱怨 吐槽解决不了任何问题 cmd+d 我们直接把这个应用商店的页面 收藏到书签栏 拖到最左边 这个会经常用到 基本上你常用的生产力工具 都会有Chrome插件<br>(09:26) 你不妨去搜搜看 27 首先推荐的必装的扩展程序 叫沉浸式翻译 安装好之后 点击右上角的扩展程序按钮 点击固定按钮 这样它就固定出现在地址栏的右边 安装好之后 在窗口右下角会出现翻译按钮 点击一下就会自动翻译 而且是中英文对照翻译的 点击设置 你可以选择不同的翻译软件 微软的谷歌的 或者Openai Claude Gemini这些大模型的也可以 这些是收费的 当然效果肯定会更好 免费的也勉强够用了 它还能翻译文档 PDF文件论文也可以对照翻译 还有个牛逼的地方是 你在网页上输入内容 然后连续按三次空格键 就会自动帮你翻译成英文 这个太牛逼了 必须安装 28 这个扩展是similarsites开发的 类似的网站 当你在浏览某个网站的时候 它会自动把和这个网站类似的 其他网站列出来 比如b站 你点击一下 它还会列出月度访问次数 b站是10个亿左右 YouTube是310个亿<br>(10:29) 如果是Pexels 那么其他的一些图片素材的网站 也都会帮你列出来 这个是发现新大陆的好东西 注意身体 29 这个扩展适合国内宝宝体质 波了波了下载助手 你懂的 安装好之后 视频就都能下载了 那为了过审我就不详细演示了 你自己去搞啊 30 这个扩展是关于鼠标手势的 叫crxmouse 安装好之后 你可以设置快捷的鼠标手势 按住右键 向左滑是后退 向右滑是前进 向上滑直接到顶 画个L 关闭页面 这些你都可以去自己设置 类似的扩展有很多你自己去研究一下 31   todoist 名字里面是没有L的 就叫todoist 安装好之后 点击一下 就可以添加一些to do list清单 可以设置截止时间和优先级 你做完了呢 你就打个勾 类似的还有番茄钟之类的 其他的扩展程序 都可以去体验一下 如果你要装滴答清单 这里提醒一下 Chrome的扩展是跟国际版的Ticktick同步的 不是跟国内版的滴答清单 这里要注意一下啊<br>(11:31) 32 笔记类的扩展程序就很多了 像flomoplus Google keep  Evernote  notion 有道云笔记等等多的是 安装好之后 遇到值得保存的内容 你就可以直接选中 然后右键就能直接发送到笔记的APP 33 gofullpage 这个是用来网页长截图的扩展 如果你要截取整个网页 那就用这个插件 好用的很 34  Grammarly 这个是英文写作的好帮手 你在写英文的时候 它会自动帮你纠正单词和语法的错误 也强烈推荐 35 还有很多YouTube相关的扩展程序 我在YouTube教程那个视频里面有介绍 这里我就不赘述了 需要的可以移步那个视频里面去看看 36 还有很多围绕ChatGPT Claude 这些大模型开发的扩展程序 可以方便你直接调用这些大模型的API进行问答 也有的是帮你管理 和ChatGPT对话的插件 这个就太多了 你可以先行自己去搜索一下 研究一下 回头我再专门出一期这方面的视频 37 有个神器叫tampermonkey 极其牛逼<br>(12:33) 这里就不方便赘述了 自己去研究一下 如果你是Windows系统 那再跟GF结合着用 能玩的就更多了 可以说啊 有了它 很多视频网站的会员都不需要了 这里我就不方便演示了啊 38 日常怎么挖掘好用的生产力扩展程序 两个路子 第一个是问GPT 有哪些生产力相关的 必装的Chrome扩展程序 让他给你列一些 第二个是去谷歌搜索 best productivity Chrome extensions 网页的内容 YouTube的视频都去看一看 肯定能够发现一些宝藏 39 关于扩展程序的管理 点击扩展程序按钮 常用的呢 你就给它固定在地址栏的右边 不常用的 你可以点击管理扩展程序 然后把它关掉 因为如果你装了几十个扩展 都开着是很耗费内存的 大可不必 不常用的就关掉 偶尔用的时候呢 你再打开 40 对于网页里的文字内容 你可以选中部分段落 右键将所选部分翻译成中文 或者把这段内容直接作为笔记 发送到笔记软件<br>(13:37) 比如直接发送到flomo 那你在Flomo就能看到同步的笔记 而且还是带网址来源的 41 遇到不理解的内容 直接复制 然后opt+空格 调出电脑端GPT 然后就可以直接复制去跟他对话询问 如果遇到无法复制的内容 也没有关系 截个屏直接复制到GPT对话框 他也能识别 42 你可以直接在网页空白处右键 然后为这个网页创建一个二维码 然后就放到其他的海报 或者公众号文章里面 也很方便 43 如果是网页内的图片 也可以右键 使用谷歌搜索这个图片的出处 你就能快速的知道 这个图片最早出现在哪里 44 有些时候你想下载图片 但是这个网站他不想让你下载 比如500PX 在这个网站 你右键点击图片是没有反应的 那你可以在空白处右键 点击检查 或者直接cmd+opt+I Windows是F12 点击network IMG 点击左边的缩略图 你就能找到你想下载的图片 注意看下面<br>(14:39) 分辨率大小 2048*1152 833K就是它了 这个时候你就可以右键保存了 45 如果网页内容就是PDF文档 你也可以直接下载 也可以点击演示 进行全屏 如果是横版的PDF 效果更好 46 你可以通过网页端下载抖音视频 复制这个链接 直接到这个网址 复制进去 你就可以下载无水印的视频 波了波了前面已经介绍过 用扩展就能搞定 47 如果你要下载油管的视频 目前Chrome的扩展程序都不允许了 因为YouTube和Chrome都是谷歌的 它现在不让了 你可以在www.后面输入9X 就可以直接进入下载页面 48 如果你要下载4K甚至更高清的视频 那么就直接复制网址 然后打开save.tube 粘贴进去 自动解析 然后就可以下载 49 接下来进入到谷歌生态的协同 首先你可以注册多个不同的谷歌账户 每个账户都会关联各自的Chrome YouTube Gmail 点击右上角的账户图标<br>(15:43) 你可以切换不同的账户 或者右键点击程序坞里面的图标 也可以切换不同的账户 你的谷歌账号可以授权注册 登录一切网站 你不需要再注册 直接用谷歌账号授权登录就行 50 打开谷歌搜索页面 右下角有一个设置 点击搜索设置 这里有个安全搜索 这里有3个档位 第一档滤除 直接过滤掉露骨的图片文字链接 第二档模糊处理 只对画面进行模糊处理 第三档直出 显示所有的结果 你看情况处理啊 如果是工作场景经常投屏的 你可以考虑前两档 因为经常会出现一些NSFW的内容 not safe for work 我不怕我就选第三档 51 回到搜索设置 点击其他设置 下面第三个 在新窗口中打开搜索结果 这个一定要勾选 很重要你懂的 语言和地区里面呢 你可以设置搜索结果的语言偏好 以及搜索结果的区域 默认呢是当前所在区域 就是IP地址的区域 这就是为什么你搜中文 经常会出现一些日文的内容<br>(16:46) 主页也会显示日本语三个字 这跟IP有关系 52 继续点击设置 这里有个高级搜索 这里可以做更精确的搜索 比如限定关键词 限定网站文件类型 时间范围等等 如果你不知道高阶的谷歌搜索语法 那你就可以用这个高级搜索 更方便 53 继续点击设置 这里有个搜索记录 点击一下 你就可以选择自动删除 超过3个月以上的搜索记录 18个月36个月都行 你可以直接点击删除 把你的搜索记录都删掉 保护自己的隐私 要留清白在人间呐 54 右上角有个谷歌应用的图标 点击一下 所有的谷歌应用都在这里 谷歌地图YouTube 谷歌新闻 Gmail邮箱 谷歌云盘 谷歌日历 谷歌翻译 还有Gemini 在线文档表格PPT keep笔记 Chrome应用商店 谷歌全家桶都在这里 可以快速的进入其他谷歌应用 55 谷歌新闻还是可以一看的 目前是英语的新闻 如果你要练习英语 不妨一看 上面有分类 商业技术 娱乐体育等等<br>(17:48) 你可以点击上面的设置按钮 选择不同的语言和地区 你可以搜索中文 比如你选中文中国 这里就会有中文区的一些新闻报道 56 谷歌日历其实是个好东西 以周为单位安排自己的工作 在哪一天 哪个时间段需要做什么事 直接用鼠标滑动 选取对应的区域就好了 57 这里有个已保存 什么东西会保存到这里呢 认准这个保存图标就行 谷歌搜索的列表里面 链接后面有三个点 点击一下 你可以选择保存 你用谷歌搜索图片的时候 点击预览之后 图片的下面也有个保存的按钮 你可以点击保存 谷歌地图上面有一些地点 你也可以保存 所有保存的链接 图片地点都能在这里看到 这个就是谷歌的已保存 58 谷歌地球 我真挺喜欢玩的 你可以用它俯瞰一下你的家乡 清晰度很高 比如说我们找一下杭州亚运村 你看啊 这个杭州亚运会的标志都还很清晰 左下角显示的是2024年2月1日的卫星图 有时候如果我们要出去旅游<br>(18:51) 规划线路 你就可以先用这个上帝视角看一看 59 谷歌学术是很重要的网站 我用日本IP是无法打开谷歌学术的 得用其他地区的IP 如果你也遇到相似的问题 切换一下就好了 60 分屏功能 把鼠标悬停在左上角的全屏按钮上 会弹出一个窗口拼贴选项 左右都行 点击之后可以高效的分屏处理 你可以一边浏览网页或者视频 一边整理笔记 高效学习 61 当你把Chrome设置为默认浏览器之后 cmd+空格 打开苹果电脑的聚焦搜索功能 下面有一个Chrome浏览器的按钮 意思是直接调用Chrome进行网络搜索 它会直接打开默认浏览器Chrome 然后调用默认搜索引擎谷歌 搜索关键词一步到位 62 如果你觉得Chrome浏览器真的很棒 那你可以右键单击图标 点击选项 勾选在程序坞中保留 这样的话 它就会常伴你左右 63 再介绍一些好用的快捷键 当你在谷歌搜索界面或者YouTube界面 直接按一下键盘上的斜杠键 就可以快速定位到搜索框<br>(19:55) 而且是激活光标的状态 你就可以快速的输入一些内容 64 cmd+L 直接高亮地址栏 你就可以直接输入新的搜索关键词了 如果再结合前面的快捷词条 比如说输入yt 再摁一下tab键 就调用YouTube网站搜索 一套连招下来很是顺畅 65 还是要留清白在人间 cmd+shift+delete 直接进入删除浏览记录的页面 一键删除 66 也是最后一个 如果前面的技巧你都能正常操作 最后送个提醒 当你想要追剧又不想充会员的时候 不妨试试 直接搜索剧名加在线 能帮你省下不少钱 好了 以上就是关于Chrome浏览器的使用技巧 希望对您有帮助 如果您有其他妙招 欢迎在评论区留言 最后 肯定会有人在弹幕或者评论区里面说 我们打不开Chrome应用商店 我们打不开谷歌 我们有很多功能用不上 这个是贴在我家墙上的一个标语 送给你 find a way ，bro 谢谢你的时间 下个视频再见    </p>\n"},{"title":"提交网站到搜索引擎","date":"2024-09-06T06:21:02.924Z","_content":"让你的网站被别人通过搜索引擎找到，主要是通过 **搜索引擎优化（SEO）** 和 **搜索引擎收录** 来实现。以下是详细的步骤和方法：\n\n### 1. **提交网站到搜索引擎**\n首先，你需要主动向主要的搜索引擎提交你的网站，确保它们能够发现并收录你的网站。\n\n#### 1.1 提交到 Google\n1. **使用 Google Search Console**：\n   - 访问 [Google Search Console](https://search.google.com/search-console)。\n   - 登录或创建 Google 账号。\n   - 添加你的网站并验证网站的所有权（可以通过 DNS、HTML 文件、Google Analytics 等方式验证）。\n   - 提交你的网站地图（Sitemap），帮助 Google 知道网站结构。\n\n   网站地图通常是一个 `sitemap.xml` 文件，包含你网站的 URL。如果你使用 VuePress 或其他静态网站生成工具，可以通过插件或手动生成这个文件。\n   \n   生成完成后，提交 Sitemap 路径，比如：\n   ```\n   https://example.com/sitemap.xml\n   ```\n\n#### 1.2 提交到 Bing 和其他搜索引擎\n1. **Bing Webmaster Tools**：\n   - 访问 [Bing Webmaster](https://www.bing.com/webmasters)。\n   - 添加并验证你的网站，类似 Google Search Console 的步骤。\n   \n2. **其他搜索引擎**：\n   - 虽然 Google 和 Bing 是最主要的搜索引擎，但如果你还想在其他地方展示你的网站，可以考虑向 Yahoo、DuckDuckGo、Yandex 等提交网站。\n\n### 2. **优化 SEO（搜索引擎优化）**\nSEO 是为了提高网站在搜索结果中的排名，确保搜索引擎可以更好地理解你网站的内容。\n\n#### 2.1 使用正确的 HTML 结构和标签\n- **Title 标签**：每个页面都应该有独特的 `<title>` 标签，清晰描述该页面的内容。\n  ```html\n  <title>我的博客 - Java 学习笔记</title>\n  ```\n- **Meta 描述**：使用 `<meta name=\"description\" content=\"描述页面的内容\">` 来提供简洁的页面描述，这段描述可能会在搜索结果中显示。\n  ```html\n  <meta name=\"description\" content=\"这是一个关于 Java 编程的博客，提供教程、代码示例等。\">\n  ```\n- **Heading 标签**：使用 `<h1>`、`<h2>` 等标签来结构化你的页面，使搜索引擎更容易理解内容的层次和重点。\n  ```html\n  <h1>Java 编程入门教程</h1>\n  <h2>基础知识</h2>\n  ```\n\n#### 2.2 关键词优化\n- 确定你想让用户通过哪些关键词找到你的网站，比如 \"Java 教程\"、\"Vue.js 教程\"。\n- 在页面内容中合理地使用这些关键词，但要避免过度堆砌，以确保自然阅读体验。\n\n#### 2.3 内部链接和外部链接\n- **内部链接**：在网站内部的页面之间建立链接（例如：在文章中链接到相关内容），有助于提升网站结构的清晰度。\n- **外部链接**：在网站中引用高质量的外部资源，也能增加页面的权威性。\n\n#### 2.4 增加 HTTPS 支持\n确保你的网站使用 HTTPS，这不仅对 SEO 有帮助，还能提升用户的安全性。大多数搜索引擎都会优先展示 HTTPS 网站。\n\n### 3. **提高网站的内容质量**\n搜索引擎偏好高质量、有价值的内容，因此，定期更新网站内容、发布有用的信息是 SEO 成功的关键。\n\n#### 3.1 创建高质量的内容\n- 发布原创的、有吸引力的文章或页面。\n- 确保内容解决用户的问题或提供他们所需要的信息。\n\n#### 3.2 使用图片和多媒体\n- 添加相关的图片、视频等多媒体内容，吸引用户并延长访问时间。记得给图片添加合适的 `alt` 标签，帮助搜索引擎理解图片内容。\n  ```html\n  <img src=\"java-guide.png\" alt=\"Java 学习指南\">\n  ```\n\n### 4. **提升网站的速度和移动端优化**\n- **页面加载速度**：搜索引擎会优先排名加载速度快的网站。你可以使用工具如 [Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/) 来检测网站的速度，并根据建议进行优化（如压缩图片、使用缓存等）。\n- **移动端优化**：确保你的网站在移动设备上表现良好，这是一个非常重要的排名因素。使用响应式设计（Responsive Design）来适应不同的屏幕大小。\n\n### 5. **获取反向链接**\n反向链接（Backlinks）是指其他网站链接到你的网站。高质量的反向链接会显著提升你在搜索引擎中的排名。\n\n- **分享内容**：在社交媒体、博客平台、论坛等地方分享你网站的内容，鼓励别人引用和链接。\n- **与其他网站合作**：与相关领域的网站合作，交换链接或做访客文章，提升你的网站曝光。\n\n### 6. **定期监控和分析**\n使用 **Google Analytics** 和 **Google Search Console** 等工具，定期监控网站的流量、访问来源以及搜索表现，分析用户行为并优化你的 SEO 策略。\n\n---\n\n### 总结\n1. 提交网站到搜索引擎（如 Google Search Console 和 Bing Webmaster Tools）。\n2. 使用正确的 HTML 结构，优化关键词、标题和描述。\n3. 创建高质量的内容，并与相关关键词相关联。\n4. 确保网站速度快且移动端友好。\n5. 通过外部链接和社交媒体增加曝光率。\n6. 定期使用分析工具监控网站的表现，调整优化策略。\n\n通过以上步骤，可以大大提升你的网站在搜索引擎中的可见性。","source":"_posts/提交网站到搜索引擎.md","raw":"---\ntitle: 提交网站到搜索引擎\ndate: 2024-09-06T14:21:02.924Z\ntags: []\ncategories: []\n---\n让你的网站被别人通过搜索引擎找到，主要是通过 **搜索引擎优化（SEO）** 和 **搜索引擎收录** 来实现。以下是详细的步骤和方法：\n\n### 1. **提交网站到搜索引擎**\n首先，你需要主动向主要的搜索引擎提交你的网站，确保它们能够发现并收录你的网站。\n\n#### 1.1 提交到 Google\n1. **使用 Google Search Console**：\n   - 访问 [Google Search Console](https://search.google.com/search-console)。\n   - 登录或创建 Google 账号。\n   - 添加你的网站并验证网站的所有权（可以通过 DNS、HTML 文件、Google Analytics 等方式验证）。\n   - 提交你的网站地图（Sitemap），帮助 Google 知道网站结构。\n\n   网站地图通常是一个 `sitemap.xml` 文件，包含你网站的 URL。如果你使用 VuePress 或其他静态网站生成工具，可以通过插件或手动生成这个文件。\n   \n   生成完成后，提交 Sitemap 路径，比如：\n   ```\n   https://example.com/sitemap.xml\n   ```\n\n#### 1.2 提交到 Bing 和其他搜索引擎\n1. **Bing Webmaster Tools**：\n   - 访问 [Bing Webmaster](https://www.bing.com/webmasters)。\n   - 添加并验证你的网站，类似 Google Search Console 的步骤。\n   \n2. **其他搜索引擎**：\n   - 虽然 Google 和 Bing 是最主要的搜索引擎，但如果你还想在其他地方展示你的网站，可以考虑向 Yahoo、DuckDuckGo、Yandex 等提交网站。\n\n### 2. **优化 SEO（搜索引擎优化）**\nSEO 是为了提高网站在搜索结果中的排名，确保搜索引擎可以更好地理解你网站的内容。\n\n#### 2.1 使用正确的 HTML 结构和标签\n- **Title 标签**：每个页面都应该有独特的 `<title>` 标签，清晰描述该页面的内容。\n  ```html\n  <title>我的博客 - Java 学习笔记</title>\n  ```\n- **Meta 描述**：使用 `<meta name=\"description\" content=\"描述页面的内容\">` 来提供简洁的页面描述，这段描述可能会在搜索结果中显示。\n  ```html\n  <meta name=\"description\" content=\"这是一个关于 Java 编程的博客，提供教程、代码示例等。\">\n  ```\n- **Heading 标签**：使用 `<h1>`、`<h2>` 等标签来结构化你的页面，使搜索引擎更容易理解内容的层次和重点。\n  ```html\n  <h1>Java 编程入门教程</h1>\n  <h2>基础知识</h2>\n  ```\n\n#### 2.2 关键词优化\n- 确定你想让用户通过哪些关键词找到你的网站，比如 \"Java 教程\"、\"Vue.js 教程\"。\n- 在页面内容中合理地使用这些关键词，但要避免过度堆砌，以确保自然阅读体验。\n\n#### 2.3 内部链接和外部链接\n- **内部链接**：在网站内部的页面之间建立链接（例如：在文章中链接到相关内容），有助于提升网站结构的清晰度。\n- **外部链接**：在网站中引用高质量的外部资源，也能增加页面的权威性。\n\n#### 2.4 增加 HTTPS 支持\n确保你的网站使用 HTTPS，这不仅对 SEO 有帮助，还能提升用户的安全性。大多数搜索引擎都会优先展示 HTTPS 网站。\n\n### 3. **提高网站的内容质量**\n搜索引擎偏好高质量、有价值的内容，因此，定期更新网站内容、发布有用的信息是 SEO 成功的关键。\n\n#### 3.1 创建高质量的内容\n- 发布原创的、有吸引力的文章或页面。\n- 确保内容解决用户的问题或提供他们所需要的信息。\n\n#### 3.2 使用图片和多媒体\n- 添加相关的图片、视频等多媒体内容，吸引用户并延长访问时间。记得给图片添加合适的 `alt` 标签，帮助搜索引擎理解图片内容。\n  ```html\n  <img src=\"java-guide.png\" alt=\"Java 学习指南\">\n  ```\n\n### 4. **提升网站的速度和移动端优化**\n- **页面加载速度**：搜索引擎会优先排名加载速度快的网站。你可以使用工具如 [Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/) 来检测网站的速度，并根据建议进行优化（如压缩图片、使用缓存等）。\n- **移动端优化**：确保你的网站在移动设备上表现良好，这是一个非常重要的排名因素。使用响应式设计（Responsive Design）来适应不同的屏幕大小。\n\n### 5. **获取反向链接**\n反向链接（Backlinks）是指其他网站链接到你的网站。高质量的反向链接会显著提升你在搜索引擎中的排名。\n\n- **分享内容**：在社交媒体、博客平台、论坛等地方分享你网站的内容，鼓励别人引用和链接。\n- **与其他网站合作**：与相关领域的网站合作，交换链接或做访客文章，提升你的网站曝光。\n\n### 6. **定期监控和分析**\n使用 **Google Analytics** 和 **Google Search Console** 等工具，定期监控网站的流量、访问来源以及搜索表现，分析用户行为并优化你的 SEO 策略。\n\n---\n\n### 总结\n1. 提交网站到搜索引擎（如 Google Search Console 和 Bing Webmaster Tools）。\n2. 使用正确的 HTML 结构，优化关键词、标题和描述。\n3. 创建高质量的内容，并与相关关键词相关联。\n4. 确保网站速度快且移动端友好。\n5. 通过外部链接和社交媒体增加曝光率。\n6. 定期使用分析工具监控网站的表现，调整优化策略。\n\n通过以上步骤，可以大大提升你的网站在搜索引擎中的可见性。","slug":"提交网站到搜索引擎","published":1,"updated":"2024-11-25T11:44:04.578Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscq0031mbs6cztj9mas","content":"<p>让你的网站被别人通过搜索引擎找到，主要是通过 <strong>搜索引擎优化（SEO）</strong> 和 <strong>搜索引擎收录</strong> 来实现。以下是详细的步骤和方法：</p>\n<h3 id=\"1-提交网站到搜索引擎\"><a href=\"#1-提交网站到搜索引擎\" class=\"headerlink\" title=\"1. 提交网站到搜索引擎\"></a>1. <strong>提交网站到搜索引擎</strong></h3><p>首先，你需要主动向主要的搜索引擎提交你的网站，确保它们能够发现并收录你的网站。</p>\n<h4 id=\"1-1-提交到-Google\"><a href=\"#1-1-提交到-Google\" class=\"headerlink\" title=\"1.1 提交到 Google\"></a>1.1 提交到 Google</h4><ol>\n<li><p><strong>使用 Google Search Console</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://search.google.com/search-console\">Google Search Console</a>。</li>\n<li>登录或创建 Google 账号。</li>\n<li>添加你的网站并验证网站的所有权（可以通过 DNS、HTML 文件、Google Analytics 等方式验证）。</li>\n<li>提交你的网站地图（Sitemap），帮助 Google 知道网站结构。</li>\n</ul>\n<p>网站地图通常是一个 <code>sitemap.xml</code> 文件，包含你网站的 URL。如果你使用 VuePress 或其他静态网站生成工具，可以通过插件或手动生成这个文件。</p>\n<p>生成完成后，提交 Sitemap 路径，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/sitemap.xml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"1-2-提交到-Bing-和其他搜索引擎\"><a href=\"#1-2-提交到-Bing-和其他搜索引擎\" class=\"headerlink\" title=\"1.2 提交到 Bing 和其他搜索引擎\"></a>1.2 提交到 Bing 和其他搜索引擎</h4><ol>\n<li><p><strong>Bing Webmaster Tools</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.bing.com/webmasters\">Bing Webmaster</a>。</li>\n<li>添加并验证你的网站，类似 Google Search Console 的步骤。</li>\n</ul>\n</li>\n<li><p><strong>其他搜索引擎</strong>：</p>\n<ul>\n<li>虽然 Google 和 Bing 是最主要的搜索引擎，但如果你还想在其他地方展示你的网站，可以考虑向 Yahoo、DuckDuckGo、Yandex 等提交网站。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-优化-SEO（搜索引擎优化）\"><a href=\"#2-优化-SEO（搜索引擎优化）\" class=\"headerlink\" title=\"2. 优化 SEO（搜索引擎优化）\"></a>2. <strong>优化 SEO（搜索引擎优化）</strong></h3><p>SEO 是为了提高网站在搜索结果中的排名，确保搜索引擎可以更好地理解你网站的内容。</p>\n<h4 id=\"2-1-使用正确的-HTML-结构和标签\"><a href=\"#2-1-使用正确的-HTML-结构和标签\" class=\"headerlink\" title=\"2.1 使用正确的 HTML 结构和标签\"></a>2.1 使用正确的 HTML 结构和标签</h4><ul>\n<li><strong>Title 标签</strong>：每个页面都应该有独特的 <code>&lt;title&gt;</code> 标签，清晰描述该页面的内容。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>我的博客 - Java 学习笔记<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>Meta 描述</strong>：使用 <code>&lt;meta name=&quot;description&quot; content=&quot;描述页面的内容&quot;&gt;</code> 来提供简洁的页面描述，这段描述可能会在搜索结果中显示。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;这是一个关于 Java 编程的博客，提供教程、代码示例等。&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>Heading 标签</strong>：使用 <code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code> 等标签来结构化你的页面，使搜索引擎更容易理解内容的层次和重点。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Java 编程入门教程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>基础知识<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-2-关键词优化\"><a href=\"#2-2-关键词优化\" class=\"headerlink\" title=\"2.2 关键词优化\"></a>2.2 关键词优化</h4><ul>\n<li>确定你想让用户通过哪些关键词找到你的网站，比如 “Java 教程”、”Vue.js 教程”。</li>\n<li>在页面内容中合理地使用这些关键词，但要避免过度堆砌，以确保自然阅读体验。</li>\n</ul>\n<h4 id=\"2-3-内部链接和外部链接\"><a href=\"#2-3-内部链接和外部链接\" class=\"headerlink\" title=\"2.3 内部链接和外部链接\"></a>2.3 内部链接和外部链接</h4><ul>\n<li><strong>内部链接</strong>：在网站内部的页面之间建立链接（例如：在文章中链接到相关内容），有助于提升网站结构的清晰度。</li>\n<li><strong>外部链接</strong>：在网站中引用高质量的外部资源，也能增加页面的权威性。</li>\n</ul>\n<h4 id=\"2-4-增加-HTTPS-支持\"><a href=\"#2-4-增加-HTTPS-支持\" class=\"headerlink\" title=\"2.4 增加 HTTPS 支持\"></a>2.4 增加 HTTPS 支持</h4><p>确保你的网站使用 HTTPS，这不仅对 SEO 有帮助，还能提升用户的安全性。大多数搜索引擎都会优先展示 HTTPS 网站。</p>\n<h3 id=\"3-提高网站的内容质量\"><a href=\"#3-提高网站的内容质量\" class=\"headerlink\" title=\"3. 提高网站的内容质量\"></a>3. <strong>提高网站的内容质量</strong></h3><p>搜索引擎偏好高质量、有价值的内容，因此，定期更新网站内容、发布有用的信息是 SEO 成功的关键。</p>\n<h4 id=\"3-1-创建高质量的内容\"><a href=\"#3-1-创建高质量的内容\" class=\"headerlink\" title=\"3.1 创建高质量的内容\"></a>3.1 创建高质量的内容</h4><ul>\n<li>发布原创的、有吸引力的文章或页面。</li>\n<li>确保内容解决用户的问题或提供他们所需要的信息。</li>\n</ul>\n<h4 id=\"3-2-使用图片和多媒体\"><a href=\"#3-2-使用图片和多媒体\" class=\"headerlink\" title=\"3.2 使用图片和多媒体\"></a>3.2 使用图片和多媒体</h4><ul>\n<li>添加相关的图片、视频等多媒体内容，吸引用户并延长访问时间。记得给图片添加合适的 <code>alt</code> 标签，帮助搜索引擎理解图片内容。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;java-guide.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Java 学习指南&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-提升网站的速度和移动端优化\"><a href=\"#4-提升网站的速度和移动端优化\" class=\"headerlink\" title=\"4. 提升网站的速度和移动端优化\"></a>4. <strong>提升网站的速度和移动端优化</strong></h3><ul>\n<li><strong>页面加载速度</strong>：搜索引擎会优先排名加载速度快的网站。你可以使用工具如 <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Google PageSpeed Insights</a> 来检测网站的速度，并根据建议进行优化（如压缩图片、使用缓存等）。</li>\n<li><strong>移动端优化</strong>：确保你的网站在移动设备上表现良好，这是一个非常重要的排名因素。使用响应式设计（Responsive Design）来适应不同的屏幕大小。</li>\n</ul>\n<h3 id=\"5-获取反向链接\"><a href=\"#5-获取反向链接\" class=\"headerlink\" title=\"5. 获取反向链接\"></a>5. <strong>获取反向链接</strong></h3><p>反向链接（Backlinks）是指其他网站链接到你的网站。高质量的反向链接会显著提升你在搜索引擎中的排名。</p>\n<ul>\n<li><strong>分享内容</strong>：在社交媒体、博客平台、论坛等地方分享你网站的内容，鼓励别人引用和链接。</li>\n<li><strong>与其他网站合作</strong>：与相关领域的网站合作，交换链接或做访客文章，提升你的网站曝光。</li>\n</ul>\n<h3 id=\"6-定期监控和分析\"><a href=\"#6-定期监控和分析\" class=\"headerlink\" title=\"6. 定期监控和分析\"></a>6. <strong>定期监控和分析</strong></h3><p>使用 <strong>Google Analytics</strong> 和 <strong>Google Search Console</strong> 等工具，定期监控网站的流量、访问来源以及搜索表现，分析用户行为并优化你的 SEO 策略。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>提交网站到搜索引擎（如 Google Search Console 和 Bing Webmaster Tools）。</li>\n<li>使用正确的 HTML 结构，优化关键词、标题和描述。</li>\n<li>创建高质量的内容，并与相关关键词相关联。</li>\n<li>确保网站速度快且移动端友好。</li>\n<li>通过外部链接和社交媒体增加曝光率。</li>\n<li>定期使用分析工具监控网站的表现，调整优化策略。</li>\n</ol>\n<p>通过以上步骤，可以大大提升你的网站在搜索引擎中的可见性。</p>\n","excerpt":"","more":"<p>让你的网站被别人通过搜索引擎找到，主要是通过 <strong>搜索引擎优化（SEO）</strong> 和 <strong>搜索引擎收录</strong> 来实现。以下是详细的步骤和方法：</p>\n<h3 id=\"1-提交网站到搜索引擎\"><a href=\"#1-提交网站到搜索引擎\" class=\"headerlink\" title=\"1. 提交网站到搜索引擎\"></a>1. <strong>提交网站到搜索引擎</strong></h3><p>首先，你需要主动向主要的搜索引擎提交你的网站，确保它们能够发现并收录你的网站。</p>\n<h4 id=\"1-1-提交到-Google\"><a href=\"#1-1-提交到-Google\" class=\"headerlink\" title=\"1.1 提交到 Google\"></a>1.1 提交到 Google</h4><ol>\n<li><p><strong>使用 Google Search Console</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://search.google.com/search-console\">Google Search Console</a>。</li>\n<li>登录或创建 Google 账号。</li>\n<li>添加你的网站并验证网站的所有权（可以通过 DNS、HTML 文件、Google Analytics 等方式验证）。</li>\n<li>提交你的网站地图（Sitemap），帮助 Google 知道网站结构。</li>\n</ul>\n<p>网站地图通常是一个 <code>sitemap.xml</code> 文件，包含你网站的 URL。如果你使用 VuePress 或其他静态网站生成工具，可以通过插件或手动生成这个文件。</p>\n<p>生成完成后，提交 Sitemap 路径，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/sitemap.xml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"1-2-提交到-Bing-和其他搜索引擎\"><a href=\"#1-2-提交到-Bing-和其他搜索引擎\" class=\"headerlink\" title=\"1.2 提交到 Bing 和其他搜索引擎\"></a>1.2 提交到 Bing 和其他搜索引擎</h4><ol>\n<li><p><strong>Bing Webmaster Tools</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.bing.com/webmasters\">Bing Webmaster</a>。</li>\n<li>添加并验证你的网站，类似 Google Search Console 的步骤。</li>\n</ul>\n</li>\n<li><p><strong>其他搜索引擎</strong>：</p>\n<ul>\n<li>虽然 Google 和 Bing 是最主要的搜索引擎，但如果你还想在其他地方展示你的网站，可以考虑向 Yahoo、DuckDuckGo、Yandex 等提交网站。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-优化-SEO（搜索引擎优化）\"><a href=\"#2-优化-SEO（搜索引擎优化）\" class=\"headerlink\" title=\"2. 优化 SEO（搜索引擎优化）\"></a>2. <strong>优化 SEO（搜索引擎优化）</strong></h3><p>SEO 是为了提高网站在搜索结果中的排名，确保搜索引擎可以更好地理解你网站的内容。</p>\n<h4 id=\"2-1-使用正确的-HTML-结构和标签\"><a href=\"#2-1-使用正确的-HTML-结构和标签\" class=\"headerlink\" title=\"2.1 使用正确的 HTML 结构和标签\"></a>2.1 使用正确的 HTML 结构和标签</h4><ul>\n<li><strong>Title 标签</strong>：每个页面都应该有独特的 <code>&lt;title&gt;</code> 标签，清晰描述该页面的内容。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>我的博客 - Java 学习笔记<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>Meta 描述</strong>：使用 <code>&lt;meta name=&quot;description&quot; content=&quot;描述页面的内容&quot;&gt;</code> 来提供简洁的页面描述，这段描述可能会在搜索结果中显示。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;这是一个关于 Java 编程的博客，提供教程、代码示例等。&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>Heading 标签</strong>：使用 <code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code> 等标签来结构化你的页面，使搜索引擎更容易理解内容的层次和重点。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Java 编程入门教程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>基础知识<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-2-关键词优化\"><a href=\"#2-2-关键词优化\" class=\"headerlink\" title=\"2.2 关键词优化\"></a>2.2 关键词优化</h4><ul>\n<li>确定你想让用户通过哪些关键词找到你的网站，比如 “Java 教程”、”Vue.js 教程”。</li>\n<li>在页面内容中合理地使用这些关键词，但要避免过度堆砌，以确保自然阅读体验。</li>\n</ul>\n<h4 id=\"2-3-内部链接和外部链接\"><a href=\"#2-3-内部链接和外部链接\" class=\"headerlink\" title=\"2.3 内部链接和外部链接\"></a>2.3 内部链接和外部链接</h4><ul>\n<li><strong>内部链接</strong>：在网站内部的页面之间建立链接（例如：在文章中链接到相关内容），有助于提升网站结构的清晰度。</li>\n<li><strong>外部链接</strong>：在网站中引用高质量的外部资源，也能增加页面的权威性。</li>\n</ul>\n<h4 id=\"2-4-增加-HTTPS-支持\"><a href=\"#2-4-增加-HTTPS-支持\" class=\"headerlink\" title=\"2.4 增加 HTTPS 支持\"></a>2.4 增加 HTTPS 支持</h4><p>确保你的网站使用 HTTPS，这不仅对 SEO 有帮助，还能提升用户的安全性。大多数搜索引擎都会优先展示 HTTPS 网站。</p>\n<h3 id=\"3-提高网站的内容质量\"><a href=\"#3-提高网站的内容质量\" class=\"headerlink\" title=\"3. 提高网站的内容质量\"></a>3. <strong>提高网站的内容质量</strong></h3><p>搜索引擎偏好高质量、有价值的内容，因此，定期更新网站内容、发布有用的信息是 SEO 成功的关键。</p>\n<h4 id=\"3-1-创建高质量的内容\"><a href=\"#3-1-创建高质量的内容\" class=\"headerlink\" title=\"3.1 创建高质量的内容\"></a>3.1 创建高质量的内容</h4><ul>\n<li>发布原创的、有吸引力的文章或页面。</li>\n<li>确保内容解决用户的问题或提供他们所需要的信息。</li>\n</ul>\n<h4 id=\"3-2-使用图片和多媒体\"><a href=\"#3-2-使用图片和多媒体\" class=\"headerlink\" title=\"3.2 使用图片和多媒体\"></a>3.2 使用图片和多媒体</h4><ul>\n<li>添加相关的图片、视频等多媒体内容，吸引用户并延长访问时间。记得给图片添加合适的 <code>alt</code> 标签，帮助搜索引擎理解图片内容。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;java-guide.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Java 学习指南&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-提升网站的速度和移动端优化\"><a href=\"#4-提升网站的速度和移动端优化\" class=\"headerlink\" title=\"4. 提升网站的速度和移动端优化\"></a>4. <strong>提升网站的速度和移动端优化</strong></h3><ul>\n<li><strong>页面加载速度</strong>：搜索引擎会优先排名加载速度快的网站。你可以使用工具如 <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Google PageSpeed Insights</a> 来检测网站的速度，并根据建议进行优化（如压缩图片、使用缓存等）。</li>\n<li><strong>移动端优化</strong>：确保你的网站在移动设备上表现良好，这是一个非常重要的排名因素。使用响应式设计（Responsive Design）来适应不同的屏幕大小。</li>\n</ul>\n<h3 id=\"5-获取反向链接\"><a href=\"#5-获取反向链接\" class=\"headerlink\" title=\"5. 获取反向链接\"></a>5. <strong>获取反向链接</strong></h3><p>反向链接（Backlinks）是指其他网站链接到你的网站。高质量的反向链接会显著提升你在搜索引擎中的排名。</p>\n<ul>\n<li><strong>分享内容</strong>：在社交媒体、博客平台、论坛等地方分享你网站的内容，鼓励别人引用和链接。</li>\n<li><strong>与其他网站合作</strong>：与相关领域的网站合作，交换链接或做访客文章，提升你的网站曝光。</li>\n</ul>\n<h3 id=\"6-定期监控和分析\"><a href=\"#6-定期监控和分析\" class=\"headerlink\" title=\"6. 定期监控和分析\"></a>6. <strong>定期监控和分析</strong></h3><p>使用 <strong>Google Analytics</strong> 和 <strong>Google Search Console</strong> 等工具，定期监控网站的流量、访问来源以及搜索表现，分析用户行为并优化你的 SEO 策略。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>提交网站到搜索引擎（如 Google Search Console 和 Bing Webmaster Tools）。</li>\n<li>使用正确的 HTML 结构，优化关键词、标题和描述。</li>\n<li>创建高质量的内容，并与相关关键词相关联。</li>\n<li>确保网站速度快且移动端友好。</li>\n<li>通过外部链接和社交媒体增加曝光率。</li>\n<li>定期使用分析工具监控网站的表现，调整优化策略。</li>\n</ol>\n<p>通过以上步骤，可以大大提升你的网站在搜索引擎中的可见性。</p>\n"},{"title":"使用博客平台","date":"2024-09-05T07:39:15.688Z","_content":"# 以下是几种免费搭建个人博客的方法:\n\n\n\n## 使用博客平台\n\n一些知名的博客平台提供免费的博客搭建服务,只需要注册账号即可开始写博客:\n\n- **WordPress.com**：提供免费的博客托管服务,有多种免费主题可选。\n- **Blogger**：Google旗下的博客平台,注册Google账号后即可免费使用。\n- **Medium**：专注于内容创作的博客平台,不需要自己搭建网站。\n\n## 使用静态网站生成器\n\n静态网站生成器可以将Markdown格式的文章转换为静态HTML页面,部署到免费的托管服务上:\n\n- **GitHub Pages**：使用GitHub提供的免费托管服务,配合Jekyll等生成器使用。\n- **Netlify**：提供免费的静态网站托管服务,支持多种生成器。\n- **Vercel**：原ZEIT Now,提供免费的静态网站托管。\n\n## 使用虚拟主机\n\n一些虚拟主机提供商提供免费的主机服务,可以自己搭建WordPress等博客系统:\n\n- **000webhost**：提供免费的虚拟主机,可以安装WordPress等博客程序。\n- **Byethost**：免费提供MySQL数据库和PHP支持的虚拟主机。\n\n## 使用云服务\n\n一些云服务商提供免费的云服务器资源,可以自行搭建博客系统:\n\n- **阿里云学生机**：阿里云为学生提供免费的云服务器资源一年。\n- **腾讯云轻量应用服务器**：腾讯云提供免费的轻量应用服务器三个月。\n\n\n\n> [!TIP]\n>\n> 以上是几种常见的免费个人博客搭建方法,每种方式都有自己的优缺点,可以根据自己的需求选择合适的方式。无论选择哪种方式,定期备份内容都是很重要的。\n\n\n\n---\n\n## 对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\n\n\n\n## **1. GitHub Pages + Jekyll**\n\n\n\n​\t•\t**成本**：免费\n\n​\t•\t**优点**：\n\n​\t•\t使用静态页面生成器（如Jekyll、Hugo）托管博客。\n\n​\t•\t完全免费，无广告。\n\n​\t•\tGitHub 提供免费存储和托管服务，支持自定义域名。\n\n​\t•\t可高度自定义，适合喜欢编写Markdown和简单HTML/CSS的人。\n\n​\t•\t**缺点**：\n\n​\t•\t需要一定的技术基础，特别是对Git、HTML、Markdown等工具的熟悉。\n\n​\t•\t不支持动态内容（评论等功能需要通过第三方插件或服务）。\n\n​\t•\t**适用人群**：有一定技术背景，喜欢完全掌控博客外观和功能的人。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t我喜欢掌控内容，并且GitHub Pages+Jekyll完全符合我对简洁和自定义的要求。没有服务器负担，页面可以通过Git轻松管理。同时，Jekyll允许我用Markdown来写文章，非常方便。此外，这种方式适合长期维护，也可以自由迁移。\n\n\n\n## **2. WordPress.com**\n\n\n\n​\t•\t**成本**：免费（有付费升级选项）\n\n​\t•\t**优点**：\n\n​\t•\t易于使用，不需要技术背景即可上手。\n\n​\t•\t丰富的插件和主题库，适合想要丰富功能和漂亮外观的用户。\n\n​\t•\t有内置的SEO和社交分享功能。\n\n​\t•\t**缺点**：\n\n​\t•\t免费版有广告且不能移除，功能和自定义性有限。\n\n​\t•\t免费版域名是子域名（如yourblog.wordpress.com）。\n\n​\t•\t**适用人群**：不想接触太多技术细节，想要一个开箱即用的解决方案。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t如果我希望快速启动并且不需要太多技术定制，WordPress.com 是一个很好的选择。它的生态系统非常成熟，并且有很多现成的主题和插件可供选择，适合那些想要功能丰富但不想花太多时间在技术上的人。\n\n\n\n## **3. Medium**\n\n\n\n•\t**成本**：免费（有付费订阅选项）\n\n•\t**优点**：\n\n•\t极其简洁的界面和写作体验，非常适合注重内容的博客作者。\n\n•\t内置社区和社交网络功能，容易获得流量和关注。\n\n•\t不需要维护网站，专注于内容创作。\n\n•\t**缺点**：\n\n•\t博客不属于自己，所有内容都托管在Medium上，未来不可预测。\n\n•\t自定义功能很少，不能完全掌控博客的外观和功能。\n\n•\t**适用人群**：重视内容写作而不在意外观自定义的人，希望快速发布文章并获得更多曝光。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t如果我只是想专注于内容创作，不关心博客的自定义和控制，Medium是一个非常适合的选择。它的社区和社交网络功能可以让我迅速获得曝光，而且它的写作界面非常简洁。\n\n\n\n## **4. Blogger**\n\n\n\n​\t•\t**成本**：免费\n\n​\t•\t**优点**：\n\n​\t•\t完全免费，没有广告，且支持自定义域名。\n\n​\t•\tGoogle支持，可靠且稳定。\n\n​\t•\t支持一些基本的自定义选项，可以通过HTML和CSS调整外观。\n\n​\t•\t**缺点**：\n\n​\t•\t自定义和功能扩展性有限。\n\n​\t•\t不如WordPress和GitHub Pages那样灵活。\n\n​\t•\t**适用人群**：希望有一个简单易用的博客平台，并且不需要太多复杂功能的人。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\tBlogger虽然简单，但功能足够强大，适合那些想要快速发布内容但又不想过多关注技术细节的人。如果我不想自己维护代码，Blogger也是一个不错的选择。\n\n\n\n## **5. Notion + Super.so/类似服务**\n\n\n\n​\t•\t**成本**：免费+付费选项（例如自定义域名需付费）\n\n​\t•\t**优点**：\n\n​\t•\tNotion易于使用，界面现代，可以用作博客或网站生成器。\n\n​\t•\t不需要编写代码，专注于内容创作和排版。\n\n​\t•\t通过Super.so等服务，可以将Notion页面发布为博客网站，并且支持自定义域名。\n\n​\t•\t**缺点**：\n\n​\t•\t对SEO的支持和扩展性较弱。\n\n​\t•\t付费服务才能完全解锁自定义功能。\n\n​\t•\t**适用人群**：喜欢Notion的工作流，并希望用它来管理博客的人。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t如果我已经是Notion的重度用户，并且不需要复杂的博客功能，Notion结合Super.so可以提供极简且美观的个人博客体验。\n\n\n\n##  **我的选择：**\n\n\n\n我会选择 **GitHub Pages + Jekyll**，因为我喜欢掌控博客的外观、功能，并且GitHub Pages免费、无广告，并支持自定义域名。Jekyll和Markdown的结合让写作和管理博客非常简洁，同时这种静态站点生成方式也非常适合长期维护。如果你对技术有一定兴趣并愿意花点时间学习，我觉得这是最值得投入的免费博客方式。\n\n\n\n但如果我更重视快速发布内容而不关心技术细节，我可能会选择Medium，它的写作体验非常流畅，并且容易获得流量。\n\n\n\n------\n\n我将详细说明如何实现每个免费个人博客平台的设置，包括 **GitHub Pages + Jekyll**、**WordPress.com**、**Medium**、**Blogger** 和 **Notion + Super.so**，帮助你快速搭建个人博客。\n\n### 1. **GitHub Pages + Jekyll**\nGitHub Pages 是 GitHub 提供的免费静态网站托管服务，结合 Jekyll 静态站点生成器可以轻松搭建博客。\n\n#### 步骤：\n1. **创建GitHub账号**：\n   如果还没有 GitHub 账号，访问 [GitHub](https://github.com/) 注册一个账号。\n\n2. **创建新仓库**：\n   - 在 GitHub 中创建一个新的仓库，命名为 `your-username.github.io`（必须与 GitHub Pages 命名规则一致）。\n   - 确保仓库是 **public** 的。\n\n3. **安装Jekyll**：\n   - 安装 Ruby（Jekyll 依赖于 Ruby），在你的系统中运行以下命令：\n     ```bash\n     gem install bundler jekyll\n     ```\n   - 创建一个新的 Jekyll 博客项目：\n     ```bash\n     jekyll new my-blog\n     ```\n   - 进入项目目录并启动本地服务器：\n     ```bash\n     cd my-blog\n     bundle exec jekyll serve\n     ```\n     这会在 `http://localhost:4000` 启动一个本地开发服务器。\n\n4. **上传到GitHub**：\n   - 将 Jekyll 项目代码推送到 GitHub 仓库：\n     ```bash\n     git init\n     git add .\n     git commit -m \"Initial commit\"\n     git remote add origin https://github.com/your-username/your-username.github.io.git\n     git push -u origin master\n     ```\n\n5. **自定义域名（可选）**：\n   - 如果你有自己的域名，可以在 GitHub Pages 中设置自定义域名。通过创建 `CNAME` 文件，将自定义域名映射到 GitHub Pages 上。\n\n**优点**：完全自由掌控，不限流量或存储，且没有广告。\n\n### 2. **WordPress.com**\nWordPress.com 是一种简单快捷的博客平台，无需任何编程知识。\n\n#### 步骤：\n1. **注册WordPress账户**：\n   - 访问 [WordPress.com](https://www.wordpress.com/) 并创建一个账户。\n\n2. **选择免费计划**：\n   - 注册后，系统会引导你选择一个计划，选择免费计划即可。\n\n3. **设置博客**：\n   - 选择一个 WordPress 提供的免费主题，然后根据向导填写博客名称、描述等信息。\n   - 使用 WordPress 提供的拖放式编辑器撰写和发布内容。\n\n4. **自定义主题和插件**：\n   - 免费版的 WordPress.com 有一些限制，但你仍然可以选择丰富的免费主题和简单的插件。\n\n5. **发布文章**：\n   - 通过WordPress的可视化编辑器撰写和发布文章，系统会自动为你生成博客页面。\n\n**优点**：简单易用，适合不想接触技术细节的人。\n\n### 3. **Medium**\nMedium 是一个注重内容的博客平台，用户可以专注于写作。\n\n#### 步骤：\n1. **注册Medium账户**：\n   - 访问 [Medium](https://medium.com/) 并使用 Google 或邮箱注册一个账号。\n\n2. **创建个人主页**：\n   - 注册后，进入个人主页设置，上传头像、设置个人简介和主页链接。\n\n3. **发布文章**：\n   - 点击“Write a Story”，使用 Medium 的极简编辑器撰写文章。Medium 支持基本的Markdown语法和可视化编辑。\n   - 完成文章后，点击“Publish”即可发布到 Medium。\n\n4. **分享和推广**：\n   - Medium 有内置的社交网络功能，其他用户可以点赞和关注你，增加曝光机会。\n\n**优点**：易用且快速发布，适合专注写作的创作者。\n\n### 4. **Blogger**\nBlogger 是 Google 提供的免费博客平台，使用简单。\n\n#### 步骤：\n1. **注册Blogger账号**：\n   - 访问 [Blogger](https://www.blogger.com/) 并登录 Google 账号。\n\n2. **创建博客**：\n   - 在仪表板中点击“New Blog”创建一个新的博客，设置博客名称、URL等基本信息。\n\n3. **选择模板**：\n   - Blogger 提供了几个基础模板，你可以选择一个适合你风格的模板，之后可以进一步自定义。\n\n4. **发布文章**：\n   - 使用 Blogger 的编辑器撰写和发布文章，Blogger 支持基本的文本编辑和媒体上传。\n\n5. **自定义域名（可选）**：\n   - 如果你有自己的域名，可以在 Blogger 设置中将域名绑定到你的博客。\n\n**优点**：简单免费，且与 Google 服务集成，安全可靠。\n\n### 5. **Notion + Super.so**\n如果你喜欢使用 Notion，可以借助 Super.so 等工具将 Notion 页面转换为博客。\n\n#### 步骤：\n1. **创建Notion账户并编写博客内容**：\n   - 访问 [Notion](https://www.notion.so/) 并注册一个账户。\n   - 创建一个页面，用于撰写博客内容。Notion 提供强大的块编辑功能，支持多种格式（文本、图片、表格等）。\n\n2. **使用Super.so生成博客**：\n   - 注册 [Super.so](https://www.super.so/) 账号，将 Notion 页面转换为一个博客。\n   - 将 Notion 页面公开，然后将该页面的链接粘贴到 Super.so 中，生成博客页面。\n\n3. **自定义域名（付费功能）**：\n   - Super.so 支持自定义域名和更多的高级功能，但需要付费订阅。\n\n**优点**：无需编程，依赖 Notion 强大的内容编辑功能，适合喜欢用 Notion 的用户。\n\n---\n\n### **总结**：\n如果是我，我会选择 **GitHub Pages + Jekyll**，因为它完全免费且没有广告，同时能够自由定制。我喜欢 Jekyll 提供的灵活性，可以自己掌控博客的每一个细节。而且 GitHub Pages 静态托管的速度非常快，特别适合那些有一定技术背景、想要完全掌控网站的人。如果你更喜欢简单和快速搭建，可以考虑 **WordPress.com** 或 **Medium**。","source":"_posts/使用博客平台.md","raw":"---\ntitle: 使用博客平台\ndate: 2024-09-05T15:39:15.688Z\ntags: []\ncategories: []\n---\n# 以下是几种免费搭建个人博客的方法:\n\n\n\n## 使用博客平台\n\n一些知名的博客平台提供免费的博客搭建服务,只需要注册账号即可开始写博客:\n\n- **WordPress.com**：提供免费的博客托管服务,有多种免费主题可选。\n- **Blogger**：Google旗下的博客平台,注册Google账号后即可免费使用。\n- **Medium**：专注于内容创作的博客平台,不需要自己搭建网站。\n\n## 使用静态网站生成器\n\n静态网站生成器可以将Markdown格式的文章转换为静态HTML页面,部署到免费的托管服务上:\n\n- **GitHub Pages**：使用GitHub提供的免费托管服务,配合Jekyll等生成器使用。\n- **Netlify**：提供免费的静态网站托管服务,支持多种生成器。\n- **Vercel**：原ZEIT Now,提供免费的静态网站托管。\n\n## 使用虚拟主机\n\n一些虚拟主机提供商提供免费的主机服务,可以自己搭建WordPress等博客系统:\n\n- **000webhost**：提供免费的虚拟主机,可以安装WordPress等博客程序。\n- **Byethost**：免费提供MySQL数据库和PHP支持的虚拟主机。\n\n## 使用云服务\n\n一些云服务商提供免费的云服务器资源,可以自行搭建博客系统:\n\n- **阿里云学生机**：阿里云为学生提供免费的云服务器资源一年。\n- **腾讯云轻量应用服务器**：腾讯云提供免费的轻量应用服务器三个月。\n\n\n\n> [!TIP]\n>\n> 以上是几种常见的免费个人博客搭建方法,每种方式都有自己的优缺点,可以根据自己的需求选择合适的方式。无论选择哪种方式,定期备份内容都是很重要的。\n\n\n\n---\n\n## 对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\n\n\n\n## **1. GitHub Pages + Jekyll**\n\n\n\n​\t•\t**成本**：免费\n\n​\t•\t**优点**：\n\n​\t•\t使用静态页面生成器（如Jekyll、Hugo）托管博客。\n\n​\t•\t完全免费，无广告。\n\n​\t•\tGitHub 提供免费存储和托管服务，支持自定义域名。\n\n​\t•\t可高度自定义，适合喜欢编写Markdown和简单HTML/CSS的人。\n\n​\t•\t**缺点**：\n\n​\t•\t需要一定的技术基础，特别是对Git、HTML、Markdown等工具的熟悉。\n\n​\t•\t不支持动态内容（评论等功能需要通过第三方插件或服务）。\n\n​\t•\t**适用人群**：有一定技术背景，喜欢完全掌控博客外观和功能的人。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t我喜欢掌控内容，并且GitHub Pages+Jekyll完全符合我对简洁和自定义的要求。没有服务器负担，页面可以通过Git轻松管理。同时，Jekyll允许我用Markdown来写文章，非常方便。此外，这种方式适合长期维护，也可以自由迁移。\n\n\n\n## **2. WordPress.com**\n\n\n\n​\t•\t**成本**：免费（有付费升级选项）\n\n​\t•\t**优点**：\n\n​\t•\t易于使用，不需要技术背景即可上手。\n\n​\t•\t丰富的插件和主题库，适合想要丰富功能和漂亮外观的用户。\n\n​\t•\t有内置的SEO和社交分享功能。\n\n​\t•\t**缺点**：\n\n​\t•\t免费版有广告且不能移除，功能和自定义性有限。\n\n​\t•\t免费版域名是子域名（如yourblog.wordpress.com）。\n\n​\t•\t**适用人群**：不想接触太多技术细节，想要一个开箱即用的解决方案。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t如果我希望快速启动并且不需要太多技术定制，WordPress.com 是一个很好的选择。它的生态系统非常成熟，并且有很多现成的主题和插件可供选择，适合那些想要功能丰富但不想花太多时间在技术上的人。\n\n\n\n## **3. Medium**\n\n\n\n•\t**成本**：免费（有付费订阅选项）\n\n•\t**优点**：\n\n•\t极其简洁的界面和写作体验，非常适合注重内容的博客作者。\n\n•\t内置社区和社交网络功能，容易获得流量和关注。\n\n•\t不需要维护网站，专注于内容创作。\n\n•\t**缺点**：\n\n•\t博客不属于自己，所有内容都托管在Medium上，未来不可预测。\n\n•\t自定义功能很少，不能完全掌控博客的外观和功能。\n\n•\t**适用人群**：重视内容写作而不在意外观自定义的人，希望快速发布文章并获得更多曝光。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t如果我只是想专注于内容创作，不关心博客的自定义和控制，Medium是一个非常适合的选择。它的社区和社交网络功能可以让我迅速获得曝光，而且它的写作界面非常简洁。\n\n\n\n## **4. Blogger**\n\n\n\n​\t•\t**成本**：免费\n\n​\t•\t**优点**：\n\n​\t•\t完全免费，没有广告，且支持自定义域名。\n\n​\t•\tGoogle支持，可靠且稳定。\n\n​\t•\t支持一些基本的自定义选项，可以通过HTML和CSS调整外观。\n\n​\t•\t**缺点**：\n\n​\t•\t自定义和功能扩展性有限。\n\n​\t•\t不如WordPress和GitHub Pages那样灵活。\n\n​\t•\t**适用人群**：希望有一个简单易用的博客平台，并且不需要太多复杂功能的人。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\tBlogger虽然简单，但功能足够强大，适合那些想要快速发布内容但又不想过多关注技术细节的人。如果我不想自己维护代码，Blogger也是一个不错的选择。\n\n\n\n## **5. Notion + Super.so/类似服务**\n\n\n\n​\t•\t**成本**：免费+付费选项（例如自定义域名需付费）\n\n​\t•\t**优点**：\n\n​\t•\tNotion易于使用，界面现代，可以用作博客或网站生成器。\n\n​\t•\t不需要编写代码，专注于内容创作和排版。\n\n​\t•\t通过Super.so等服务，可以将Notion页面发布为博客网站，并且支持自定义域名。\n\n​\t•\t**缺点**：\n\n​\t•\t对SEO的支持和扩展性较弱。\n\n​\t•\t付费服务才能完全解锁自定义功能。\n\n​\t•\t**适用人群**：喜欢Notion的工作流，并希望用它来管理博客的人。\n\n\n\n**我选择的原因**：\n\n\n\n​\t•\t如果我已经是Notion的重度用户，并且不需要复杂的博客功能，Notion结合Super.so可以提供极简且美观的个人博客体验。\n\n\n\n##  **我的选择：**\n\n\n\n我会选择 **GitHub Pages + Jekyll**，因为我喜欢掌控博客的外观、功能，并且GitHub Pages免费、无广告，并支持自定义域名。Jekyll和Markdown的结合让写作和管理博客非常简洁，同时这种静态站点生成方式也非常适合长期维护。如果你对技术有一定兴趣并愿意花点时间学习，我觉得这是最值得投入的免费博客方式。\n\n\n\n但如果我更重视快速发布内容而不关心技术细节，我可能会选择Medium，它的写作体验非常流畅，并且容易获得流量。\n\n\n\n------\n\n我将详细说明如何实现每个免费个人博客平台的设置，包括 **GitHub Pages + Jekyll**、**WordPress.com**、**Medium**、**Blogger** 和 **Notion + Super.so**，帮助你快速搭建个人博客。\n\n### 1. **GitHub Pages + Jekyll**\nGitHub Pages 是 GitHub 提供的免费静态网站托管服务，结合 Jekyll 静态站点生成器可以轻松搭建博客。\n\n#### 步骤：\n1. **创建GitHub账号**：\n   如果还没有 GitHub 账号，访问 [GitHub](https://github.com/) 注册一个账号。\n\n2. **创建新仓库**：\n   - 在 GitHub 中创建一个新的仓库，命名为 `your-username.github.io`（必须与 GitHub Pages 命名规则一致）。\n   - 确保仓库是 **public** 的。\n\n3. **安装Jekyll**：\n   - 安装 Ruby（Jekyll 依赖于 Ruby），在你的系统中运行以下命令：\n     ```bash\n     gem install bundler jekyll\n     ```\n   - 创建一个新的 Jekyll 博客项目：\n     ```bash\n     jekyll new my-blog\n     ```\n   - 进入项目目录并启动本地服务器：\n     ```bash\n     cd my-blog\n     bundle exec jekyll serve\n     ```\n     这会在 `http://localhost:4000` 启动一个本地开发服务器。\n\n4. **上传到GitHub**：\n   - 将 Jekyll 项目代码推送到 GitHub 仓库：\n     ```bash\n     git init\n     git add .\n     git commit -m \"Initial commit\"\n     git remote add origin https://github.com/your-username/your-username.github.io.git\n     git push -u origin master\n     ```\n\n5. **自定义域名（可选）**：\n   - 如果你有自己的域名，可以在 GitHub Pages 中设置自定义域名。通过创建 `CNAME` 文件，将自定义域名映射到 GitHub Pages 上。\n\n**优点**：完全自由掌控，不限流量或存储，且没有广告。\n\n### 2. **WordPress.com**\nWordPress.com 是一种简单快捷的博客平台，无需任何编程知识。\n\n#### 步骤：\n1. **注册WordPress账户**：\n   - 访问 [WordPress.com](https://www.wordpress.com/) 并创建一个账户。\n\n2. **选择免费计划**：\n   - 注册后，系统会引导你选择一个计划，选择免费计划即可。\n\n3. **设置博客**：\n   - 选择一个 WordPress 提供的免费主题，然后根据向导填写博客名称、描述等信息。\n   - 使用 WordPress 提供的拖放式编辑器撰写和发布内容。\n\n4. **自定义主题和插件**：\n   - 免费版的 WordPress.com 有一些限制，但你仍然可以选择丰富的免费主题和简单的插件。\n\n5. **发布文章**：\n   - 通过WordPress的可视化编辑器撰写和发布文章，系统会自动为你生成博客页面。\n\n**优点**：简单易用，适合不想接触技术细节的人。\n\n### 3. **Medium**\nMedium 是一个注重内容的博客平台，用户可以专注于写作。\n\n#### 步骤：\n1. **注册Medium账户**：\n   - 访问 [Medium](https://medium.com/) 并使用 Google 或邮箱注册一个账号。\n\n2. **创建个人主页**：\n   - 注册后，进入个人主页设置，上传头像、设置个人简介和主页链接。\n\n3. **发布文章**：\n   - 点击“Write a Story”，使用 Medium 的极简编辑器撰写文章。Medium 支持基本的Markdown语法和可视化编辑。\n   - 完成文章后，点击“Publish”即可发布到 Medium。\n\n4. **分享和推广**：\n   - Medium 有内置的社交网络功能，其他用户可以点赞和关注你，增加曝光机会。\n\n**优点**：易用且快速发布，适合专注写作的创作者。\n\n### 4. **Blogger**\nBlogger 是 Google 提供的免费博客平台，使用简单。\n\n#### 步骤：\n1. **注册Blogger账号**：\n   - 访问 [Blogger](https://www.blogger.com/) 并登录 Google 账号。\n\n2. **创建博客**：\n   - 在仪表板中点击“New Blog”创建一个新的博客，设置博客名称、URL等基本信息。\n\n3. **选择模板**：\n   - Blogger 提供了几个基础模板，你可以选择一个适合你风格的模板，之后可以进一步自定义。\n\n4. **发布文章**：\n   - 使用 Blogger 的编辑器撰写和发布文章，Blogger 支持基本的文本编辑和媒体上传。\n\n5. **自定义域名（可选）**：\n   - 如果你有自己的域名，可以在 Blogger 设置中将域名绑定到你的博客。\n\n**优点**：简单免费，且与 Google 服务集成，安全可靠。\n\n### 5. **Notion + Super.so**\n如果你喜欢使用 Notion，可以借助 Super.so 等工具将 Notion 页面转换为博客。\n\n#### 步骤：\n1. **创建Notion账户并编写博客内容**：\n   - 访问 [Notion](https://www.notion.so/) 并注册一个账户。\n   - 创建一个页面，用于撰写博客内容。Notion 提供强大的块编辑功能，支持多种格式（文本、图片、表格等）。\n\n2. **使用Super.so生成博客**：\n   - 注册 [Super.so](https://www.super.so/) 账号，将 Notion 页面转换为一个博客。\n   - 将 Notion 页面公开，然后将该页面的链接粘贴到 Super.so 中，生成博客页面。\n\n3. **自定义域名（付费功能）**：\n   - Super.so 支持自定义域名和更多的高级功能，但需要付费订阅。\n\n**优点**：无需编程，依赖 Notion 强大的内容编辑功能，适合喜欢用 Notion 的用户。\n\n---\n\n### **总结**：\n如果是我，我会选择 **GitHub Pages + Jekyll**，因为它完全免费且没有广告，同时能够自由定制。我喜欢 Jekyll 提供的灵活性，可以自己掌控博客的每一个细节。而且 GitHub Pages 静态托管的速度非常快，特别适合那些有一定技术背景、想要完全掌控网站的人。如果你更喜欢简单和快速搭建，可以考虑 **WordPress.com** 或 **Medium**。","slug":"使用博客平台","published":1,"updated":"2024-11-25T11:44:04.590Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscq0032mbs6006d6c1l","content":"<h1 id=\"以下是几种免费搭建个人博客的方法\"><a href=\"#以下是几种免费搭建个人博客的方法\" class=\"headerlink\" title=\"以下是几种免费搭建个人博客的方法:\"></a>以下是几种免费搭建个人博客的方法:</h1><h2 id=\"使用博客平台\"><a href=\"#使用博客平台\" class=\"headerlink\" title=\"使用博客平台\"></a>使用博客平台</h2><p>一些知名的博客平台提供免费的博客搭建服务,只需要注册账号即可开始写博客:</p>\n<ul>\n<li><strong>WordPress.com</strong>：提供免费的博客托管服务,有多种免费主题可选。</li>\n<li><strong>Blogger</strong>：Google旗下的博客平台,注册Google账号后即可免费使用。</li>\n<li><strong>Medium</strong>：专注于内容创作的博客平台,不需要自己搭建网站。</li>\n</ul>\n<h2 id=\"使用静态网站生成器\"><a href=\"#使用静态网站生成器\" class=\"headerlink\" title=\"使用静态网站生成器\"></a>使用静态网站生成器</h2><p>静态网站生成器可以将Markdown格式的文章转换为静态HTML页面,部署到免费的托管服务上:</p>\n<ul>\n<li><strong>GitHub Pages</strong>：使用GitHub提供的免费托管服务,配合Jekyll等生成器使用。</li>\n<li><strong>Netlify</strong>：提供免费的静态网站托管服务,支持多种生成器。</li>\n<li><strong>Vercel</strong>：原ZEIT Now,提供免费的静态网站托管。</li>\n</ul>\n<h2 id=\"使用虚拟主机\"><a href=\"#使用虚拟主机\" class=\"headerlink\" title=\"使用虚拟主机\"></a>使用虚拟主机</h2><p>一些虚拟主机提供商提供免费的主机服务,可以自己搭建WordPress等博客系统:</p>\n<ul>\n<li><strong>000webhost</strong>：提供免费的虚拟主机,可以安装WordPress等博客程序。</li>\n<li><strong>Byethost</strong>：免费提供MySQL数据库和PHP支持的虚拟主机。</li>\n</ul>\n<h2 id=\"使用云服务\"><a href=\"#使用云服务\" class=\"headerlink\" title=\"使用云服务\"></a>使用云服务</h2><p>一些云服务商提供免费的云服务器资源,可以自行搭建博客系统:</p>\n<ul>\n<li><strong>阿里云学生机</strong>：阿里云为学生提供免费的云服务器资源一年。</li>\n<li><strong>腾讯云轻量应用服务器</strong>：腾讯云提供免费的轻量应用服务器三个月。</li>\n</ul>\n<blockquote>\n<p>[!TIP]</p>\n<p>以上是几种常见的免费个人博客搭建方法,每种方式都有自己的优缺点,可以根据自己的需求选择合适的方式。无论选择哪种方式,定期备份内容都是很重要的。</p>\n</blockquote>\n<hr>\n<h2 id=\"对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\"><a href=\"#对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\" class=\"headerlink\" title=\"对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\"></a>对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：</h2><h2 id=\"1-GitHub-Pages-Jekyll\"><a href=\"#1-GitHub-Pages-Jekyll\" class=\"headerlink\" title=\"1. GitHub Pages + Jekyll\"></a><strong>1. GitHub Pages + Jekyll</strong></h2><p>​\t•\t<strong>成本</strong>：免费</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\t使用静态页面生成器（如Jekyll、Hugo）托管博客。</p>\n<p>​\t•\t完全免费，无广告。</p>\n<p>​\t•\tGitHub 提供免费存储和托管服务，支持自定义域名。</p>\n<p>​\t•\t可高度自定义，适合喜欢编写Markdown和简单HTML&#x2F;CSS的人。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t需要一定的技术基础，特别是对Git、HTML、Markdown等工具的熟悉。</p>\n<p>​\t•\t不支持动态内容（评论等功能需要通过第三方插件或服务）。</p>\n<p>​\t•\t<strong>适用人群</strong>：有一定技术背景，喜欢完全掌控博客外观和功能的人。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t我喜欢掌控内容，并且GitHub Pages+Jekyll完全符合我对简洁和自定义的要求。没有服务器负担，页面可以通过Git轻松管理。同时，Jekyll允许我用Markdown来写文章，非常方便。此外，这种方式适合长期维护，也可以自由迁移。</p>\n<h2 id=\"2-WordPress-com\"><a href=\"#2-WordPress-com\" class=\"headerlink\" title=\"2. WordPress.com\"></a><strong>2. WordPress.com</strong></h2><p>​\t•\t<strong>成本</strong>：免费（有付费升级选项）</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\t易于使用，不需要技术背景即可上手。</p>\n<p>​\t•\t丰富的插件和主题库，适合想要丰富功能和漂亮外观的用户。</p>\n<p>​\t•\t有内置的SEO和社交分享功能。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t免费版有广告且不能移除，功能和自定义性有限。</p>\n<p>​\t•\t免费版域名是子域名（如yourblog.wordpress.com）。</p>\n<p>​\t•\t<strong>适用人群</strong>：不想接触太多技术细节，想要一个开箱即用的解决方案。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t如果我希望快速启动并且不需要太多技术定制，WordPress.com 是一个很好的选择。它的生态系统非常成熟，并且有很多现成的主题和插件可供选择，适合那些想要功能丰富但不想花太多时间在技术上的人。</p>\n<h2 id=\"3-Medium\"><a href=\"#3-Medium\" class=\"headerlink\" title=\"3. Medium\"></a><strong>3. Medium</strong></h2><p>•\t<strong>成本</strong>：免费（有付费订阅选项）</p>\n<p>•\t<strong>优点</strong>：</p>\n<p>•\t极其简洁的界面和写作体验，非常适合注重内容的博客作者。</p>\n<p>•\t内置社区和社交网络功能，容易获得流量和关注。</p>\n<p>•\t不需要维护网站，专注于内容创作。</p>\n<p>•\t<strong>缺点</strong>：</p>\n<p>•\t博客不属于自己，所有内容都托管在Medium上，未来不可预测。</p>\n<p>•\t自定义功能很少，不能完全掌控博客的外观和功能。</p>\n<p>•\t<strong>适用人群</strong>：重视内容写作而不在意外观自定义的人，希望快速发布文章并获得更多曝光。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t如果我只是想专注于内容创作，不关心博客的自定义和控制，Medium是一个非常适合的选择。它的社区和社交网络功能可以让我迅速获得曝光，而且它的写作界面非常简洁。</p>\n<h2 id=\"4-Blogger\"><a href=\"#4-Blogger\" class=\"headerlink\" title=\"4. Blogger\"></a><strong>4. Blogger</strong></h2><p>​\t•\t<strong>成本</strong>：免费</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\t完全免费，没有广告，且支持自定义域名。</p>\n<p>​\t•\tGoogle支持，可靠且稳定。</p>\n<p>​\t•\t支持一些基本的自定义选项，可以通过HTML和CSS调整外观。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t自定义和功能扩展性有限。</p>\n<p>​\t•\t不如WordPress和GitHub Pages那样灵活。</p>\n<p>​\t•\t<strong>适用人群</strong>：希望有一个简单易用的博客平台，并且不需要太多复杂功能的人。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\tBlogger虽然简单，但功能足够强大，适合那些想要快速发布内容但又不想过多关注技术细节的人。如果我不想自己维护代码，Blogger也是一个不错的选择。</p>\n<h2 id=\"5-Notion-Super-so-类似服务\"><a href=\"#5-Notion-Super-so-类似服务\" class=\"headerlink\" title=\"5. Notion + Super.so&#x2F;类似服务\"></a><strong>5. Notion + Super.so&#x2F;类似服务</strong></h2><p>​\t•\t<strong>成本</strong>：免费+付费选项（例如自定义域名需付费）</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\tNotion易于使用，界面现代，可以用作博客或网站生成器。</p>\n<p>​\t•\t不需要编写代码，专注于内容创作和排版。</p>\n<p>​\t•\t通过Super.so等服务，可以将Notion页面发布为博客网站，并且支持自定义域名。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t对SEO的支持和扩展性较弱。</p>\n<p>​\t•\t付费服务才能完全解锁自定义功能。</p>\n<p>​\t•\t<strong>适用人群</strong>：喜欢Notion的工作流，并希望用它来管理博客的人。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t如果我已经是Notion的重度用户，并且不需要复杂的博客功能，Notion结合Super.so可以提供极简且美观的个人博客体验。</p>\n<h2 id=\"我的选择：\"><a href=\"#我的选择：\" class=\"headerlink\" title=\"我的选择：\"></a><strong>我的选择：</strong></h2><p>我会选择 <strong>GitHub Pages + Jekyll</strong>，因为我喜欢掌控博客的外观、功能，并且GitHub Pages免费、无广告，并支持自定义域名。Jekyll和Markdown的结合让写作和管理博客非常简洁，同时这种静态站点生成方式也非常适合长期维护。如果你对技术有一定兴趣并愿意花点时间学习，我觉得这是最值得投入的免费博客方式。</p>\n<p>但如果我更重视快速发布内容而不关心技术细节，我可能会选择Medium，它的写作体验非常流畅，并且容易获得流量。</p>\n<hr>\n<p>我将详细说明如何实现每个免费个人博客平台的设置，包括 <strong>GitHub Pages + Jekyll</strong>、<strong>WordPress.com</strong>、<strong>Medium</strong>、<strong>Blogger</strong> 和 <strong>Notion + Super.so</strong>，帮助你快速搭建个人博客。</p>\n<h3 id=\"1-GitHub-Pages-Jekyll-1\"><a href=\"#1-GitHub-Pages-Jekyll-1\" class=\"headerlink\" title=\"1. GitHub Pages + Jekyll\"></a>1. <strong>GitHub Pages + Jekyll</strong></h3><p>GitHub Pages 是 GitHub 提供的免费静态网站托管服务，结合 Jekyll 静态站点生成器可以轻松搭建博客。</p>\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>创建GitHub账号</strong>：<br>如果还没有 GitHub 账号，访问 <a href=\"https://github.com/\">GitHub</a> 注册一个账号。</p>\n</li>\n<li><p><strong>创建新仓库</strong>：</p>\n<ul>\n<li>在 GitHub 中创建一个新的仓库，命名为 <code>your-username.github.io</code>（必须与 GitHub Pages 命名规则一致）。</li>\n<li>确保仓库是 <strong>public</strong> 的。</li>\n</ul>\n</li>\n<li><p><strong>安装Jekyll</strong>：</p>\n<ul>\n<li>安装 Ruby（Jekyll 依赖于 Ruby），在你的系统中运行以下命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install bundler jekyll</span><br></pre></td></tr></table></figure></li>\n<li>创建一个新的 Jekyll 博客项目：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new my-blog</span><br></pre></td></tr></table></figure></li>\n<li>进入项目目录并启动本地服务器：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> my-blog</span><br><span class=\"line\">bundle <span class=\"built_in\">exec</span> jekyll serve</span><br></pre></td></tr></table></figure>\n这会在 <code>http://localhost:4000</code> 启动一个本地开发服务器。</li>\n</ul>\n</li>\n<li><p><strong>上传到GitHub</strong>：</p>\n<ul>\n<li>将 Jekyll 项目代码推送到 GitHub 仓库：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Initial commit&quot;</span></span><br><span class=\"line\">git remote add origin https://github.com/your-username/your-username.github.io.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>自定义域名（可选）</strong>：</p>\n<ul>\n<li>如果你有自己的域名，可以在 GitHub Pages 中设置自定义域名。通过创建 <code>CNAME</code> 文件，将自定义域名映射到 GitHub Pages 上。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：完全自由掌控，不限流量或存储，且没有广告。</p>\n<h3 id=\"2-WordPress-com-1\"><a href=\"#2-WordPress-com-1\" class=\"headerlink\" title=\"2. WordPress.com\"></a>2. <strong>WordPress.com</strong></h3><p>WordPress.com 是一种简单快捷的博客平台，无需任何编程知识。</p>\n<h4 id=\"步骤：-1\"><a href=\"#步骤：-1\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>注册WordPress账户</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.wordpress.com/\">WordPress.com</a> 并创建一个账户。</li>\n</ul>\n</li>\n<li><p><strong>选择免费计划</strong>：</p>\n<ul>\n<li>注册后，系统会引导你选择一个计划，选择免费计划即可。</li>\n</ul>\n</li>\n<li><p><strong>设置博客</strong>：</p>\n<ul>\n<li>选择一个 WordPress 提供的免费主题，然后根据向导填写博客名称、描述等信息。</li>\n<li>使用 WordPress 提供的拖放式编辑器撰写和发布内容。</li>\n</ul>\n</li>\n<li><p><strong>自定义主题和插件</strong>：</p>\n<ul>\n<li>免费版的 WordPress.com 有一些限制，但你仍然可以选择丰富的免费主题和简单的插件。</li>\n</ul>\n</li>\n<li><p><strong>发布文章</strong>：</p>\n<ul>\n<li>通过WordPress的可视化编辑器撰写和发布文章，系统会自动为你生成博客页面。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：简单易用，适合不想接触技术细节的人。</p>\n<h3 id=\"3-Medium-1\"><a href=\"#3-Medium-1\" class=\"headerlink\" title=\"3. Medium\"></a>3. <strong>Medium</strong></h3><p>Medium 是一个注重内容的博客平台，用户可以专注于写作。</p>\n<h4 id=\"步骤：-2\"><a href=\"#步骤：-2\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>注册Medium账户</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://medium.com/\">Medium</a> 并使用 Google 或邮箱注册一个账号。</li>\n</ul>\n</li>\n<li><p><strong>创建个人主页</strong>：</p>\n<ul>\n<li>注册后，进入个人主页设置，上传头像、设置个人简介和主页链接。</li>\n</ul>\n</li>\n<li><p><strong>发布文章</strong>：</p>\n<ul>\n<li>点击“Write a Story”，使用 Medium 的极简编辑器撰写文章。Medium 支持基本的Markdown语法和可视化编辑。</li>\n<li>完成文章后，点击“Publish”即可发布到 Medium。</li>\n</ul>\n</li>\n<li><p><strong>分享和推广</strong>：</p>\n<ul>\n<li>Medium 有内置的社交网络功能，其他用户可以点赞和关注你，增加曝光机会。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：易用且快速发布，适合专注写作的创作者。</p>\n<h3 id=\"4-Blogger-1\"><a href=\"#4-Blogger-1\" class=\"headerlink\" title=\"4. Blogger\"></a>4. <strong>Blogger</strong></h3><p>Blogger 是 Google 提供的免费博客平台，使用简单。</p>\n<h4 id=\"步骤：-3\"><a href=\"#步骤：-3\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>注册Blogger账号</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.blogger.com/\">Blogger</a> 并登录 Google 账号。</li>\n</ul>\n</li>\n<li><p><strong>创建博客</strong>：</p>\n<ul>\n<li>在仪表板中点击“New Blog”创建一个新的博客，设置博客名称、URL等基本信息。</li>\n</ul>\n</li>\n<li><p><strong>选择模板</strong>：</p>\n<ul>\n<li>Blogger 提供了几个基础模板，你可以选择一个适合你风格的模板，之后可以进一步自定义。</li>\n</ul>\n</li>\n<li><p><strong>发布文章</strong>：</p>\n<ul>\n<li>使用 Blogger 的编辑器撰写和发布文章，Blogger 支持基本的文本编辑和媒体上传。</li>\n</ul>\n</li>\n<li><p><strong>自定义域名（可选）</strong>：</p>\n<ul>\n<li>如果你有自己的域名，可以在 Blogger 设置中将域名绑定到你的博客。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：简单免费，且与 Google 服务集成，安全可靠。</p>\n<h3 id=\"5-Notion-Super-so\"><a href=\"#5-Notion-Super-so\" class=\"headerlink\" title=\"5. Notion + Super.so\"></a>5. <strong>Notion + Super.so</strong></h3><p>如果你喜欢使用 Notion，可以借助 Super.so 等工具将 Notion 页面转换为博客。</p>\n<h4 id=\"步骤：-4\"><a href=\"#步骤：-4\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>创建Notion账户并编写博客内容</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.notion.so/\">Notion</a> 并注册一个账户。</li>\n<li>创建一个页面，用于撰写博客内容。Notion 提供强大的块编辑功能，支持多种格式（文本、图片、表格等）。</li>\n</ul>\n</li>\n<li><p><strong>使用Super.so生成博客</strong>：</p>\n<ul>\n<li>注册 <a href=\"https://www.super.so/\">Super.so</a> 账号，将 Notion 页面转换为一个博客。</li>\n<li>将 Notion 页面公开，然后将该页面的链接粘贴到 Super.so 中，生成博客页面。</li>\n</ul>\n</li>\n<li><p><strong>自定义域名（付费功能）</strong>：</p>\n<ul>\n<li>Super.so 支持自定义域名和更多的高级功能，但需要付费订阅。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：无需编程，依赖 Notion 强大的内容编辑功能，适合喜欢用 Notion 的用户。</p>\n<hr>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结</strong>：</h3><p>如果是我，我会选择 <strong>GitHub Pages + Jekyll</strong>，因为它完全免费且没有广告，同时能够自由定制。我喜欢 Jekyll 提供的灵活性，可以自己掌控博客的每一个细节。而且 GitHub Pages 静态托管的速度非常快，特别适合那些有一定技术背景、想要完全掌控网站的人。如果你更喜欢简单和快速搭建，可以考虑 <strong>WordPress.com</strong> 或 <strong>Medium</strong>。</p>\n","excerpt":"","more":"<h1 id=\"以下是几种免费搭建个人博客的方法\"><a href=\"#以下是几种免费搭建个人博客的方法\" class=\"headerlink\" title=\"以下是几种免费搭建个人博客的方法:\"></a>以下是几种免费搭建个人博客的方法:</h1><h2 id=\"使用博客平台\"><a href=\"#使用博客平台\" class=\"headerlink\" title=\"使用博客平台\"></a>使用博客平台</h2><p>一些知名的博客平台提供免费的博客搭建服务,只需要注册账号即可开始写博客:</p>\n<ul>\n<li><strong>WordPress.com</strong>：提供免费的博客托管服务,有多种免费主题可选。</li>\n<li><strong>Blogger</strong>：Google旗下的博客平台,注册Google账号后即可免费使用。</li>\n<li><strong>Medium</strong>：专注于内容创作的博客平台,不需要自己搭建网站。</li>\n</ul>\n<h2 id=\"使用静态网站生成器\"><a href=\"#使用静态网站生成器\" class=\"headerlink\" title=\"使用静态网站生成器\"></a>使用静态网站生成器</h2><p>静态网站生成器可以将Markdown格式的文章转换为静态HTML页面,部署到免费的托管服务上:</p>\n<ul>\n<li><strong>GitHub Pages</strong>：使用GitHub提供的免费托管服务,配合Jekyll等生成器使用。</li>\n<li><strong>Netlify</strong>：提供免费的静态网站托管服务,支持多种生成器。</li>\n<li><strong>Vercel</strong>：原ZEIT Now,提供免费的静态网站托管。</li>\n</ul>\n<h2 id=\"使用虚拟主机\"><a href=\"#使用虚拟主机\" class=\"headerlink\" title=\"使用虚拟主机\"></a>使用虚拟主机</h2><p>一些虚拟主机提供商提供免费的主机服务,可以自己搭建WordPress等博客系统:</p>\n<ul>\n<li><strong>000webhost</strong>：提供免费的虚拟主机,可以安装WordPress等博客程序。</li>\n<li><strong>Byethost</strong>：免费提供MySQL数据库和PHP支持的虚拟主机。</li>\n</ul>\n<h2 id=\"使用云服务\"><a href=\"#使用云服务\" class=\"headerlink\" title=\"使用云服务\"></a>使用云服务</h2><p>一些云服务商提供免费的云服务器资源,可以自行搭建博客系统:</p>\n<ul>\n<li><strong>阿里云学生机</strong>：阿里云为学生提供免费的云服务器资源一年。</li>\n<li><strong>腾讯云轻量应用服务器</strong>：腾讯云提供免费的轻量应用服务器三个月。</li>\n</ul>\n<blockquote>\n<p>[!TIP]</p>\n<p>以上是几种常见的免费个人博客搭建方法,每种方式都有自己的优缺点,可以根据自己的需求选择合适的方式。无论选择哪种方式,定期备份内容都是很重要的。</p>\n</blockquote>\n<hr>\n<h2 id=\"对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\"><a href=\"#对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\" class=\"headerlink\" title=\"对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：\"></a>对于免费的个人博客平台，我会根据自己的需求和偏好在几个常见选项中做出选择。以下是我可能考虑的几种方法，并说明我会选择哪个以及为什么：</h2><h2 id=\"1-GitHub-Pages-Jekyll\"><a href=\"#1-GitHub-Pages-Jekyll\" class=\"headerlink\" title=\"1. GitHub Pages + Jekyll\"></a><strong>1. GitHub Pages + Jekyll</strong></h2><p>​\t•\t<strong>成本</strong>：免费</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\t使用静态页面生成器（如Jekyll、Hugo）托管博客。</p>\n<p>​\t•\t完全免费，无广告。</p>\n<p>​\t•\tGitHub 提供免费存储和托管服务，支持自定义域名。</p>\n<p>​\t•\t可高度自定义，适合喜欢编写Markdown和简单HTML&#x2F;CSS的人。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t需要一定的技术基础，特别是对Git、HTML、Markdown等工具的熟悉。</p>\n<p>​\t•\t不支持动态内容（评论等功能需要通过第三方插件或服务）。</p>\n<p>​\t•\t<strong>适用人群</strong>：有一定技术背景，喜欢完全掌控博客外观和功能的人。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t我喜欢掌控内容，并且GitHub Pages+Jekyll完全符合我对简洁和自定义的要求。没有服务器负担，页面可以通过Git轻松管理。同时，Jekyll允许我用Markdown来写文章，非常方便。此外，这种方式适合长期维护，也可以自由迁移。</p>\n<h2 id=\"2-WordPress-com\"><a href=\"#2-WordPress-com\" class=\"headerlink\" title=\"2. WordPress.com\"></a><strong>2. WordPress.com</strong></h2><p>​\t•\t<strong>成本</strong>：免费（有付费升级选项）</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\t易于使用，不需要技术背景即可上手。</p>\n<p>​\t•\t丰富的插件和主题库，适合想要丰富功能和漂亮外观的用户。</p>\n<p>​\t•\t有内置的SEO和社交分享功能。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t免费版有广告且不能移除，功能和自定义性有限。</p>\n<p>​\t•\t免费版域名是子域名（如yourblog.wordpress.com）。</p>\n<p>​\t•\t<strong>适用人群</strong>：不想接触太多技术细节，想要一个开箱即用的解决方案。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t如果我希望快速启动并且不需要太多技术定制，WordPress.com 是一个很好的选择。它的生态系统非常成熟，并且有很多现成的主题和插件可供选择，适合那些想要功能丰富但不想花太多时间在技术上的人。</p>\n<h2 id=\"3-Medium\"><a href=\"#3-Medium\" class=\"headerlink\" title=\"3. Medium\"></a><strong>3. Medium</strong></h2><p>•\t<strong>成本</strong>：免费（有付费订阅选项）</p>\n<p>•\t<strong>优点</strong>：</p>\n<p>•\t极其简洁的界面和写作体验，非常适合注重内容的博客作者。</p>\n<p>•\t内置社区和社交网络功能，容易获得流量和关注。</p>\n<p>•\t不需要维护网站，专注于内容创作。</p>\n<p>•\t<strong>缺点</strong>：</p>\n<p>•\t博客不属于自己，所有内容都托管在Medium上，未来不可预测。</p>\n<p>•\t自定义功能很少，不能完全掌控博客的外观和功能。</p>\n<p>•\t<strong>适用人群</strong>：重视内容写作而不在意外观自定义的人，希望快速发布文章并获得更多曝光。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t如果我只是想专注于内容创作，不关心博客的自定义和控制，Medium是一个非常适合的选择。它的社区和社交网络功能可以让我迅速获得曝光，而且它的写作界面非常简洁。</p>\n<h2 id=\"4-Blogger\"><a href=\"#4-Blogger\" class=\"headerlink\" title=\"4. Blogger\"></a><strong>4. Blogger</strong></h2><p>​\t•\t<strong>成本</strong>：免费</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\t完全免费，没有广告，且支持自定义域名。</p>\n<p>​\t•\tGoogle支持，可靠且稳定。</p>\n<p>​\t•\t支持一些基本的自定义选项，可以通过HTML和CSS调整外观。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t自定义和功能扩展性有限。</p>\n<p>​\t•\t不如WordPress和GitHub Pages那样灵活。</p>\n<p>​\t•\t<strong>适用人群</strong>：希望有一个简单易用的博客平台，并且不需要太多复杂功能的人。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\tBlogger虽然简单，但功能足够强大，适合那些想要快速发布内容但又不想过多关注技术细节的人。如果我不想自己维护代码，Blogger也是一个不错的选择。</p>\n<h2 id=\"5-Notion-Super-so-类似服务\"><a href=\"#5-Notion-Super-so-类似服务\" class=\"headerlink\" title=\"5. Notion + Super.so&#x2F;类似服务\"></a><strong>5. Notion + Super.so&#x2F;类似服务</strong></h2><p>​\t•\t<strong>成本</strong>：免费+付费选项（例如自定义域名需付费）</p>\n<p>​\t•\t<strong>优点</strong>：</p>\n<p>​\t•\tNotion易于使用，界面现代，可以用作博客或网站生成器。</p>\n<p>​\t•\t不需要编写代码，专注于内容创作和排版。</p>\n<p>​\t•\t通过Super.so等服务，可以将Notion页面发布为博客网站，并且支持自定义域名。</p>\n<p>​\t•\t<strong>缺点</strong>：</p>\n<p>​\t•\t对SEO的支持和扩展性较弱。</p>\n<p>​\t•\t付费服务才能完全解锁自定义功能。</p>\n<p>​\t•\t<strong>适用人群</strong>：喜欢Notion的工作流，并希望用它来管理博客的人。</p>\n<p><strong>我选择的原因</strong>：</p>\n<p>​\t•\t如果我已经是Notion的重度用户，并且不需要复杂的博客功能，Notion结合Super.so可以提供极简且美观的个人博客体验。</p>\n<h2 id=\"我的选择：\"><a href=\"#我的选择：\" class=\"headerlink\" title=\"我的选择：\"></a><strong>我的选择：</strong></h2><p>我会选择 <strong>GitHub Pages + Jekyll</strong>，因为我喜欢掌控博客的外观、功能，并且GitHub Pages免费、无广告，并支持自定义域名。Jekyll和Markdown的结合让写作和管理博客非常简洁，同时这种静态站点生成方式也非常适合长期维护。如果你对技术有一定兴趣并愿意花点时间学习，我觉得这是最值得投入的免费博客方式。</p>\n<p>但如果我更重视快速发布内容而不关心技术细节，我可能会选择Medium，它的写作体验非常流畅，并且容易获得流量。</p>\n<hr>\n<p>我将详细说明如何实现每个免费个人博客平台的设置，包括 <strong>GitHub Pages + Jekyll</strong>、<strong>WordPress.com</strong>、<strong>Medium</strong>、<strong>Blogger</strong> 和 <strong>Notion + Super.so</strong>，帮助你快速搭建个人博客。</p>\n<h3 id=\"1-GitHub-Pages-Jekyll-1\"><a href=\"#1-GitHub-Pages-Jekyll-1\" class=\"headerlink\" title=\"1. GitHub Pages + Jekyll\"></a>1. <strong>GitHub Pages + Jekyll</strong></h3><p>GitHub Pages 是 GitHub 提供的免费静态网站托管服务，结合 Jekyll 静态站点生成器可以轻松搭建博客。</p>\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>创建GitHub账号</strong>：<br>如果还没有 GitHub 账号，访问 <a href=\"https://github.com/\">GitHub</a> 注册一个账号。</p>\n</li>\n<li><p><strong>创建新仓库</strong>：</p>\n<ul>\n<li>在 GitHub 中创建一个新的仓库，命名为 <code>your-username.github.io</code>（必须与 GitHub Pages 命名规则一致）。</li>\n<li>确保仓库是 <strong>public</strong> 的。</li>\n</ul>\n</li>\n<li><p><strong>安装Jekyll</strong>：</p>\n<ul>\n<li>安装 Ruby（Jekyll 依赖于 Ruby），在你的系统中运行以下命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install bundler jekyll</span><br></pre></td></tr></table></figure></li>\n<li>创建一个新的 Jekyll 博客项目：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new my-blog</span><br></pre></td></tr></table></figure></li>\n<li>进入项目目录并启动本地服务器：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> my-blog</span><br><span class=\"line\">bundle <span class=\"built_in\">exec</span> jekyll serve</span><br></pre></td></tr></table></figure>\n这会在 <code>http://localhost:4000</code> 启动一个本地开发服务器。</li>\n</ul>\n</li>\n<li><p><strong>上传到GitHub</strong>：</p>\n<ul>\n<li>将 Jekyll 项目代码推送到 GitHub 仓库：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Initial commit&quot;</span></span><br><span class=\"line\">git remote add origin https://github.com/your-username/your-username.github.io.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>自定义域名（可选）</strong>：</p>\n<ul>\n<li>如果你有自己的域名，可以在 GitHub Pages 中设置自定义域名。通过创建 <code>CNAME</code> 文件，将自定义域名映射到 GitHub Pages 上。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：完全自由掌控，不限流量或存储，且没有广告。</p>\n<h3 id=\"2-WordPress-com-1\"><a href=\"#2-WordPress-com-1\" class=\"headerlink\" title=\"2. WordPress.com\"></a>2. <strong>WordPress.com</strong></h3><p>WordPress.com 是一种简单快捷的博客平台，无需任何编程知识。</p>\n<h4 id=\"步骤：-1\"><a href=\"#步骤：-1\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>注册WordPress账户</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.wordpress.com/\">WordPress.com</a> 并创建一个账户。</li>\n</ul>\n</li>\n<li><p><strong>选择免费计划</strong>：</p>\n<ul>\n<li>注册后，系统会引导你选择一个计划，选择免费计划即可。</li>\n</ul>\n</li>\n<li><p><strong>设置博客</strong>：</p>\n<ul>\n<li>选择一个 WordPress 提供的免费主题，然后根据向导填写博客名称、描述等信息。</li>\n<li>使用 WordPress 提供的拖放式编辑器撰写和发布内容。</li>\n</ul>\n</li>\n<li><p><strong>自定义主题和插件</strong>：</p>\n<ul>\n<li>免费版的 WordPress.com 有一些限制，但你仍然可以选择丰富的免费主题和简单的插件。</li>\n</ul>\n</li>\n<li><p><strong>发布文章</strong>：</p>\n<ul>\n<li>通过WordPress的可视化编辑器撰写和发布文章，系统会自动为你生成博客页面。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：简单易用，适合不想接触技术细节的人。</p>\n<h3 id=\"3-Medium-1\"><a href=\"#3-Medium-1\" class=\"headerlink\" title=\"3. Medium\"></a>3. <strong>Medium</strong></h3><p>Medium 是一个注重内容的博客平台，用户可以专注于写作。</p>\n<h4 id=\"步骤：-2\"><a href=\"#步骤：-2\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>注册Medium账户</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://medium.com/\">Medium</a> 并使用 Google 或邮箱注册一个账号。</li>\n</ul>\n</li>\n<li><p><strong>创建个人主页</strong>：</p>\n<ul>\n<li>注册后，进入个人主页设置，上传头像、设置个人简介和主页链接。</li>\n</ul>\n</li>\n<li><p><strong>发布文章</strong>：</p>\n<ul>\n<li>点击“Write a Story”，使用 Medium 的极简编辑器撰写文章。Medium 支持基本的Markdown语法和可视化编辑。</li>\n<li>完成文章后，点击“Publish”即可发布到 Medium。</li>\n</ul>\n</li>\n<li><p><strong>分享和推广</strong>：</p>\n<ul>\n<li>Medium 有内置的社交网络功能，其他用户可以点赞和关注你，增加曝光机会。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：易用且快速发布，适合专注写作的创作者。</p>\n<h3 id=\"4-Blogger-1\"><a href=\"#4-Blogger-1\" class=\"headerlink\" title=\"4. Blogger\"></a>4. <strong>Blogger</strong></h3><p>Blogger 是 Google 提供的免费博客平台，使用简单。</p>\n<h4 id=\"步骤：-3\"><a href=\"#步骤：-3\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>注册Blogger账号</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.blogger.com/\">Blogger</a> 并登录 Google 账号。</li>\n</ul>\n</li>\n<li><p><strong>创建博客</strong>：</p>\n<ul>\n<li>在仪表板中点击“New Blog”创建一个新的博客，设置博客名称、URL等基本信息。</li>\n</ul>\n</li>\n<li><p><strong>选择模板</strong>：</p>\n<ul>\n<li>Blogger 提供了几个基础模板，你可以选择一个适合你风格的模板，之后可以进一步自定义。</li>\n</ul>\n</li>\n<li><p><strong>发布文章</strong>：</p>\n<ul>\n<li>使用 Blogger 的编辑器撰写和发布文章，Blogger 支持基本的文本编辑和媒体上传。</li>\n</ul>\n</li>\n<li><p><strong>自定义域名（可选）</strong>：</p>\n<ul>\n<li>如果你有自己的域名，可以在 Blogger 设置中将域名绑定到你的博客。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：简单免费，且与 Google 服务集成，安全可靠。</p>\n<h3 id=\"5-Notion-Super-so\"><a href=\"#5-Notion-Super-so\" class=\"headerlink\" title=\"5. Notion + Super.so\"></a>5. <strong>Notion + Super.so</strong></h3><p>如果你喜欢使用 Notion，可以借助 Super.so 等工具将 Notion 页面转换为博客。</p>\n<h4 id=\"步骤：-4\"><a href=\"#步骤：-4\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>创建Notion账户并编写博客内容</strong>：</p>\n<ul>\n<li>访问 <a href=\"https://www.notion.so/\">Notion</a> 并注册一个账户。</li>\n<li>创建一个页面，用于撰写博客内容。Notion 提供强大的块编辑功能，支持多种格式（文本、图片、表格等）。</li>\n</ul>\n</li>\n<li><p><strong>使用Super.so生成博客</strong>：</p>\n<ul>\n<li>注册 <a href=\"https://www.super.so/\">Super.so</a> 账号，将 Notion 页面转换为一个博客。</li>\n<li>将 Notion 页面公开，然后将该页面的链接粘贴到 Super.so 中，生成博客页面。</li>\n</ul>\n</li>\n<li><p><strong>自定义域名（付费功能）</strong>：</p>\n<ul>\n<li>Super.so 支持自定义域名和更多的高级功能，但需要付费订阅。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong>：无需编程，依赖 Notion 强大的内容编辑功能，适合喜欢用 Notion 的用户。</p>\n<hr>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结</strong>：</h3><p>如果是我，我会选择 <strong>GitHub Pages + Jekyll</strong>，因为它完全免费且没有广告，同时能够自由定制。我喜欢 Jekyll 提供的灵活性，可以自己掌控博客的每一个细节。而且 GitHub Pages 静态托管的速度非常快，特别适合那些有一定技术背景、想要完全掌控网站的人。如果你更喜欢简单和快速搭建，可以考虑 <strong>WordPress.com</strong> 或 <strong>Medium</strong>。</p>\n"},{"title":"神级IDEA插件","date":"2024-05-15T02:04:28.618Z","_content":"# 神级IDEA插件\n\n> 日常的业务功能开发，大部分情况下，核心代码差不多只占了项目的20%，剩下的80% 基本就是一些体力活，配置项等；这80%的代码，却消耗了我们大量的时间，而这部分代码，也不会对我们带来大的提升，今天给大家推荐12款我个人常用的优质的插件，旨在快速帮大家完成这80%体力代码，将更多的时间投入在核心功能的开发，告别加班，告别996！\n\n* Easy Code\n* Easy Javadoc\n* 4aiXcoder\n* Lombok\n* GsonFormatPlus\n* String Manipulation\n* Restfultoolkit\n* Key promoter X\n* Free Mybatis plugin\n\n---\n\n## Easy Code\n\n> 一个能帮我们快速将表映射成 Spring 项目中`Entity`、`Controller`、`Dervice`、`Dao`、`Mapper`等文件，快速实现基础功能的插件.  \n\n---\n\n\n\n### Easy Javadoc\n\n> 一键快速帮你生成属性、方法、类文档注释的插件，文档注释轻松搞定\n\n---\n\n### aiXcoder\n\n> 国内首款基于深度学习的智能化软件开发工具,利用AI技术实现代码⾃动⽣成、代码⾃动补全、代码智能搜索等功能,提升开发者开发效率与代码质量\n\n---\n\n### Lombok\n\n> Lombok 是一款针对 Java 语言的编译时插件，用于通过注解自动化生成重复的代码，减少一些常规的 Java 代码书写。\n\n### GsonFormatPlus\n\n> 一款用于快速将 Json 转换成 Java 对象的插件；现在的系统，前后端交互，绝大部分都使用了 Json ，因此在解析 Json 的时候，都需要一个对象来接收，使用这块工具，就可以通过 Json 文本，快速生成一个用于接收的 Java 对象，省去了逐个手敲属性的繁琐体力；\n\n---\n\n### GenerateAllSetter\n\n> 一款一键调用set、get方法的插件；当开发中遇到一个大对象需要初始化，或者要获取一个大对象中的属性时，就单纯是调用他的get、set方法，就能让人写的人手软，这款插件就能完美的帮我们解决这个体力活。\n\n---\n\n### String Manipulation\n\n> String 是使用最为频繁的数据类型，String Manipulation 插件能帮我们快速完成 String 的转换，如：大小写切换，排序，递增，转义，编码等。还支持对字符串的各种加、解密（MD5、Base64等）操作；基本包含了 String 常用的所有操作\n\n---\n\n### Restfultoolkit\n\n> 一套 RESTful 服务开发辅助工具集，完美代替Postman；在 IDEA 中即可完成接口的测试，同时也能快速所搜接口，大大提高我们的检索，测试效率。\n\n---\n\n### Key promoter X\n\n> 当年，从 Eclipse 转 IDEA 的时候，快捷键就是最大的障碍之一；能熟练的使用快捷键，将能大大提高编码的效率；`Key promoter X` 就是一款协助记忆快捷键的插件\n\n---\n\n### Free Mybatis plugin\n\n> 一款能帮助我们在 MyBatis 中实现 Mapper 与 xml 之间跳转的插件\n\n---\n\n\n\n> **熟练运用这12款插件，不出意外，相信大家的开发效率一定会有一个质的飞跃...**\n\n\n\n\n\n","source":"_posts/神级IDEA插件.md","raw":"---\ntitle: 神级IDEA插件\ndate: 2024-05-15T10:04:28.618Z\ntags: []\ncategories: []\n---\n# 神级IDEA插件\n\n> 日常的业务功能开发，大部分情况下，核心代码差不多只占了项目的20%，剩下的80% 基本就是一些体力活，配置项等；这80%的代码，却消耗了我们大量的时间，而这部分代码，也不会对我们带来大的提升，今天给大家推荐12款我个人常用的优质的插件，旨在快速帮大家完成这80%体力代码，将更多的时间投入在核心功能的开发，告别加班，告别996！\n\n* Easy Code\n* Easy Javadoc\n* 4aiXcoder\n* Lombok\n* GsonFormatPlus\n* String Manipulation\n* Restfultoolkit\n* Key promoter X\n* Free Mybatis plugin\n\n---\n\n## Easy Code\n\n> 一个能帮我们快速将表映射成 Spring 项目中`Entity`、`Controller`、`Dervice`、`Dao`、`Mapper`等文件，快速实现基础功能的插件.  \n\n---\n\n\n\n### Easy Javadoc\n\n> 一键快速帮你生成属性、方法、类文档注释的插件，文档注释轻松搞定\n\n---\n\n### aiXcoder\n\n> 国内首款基于深度学习的智能化软件开发工具,利用AI技术实现代码⾃动⽣成、代码⾃动补全、代码智能搜索等功能,提升开发者开发效率与代码质量\n\n---\n\n### Lombok\n\n> Lombok 是一款针对 Java 语言的编译时插件，用于通过注解自动化生成重复的代码，减少一些常规的 Java 代码书写。\n\n### GsonFormatPlus\n\n> 一款用于快速将 Json 转换成 Java 对象的插件；现在的系统，前后端交互，绝大部分都使用了 Json ，因此在解析 Json 的时候，都需要一个对象来接收，使用这块工具，就可以通过 Json 文本，快速生成一个用于接收的 Java 对象，省去了逐个手敲属性的繁琐体力；\n\n---\n\n### GenerateAllSetter\n\n> 一款一键调用set、get方法的插件；当开发中遇到一个大对象需要初始化，或者要获取一个大对象中的属性时，就单纯是调用他的get、set方法，就能让人写的人手软，这款插件就能完美的帮我们解决这个体力活。\n\n---\n\n### String Manipulation\n\n> String 是使用最为频繁的数据类型，String Manipulation 插件能帮我们快速完成 String 的转换，如：大小写切换，排序，递增，转义，编码等。还支持对字符串的各种加、解密（MD5、Base64等）操作；基本包含了 String 常用的所有操作\n\n---\n\n### Restfultoolkit\n\n> 一套 RESTful 服务开发辅助工具集，完美代替Postman；在 IDEA 中即可完成接口的测试，同时也能快速所搜接口，大大提高我们的检索，测试效率。\n\n---\n\n### Key promoter X\n\n> 当年，从 Eclipse 转 IDEA 的时候，快捷键就是最大的障碍之一；能熟练的使用快捷键，将能大大提高编码的效率；`Key promoter X` 就是一款协助记忆快捷键的插件\n\n---\n\n### Free Mybatis plugin\n\n> 一款能帮助我们在 MyBatis 中实现 Mapper 与 xml 之间跳转的插件\n\n---\n\n\n\n> **熟练运用这12款插件，不出意外，相信大家的开发效率一定会有一个质的飞跃...**\n\n\n\n\n\n","slug":"神级IDEA插件","published":1,"updated":"2024-11-25T11:44:04.596Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscq0033mbs6frcc0r0b","content":"<h1 id=\"神级IDEA插件\"><a href=\"#神级IDEA插件\" class=\"headerlink\" title=\"神级IDEA插件\"></a>神级IDEA插件</h1><blockquote>\n<p>日常的业务功能开发，大部分情况下，核心代码差不多只占了项目的20%，剩下的80% 基本就是一些体力活，配置项等；这80%的代码，却消耗了我们大量的时间，而这部分代码，也不会对我们带来大的提升，今天给大家推荐12款我个人常用的优质的插件，旨在快速帮大家完成这80%体力代码，将更多的时间投入在核心功能的开发，告别加班，告别996！</p>\n</blockquote>\n<ul>\n<li>Easy Code</li>\n<li>Easy Javadoc</li>\n<li>4aiXcoder</li>\n<li>Lombok</li>\n<li>GsonFormatPlus</li>\n<li>String Manipulation</li>\n<li>Restfultoolkit</li>\n<li>Key promoter X</li>\n<li>Free Mybatis plugin</li>\n</ul>\n<hr>\n<h2 id=\"Easy-Code\"><a href=\"#Easy-Code\" class=\"headerlink\" title=\"Easy Code\"></a>Easy Code</h2><blockquote>\n<p>一个能帮我们快速将表映射成 Spring 项目中<code>Entity</code>、<code>Controller</code>、<code>Dervice</code>、<code>Dao</code>、<code>Mapper</code>等文件，快速实现基础功能的插件.  </p>\n</blockquote>\n<hr>\n<h3 id=\"Easy-Javadoc\"><a href=\"#Easy-Javadoc\" class=\"headerlink\" title=\"Easy Javadoc\"></a>Easy Javadoc</h3><blockquote>\n<p>一键快速帮你生成属性、方法、类文档注释的插件，文档注释轻松搞定</p>\n</blockquote>\n<hr>\n<h3 id=\"aiXcoder\"><a href=\"#aiXcoder\" class=\"headerlink\" title=\"aiXcoder\"></a>aiXcoder</h3><blockquote>\n<p>国内首款基于深度学习的智能化软件开发工具,利用AI技术实现代码⾃动⽣成、代码⾃动补全、代码智能搜索等功能,提升开发者开发效率与代码质量</p>\n</blockquote>\n<hr>\n<h3 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h3><blockquote>\n<p>Lombok 是一款针对 Java 语言的编译时插件，用于通过注解自动化生成重复的代码，减少一些常规的 Java 代码书写。</p>\n</blockquote>\n<h3 id=\"GsonFormatPlus\"><a href=\"#GsonFormatPlus\" class=\"headerlink\" title=\"GsonFormatPlus\"></a>GsonFormatPlus</h3><blockquote>\n<p>一款用于快速将 Json 转换成 Java 对象的插件；现在的系统，前后端交互，绝大部分都使用了 Json ，因此在解析 Json 的时候，都需要一个对象来接收，使用这块工具，就可以通过 Json 文本，快速生成一个用于接收的 Java 对象，省去了逐个手敲属性的繁琐体力；</p>\n</blockquote>\n<hr>\n<h3 id=\"GenerateAllSetter\"><a href=\"#GenerateAllSetter\" class=\"headerlink\" title=\"GenerateAllSetter\"></a>GenerateAllSetter</h3><blockquote>\n<p>一款一键调用set、get方法的插件；当开发中遇到一个大对象需要初始化，或者要获取一个大对象中的属性时，就单纯是调用他的get、set方法，就能让人写的人手软，这款插件就能完美的帮我们解决这个体力活。</p>\n</blockquote>\n<hr>\n<h3 id=\"String-Manipulation\"><a href=\"#String-Manipulation\" class=\"headerlink\" title=\"String Manipulation\"></a>String Manipulation</h3><blockquote>\n<p>String 是使用最为频繁的数据类型，String Manipulation 插件能帮我们快速完成 String 的转换，如：大小写切换，排序，递增，转义，编码等。还支持对字符串的各种加、解密（MD5、Base64等）操作；基本包含了 String 常用的所有操作</p>\n</blockquote>\n<hr>\n<h3 id=\"Restfultoolkit\"><a href=\"#Restfultoolkit\" class=\"headerlink\" title=\"Restfultoolkit\"></a>Restfultoolkit</h3><blockquote>\n<p>一套 RESTful 服务开发辅助工具集，完美代替Postman；在 IDEA 中即可完成接口的测试，同时也能快速所搜接口，大大提高我们的检索，测试效率。</p>\n</blockquote>\n<hr>\n<h3 id=\"Key-promoter-X\"><a href=\"#Key-promoter-X\" class=\"headerlink\" title=\"Key promoter X\"></a>Key promoter X</h3><blockquote>\n<p>当年，从 Eclipse 转 IDEA 的时候，快捷键就是最大的障碍之一；能熟练的使用快捷键，将能大大提高编码的效率；<code>Key promoter X</code> 就是一款协助记忆快捷键的插件</p>\n</blockquote>\n<hr>\n<h3 id=\"Free-Mybatis-plugin\"><a href=\"#Free-Mybatis-plugin\" class=\"headerlink\" title=\"Free Mybatis plugin\"></a>Free Mybatis plugin</h3><blockquote>\n<p>一款能帮助我们在 MyBatis 中实现 Mapper 与 xml 之间跳转的插件</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>熟练运用这12款插件，不出意外，相信大家的开发效率一定会有一个质的飞跃…</strong></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"神级IDEA插件\"><a href=\"#神级IDEA插件\" class=\"headerlink\" title=\"神级IDEA插件\"></a>神级IDEA插件</h1><blockquote>\n<p>日常的业务功能开发，大部分情况下，核心代码差不多只占了项目的20%，剩下的80% 基本就是一些体力活，配置项等；这80%的代码，却消耗了我们大量的时间，而这部分代码，也不会对我们带来大的提升，今天给大家推荐12款我个人常用的优质的插件，旨在快速帮大家完成这80%体力代码，将更多的时间投入在核心功能的开发，告别加班，告别996！</p>\n</blockquote>\n<ul>\n<li>Easy Code</li>\n<li>Easy Javadoc</li>\n<li>4aiXcoder</li>\n<li>Lombok</li>\n<li>GsonFormatPlus</li>\n<li>String Manipulation</li>\n<li>Restfultoolkit</li>\n<li>Key promoter X</li>\n<li>Free Mybatis plugin</li>\n</ul>\n<hr>\n<h2 id=\"Easy-Code\"><a href=\"#Easy-Code\" class=\"headerlink\" title=\"Easy Code\"></a>Easy Code</h2><blockquote>\n<p>一个能帮我们快速将表映射成 Spring 项目中<code>Entity</code>、<code>Controller</code>、<code>Dervice</code>、<code>Dao</code>、<code>Mapper</code>等文件，快速实现基础功能的插件.  </p>\n</blockquote>\n<hr>\n<h3 id=\"Easy-Javadoc\"><a href=\"#Easy-Javadoc\" class=\"headerlink\" title=\"Easy Javadoc\"></a>Easy Javadoc</h3><blockquote>\n<p>一键快速帮你生成属性、方法、类文档注释的插件，文档注释轻松搞定</p>\n</blockquote>\n<hr>\n<h3 id=\"aiXcoder\"><a href=\"#aiXcoder\" class=\"headerlink\" title=\"aiXcoder\"></a>aiXcoder</h3><blockquote>\n<p>国内首款基于深度学习的智能化软件开发工具,利用AI技术实现代码⾃动⽣成、代码⾃动补全、代码智能搜索等功能,提升开发者开发效率与代码质量</p>\n</blockquote>\n<hr>\n<h3 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h3><blockquote>\n<p>Lombok 是一款针对 Java 语言的编译时插件，用于通过注解自动化生成重复的代码，减少一些常规的 Java 代码书写。</p>\n</blockquote>\n<h3 id=\"GsonFormatPlus\"><a href=\"#GsonFormatPlus\" class=\"headerlink\" title=\"GsonFormatPlus\"></a>GsonFormatPlus</h3><blockquote>\n<p>一款用于快速将 Json 转换成 Java 对象的插件；现在的系统，前后端交互，绝大部分都使用了 Json ，因此在解析 Json 的时候，都需要一个对象来接收，使用这块工具，就可以通过 Json 文本，快速生成一个用于接收的 Java 对象，省去了逐个手敲属性的繁琐体力；</p>\n</blockquote>\n<hr>\n<h3 id=\"GenerateAllSetter\"><a href=\"#GenerateAllSetter\" class=\"headerlink\" title=\"GenerateAllSetter\"></a>GenerateAllSetter</h3><blockquote>\n<p>一款一键调用set、get方法的插件；当开发中遇到一个大对象需要初始化，或者要获取一个大对象中的属性时，就单纯是调用他的get、set方法，就能让人写的人手软，这款插件就能完美的帮我们解决这个体力活。</p>\n</blockquote>\n<hr>\n<h3 id=\"String-Manipulation\"><a href=\"#String-Manipulation\" class=\"headerlink\" title=\"String Manipulation\"></a>String Manipulation</h3><blockquote>\n<p>String 是使用最为频繁的数据类型，String Manipulation 插件能帮我们快速完成 String 的转换，如：大小写切换，排序，递增，转义，编码等。还支持对字符串的各种加、解密（MD5、Base64等）操作；基本包含了 String 常用的所有操作</p>\n</blockquote>\n<hr>\n<h3 id=\"Restfultoolkit\"><a href=\"#Restfultoolkit\" class=\"headerlink\" title=\"Restfultoolkit\"></a>Restfultoolkit</h3><blockquote>\n<p>一套 RESTful 服务开发辅助工具集，完美代替Postman；在 IDEA 中即可完成接口的测试，同时也能快速所搜接口，大大提高我们的检索，测试效率。</p>\n</blockquote>\n<hr>\n<h3 id=\"Key-promoter-X\"><a href=\"#Key-promoter-X\" class=\"headerlink\" title=\"Key promoter X\"></a>Key promoter X</h3><blockquote>\n<p>当年，从 Eclipse 转 IDEA 的时候，快捷键就是最大的障碍之一；能熟练的使用快捷键，将能大大提高编码的效率；<code>Key promoter X</code> 就是一款协助记忆快捷键的插件</p>\n</blockquote>\n<hr>\n<h3 id=\"Free-Mybatis-plugin\"><a href=\"#Free-Mybatis-plugin\" class=\"headerlink\" title=\"Free Mybatis plugin\"></a>Free Mybatis plugin</h3><blockquote>\n<p>一款能帮助我们在 MyBatis 中实现 Mapper 与 xml 之间跳转的插件</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>熟练运用这12款插件，不出意外，相信大家的开发效率一定会有一个质的飞跃…</strong></p>\n</blockquote>\n"},{"title":"什么是CDN？？？","date":"2024-09-06T11:31:03.794Z","_content":"# 什么是CDN？？？\n\nCDN（Content Delivery Network，内容分发网络）是一个分布式服务器网络，用于将内容快速、高效地分发到世界各地的用户。它通过将内容存储在多个地理位置的服务器上（称为边缘节点），使用户能够从距离自己最近的服务器下载内容，从而加快访问速度并减少服务器压力。\n\n### CDN 的工作原理\n当你访问一个使用 CDN 的网站时，CDN 会根据你的地理位置、网络条件等因素，将你的请求路由到离你最近的服务器节点。这些节点通常缓存网站的静态内容，比如图片、CSS、JavaScript 文件、视频等。通过这种方式，CDN 提供了更快、更可靠的内容交付。\n\n#### 主要流程：\n1. **用户请求**：当用户访问一个网站时，请求会首先被发送到 CDN 网络。\n2. **路由到最近的节点**：CDN 将根据用户的位置将请求路由到最近的边缘节点。\n3. **缓存命中**：如果请求的内容已经被缓存，边缘节点会直接返回缓存的内容，避免访问主服务器。\n4. **缓存未命中**：如果边缘节点没有缓存该内容，CDN 会从源服务器获取内容，并将其缓存下来，供后续用户使用。\n\n### CDN 的主要功能和优势\n1. **加速内容交付**：由于内容来自离用户最近的服务器节点，CDN 能大大减少内容传输的延迟，提升网站加载速度。\n2. **减轻源服务器压力**：CDN 缓存了网站的大部分静态内容，减少了对源服务器的直接访问，从而减轻了服务器的负载。\n3. **提高网站的可用性和稳定性**：CDN 通过分布式网络，可以在服务器故障或流量激增时平衡流量，确保网站能够继续运行。\n4. **全球覆盖**：CDN 提供全球范围的节点，确保无论用户在哪里，都可以快速访问内容。\n5. **安全性**：CDN 可以提供 DDoS 攻击防护、SSL 加速和 Web 应用防火墙等安全功能。\n\n### CDN 的常见应用\n- **网站加速**：大多数现代网站都使用 CDN 来加快加载时间，尤其是有全球用户访问的站点。\n- **视频流媒体**：CDN 常用于视频流媒体服务，如 YouTube、Netflix，以保证视频在不同地区的流畅播放。\n- **静态资源分发**：CDN 可以缓存和分发静态资源，如图片、CSS、JavaScript 文件等，减少服务器的压力。\n\n### 常见的 CDN 服务提供商\n- **Cloudflare**：一个广泛使用的 CDN 提供商，支持免费和付费方案，提供全方位的安全和加速服务。\n- **Amazon CloudFront**：Amazon Web Services 提供的 CDN 服务，广泛用于全球范围的内容分发。\n- **Akamai**：一个老牌的 CDN 提供商，专注于企业级的加速和安全服务。\n- **Fastly**：快速增长的 CDN 提供商，专注于实时内容分发和边缘计算。\n\n### 总结\nCDN 的核心功能是通过全球分布的服务器网络，将内容快速、安全地传递给用户。通过使用 CDN，网站和应用可以显著提高加载速度、增强用户体验、减轻服务器压力，同时提升全球用户的访问性能。","source":"_posts/什么是CDN？？？.md","raw":"---\ntitle: 什么是CDN？？？\ndate: 2024-09-06T19:31:03.794Z\ntags: []\ncategories: []\n---\n# 什么是CDN？？？\n\nCDN（Content Delivery Network，内容分发网络）是一个分布式服务器网络，用于将内容快速、高效地分发到世界各地的用户。它通过将内容存储在多个地理位置的服务器上（称为边缘节点），使用户能够从距离自己最近的服务器下载内容，从而加快访问速度并减少服务器压力。\n\n### CDN 的工作原理\n当你访问一个使用 CDN 的网站时，CDN 会根据你的地理位置、网络条件等因素，将你的请求路由到离你最近的服务器节点。这些节点通常缓存网站的静态内容，比如图片、CSS、JavaScript 文件、视频等。通过这种方式，CDN 提供了更快、更可靠的内容交付。\n\n#### 主要流程：\n1. **用户请求**：当用户访问一个网站时，请求会首先被发送到 CDN 网络。\n2. **路由到最近的节点**：CDN 将根据用户的位置将请求路由到最近的边缘节点。\n3. **缓存命中**：如果请求的内容已经被缓存，边缘节点会直接返回缓存的内容，避免访问主服务器。\n4. **缓存未命中**：如果边缘节点没有缓存该内容，CDN 会从源服务器获取内容，并将其缓存下来，供后续用户使用。\n\n### CDN 的主要功能和优势\n1. **加速内容交付**：由于内容来自离用户最近的服务器节点，CDN 能大大减少内容传输的延迟，提升网站加载速度。\n2. **减轻源服务器压力**：CDN 缓存了网站的大部分静态内容，减少了对源服务器的直接访问，从而减轻了服务器的负载。\n3. **提高网站的可用性和稳定性**：CDN 通过分布式网络，可以在服务器故障或流量激增时平衡流量，确保网站能够继续运行。\n4. **全球覆盖**：CDN 提供全球范围的节点，确保无论用户在哪里，都可以快速访问内容。\n5. **安全性**：CDN 可以提供 DDoS 攻击防护、SSL 加速和 Web 应用防火墙等安全功能。\n\n### CDN 的常见应用\n- **网站加速**：大多数现代网站都使用 CDN 来加快加载时间，尤其是有全球用户访问的站点。\n- **视频流媒体**：CDN 常用于视频流媒体服务，如 YouTube、Netflix，以保证视频在不同地区的流畅播放。\n- **静态资源分发**：CDN 可以缓存和分发静态资源，如图片、CSS、JavaScript 文件等，减少服务器的压力。\n\n### 常见的 CDN 服务提供商\n- **Cloudflare**：一个广泛使用的 CDN 提供商，支持免费和付费方案，提供全方位的安全和加速服务。\n- **Amazon CloudFront**：Amazon Web Services 提供的 CDN 服务，广泛用于全球范围的内容分发。\n- **Akamai**：一个老牌的 CDN 提供商，专注于企业级的加速和安全服务。\n- **Fastly**：快速增长的 CDN 提供商，专注于实时内容分发和边缘计算。\n\n### 总结\nCDN 的核心功能是通过全球分布的服务器网络，将内容快速、安全地传递给用户。通过使用 CDN，网站和应用可以显著提高加载速度、增强用户体验、减轻服务器压力，同时提升全球用户的访问性能。","slug":"什么是CDN？？？","published":1,"updated":"2024-11-25T11:44:04.601Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscr0034mbs6an6mdu9x","content":"<h1 id=\"什么是CDN？？？\"><a href=\"#什么是CDN？？？\" class=\"headerlink\" title=\"什么是CDN？？？\"></a>什么是CDN？？？</h1><p>CDN（Content Delivery Network，内容分发网络）是一个分布式服务器网络，用于将内容快速、高效地分发到世界各地的用户。它通过将内容存储在多个地理位置的服务器上（称为边缘节点），使用户能够从距离自己最近的服务器下载内容，从而加快访问速度并减少服务器压力。</p>\n<h3 id=\"CDN-的工作原理\"><a href=\"#CDN-的工作原理\" class=\"headerlink\" title=\"CDN 的工作原理\"></a>CDN 的工作原理</h3><p>当你访问一个使用 CDN 的网站时，CDN 会根据你的地理位置、网络条件等因素，将你的请求路由到离你最近的服务器节点。这些节点通常缓存网站的静态内容，比如图片、CSS、JavaScript 文件、视频等。通过这种方式，CDN 提供了更快、更可靠的内容交付。</p>\n<h4 id=\"主要流程：\"><a href=\"#主要流程：\" class=\"headerlink\" title=\"主要流程：\"></a>主要流程：</h4><ol>\n<li><strong>用户请求</strong>：当用户访问一个网站时，请求会首先被发送到 CDN 网络。</li>\n<li><strong>路由到最近的节点</strong>：CDN 将根据用户的位置将请求路由到最近的边缘节点。</li>\n<li><strong>缓存命中</strong>：如果请求的内容已经被缓存，边缘节点会直接返回缓存的内容，避免访问主服务器。</li>\n<li><strong>缓存未命中</strong>：如果边缘节点没有缓存该内容，CDN 会从源服务器获取内容，并将其缓存下来，供后续用户使用。</li>\n</ol>\n<h3 id=\"CDN-的主要功能和优势\"><a href=\"#CDN-的主要功能和优势\" class=\"headerlink\" title=\"CDN 的主要功能和优势\"></a>CDN 的主要功能和优势</h3><ol>\n<li><strong>加速内容交付</strong>：由于内容来自离用户最近的服务器节点，CDN 能大大减少内容传输的延迟，提升网站加载速度。</li>\n<li><strong>减轻源服务器压力</strong>：CDN 缓存了网站的大部分静态内容，减少了对源服务器的直接访问，从而减轻了服务器的负载。</li>\n<li><strong>提高网站的可用性和稳定性</strong>：CDN 通过分布式网络，可以在服务器故障或流量激增时平衡流量，确保网站能够继续运行。</li>\n<li><strong>全球覆盖</strong>：CDN 提供全球范围的节点，确保无论用户在哪里，都可以快速访问内容。</li>\n<li><strong>安全性</strong>：CDN 可以提供 DDoS 攻击防护、SSL 加速和 Web 应用防火墙等安全功能。</li>\n</ol>\n<h3 id=\"CDN-的常见应用\"><a href=\"#CDN-的常见应用\" class=\"headerlink\" title=\"CDN 的常见应用\"></a>CDN 的常见应用</h3><ul>\n<li><strong>网站加速</strong>：大多数现代网站都使用 CDN 来加快加载时间，尤其是有全球用户访问的站点。</li>\n<li><strong>视频流媒体</strong>：CDN 常用于视频流媒体服务，如 YouTube、Netflix，以保证视频在不同地区的流畅播放。</li>\n<li><strong>静态资源分发</strong>：CDN 可以缓存和分发静态资源，如图片、CSS、JavaScript 文件等，减少服务器的压力。</li>\n</ul>\n<h3 id=\"常见的-CDN-服务提供商\"><a href=\"#常见的-CDN-服务提供商\" class=\"headerlink\" title=\"常见的 CDN 服务提供商\"></a>常见的 CDN 服务提供商</h3><ul>\n<li><strong>Cloudflare</strong>：一个广泛使用的 CDN 提供商，支持免费和付费方案，提供全方位的安全和加速服务。</li>\n<li><strong>Amazon CloudFront</strong>：Amazon Web Services 提供的 CDN 服务，广泛用于全球范围的内容分发。</li>\n<li><strong>Akamai</strong>：一个老牌的 CDN 提供商，专注于企业级的加速和安全服务。</li>\n<li><strong>Fastly</strong>：快速增长的 CDN 提供商，专注于实时内容分发和边缘计算。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>CDN 的核心功能是通过全球分布的服务器网络，将内容快速、安全地传递给用户。通过使用 CDN，网站和应用可以显著提高加载速度、增强用户体验、减轻服务器压力，同时提升全球用户的访问性能。</p>\n","excerpt":"","more":"<h1 id=\"什么是CDN？？？\"><a href=\"#什么是CDN？？？\" class=\"headerlink\" title=\"什么是CDN？？？\"></a>什么是CDN？？？</h1><p>CDN（Content Delivery Network，内容分发网络）是一个分布式服务器网络，用于将内容快速、高效地分发到世界各地的用户。它通过将内容存储在多个地理位置的服务器上（称为边缘节点），使用户能够从距离自己最近的服务器下载内容，从而加快访问速度并减少服务器压力。</p>\n<h3 id=\"CDN-的工作原理\"><a href=\"#CDN-的工作原理\" class=\"headerlink\" title=\"CDN 的工作原理\"></a>CDN 的工作原理</h3><p>当你访问一个使用 CDN 的网站时，CDN 会根据你的地理位置、网络条件等因素，将你的请求路由到离你最近的服务器节点。这些节点通常缓存网站的静态内容，比如图片、CSS、JavaScript 文件、视频等。通过这种方式，CDN 提供了更快、更可靠的内容交付。</p>\n<h4 id=\"主要流程：\"><a href=\"#主要流程：\" class=\"headerlink\" title=\"主要流程：\"></a>主要流程：</h4><ol>\n<li><strong>用户请求</strong>：当用户访问一个网站时，请求会首先被发送到 CDN 网络。</li>\n<li><strong>路由到最近的节点</strong>：CDN 将根据用户的位置将请求路由到最近的边缘节点。</li>\n<li><strong>缓存命中</strong>：如果请求的内容已经被缓存，边缘节点会直接返回缓存的内容，避免访问主服务器。</li>\n<li><strong>缓存未命中</strong>：如果边缘节点没有缓存该内容，CDN 会从源服务器获取内容，并将其缓存下来，供后续用户使用。</li>\n</ol>\n<h3 id=\"CDN-的主要功能和优势\"><a href=\"#CDN-的主要功能和优势\" class=\"headerlink\" title=\"CDN 的主要功能和优势\"></a>CDN 的主要功能和优势</h3><ol>\n<li><strong>加速内容交付</strong>：由于内容来自离用户最近的服务器节点，CDN 能大大减少内容传输的延迟，提升网站加载速度。</li>\n<li><strong>减轻源服务器压力</strong>：CDN 缓存了网站的大部分静态内容，减少了对源服务器的直接访问，从而减轻了服务器的负载。</li>\n<li><strong>提高网站的可用性和稳定性</strong>：CDN 通过分布式网络，可以在服务器故障或流量激增时平衡流量，确保网站能够继续运行。</li>\n<li><strong>全球覆盖</strong>：CDN 提供全球范围的节点，确保无论用户在哪里，都可以快速访问内容。</li>\n<li><strong>安全性</strong>：CDN 可以提供 DDoS 攻击防护、SSL 加速和 Web 应用防火墙等安全功能。</li>\n</ol>\n<h3 id=\"CDN-的常见应用\"><a href=\"#CDN-的常见应用\" class=\"headerlink\" title=\"CDN 的常见应用\"></a>CDN 的常见应用</h3><ul>\n<li><strong>网站加速</strong>：大多数现代网站都使用 CDN 来加快加载时间，尤其是有全球用户访问的站点。</li>\n<li><strong>视频流媒体</strong>：CDN 常用于视频流媒体服务，如 YouTube、Netflix，以保证视频在不同地区的流畅播放。</li>\n<li><strong>静态资源分发</strong>：CDN 可以缓存和分发静态资源，如图片、CSS、JavaScript 文件等，减少服务器的压力。</li>\n</ul>\n<h3 id=\"常见的-CDN-服务提供商\"><a href=\"#常见的-CDN-服务提供商\" class=\"headerlink\" title=\"常见的 CDN 服务提供商\"></a>常见的 CDN 服务提供商</h3><ul>\n<li><strong>Cloudflare</strong>：一个广泛使用的 CDN 提供商，支持免费和付费方案，提供全方位的安全和加速服务。</li>\n<li><strong>Amazon CloudFront</strong>：Amazon Web Services 提供的 CDN 服务，广泛用于全球范围的内容分发。</li>\n<li><strong>Akamai</strong>：一个老牌的 CDN 提供商，专注于企业级的加速和安全服务。</li>\n<li><strong>Fastly</strong>：快速增长的 CDN 提供商，专注于实时内容分发和边缘计算。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>CDN 的核心功能是通过全球分布的服务器网络，将内容快速、安全地传递给用户。通过使用 CDN，网站和应用可以显著提高加载速度、增强用户体验、减轻服务器压力，同时提升全球用户的访问性能。</p>\n"},{"title":"排序算法","date":"2024-09-10T06:36:32.981Z","_content":"  排序算法是计算机科学中非常重要的基础算法之一，用于将一组数据按照某种顺序（如从小到大或从大到小）排列。常见的排序算法有很多种，每种算法的时间复杂度和适用场景也有所不同。以下是几种经典排序算法的介绍：\n\n### 1. **冒泡排序（Bubble Sort）**\n- **原理**：冒泡排序每次比较相邻的两个元素，如果它们的顺序不符合要求（例如前一个元素大于后一个元素），就交换它们。每一轮操作后，最大的元素会“冒泡”到最后。\n- **时间复杂度**：O(n²)\n- **优点**：实现简单，适合小规模数据。\n- **缺点**：效率较低，尤其是数据量大时。\n\n### 2. **选择排序（Selection Sort）**\n- **原理**：选择排序每次遍历数组，找到未排序部分中最小的元素，并将其与未排序部分的第一个元素交换。重复此过程，直到所有元素排序完毕。\n- **时间复杂度**：O(n²)\n- **优点**：交换次数较少，适合数据交换代价较高的情况。\n- **缺点**：比较次数较多，效率不高。\n\n### 3. **插入排序（Insertion Sort）**\n- **原理**：插入排序将数组分为已排序和未排序两部分，从未排序部分取出元素，将其插入到已排序部分的正确位置。\n- **时间复杂度**：O(n²)\n- **优点**：对于少量数据或几乎已经排序的数组非常高效。\n- **缺点**：数据量大时效率较低。\n\n### 4. **归并排序（Merge Sort）**\n- **原理**：归并排序采用分治法，将数组分成两个子数组，分别排序后合并。合并时保证合并后的数组有序。\n- **时间复杂度**：O(n log n)\n- **优点**：效率较高，稳定排序，适合大规模数据。\n- **缺点**：需要额外的存储空间来存放中间结果。\n\n### 5. **快速排序（Quick Sort）**\n- **原理**：快速排序同样使用分治法，通过选择一个“基准”元素，将数组划分为两部分，左侧部分比基准元素小，右侧部分比基准元素大，然后递归对左右两部分进行排序。\n- **时间复杂度**：O(n log n)（平均情况下）\n- **优点**：在大多数情况下效率非常高，常被认为是实践中最快的排序算法之一。\n- **缺点**：在最坏情况下（例如每次选择的基准都是最小或最大的元素），时间复杂度会退化为O(n²)。\n\n### 6. **堆排序（Heap Sort）**\n- **原理**：堆排序利用堆这种数据结构，首先将数组构造成一个最大堆，然后逐一取出堆顶元素，并将其放到数组末尾，调整堆以维持堆的性质。\n- **时间复杂度**：O(n log n)\n- **优点**：不需要额外的存储空间，适合数据量较大的情况。\n- **缺点**：不是稳定排序。\n\n### 7. **计数排序（Counting Sort）**\n- **原理**：计数排序适用于取值范围有限的整数数组。它通过计数数组中各个值出现的次数，依次将数据放入最终数组中。\n- **时间复杂度**：O(n + k)（k是数据范围）\n- **优点**：时间复杂度低，适合数据范围较小的情况。\n- **缺点**：需要额外的计数数组，适用于整数排序。\n\n### 8. **桶排序（Bucket Sort）**\n- **原理**：将数据分到若干个桶中，然后对每个桶分别进行排序，最后合并所有桶中的数据。\n- **时间复杂度**：O(n)（取决于桶内排序算法）\n- **优点**：适合数据分布均匀的情况。\n- **缺点**：需要足够的桶来存储数据。\n\n### 9. **基数排序（Radix Sort）**\n- **原理**：基数排序适用于多个关键字的排序（如多位数字），先从最低位开始，逐位对每个位数进行排序。\n- **时间复杂度**：O(d(n + k))（d是位数，k是每个位上的取值范围）\n- **优点**：适合数据位数较多且取值范围较小的情况。\n- **缺点**：需要额外的空间来存储中间结果。\n\n### 总结\n排序算法的选择通常取决于数据的规模和特性。例如，快速排序在大多数情况下效率较高，归并排序稳定且适合大数据集，插入排序则在小数据集或几乎有序的数据中表现优异。\n\n你有特定的数据集或排序需求吗？可以根据场景推荐合适的算法。\n\n\n\n\n\n## 以下是几种常见排序算法的Java实现及解释。\n\n### 1. **冒泡排序（Bubble Sort）**\n```java\npublic class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // 交换 arr[j] 和 arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 9, 1, 5, 6};\n        bubbleSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 外层循环 `i` 控制排序轮数。\n- 内层循环 `j` 每次比较相邻两个元素，如果前面的元素大于后面的元素，则交换它们的位置。\n- 每一轮结束后，最大的元素会“冒泡”到数组的最后，因而内层循环的比较范围逐渐减小。\n- 时间复杂度为O(n²)，因为最坏情况下每对元素都要比较并交换。\n\n### 2. **选择排序（Selection Sort）**\n```java\npublic class SelectionSort {\n    public static void selectionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            int minIdx = i;\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j] < arr[minIdx]) {\n                    minIdx = j;\n                }\n            }\n            // 交换 arr[i] 和 arr[minIdx]\n            int temp = arr[i];\n            arr[i] = arr[minIdx];\n            arr[minIdx] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 9, 1, 5, 6};\n        selectionSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 外层循环 `i` 确定当前要放置的最小元素位置。\n- 内层循环 `j` 从未排序部分找出最小的元素并记录其索引`minIdx`。\n- 找到最小元素后，与当前`i`位置的元素交换。\n- 时间复杂度同样是O(n²)，因为每次都要遍历剩余未排序的部分。\n\n### 3. **插入排序（Insertion Sort）**\n```java\npublic class InsertionSort {\n    public static void insertionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 1; i < n; i++) {\n            int key = arr[i];\n            int j = i - 1;\n            // 向左移动比 key 大的元素\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 9, 1, 5, 6};\n        insertionSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 从第二个元素开始，将其作为`key`，然后向左检查所有已经排序的部分，找到合适的位置插入`key`。\n- 每次内层循环向左移动比`key`大的元素，直到找到`key`应该插入的位置。\n- 适合近乎有序的数据，时间复杂度最坏情况下为O(n²)，但在最佳情况下是O(n)。\n\n### 4. **快速排序（Quick Sort）**\n```java\npublic class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);  // 左侧排序\n            quickSort(arr, pi + 1, high); // 右侧排序\n        }\n    }\n\n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high]; // 选择最后一个元素作为基准\n        int i = (low - 1);\n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                // 交换 arr[i] 和 arr[j]\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        // 将基准元素放到正确位置\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {10, 7, 8, 9, 1, 5};\n        quickSort(arr, 0, arr.length - 1);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 快速排序通过选择一个基准元素（`pivot`），将数组划分为两部分，左边的元素都比`pivot`小，右边的元素都比`pivot`大。\n- `partition`函数负责进行划分，并返回基准元素的最终位置。\n- 然后递归地对左右两部分分别进行排序。\n- 平均时间复杂度为O(n log n)，最坏情况下（如每次选择的`pivot`是最小或最大的元素）为O(n²)。\n\n### 5. **归并排序（Merge Sort）**\n```java\npublic class MergeSort {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            mergeSort(arr, left, mid);    // 左半部分排序\n            mergeSort(arr, mid + 1, right); // 右半部分排序\n            merge(arr, left, mid, right); // 合并两部分\n        }\n    }\n\n    private static void merge(int[] arr, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n        for (int i = 0; i < n1; i++) L[i] = arr[left + i];\n        for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];\n        int i = 0, j = 0, k = left;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {12, 11, 13, 5, 6, 7};\n        mergeSort(arr, 0, arr.length - 1);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 归并排序采用分治法，将数组不断拆分为两部分，直到每部分只有一个元素。\n- 然后通过`merge`函数将已排序的两部分合并成一个有序数组。\n- 时间复杂度为O(n log n)，稳定排序，但需要额外的存储空间来存放中间结果。\n\n这些实现展示了几种常见排序算法的核心逻辑，每种算法在不同情况下的性能有所不同。\n\n\n\n## 排序算法根据是否保持相等元素的相对顺序，可分为**稳定排序**和**不稳定排序**：\n\n### 1. **稳定排序**：\n稳定排序是指在排序过程中，相等的元素排序后其相对位置不发生改变。换句话说，排序前在数组中相对位置相同的两个元素，排序后也保持相同的相对位置。\n\n常见的稳定排序算法有：\n- **冒泡排序（Bubble Sort）**：相等元素不会被交换，因此是稳定的。\n- **插入排序（Insertion Sort）**：每次将元素插入到合适位置时，不会改变相等元素的相对顺序。\n- **归并排序（Merge Sort）**：在合并两个子数组时，如果左右两部分元素相等，优先选择左边的元素，因此保持了相对顺序。\n- **计数排序（Counting Sort）**：通过计算每个元素出现的次数，并按顺序排列，能确保相同元素的相对顺序。\n- **基数排序（Radix Sort）**：对每一位数进行稳定排序，因此整体排序也是稳定的。\n\n### 2. **不稳定排序**：\n不稳定排序是指在排序过程中，相等的元素排序后其相对位置可能会发生改变。换句话说，排序前相对位置相同的元素，排序后可能会在数组中不同位置。\n\n常见的不稳定排序算法有：\n- **选择排序（Selection Sort）**：在每次选择最小元素并交换时，可能会导致相等元素的相对顺序发生改变。\n- **快速排序（Quick Sort）**：划分过程中，相等元素可能会移动到不同的分区，从而改变它们的相对顺序。\n- **堆排序（Heap Sort）**：在构建堆或调整堆的过程中，相等元素的相对顺序可能会被打乱。\n\n### 总结\n**稳定排序**算法保持了相等元素的相对顺序，适用于对有多个字段进行排序的情况，比如数据库中的多字段排序。而**不稳定排序**可能更适合对速度要求较高，且不关心相等元素顺序的情况。","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndate: 2024-09-10T14:36:32.981Z\ntags: []\ncategories: []\n---\n  排序算法是计算机科学中非常重要的基础算法之一，用于将一组数据按照某种顺序（如从小到大或从大到小）排列。常见的排序算法有很多种，每种算法的时间复杂度和适用场景也有所不同。以下是几种经典排序算法的介绍：\n\n### 1. **冒泡排序（Bubble Sort）**\n- **原理**：冒泡排序每次比较相邻的两个元素，如果它们的顺序不符合要求（例如前一个元素大于后一个元素），就交换它们。每一轮操作后，最大的元素会“冒泡”到最后。\n- **时间复杂度**：O(n²)\n- **优点**：实现简单，适合小规模数据。\n- **缺点**：效率较低，尤其是数据量大时。\n\n### 2. **选择排序（Selection Sort）**\n- **原理**：选择排序每次遍历数组，找到未排序部分中最小的元素，并将其与未排序部分的第一个元素交换。重复此过程，直到所有元素排序完毕。\n- **时间复杂度**：O(n²)\n- **优点**：交换次数较少，适合数据交换代价较高的情况。\n- **缺点**：比较次数较多，效率不高。\n\n### 3. **插入排序（Insertion Sort）**\n- **原理**：插入排序将数组分为已排序和未排序两部分，从未排序部分取出元素，将其插入到已排序部分的正确位置。\n- **时间复杂度**：O(n²)\n- **优点**：对于少量数据或几乎已经排序的数组非常高效。\n- **缺点**：数据量大时效率较低。\n\n### 4. **归并排序（Merge Sort）**\n- **原理**：归并排序采用分治法，将数组分成两个子数组，分别排序后合并。合并时保证合并后的数组有序。\n- **时间复杂度**：O(n log n)\n- **优点**：效率较高，稳定排序，适合大规模数据。\n- **缺点**：需要额外的存储空间来存放中间结果。\n\n### 5. **快速排序（Quick Sort）**\n- **原理**：快速排序同样使用分治法，通过选择一个“基准”元素，将数组划分为两部分，左侧部分比基准元素小，右侧部分比基准元素大，然后递归对左右两部分进行排序。\n- **时间复杂度**：O(n log n)（平均情况下）\n- **优点**：在大多数情况下效率非常高，常被认为是实践中最快的排序算法之一。\n- **缺点**：在最坏情况下（例如每次选择的基准都是最小或最大的元素），时间复杂度会退化为O(n²)。\n\n### 6. **堆排序（Heap Sort）**\n- **原理**：堆排序利用堆这种数据结构，首先将数组构造成一个最大堆，然后逐一取出堆顶元素，并将其放到数组末尾，调整堆以维持堆的性质。\n- **时间复杂度**：O(n log n)\n- **优点**：不需要额外的存储空间，适合数据量较大的情况。\n- **缺点**：不是稳定排序。\n\n### 7. **计数排序（Counting Sort）**\n- **原理**：计数排序适用于取值范围有限的整数数组。它通过计数数组中各个值出现的次数，依次将数据放入最终数组中。\n- **时间复杂度**：O(n + k)（k是数据范围）\n- **优点**：时间复杂度低，适合数据范围较小的情况。\n- **缺点**：需要额外的计数数组，适用于整数排序。\n\n### 8. **桶排序（Bucket Sort）**\n- **原理**：将数据分到若干个桶中，然后对每个桶分别进行排序，最后合并所有桶中的数据。\n- **时间复杂度**：O(n)（取决于桶内排序算法）\n- **优点**：适合数据分布均匀的情况。\n- **缺点**：需要足够的桶来存储数据。\n\n### 9. **基数排序（Radix Sort）**\n- **原理**：基数排序适用于多个关键字的排序（如多位数字），先从最低位开始，逐位对每个位数进行排序。\n- **时间复杂度**：O(d(n + k))（d是位数，k是每个位上的取值范围）\n- **优点**：适合数据位数较多且取值范围较小的情况。\n- **缺点**：需要额外的空间来存储中间结果。\n\n### 总结\n排序算法的选择通常取决于数据的规模和特性。例如，快速排序在大多数情况下效率较高，归并排序稳定且适合大数据集，插入排序则在小数据集或几乎有序的数据中表现优异。\n\n你有特定的数据集或排序需求吗？可以根据场景推荐合适的算法。\n\n\n\n\n\n## 以下是几种常见排序算法的Java实现及解释。\n\n### 1. **冒泡排序（Bubble Sort）**\n```java\npublic class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // 交换 arr[j] 和 arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 9, 1, 5, 6};\n        bubbleSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 外层循环 `i` 控制排序轮数。\n- 内层循环 `j` 每次比较相邻两个元素，如果前面的元素大于后面的元素，则交换它们的位置。\n- 每一轮结束后，最大的元素会“冒泡”到数组的最后，因而内层循环的比较范围逐渐减小。\n- 时间复杂度为O(n²)，因为最坏情况下每对元素都要比较并交换。\n\n### 2. **选择排序（Selection Sort）**\n```java\npublic class SelectionSort {\n    public static void selectionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            int minIdx = i;\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j] < arr[minIdx]) {\n                    minIdx = j;\n                }\n            }\n            // 交换 arr[i] 和 arr[minIdx]\n            int temp = arr[i];\n            arr[i] = arr[minIdx];\n            arr[minIdx] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 9, 1, 5, 6};\n        selectionSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 外层循环 `i` 确定当前要放置的最小元素位置。\n- 内层循环 `j` 从未排序部分找出最小的元素并记录其索引`minIdx`。\n- 找到最小元素后，与当前`i`位置的元素交换。\n- 时间复杂度同样是O(n²)，因为每次都要遍历剩余未排序的部分。\n\n### 3. **插入排序（Insertion Sort）**\n```java\npublic class InsertionSort {\n    public static void insertionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 1; i < n; i++) {\n            int key = arr[i];\n            int j = i - 1;\n            // 向左移动比 key 大的元素\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 9, 1, 5, 6};\n        insertionSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 从第二个元素开始，将其作为`key`，然后向左检查所有已经排序的部分，找到合适的位置插入`key`。\n- 每次内层循环向左移动比`key`大的元素，直到找到`key`应该插入的位置。\n- 适合近乎有序的数据，时间复杂度最坏情况下为O(n²)，但在最佳情况下是O(n)。\n\n### 4. **快速排序（Quick Sort）**\n```java\npublic class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);  // 左侧排序\n            quickSort(arr, pi + 1, high); // 右侧排序\n        }\n    }\n\n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high]; // 选择最后一个元素作为基准\n        int i = (low - 1);\n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                // 交换 arr[i] 和 arr[j]\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        // 将基准元素放到正确位置\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {10, 7, 8, 9, 1, 5};\n        quickSort(arr, 0, arr.length - 1);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 快速排序通过选择一个基准元素（`pivot`），将数组划分为两部分，左边的元素都比`pivot`小，右边的元素都比`pivot`大。\n- `partition`函数负责进行划分，并返回基准元素的最终位置。\n- 然后递归地对左右两部分分别进行排序。\n- 平均时间复杂度为O(n log n)，最坏情况下（如每次选择的`pivot`是最小或最大的元素）为O(n²)。\n\n### 5. **归并排序（Merge Sort）**\n```java\npublic class MergeSort {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            mergeSort(arr, left, mid);    // 左半部分排序\n            mergeSort(arr, mid + 1, right); // 右半部分排序\n            merge(arr, left, mid, right); // 合并两部分\n        }\n    }\n\n    private static void merge(int[] arr, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n        for (int i = 0; i < n1; i++) L[i] = arr[left + i];\n        for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];\n        int i = 0, j = 0, k = left;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {12, 11, 13, 5, 6, 7};\n        mergeSort(arr, 0, arr.length - 1);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n**解释**：\n- 归并排序采用分治法，将数组不断拆分为两部分，直到每部分只有一个元素。\n- 然后通过`merge`函数将已排序的两部分合并成一个有序数组。\n- 时间复杂度为O(n log n)，稳定排序，但需要额外的存储空间来存放中间结果。\n\n这些实现展示了几种常见排序算法的核心逻辑，每种算法在不同情况下的性能有所不同。\n\n\n\n## 排序算法根据是否保持相等元素的相对顺序，可分为**稳定排序**和**不稳定排序**：\n\n### 1. **稳定排序**：\n稳定排序是指在排序过程中，相等的元素排序后其相对位置不发生改变。换句话说，排序前在数组中相对位置相同的两个元素，排序后也保持相同的相对位置。\n\n常见的稳定排序算法有：\n- **冒泡排序（Bubble Sort）**：相等元素不会被交换，因此是稳定的。\n- **插入排序（Insertion Sort）**：每次将元素插入到合适位置时，不会改变相等元素的相对顺序。\n- **归并排序（Merge Sort）**：在合并两个子数组时，如果左右两部分元素相等，优先选择左边的元素，因此保持了相对顺序。\n- **计数排序（Counting Sort）**：通过计算每个元素出现的次数，并按顺序排列，能确保相同元素的相对顺序。\n- **基数排序（Radix Sort）**：对每一位数进行稳定排序，因此整体排序也是稳定的。\n\n### 2. **不稳定排序**：\n不稳定排序是指在排序过程中，相等的元素排序后其相对位置可能会发生改变。换句话说，排序前相对位置相同的元素，排序后可能会在数组中不同位置。\n\n常见的不稳定排序算法有：\n- **选择排序（Selection Sort）**：在每次选择最小元素并交换时，可能会导致相等元素的相对顺序发生改变。\n- **快速排序（Quick Sort）**：划分过程中，相等元素可能会移动到不同的分区，从而改变它们的相对顺序。\n- **堆排序（Heap Sort）**：在构建堆或调整堆的过程中，相等元素的相对顺序可能会被打乱。\n\n### 总结\n**稳定排序**算法保持了相等元素的相对顺序，适用于对有多个字段进行排序的情况，比如数据库中的多字段排序。而**不稳定排序**可能更适合对速度要求较高，且不关心相等元素顺序的情况。","slug":"排序算法","published":1,"updated":"2024-11-25T11:44:04.607Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscr0035mbs601ijeq3q","content":"<p>  排序算法是计算机科学中非常重要的基础算法之一，用于将一组数据按照某种顺序（如从小到大或从大到小）排列。常见的排序算法有很多种，每种算法的时间复杂度和适用场景也有所不同。以下是几种经典排序算法的介绍：</p>\n<h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1. 冒泡排序（Bubble Sort）\"></a>1. <strong>冒泡排序（Bubble Sort）</strong></h3><ul>\n<li><strong>原理</strong>：冒泡排序每次比较相邻的两个元素，如果它们的顺序不符合要求（例如前一个元素大于后一个元素），就交换它们。每一轮操作后，最大的元素会“冒泡”到最后。</li>\n<li><strong>时间复杂度</strong>：O(n²)</li>\n<li><strong>优点</strong>：实现简单，适合小规模数据。</li>\n<li><strong>缺点</strong>：效率较低，尤其是数据量大时。</li>\n</ul>\n<h3 id=\"2-选择排序（Selection-Sort）\"><a href=\"#2-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"2. 选择排序（Selection Sort）\"></a>2. <strong>选择排序（Selection Sort）</strong></h3><ul>\n<li><strong>原理</strong>：选择排序每次遍历数组，找到未排序部分中最小的元素，并将其与未排序部分的第一个元素交换。重复此过程，直到所有元素排序完毕。</li>\n<li><strong>时间复杂度</strong>：O(n²)</li>\n<li><strong>优点</strong>：交换次数较少，适合数据交换代价较高的情况。</li>\n<li><strong>缺点</strong>：比较次数较多，效率不高。</li>\n</ul>\n<h3 id=\"3-插入排序（Insertion-Sort）\"><a href=\"#3-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"3. 插入排序（Insertion Sort）\"></a>3. <strong>插入排序（Insertion Sort）</strong></h3><ul>\n<li><strong>原理</strong>：插入排序将数组分为已排序和未排序两部分，从未排序部分取出元素，将其插入到已排序部分的正确位置。</li>\n<li><strong>时间复杂度</strong>：O(n²)</li>\n<li><strong>优点</strong>：对于少量数据或几乎已经排序的数组非常高效。</li>\n<li><strong>缺点</strong>：数据量大时效率较低。</li>\n</ul>\n<h3 id=\"4-归并排序（Merge-Sort）\"><a href=\"#4-归并排序（Merge-Sort）\" class=\"headerlink\" title=\"4. 归并排序（Merge Sort）\"></a>4. <strong>归并排序（Merge Sort）</strong></h3><ul>\n<li><strong>原理</strong>：归并排序采用分治法，将数组分成两个子数组，分别排序后合并。合并时保证合并后的数组有序。</li>\n<li><strong>时间复杂度</strong>：O(n log n)</li>\n<li><strong>优点</strong>：效率较高，稳定排序，适合大规模数据。</li>\n<li><strong>缺点</strong>：需要额外的存储空间来存放中间结果。</li>\n</ul>\n<h3 id=\"5-快速排序（Quick-Sort）\"><a href=\"#5-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"5. 快速排序（Quick Sort）\"></a>5. <strong>快速排序（Quick Sort）</strong></h3><ul>\n<li><strong>原理</strong>：快速排序同样使用分治法，通过选择一个“基准”元素，将数组划分为两部分，左侧部分比基准元素小，右侧部分比基准元素大，然后递归对左右两部分进行排序。</li>\n<li><strong>时间复杂度</strong>：O(n log n)（平均情况下）</li>\n<li><strong>优点</strong>：在大多数情况下效率非常高，常被认为是实践中最快的排序算法之一。</li>\n<li><strong>缺点</strong>：在最坏情况下（例如每次选择的基准都是最小或最大的元素），时间复杂度会退化为O(n²)。</li>\n</ul>\n<h3 id=\"6-堆排序（Heap-Sort）\"><a href=\"#6-堆排序（Heap-Sort）\" class=\"headerlink\" title=\"6. 堆排序（Heap Sort）\"></a>6. <strong>堆排序（Heap Sort）</strong></h3><ul>\n<li><strong>原理</strong>：堆排序利用堆这种数据结构，首先将数组构造成一个最大堆，然后逐一取出堆顶元素，并将其放到数组末尾，调整堆以维持堆的性质。</li>\n<li><strong>时间复杂度</strong>：O(n log n)</li>\n<li><strong>优点</strong>：不需要额外的存储空间，适合数据量较大的情况。</li>\n<li><strong>缺点</strong>：不是稳定排序。</li>\n</ul>\n<h3 id=\"7-计数排序（Counting-Sort）\"><a href=\"#7-计数排序（Counting-Sort）\" class=\"headerlink\" title=\"7. 计数排序（Counting Sort）\"></a>7. <strong>计数排序（Counting Sort）</strong></h3><ul>\n<li><strong>原理</strong>：计数排序适用于取值范围有限的整数数组。它通过计数数组中各个值出现的次数，依次将数据放入最终数组中。</li>\n<li><strong>时间复杂度</strong>：O(n + k)（k是数据范围）</li>\n<li><strong>优点</strong>：时间复杂度低，适合数据范围较小的情况。</li>\n<li><strong>缺点</strong>：需要额外的计数数组，适用于整数排序。</li>\n</ul>\n<h3 id=\"8-桶排序（Bucket-Sort）\"><a href=\"#8-桶排序（Bucket-Sort）\" class=\"headerlink\" title=\"8. 桶排序（Bucket Sort）\"></a>8. <strong>桶排序（Bucket Sort）</strong></h3><ul>\n<li><strong>原理</strong>：将数据分到若干个桶中，然后对每个桶分别进行排序，最后合并所有桶中的数据。</li>\n<li><strong>时间复杂度</strong>：O(n)（取决于桶内排序算法）</li>\n<li><strong>优点</strong>：适合数据分布均匀的情况。</li>\n<li><strong>缺点</strong>：需要足够的桶来存储数据。</li>\n</ul>\n<h3 id=\"9-基数排序（Radix-Sort）\"><a href=\"#9-基数排序（Radix-Sort）\" class=\"headerlink\" title=\"9. 基数排序（Radix Sort）\"></a>9. <strong>基数排序（Radix Sort）</strong></h3><ul>\n<li><strong>原理</strong>：基数排序适用于多个关键字的排序（如多位数字），先从最低位开始，逐位对每个位数进行排序。</li>\n<li><strong>时间复杂度</strong>：O(d(n + k))（d是位数，k是每个位上的取值范围）</li>\n<li><strong>优点</strong>：适合数据位数较多且取值范围较小的情况。</li>\n<li><strong>缺点</strong>：需要额外的空间来存储中间结果。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>排序算法的选择通常取决于数据的规模和特性。例如，快速排序在大多数情况下效率较高，归并排序稳定且适合大数据集，插入排序则在小数据集或几乎有序的数据中表现优异。</p>\n<p>你有特定的数据集或排序需求吗？可以根据场景推荐合适的算法。</p>\n<h2 id=\"以下是几种常见排序算法的Java实现及解释。\"><a href=\"#以下是几种常见排序算法的Java实现及解释。\" class=\"headerlink\" title=\"以下是几种常见排序算法的Java实现及解释。\"></a>以下是几种常见排序算法的Java实现及解释。</h2><h3 id=\"1-冒泡排序（Bubble-Sort）-1\"><a href=\"#1-冒泡排序（Bubble-Sort）-1\" class=\"headerlink\" title=\"1. 冒泡排序（Bubble Sort）\"></a>1. <strong>冒泡排序（Bubble Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 交换 arr[j] 和 arr[j+1]</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>外层循环 <code>i</code> 控制排序轮数。</li>\n<li>内层循环 <code>j</code> 每次比较相邻两个元素，如果前面的元素大于后面的元素，则交换它们的位置。</li>\n<li>每一轮结束后，最大的元素会“冒泡”到数组的最后，因而内层循环的比较范围逐渐减小。</li>\n<li>时间复杂度为O(n²)，因为最坏情况下每对元素都要比较并交换。</li>\n</ul>\n<h3 id=\"2-选择排序（Selection-Sort）-1\"><a href=\"#2-选择排序（Selection-Sort）-1\" class=\"headerlink\" title=\"2. 选择排序（Selection Sort）\"></a>2. <strong>选择排序（Selection Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">minIdx</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIdx]) &#123;</span><br><span class=\"line\">                    minIdx = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 交换 arr[i] 和 arr[minIdx]</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            arr[i] = arr[minIdx];</span><br><span class=\"line\">            arr[minIdx] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        selectionSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>外层循环 <code>i</code> 确定当前要放置的最小元素位置。</li>\n<li>内层循环 <code>j</code> 从未排序部分找出最小的元素并记录其索引<code>minIdx</code>。</li>\n<li>找到最小元素后，与当前<code>i</code>位置的元素交换。</li>\n<li>时间复杂度同样是O(n²)，因为每次都要遍历剩余未排序的部分。</li>\n</ul>\n<h3 id=\"3-插入排序（Insertion-Sort）-1\"><a href=\"#3-插入排序（Insertion-Sort）-1\" class=\"headerlink\" title=\"3. 插入排序（Insertion Sort）\"></a>3. <strong>插入排序（Insertion Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 向左移动比 key 大的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        insertionSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>从第二个元素开始，将其作为<code>key</code>，然后向左检查所有已经排序的部分，找到合适的位置插入<code>key</code>。</li>\n<li>每次内层循环向左移动比<code>key</code>大的元素，直到找到<code>key</code>应该插入的位置。</li>\n<li>适合近乎有序的数据，时间复杂度最坏情况下为O(n²)，但在最佳情况下是O(n)。</li>\n</ul>\n<h3 id=\"4-快速排序（Quick-Sort）\"><a href=\"#4-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"4. 快速排序（Quick Sort）\"></a>4. <strong>快速排序（Quick Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> partition(arr, low, high);</span><br><span class=\"line\">            quickSort(arr, low, pi - <span class=\"number\">1</span>);  <span class=\"comment\">// 左侧排序</span></span><br><span class=\"line\">            quickSort(arr, pi + <span class=\"number\">1</span>, high); <span class=\"comment\">// 右侧排序</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[high]; <span class=\"comment\">// 选择最后一个元素作为基准</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (low - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low; j &lt; high; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"comment\">// 交换 arr[i] 和 arr[j]</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">                arr[i] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将基准元素放到正确位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">        arr[high] = temp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>快速排序通过选择一个基准元素（<code>pivot</code>），将数组划分为两部分，左边的元素都比<code>pivot</code>小，右边的元素都比<code>pivot</code>大。</li>\n<li><code>partition</code>函数负责进行划分，并返回基准元素的最终位置。</li>\n<li>然后递归地对左右两部分分别进行排序。</li>\n<li>平均时间复杂度为O(n log n)，最坏情况下（如每次选择的<code>pivot</code>是最小或最大的元素）为O(n²)。</li>\n</ul>\n<h3 id=\"5-归并排序（Merge-Sort）\"><a href=\"#5-归并排序（Merge-Sort）\" class=\"headerlink\" title=\"5. 归并排序（Merge Sort）\"></a>5. <strong>归并排序（Merge Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            mergeSort(arr, left, mid);    <span class=\"comment\">// 左半部分排序</span></span><br><span class=\"line\">            mergeSort(arr, mid + <span class=\"number\">1</span>, right); <span class=\"comment\">// 右半部分排序</span></span><br><span class=\"line\">            merge(arr, left, mid, right); <span class=\"comment\">// 合并两部分</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> mid - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> right - mid;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] L = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n1];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] R = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n2];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n1; i++) L[i] = arr[left + i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n2; j++) R[j] = arr[mid + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = left;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class=\"line\">                arr[k] = L[i];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                arr[k] = R[j];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n1) &#123;</span><br><span class=\"line\">            arr[k] = L[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; n2) &#123;</span><br><span class=\"line\">            arr[k] = R[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">        mergeSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>归并排序采用分治法，将数组不断拆分为两部分，直到每部分只有一个元素。</li>\n<li>然后通过<code>merge</code>函数将已排序的两部分合并成一个有序数组。</li>\n<li>时间复杂度为O(n log n)，稳定排序，但需要额外的存储空间来存放中间结果。</li>\n</ul>\n<p>这些实现展示了几种常见排序算法的核心逻辑，每种算法在不同情况下的性能有所不同。</p>\n<h2 id=\"排序算法根据是否保持相等元素的相对顺序，可分为稳定排序和不稳定排序：\"><a href=\"#排序算法根据是否保持相等元素的相对顺序，可分为稳定排序和不稳定排序：\" class=\"headerlink\" title=\"排序算法根据是否保持相等元素的相对顺序，可分为稳定排序和不稳定排序：\"></a>排序算法根据是否保持相等元素的相对顺序，可分为<strong>稳定排序</strong>和<strong>不稳定排序</strong>：</h2><h3 id=\"1-稳定排序：\"><a href=\"#1-稳定排序：\" class=\"headerlink\" title=\"1. 稳定排序：\"></a>1. <strong>稳定排序</strong>：</h3><p>稳定排序是指在排序过程中，相等的元素排序后其相对位置不发生改变。换句话说，排序前在数组中相对位置相同的两个元素，排序后也保持相同的相对位置。</p>\n<p>常见的稳定排序算法有：</p>\n<ul>\n<li><strong>冒泡排序（Bubble Sort）</strong>：相等元素不会被交换，因此是稳定的。</li>\n<li><strong>插入排序（Insertion Sort）</strong>：每次将元素插入到合适位置时，不会改变相等元素的相对顺序。</li>\n<li><strong>归并排序（Merge Sort）</strong>：在合并两个子数组时，如果左右两部分元素相等，优先选择左边的元素，因此保持了相对顺序。</li>\n<li><strong>计数排序（Counting Sort）</strong>：通过计算每个元素出现的次数，并按顺序排列，能确保相同元素的相对顺序。</li>\n<li><strong>基数排序（Radix Sort）</strong>：对每一位数进行稳定排序，因此整体排序也是稳定的。</li>\n</ul>\n<h3 id=\"2-不稳定排序：\"><a href=\"#2-不稳定排序：\" class=\"headerlink\" title=\"2. 不稳定排序：\"></a>2. <strong>不稳定排序</strong>：</h3><p>不稳定排序是指在排序过程中，相等的元素排序后其相对位置可能会发生改变。换句话说，排序前相对位置相同的元素，排序后可能会在数组中不同位置。</p>\n<p>常见的不稳定排序算法有：</p>\n<ul>\n<li><strong>选择排序（Selection Sort）</strong>：在每次选择最小元素并交换时，可能会导致相等元素的相对顺序发生改变。</li>\n<li><strong>快速排序（Quick Sort）</strong>：划分过程中，相等元素可能会移动到不同的分区，从而改变它们的相对顺序。</li>\n<li><strong>堆排序（Heap Sort）</strong>：在构建堆或调整堆的过程中，相等元素的相对顺序可能会被打乱。</li>\n</ul>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>稳定排序</strong>算法保持了相等元素的相对顺序，适用于对有多个字段进行排序的情况，比如数据库中的多字段排序。而<strong>不稳定排序</strong>可能更适合对速度要求较高，且不关心相等元素顺序的情况。</p>\n","excerpt":"","more":"<p>  排序算法是计算机科学中非常重要的基础算法之一，用于将一组数据按照某种顺序（如从小到大或从大到小）排列。常见的排序算法有很多种，每种算法的时间复杂度和适用场景也有所不同。以下是几种经典排序算法的介绍：</p>\n<h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1. 冒泡排序（Bubble Sort）\"></a>1. <strong>冒泡排序（Bubble Sort）</strong></h3><ul>\n<li><strong>原理</strong>：冒泡排序每次比较相邻的两个元素，如果它们的顺序不符合要求（例如前一个元素大于后一个元素），就交换它们。每一轮操作后，最大的元素会“冒泡”到最后。</li>\n<li><strong>时间复杂度</strong>：O(n²)</li>\n<li><strong>优点</strong>：实现简单，适合小规模数据。</li>\n<li><strong>缺点</strong>：效率较低，尤其是数据量大时。</li>\n</ul>\n<h3 id=\"2-选择排序（Selection-Sort）\"><a href=\"#2-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"2. 选择排序（Selection Sort）\"></a>2. <strong>选择排序（Selection Sort）</strong></h3><ul>\n<li><strong>原理</strong>：选择排序每次遍历数组，找到未排序部分中最小的元素，并将其与未排序部分的第一个元素交换。重复此过程，直到所有元素排序完毕。</li>\n<li><strong>时间复杂度</strong>：O(n²)</li>\n<li><strong>优点</strong>：交换次数较少，适合数据交换代价较高的情况。</li>\n<li><strong>缺点</strong>：比较次数较多，效率不高。</li>\n</ul>\n<h3 id=\"3-插入排序（Insertion-Sort）\"><a href=\"#3-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"3. 插入排序（Insertion Sort）\"></a>3. <strong>插入排序（Insertion Sort）</strong></h3><ul>\n<li><strong>原理</strong>：插入排序将数组分为已排序和未排序两部分，从未排序部分取出元素，将其插入到已排序部分的正确位置。</li>\n<li><strong>时间复杂度</strong>：O(n²)</li>\n<li><strong>优点</strong>：对于少量数据或几乎已经排序的数组非常高效。</li>\n<li><strong>缺点</strong>：数据量大时效率较低。</li>\n</ul>\n<h3 id=\"4-归并排序（Merge-Sort）\"><a href=\"#4-归并排序（Merge-Sort）\" class=\"headerlink\" title=\"4. 归并排序（Merge Sort）\"></a>4. <strong>归并排序（Merge Sort）</strong></h3><ul>\n<li><strong>原理</strong>：归并排序采用分治法，将数组分成两个子数组，分别排序后合并。合并时保证合并后的数组有序。</li>\n<li><strong>时间复杂度</strong>：O(n log n)</li>\n<li><strong>优点</strong>：效率较高，稳定排序，适合大规模数据。</li>\n<li><strong>缺点</strong>：需要额外的存储空间来存放中间结果。</li>\n</ul>\n<h3 id=\"5-快速排序（Quick-Sort）\"><a href=\"#5-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"5. 快速排序（Quick Sort）\"></a>5. <strong>快速排序（Quick Sort）</strong></h3><ul>\n<li><strong>原理</strong>：快速排序同样使用分治法，通过选择一个“基准”元素，将数组划分为两部分，左侧部分比基准元素小，右侧部分比基准元素大，然后递归对左右两部分进行排序。</li>\n<li><strong>时间复杂度</strong>：O(n log n)（平均情况下）</li>\n<li><strong>优点</strong>：在大多数情况下效率非常高，常被认为是实践中最快的排序算法之一。</li>\n<li><strong>缺点</strong>：在最坏情况下（例如每次选择的基准都是最小或最大的元素），时间复杂度会退化为O(n²)。</li>\n</ul>\n<h3 id=\"6-堆排序（Heap-Sort）\"><a href=\"#6-堆排序（Heap-Sort）\" class=\"headerlink\" title=\"6. 堆排序（Heap Sort）\"></a>6. <strong>堆排序（Heap Sort）</strong></h3><ul>\n<li><strong>原理</strong>：堆排序利用堆这种数据结构，首先将数组构造成一个最大堆，然后逐一取出堆顶元素，并将其放到数组末尾，调整堆以维持堆的性质。</li>\n<li><strong>时间复杂度</strong>：O(n log n)</li>\n<li><strong>优点</strong>：不需要额外的存储空间，适合数据量较大的情况。</li>\n<li><strong>缺点</strong>：不是稳定排序。</li>\n</ul>\n<h3 id=\"7-计数排序（Counting-Sort）\"><a href=\"#7-计数排序（Counting-Sort）\" class=\"headerlink\" title=\"7. 计数排序（Counting Sort）\"></a>7. <strong>计数排序（Counting Sort）</strong></h3><ul>\n<li><strong>原理</strong>：计数排序适用于取值范围有限的整数数组。它通过计数数组中各个值出现的次数，依次将数据放入最终数组中。</li>\n<li><strong>时间复杂度</strong>：O(n + k)（k是数据范围）</li>\n<li><strong>优点</strong>：时间复杂度低，适合数据范围较小的情况。</li>\n<li><strong>缺点</strong>：需要额外的计数数组，适用于整数排序。</li>\n</ul>\n<h3 id=\"8-桶排序（Bucket-Sort）\"><a href=\"#8-桶排序（Bucket-Sort）\" class=\"headerlink\" title=\"8. 桶排序（Bucket Sort）\"></a>8. <strong>桶排序（Bucket Sort）</strong></h3><ul>\n<li><strong>原理</strong>：将数据分到若干个桶中，然后对每个桶分别进行排序，最后合并所有桶中的数据。</li>\n<li><strong>时间复杂度</strong>：O(n)（取决于桶内排序算法）</li>\n<li><strong>优点</strong>：适合数据分布均匀的情况。</li>\n<li><strong>缺点</strong>：需要足够的桶来存储数据。</li>\n</ul>\n<h3 id=\"9-基数排序（Radix-Sort）\"><a href=\"#9-基数排序（Radix-Sort）\" class=\"headerlink\" title=\"9. 基数排序（Radix Sort）\"></a>9. <strong>基数排序（Radix Sort）</strong></h3><ul>\n<li><strong>原理</strong>：基数排序适用于多个关键字的排序（如多位数字），先从最低位开始，逐位对每个位数进行排序。</li>\n<li><strong>时间复杂度</strong>：O(d(n + k))（d是位数，k是每个位上的取值范围）</li>\n<li><strong>优点</strong>：适合数据位数较多且取值范围较小的情况。</li>\n<li><strong>缺点</strong>：需要额外的空间来存储中间结果。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>排序算法的选择通常取决于数据的规模和特性。例如，快速排序在大多数情况下效率较高，归并排序稳定且适合大数据集，插入排序则在小数据集或几乎有序的数据中表现优异。</p>\n<p>你有特定的数据集或排序需求吗？可以根据场景推荐合适的算法。</p>\n<h2 id=\"以下是几种常见排序算法的Java实现及解释。\"><a href=\"#以下是几种常见排序算法的Java实现及解释。\" class=\"headerlink\" title=\"以下是几种常见排序算法的Java实现及解释。\"></a>以下是几种常见排序算法的Java实现及解释。</h2><h3 id=\"1-冒泡排序（Bubble-Sort）-1\"><a href=\"#1-冒泡排序（Bubble-Sort）-1\" class=\"headerlink\" title=\"1. 冒泡排序（Bubble Sort）\"></a>1. <strong>冒泡排序（Bubble Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 交换 arr[j] 和 arr[j+1]</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>外层循环 <code>i</code> 控制排序轮数。</li>\n<li>内层循环 <code>j</code> 每次比较相邻两个元素，如果前面的元素大于后面的元素，则交换它们的位置。</li>\n<li>每一轮结束后，最大的元素会“冒泡”到数组的最后，因而内层循环的比较范围逐渐减小。</li>\n<li>时间复杂度为O(n²)，因为最坏情况下每对元素都要比较并交换。</li>\n</ul>\n<h3 id=\"2-选择排序（Selection-Sort）-1\"><a href=\"#2-选择排序（Selection-Sort）-1\" class=\"headerlink\" title=\"2. 选择排序（Selection Sort）\"></a>2. <strong>选择排序（Selection Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">minIdx</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIdx]) &#123;</span><br><span class=\"line\">                    minIdx = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 交换 arr[i] 和 arr[minIdx]</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            arr[i] = arr[minIdx];</span><br><span class=\"line\">            arr[minIdx] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        selectionSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>外层循环 <code>i</code> 确定当前要放置的最小元素位置。</li>\n<li>内层循环 <code>j</code> 从未排序部分找出最小的元素并记录其索引<code>minIdx</code>。</li>\n<li>找到最小元素后，与当前<code>i</code>位置的元素交换。</li>\n<li>时间复杂度同样是O(n²)，因为每次都要遍历剩余未排序的部分。</li>\n</ul>\n<h3 id=\"3-插入排序（Insertion-Sort）-1\"><a href=\"#3-插入排序（Insertion-Sort）-1\" class=\"headerlink\" title=\"3. 插入排序（Insertion Sort）\"></a>3. <strong>插入排序（Insertion Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 向左移动比 key 大的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        insertionSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>从第二个元素开始，将其作为<code>key</code>，然后向左检查所有已经排序的部分，找到合适的位置插入<code>key</code>。</li>\n<li>每次内层循环向左移动比<code>key</code>大的元素，直到找到<code>key</code>应该插入的位置。</li>\n<li>适合近乎有序的数据，时间复杂度最坏情况下为O(n²)，但在最佳情况下是O(n)。</li>\n</ul>\n<h3 id=\"4-快速排序（Quick-Sort）\"><a href=\"#4-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"4. 快速排序（Quick Sort）\"></a>4. <strong>快速排序（Quick Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> partition(arr, low, high);</span><br><span class=\"line\">            quickSort(arr, low, pi - <span class=\"number\">1</span>);  <span class=\"comment\">// 左侧排序</span></span><br><span class=\"line\">            quickSort(arr, pi + <span class=\"number\">1</span>, high); <span class=\"comment\">// 右侧排序</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[high]; <span class=\"comment\">// 选择最后一个元素作为基准</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (low - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low; j &lt; high; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"comment\">// 交换 arr[i] 和 arr[j]</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">                arr[i] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将基准元素放到正确位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">        arr[high] = temp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>快速排序通过选择一个基准元素（<code>pivot</code>），将数组划分为两部分，左边的元素都比<code>pivot</code>小，右边的元素都比<code>pivot</code>大。</li>\n<li><code>partition</code>函数负责进行划分，并返回基准元素的最终位置。</li>\n<li>然后递归地对左右两部分分别进行排序。</li>\n<li>平均时间复杂度为O(n log n)，最坏情况下（如每次选择的<code>pivot</code>是最小或最大的元素）为O(n²)。</li>\n</ul>\n<h3 id=\"5-归并排序（Merge-Sort）\"><a href=\"#5-归并排序（Merge-Sort）\" class=\"headerlink\" title=\"5. 归并排序（Merge Sort）\"></a>5. <strong>归并排序（Merge Sort）</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            mergeSort(arr, left, mid);    <span class=\"comment\">// 左半部分排序</span></span><br><span class=\"line\">            mergeSort(arr, mid + <span class=\"number\">1</span>, right); <span class=\"comment\">// 右半部分排序</span></span><br><span class=\"line\">            merge(arr, left, mid, right); <span class=\"comment\">// 合并两部分</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> mid - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> right - mid;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] L = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n1];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] R = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n2];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n1; i++) L[i] = arr[left + i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n2; j++) R[j] = arr[mid + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = left;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class=\"line\">                arr[k] = L[i];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                arr[k] = R[j];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n1) &#123;</span><br><span class=\"line\">            arr[k] = L[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; n2) &#123;</span><br><span class=\"line\">            arr[k] = R[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">        mergeSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : arr) &#123;</span><br><span class=\"line\">            System.out.print(num + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>归并排序采用分治法，将数组不断拆分为两部分，直到每部分只有一个元素。</li>\n<li>然后通过<code>merge</code>函数将已排序的两部分合并成一个有序数组。</li>\n<li>时间复杂度为O(n log n)，稳定排序，但需要额外的存储空间来存放中间结果。</li>\n</ul>\n<p>这些实现展示了几种常见排序算法的核心逻辑，每种算法在不同情况下的性能有所不同。</p>\n<h2 id=\"排序算法根据是否保持相等元素的相对顺序，可分为稳定排序和不稳定排序：\"><a href=\"#排序算法根据是否保持相等元素的相对顺序，可分为稳定排序和不稳定排序：\" class=\"headerlink\" title=\"排序算法根据是否保持相等元素的相对顺序，可分为稳定排序和不稳定排序：\"></a>排序算法根据是否保持相等元素的相对顺序，可分为<strong>稳定排序</strong>和<strong>不稳定排序</strong>：</h2><h3 id=\"1-稳定排序：\"><a href=\"#1-稳定排序：\" class=\"headerlink\" title=\"1. 稳定排序：\"></a>1. <strong>稳定排序</strong>：</h3><p>稳定排序是指在排序过程中，相等的元素排序后其相对位置不发生改变。换句话说，排序前在数组中相对位置相同的两个元素，排序后也保持相同的相对位置。</p>\n<p>常见的稳定排序算法有：</p>\n<ul>\n<li><strong>冒泡排序（Bubble Sort）</strong>：相等元素不会被交换，因此是稳定的。</li>\n<li><strong>插入排序（Insertion Sort）</strong>：每次将元素插入到合适位置时，不会改变相等元素的相对顺序。</li>\n<li><strong>归并排序（Merge Sort）</strong>：在合并两个子数组时，如果左右两部分元素相等，优先选择左边的元素，因此保持了相对顺序。</li>\n<li><strong>计数排序（Counting Sort）</strong>：通过计算每个元素出现的次数，并按顺序排列，能确保相同元素的相对顺序。</li>\n<li><strong>基数排序（Radix Sort）</strong>：对每一位数进行稳定排序，因此整体排序也是稳定的。</li>\n</ul>\n<h3 id=\"2-不稳定排序：\"><a href=\"#2-不稳定排序：\" class=\"headerlink\" title=\"2. 不稳定排序：\"></a>2. <strong>不稳定排序</strong>：</h3><p>不稳定排序是指在排序过程中，相等的元素排序后其相对位置可能会发生改变。换句话说，排序前相对位置相同的元素，排序后可能会在数组中不同位置。</p>\n<p>常见的不稳定排序算法有：</p>\n<ul>\n<li><strong>选择排序（Selection Sort）</strong>：在每次选择最小元素并交换时，可能会导致相等元素的相对顺序发生改变。</li>\n<li><strong>快速排序（Quick Sort）</strong>：划分过程中，相等元素可能会移动到不同的分区，从而改变它们的相对顺序。</li>\n<li><strong>堆排序（Heap Sort）</strong>：在构建堆或调整堆的过程中，相等元素的相对顺序可能会被打乱。</li>\n</ul>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>稳定排序</strong>算法保持了相等元素的相对顺序，适用于对有多个字段进行排序的情况，比如数据库中的多字段排序。而<strong>不稳定排序</strong>可能更适合对速度要求较高，且不关心相等元素顺序的情况。</p>\n"},{"title":"基本步骤","date":"2024-09-08T16:12:21.495Z","_content":"USDT（Tether）的API开发主要是围绕加密货币交易、钱包管理、以及区块链交互等内容进行的。你可以使用不同的区块链平台（如以太坊、Tron）来进行USDT的开发，这涉及到对这些区块链的API或SDK进行操作。\n\n通常有以下几种场景：\n\n1. **钱包管理：** 使用API创建、管理USDT钱包，获取余额，或进行转账交易。\n2. **交易：** 与加密货币交易所的API对接，进行买卖USDT的操作。\n3. **区块链交互：** 通过区块链平台（如以太坊、Tron）的API来查询USDT相关的交易信息，或者发送交易。\n\n### 基本步骤\n\n1. **选择区块链网络：**\n   - **Ethereum**：USDT基于ERC20标准运行。你可以使用Web3.js或Ethers.js与以太坊上的USDT合约进行交互。\n   - **Tron**：USDT基于TRC20标准运行。Tron的API和SDK可以帮助你与USDT合约进行交互。\n\n2. **获取API密钥：**\n   - 如果你是与加密货币交易所进行交互（如Binance、OKX等），你需要在这些平台注册并获取API密钥。\n\n3. **使用区块链库：**\n   - 对于以太坊，使用`Web3.js`库可以与智能合约交互。你可以调用USDT的智能合约来查询余额、转账等。\n   - 对于Tron，可以使用`tronWeb`库进行交互。\n\n### 以太坊（ERC20）上的USDT操作示例\n\n```js\nconst Web3 = require('web3');\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\n\n// USDT ERC20合约地址\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst usdtAbi = [ /* ERC20 ABI */ ]; // 你需要导入或定义ERC20合约的ABI\n\n// 创建USDT合约对象\nconst usdtContract = new web3.eth.Contract(usdtAbi, usdtContractAddress);\n\n// 查询USDT余额\nconst getBalance = async (walletAddress) => {\n    const balance = await usdtContract.methods.balanceOf(walletAddress).call();\n    console.log('USDT余额:', web3.utils.fromWei(balance, 'mwei'));\n};\n\n// 转账USDT\nconst transferUSDT = async (fromAddress, toAddress, amount, privateKey) => {\n    const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest'); // 获取最新的nonce\n    const tx = {\n        'from': fromAddress,\n        'to': usdtContractAddress,\n        'nonce': nonce,\n        'gas': 2000000,\n        'data': usdtContract.methods.transfer(toAddress, web3.utils.toWei(amount, 'mwei')).encodeABI()\n    };\n\n    const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n    console.log('Transaction receipt:', receipt);\n};\n```\n\n### Tron（TRC20）上的USDT操作示例\n\n```js\nconst TronWeb = require('tronweb');\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: '你的私钥'\n});\n\n// USDT TRC20合约地址\nconst usdtContractAddress = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';\n\n// 查询USDT余额\nconst getBalance = async (walletAddress) => {\n    const contract = await tronWeb.contract().at(usdtContractAddress);\n    const balance = await contract.balanceOf(walletAddress).call();\n    console.log('USDT余额:', balance.toString());\n};\n\n// 转账USDT\nconst transferUSDT = async (fromAddress, toAddress, amount) => {\n    const contract = await tronWeb.contract().at(usdtContractAddress);\n    const transaction = await contract.transfer(toAddress, amount).send({\n        from: fromAddress\n    });\n    console.log('Transaction:', transaction);\n};\n```\n\n### 使用交易所API (如Binance)\n\n你可以通过交易所的API来进行USDT的交易操作，如买入、卖出、获取市场数据等。下面以Binance API为例：\n\n```js\nconst axios = require('axios');\nconst crypto = require('crypto');\n\nconst apiKey = '你的Binance API Key';\nconst apiSecret = '你的Binance API Secret';\n\nconst getSignature = (queryString) => {\n    return crypto.createHmac('sha256', apiSecret).update(queryString).digest('hex');\n};\n\nconst getAccountInfo = async () => {\n    const queryString = `timestamp=${Date.now()}`;\n    const signature = getSignature(queryString);\n\n    const response = await axios.get(`https://api.binance.com/api/v3/account?${queryString}&signature=${signature}`, {\n        headers: {\n            'X-MBX-APIKEY': apiKey\n        }\n    });\n\n    console.log('Account Info:', response.data);\n};\n```\n\n### 注意事项\n- **安全性**：确保API密钥和私钥的安全性，不要泄露到不受信任的地方。\n- **费用**：加密货币交易涉及到矿工费用（Gas费），需要考虑在开发中。\n- **网络**：测试代码时，推荐使用测试网络（如Ropsten, Kovan, Tron Shasta等），而不是主网。\n\n根据你使用的区块链和交易所平台，具体的API和开发流程可能会有所不同。你可以根据需要进一步定制。\n\n\n\n\n\n你可以将USDT查询与转账功能制作成一个简单的网页，或者通过Telegram机器人实现快捷查询功能。\n\n### 1. 网页实现\n\n可以使用HTML、JavaScript和后端技术（例如Node.js）构建一个支持USDT余额查询和转账的网页。\n\n#### 前端HTML+JavaScript页面示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>USDT 查询与转账</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .container {\n            width: 50%;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .input-group {\n            margin-bottom: 10px;\n        }\n        .input-group label {\n            margin-right: 10px;\n        }\n        button {\n            padding: 10px 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>USDT 查询与转账</h2>\n        <div class=\"input-group\">\n            <label for=\"walletAddress\">钱包地址:</label>\n            <input type=\"text\" id=\"walletAddress\" placeholder=\"请输入钱包地址\">\n        </div>\n        <button onclick=\"getBalance()\">查询余额</button>\n        <p id=\"balanceResult\"></p>\n\n        <h3>转账</h3>\n        <div class=\"input-group\">\n            <label for=\"toAddress\">接收地址:</label>\n            <input type=\"text\" id=\"toAddress\" placeholder=\"请输入接收地址\">\n        </div>\n        <div class=\"input-group\">\n            <label for=\"amount\">金额:</label>\n            <input type=\"text\" id=\"amount\" placeholder=\"请输入转账金额\">\n        </div>\n        <button onclick=\"transferUSDT()\">转账</button>\n        <p id=\"transferResult\"></p>\n    </div>\n\n    <script>\n        // 调用后端API的示例\n        async function getBalance() {\n            const walletAddress = document.getElementById('walletAddress').value;\n            const response = await fetch('/api/getBalance', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ walletAddress })\n            });\n            const result = await response.json();\n            document.getElementById('balanceResult').innerText = `余额: ${result.balance} USDT`;\n        }\n\n        async function transferUSDT() {\n            const toAddress = document.getElementById('toAddress').value;\n            const amount = document.getElementById('amount').value;\n            const response = await fetch('/api/transferUSDT', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ toAddress, amount })\n            });\n            const result = await response.json();\n            document.getElementById('transferResult').innerText = `转账结果: ${result.message}`;\n        }\n    </script>\n</body>\n</html>\n```\n\n#### 后端（Node.js示例）\n\n```js\nconst express = require('express');\nconst Web3 = require('web3');\nconst TronWeb = require('tronweb');\nconst app = express();\n\napp.use(express.json());\n\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: 'YOUR_PRIVATE_KEY'\n});\n\n// ERC20 USDT合约地址\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst usdtAbi = [ /* ERC20 ABI */ ];\nconst usdtContract = new web3.eth.Contract(usdtAbi, usdtContractAddress);\n\n// 查询USDT余额\napp.post('/api/getBalance', async (req, res) => {\n    const walletAddress = req.body.walletAddress;\n    try {\n        const balance = await usdtContract.methods.balanceOf(walletAddress).call();\n        res.json({ balance: web3.utils.fromWei(balance, 'mwei') });\n    } catch (error) {\n        res.json({ error: error.message });\n    }\n});\n\n// 转账USDT\napp.post('/api/transferUSDT', async (req, res) => {\n    const { toAddress, amount } = req.body;\n    const fromAddress = 'YOUR_FROM_ADDRESS';\n    const privateKey = 'YOUR_PRIVATE_KEY';\n    try {\n        const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest');\n        const tx = {\n            from: fromAddress,\n            to: usdtContractAddress,\n            nonce: nonce,\n            gas: 2000000,\n            data: usdtContract.methods.transfer(toAddress, web3.utils.toWei(amount, 'mwei')).encodeABI()\n        };\n        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n        res.json({ message: '转账成功', receipt });\n    } catch (error) {\n        res.json({ message: '转账失败', error: error.message });\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});\n```\n\n这样你可以通过一个简单的网页前端，让用户输入钱包地址查询USDT余额，或是输入接收地址和金额进行转账。\n\n### 2. Telegram Bot实现\n\n可以通过使用Telegram Bot API和Node.js开发一个简单的Telegram机器人来查询USDT余额或发起转账请求。\n\n#### 创建Telegram Bot\n1. 通过[@BotFather](https://t.me/BotFather)创建一个新的Telegram机器人，并获得API密钥。\n\n#### Node.js Telegram Bot 示例\n\n```js\nconst TelegramBot = require('node-telegram-bot-api');\nconst Web3 = require('web3');\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: 'YOUR_PRIVATE_KEY'\n});\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst usdtAbi = [ /* ERC20 ABI */ ];\n\nconst bot = new TelegramBot('YOUR_TELEGRAM_BOT_TOKEN', { polling: true });\nconst usdtContract = new web3.eth.Contract(usdtAbi, usdtContractAddress);\n\nbot.onText(/\\/balance (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const walletAddress = match[1];\n    try {\n        const balance = await usdtContract.methods.balanceOf(walletAddress).call();\n        bot.sendMessage(chatId, `USDT 余额: ${web3.utils.fromWei(balance, 'mwei')}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `查询失败: ${error.message}`);\n    }\n});\n\nbot.onText(/\\/transfer (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const [toAddress, amount] = match[1].split(' ');\n    const fromAddress = 'YOUR_FROM_ADDRESS';\n    const privateKey = 'YOUR_PRIVATE_KEY';\n\n    try {\n        const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest');\n        const tx = {\n            from: fromAddress,\n            to: usdtContractAddress,\n            nonce: nonce,\n            gas: 2000000,\n            data: usdtContract.methods.transfer(toAddress, web3.utils.toWei(amount, 'mwei')).encodeABI()\n        };\n        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n        bot.sendMessage(chatId, `转账成功: ${receipt.transactionHash}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `转账失败: ${error.message}`);\n    }\n});\n```\n\n这样可以使用命令`/balance [钱包地址]`查询余额，使用`/transfer [接收地址] [金额]`发起转账请求。\n\n\n\n\n\n关于TRC20（基于Tron链的USDT）的查询和转账，可以通过使用`TronWeb`库与Tron网络进行交互。接下来将展示如何通过网页或Telegram机器人实现TRC20 USDT的余额查询和转账功能。\n\n### Trc网页实现\n\n#### 前端HTML+JavaScript页面示例\n\n这个示例与之前的类似，只需修改后端代码以支持TronWeb即可。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>TRC20 USDT 查询与转账</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .container {\n            width: 50%;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .input-group {\n            margin-bottom: 10px;\n        }\n        .input-group label {\n            margin-right: 10px;\n        }\n        button {\n            padding: 10px 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>TRC20 USDT 查询与转账</h2>\n        <div class=\"input-group\">\n            <label for=\"walletAddress\">钱包地址:</label>\n            <input type=\"text\" id=\"walletAddress\" placeholder=\"请输入钱包地址\">\n        </div>\n        <button onclick=\"getBalance()\">查询余额</button>\n        <p id=\"balanceResult\"></p>\n\n        <h3>转账</h3>\n        <div class=\"input-group\">\n            <label for=\"toAddress\">接收地址:</label>\n            <input type=\"text\" id=\"toAddress\" placeholder=\"请输入接收地址\">\n        </div>\n        <div class=\"input-group\">\n            <label for=\"amount\">金额:</label>\n            <input type=\"text\" id=\"amount\" placeholder=\"请输入转账金额\">\n        </div>\n        <button onclick=\"transferUSDT()\">转账</button>\n        <p id=\"transferResult\"></p>\n    </div>\n\n    <script>\n        // 调用后端API的示例\n        async function getBalance() {\n            const walletAddress = document.getElementById('walletAddress').value;\n            const response = await fetch('/api/getBalance', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ walletAddress })\n            });\n            const result = await response.json();\n            document.getElementById('balanceResult').innerText = `余额: ${result.balance} USDT`;\n        }\n\n        async function transferUSDT() {\n            const toAddress = document.getElementById('toAddress').value;\n            const amount = document.getElementById('amount').value;\n            const response = await fetch('/api/transferUSDT', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ toAddress, amount })\n            });\n            const result = await response.json();\n            document.getElementById('transferResult').innerText = `转账结果: ${result.message}`;\n        }\n    </script>\n</body>\n</html>\n```\n\n#### 后端Node.js + TronWeb\n\n```js\nconst express = require('express');\nconst TronWeb = require('tronweb');\nconst app = express();\n\napp.use(express.json());\n\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: '你的私钥'\n});\n\n// TRC20 USDT合约地址\nconst usdtContractAddress = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';\n\n// 查询USDT余额\napp.post('/api/getBalance', async (req, res) => {\n    const walletAddress = req.body.walletAddress;\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const balance = await contract.balanceOf(walletAddress).call();\n        res.json({ balance: tronWeb.fromSun(balance) }); // 转换为USDT单位\n    } catch (error) {\n        res.json({ error: error.message });\n    }\n});\n\n// 转账USDT\napp.post('/api/transferUSDT', async (req, res) => {\n    const { toAddress, amount } = req.body;\n    const fromAddress = tronWeb.defaultAddress.base58; // 使用私钥加载的地址\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const transaction = await contract.transfer(toAddress, tronWeb.toSun(amount)).send({ from: fromAddress });\n        res.json({ message: '转账成功', transaction });\n    } catch (error) {\n        res.json({ message: '转账失败', error: error.message });\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});\n```\n\n### 2. Telegram Bot 实现\n\n#### 使用TronWeb开发Telegram Bot来查询TRC20 USDT余额和转账。\n\n```js\nconst TelegramBot = require('node-telegram-bot-api');\nconst TronWeb = require('tronweb');\n\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: '你的私钥'\n});\n\n// TRC20 USDT合约地址\nconst usdtContractAddress = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';\n\nconst bot = new TelegramBot('你的Telegram Bot Token', { polling: true });\n\nbot.onText(/\\/balance (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const walletAddress = match[1];\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const balance = await contract.balanceOf(walletAddress).call();\n        bot.sendMessage(chatId, `USDT 余额: ${tronWeb.fromSun(balance)}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `查询失败: ${error.message}`);\n    }\n});\n\nbot.onText(/\\/transfer (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const [toAddress, amount] = match[1].split(' '); // 格式：/transfer [接收地址] [金额]\n\n    const fromAddress = tronWeb.defaultAddress.base58; // 使用私钥生成的默认地址\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const transaction = await contract.transfer(toAddress, tronWeb.toSun(amount)).send({ from: fromAddress });\n        bot.sendMessage(chatId, `转账成功，交易ID: ${transaction}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `转账失败: ${error.message}`);\n    }\n});\n```\n\n这样，用户可以通过Telegram机器人使用命令`/balance [钱包地址]`查询TRC20 USDT的余额，或者通过`/transfer [接收地址] [金额]`进行转账。","source":"_posts/基本步骤.md","raw":"---\ntitle: 基本步骤\ndate: 2024-09-09T00:12:21.495Z\ntags: []\ncategories: []\n---\nUSDT（Tether）的API开发主要是围绕加密货币交易、钱包管理、以及区块链交互等内容进行的。你可以使用不同的区块链平台（如以太坊、Tron）来进行USDT的开发，这涉及到对这些区块链的API或SDK进行操作。\n\n通常有以下几种场景：\n\n1. **钱包管理：** 使用API创建、管理USDT钱包，获取余额，或进行转账交易。\n2. **交易：** 与加密货币交易所的API对接，进行买卖USDT的操作。\n3. **区块链交互：** 通过区块链平台（如以太坊、Tron）的API来查询USDT相关的交易信息，或者发送交易。\n\n### 基本步骤\n\n1. **选择区块链网络：**\n   - **Ethereum**：USDT基于ERC20标准运行。你可以使用Web3.js或Ethers.js与以太坊上的USDT合约进行交互。\n   - **Tron**：USDT基于TRC20标准运行。Tron的API和SDK可以帮助你与USDT合约进行交互。\n\n2. **获取API密钥：**\n   - 如果你是与加密货币交易所进行交互（如Binance、OKX等），你需要在这些平台注册并获取API密钥。\n\n3. **使用区块链库：**\n   - 对于以太坊，使用`Web3.js`库可以与智能合约交互。你可以调用USDT的智能合约来查询余额、转账等。\n   - 对于Tron，可以使用`tronWeb`库进行交互。\n\n### 以太坊（ERC20）上的USDT操作示例\n\n```js\nconst Web3 = require('web3');\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\n\n// USDT ERC20合约地址\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst usdtAbi = [ /* ERC20 ABI */ ]; // 你需要导入或定义ERC20合约的ABI\n\n// 创建USDT合约对象\nconst usdtContract = new web3.eth.Contract(usdtAbi, usdtContractAddress);\n\n// 查询USDT余额\nconst getBalance = async (walletAddress) => {\n    const balance = await usdtContract.methods.balanceOf(walletAddress).call();\n    console.log('USDT余额:', web3.utils.fromWei(balance, 'mwei'));\n};\n\n// 转账USDT\nconst transferUSDT = async (fromAddress, toAddress, amount, privateKey) => {\n    const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest'); // 获取最新的nonce\n    const tx = {\n        'from': fromAddress,\n        'to': usdtContractAddress,\n        'nonce': nonce,\n        'gas': 2000000,\n        'data': usdtContract.methods.transfer(toAddress, web3.utils.toWei(amount, 'mwei')).encodeABI()\n    };\n\n    const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n    console.log('Transaction receipt:', receipt);\n};\n```\n\n### Tron（TRC20）上的USDT操作示例\n\n```js\nconst TronWeb = require('tronweb');\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: '你的私钥'\n});\n\n// USDT TRC20合约地址\nconst usdtContractAddress = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';\n\n// 查询USDT余额\nconst getBalance = async (walletAddress) => {\n    const contract = await tronWeb.contract().at(usdtContractAddress);\n    const balance = await contract.balanceOf(walletAddress).call();\n    console.log('USDT余额:', balance.toString());\n};\n\n// 转账USDT\nconst transferUSDT = async (fromAddress, toAddress, amount) => {\n    const contract = await tronWeb.contract().at(usdtContractAddress);\n    const transaction = await contract.transfer(toAddress, amount).send({\n        from: fromAddress\n    });\n    console.log('Transaction:', transaction);\n};\n```\n\n### 使用交易所API (如Binance)\n\n你可以通过交易所的API来进行USDT的交易操作，如买入、卖出、获取市场数据等。下面以Binance API为例：\n\n```js\nconst axios = require('axios');\nconst crypto = require('crypto');\n\nconst apiKey = '你的Binance API Key';\nconst apiSecret = '你的Binance API Secret';\n\nconst getSignature = (queryString) => {\n    return crypto.createHmac('sha256', apiSecret).update(queryString).digest('hex');\n};\n\nconst getAccountInfo = async () => {\n    const queryString = `timestamp=${Date.now()}`;\n    const signature = getSignature(queryString);\n\n    const response = await axios.get(`https://api.binance.com/api/v3/account?${queryString}&signature=${signature}`, {\n        headers: {\n            'X-MBX-APIKEY': apiKey\n        }\n    });\n\n    console.log('Account Info:', response.data);\n};\n```\n\n### 注意事项\n- **安全性**：确保API密钥和私钥的安全性，不要泄露到不受信任的地方。\n- **费用**：加密货币交易涉及到矿工费用（Gas费），需要考虑在开发中。\n- **网络**：测试代码时，推荐使用测试网络（如Ropsten, Kovan, Tron Shasta等），而不是主网。\n\n根据你使用的区块链和交易所平台，具体的API和开发流程可能会有所不同。你可以根据需要进一步定制。\n\n\n\n\n\n你可以将USDT查询与转账功能制作成一个简单的网页，或者通过Telegram机器人实现快捷查询功能。\n\n### 1. 网页实现\n\n可以使用HTML、JavaScript和后端技术（例如Node.js）构建一个支持USDT余额查询和转账的网页。\n\n#### 前端HTML+JavaScript页面示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>USDT 查询与转账</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .container {\n            width: 50%;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .input-group {\n            margin-bottom: 10px;\n        }\n        .input-group label {\n            margin-right: 10px;\n        }\n        button {\n            padding: 10px 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>USDT 查询与转账</h2>\n        <div class=\"input-group\">\n            <label for=\"walletAddress\">钱包地址:</label>\n            <input type=\"text\" id=\"walletAddress\" placeholder=\"请输入钱包地址\">\n        </div>\n        <button onclick=\"getBalance()\">查询余额</button>\n        <p id=\"balanceResult\"></p>\n\n        <h3>转账</h3>\n        <div class=\"input-group\">\n            <label for=\"toAddress\">接收地址:</label>\n            <input type=\"text\" id=\"toAddress\" placeholder=\"请输入接收地址\">\n        </div>\n        <div class=\"input-group\">\n            <label for=\"amount\">金额:</label>\n            <input type=\"text\" id=\"amount\" placeholder=\"请输入转账金额\">\n        </div>\n        <button onclick=\"transferUSDT()\">转账</button>\n        <p id=\"transferResult\"></p>\n    </div>\n\n    <script>\n        // 调用后端API的示例\n        async function getBalance() {\n            const walletAddress = document.getElementById('walletAddress').value;\n            const response = await fetch('/api/getBalance', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ walletAddress })\n            });\n            const result = await response.json();\n            document.getElementById('balanceResult').innerText = `余额: ${result.balance} USDT`;\n        }\n\n        async function transferUSDT() {\n            const toAddress = document.getElementById('toAddress').value;\n            const amount = document.getElementById('amount').value;\n            const response = await fetch('/api/transferUSDT', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ toAddress, amount })\n            });\n            const result = await response.json();\n            document.getElementById('transferResult').innerText = `转账结果: ${result.message}`;\n        }\n    </script>\n</body>\n</html>\n```\n\n#### 后端（Node.js示例）\n\n```js\nconst express = require('express');\nconst Web3 = require('web3');\nconst TronWeb = require('tronweb');\nconst app = express();\n\napp.use(express.json());\n\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: 'YOUR_PRIVATE_KEY'\n});\n\n// ERC20 USDT合约地址\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst usdtAbi = [ /* ERC20 ABI */ ];\nconst usdtContract = new web3.eth.Contract(usdtAbi, usdtContractAddress);\n\n// 查询USDT余额\napp.post('/api/getBalance', async (req, res) => {\n    const walletAddress = req.body.walletAddress;\n    try {\n        const balance = await usdtContract.methods.balanceOf(walletAddress).call();\n        res.json({ balance: web3.utils.fromWei(balance, 'mwei') });\n    } catch (error) {\n        res.json({ error: error.message });\n    }\n});\n\n// 转账USDT\napp.post('/api/transferUSDT', async (req, res) => {\n    const { toAddress, amount } = req.body;\n    const fromAddress = 'YOUR_FROM_ADDRESS';\n    const privateKey = 'YOUR_PRIVATE_KEY';\n    try {\n        const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest');\n        const tx = {\n            from: fromAddress,\n            to: usdtContractAddress,\n            nonce: nonce,\n            gas: 2000000,\n            data: usdtContract.methods.transfer(toAddress, web3.utils.toWei(amount, 'mwei')).encodeABI()\n        };\n        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n        res.json({ message: '转账成功', receipt });\n    } catch (error) {\n        res.json({ message: '转账失败', error: error.message });\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});\n```\n\n这样你可以通过一个简单的网页前端，让用户输入钱包地址查询USDT余额，或是输入接收地址和金额进行转账。\n\n### 2. Telegram Bot实现\n\n可以通过使用Telegram Bot API和Node.js开发一个简单的Telegram机器人来查询USDT余额或发起转账请求。\n\n#### 创建Telegram Bot\n1. 通过[@BotFather](https://t.me/BotFather)创建一个新的Telegram机器人，并获得API密钥。\n\n#### Node.js Telegram Bot 示例\n\n```js\nconst TelegramBot = require('node-telegram-bot-api');\nconst Web3 = require('web3');\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: 'YOUR_PRIVATE_KEY'\n});\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst usdtAbi = [ /* ERC20 ABI */ ];\n\nconst bot = new TelegramBot('YOUR_TELEGRAM_BOT_TOKEN', { polling: true });\nconst usdtContract = new web3.eth.Contract(usdtAbi, usdtContractAddress);\n\nbot.onText(/\\/balance (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const walletAddress = match[1];\n    try {\n        const balance = await usdtContract.methods.balanceOf(walletAddress).call();\n        bot.sendMessage(chatId, `USDT 余额: ${web3.utils.fromWei(balance, 'mwei')}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `查询失败: ${error.message}`);\n    }\n});\n\nbot.onText(/\\/transfer (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const [toAddress, amount] = match[1].split(' ');\n    const fromAddress = 'YOUR_FROM_ADDRESS';\n    const privateKey = 'YOUR_PRIVATE_KEY';\n\n    try {\n        const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest');\n        const tx = {\n            from: fromAddress,\n            to: usdtContractAddress,\n            nonce: nonce,\n            gas: 2000000,\n            data: usdtContract.methods.transfer(toAddress, web3.utils.toWei(amount, 'mwei')).encodeABI()\n        };\n        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n        bot.sendMessage(chatId, `转账成功: ${receipt.transactionHash}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `转账失败: ${error.message}`);\n    }\n});\n```\n\n这样可以使用命令`/balance [钱包地址]`查询余额，使用`/transfer [接收地址] [金额]`发起转账请求。\n\n\n\n\n\n关于TRC20（基于Tron链的USDT）的查询和转账，可以通过使用`TronWeb`库与Tron网络进行交互。接下来将展示如何通过网页或Telegram机器人实现TRC20 USDT的余额查询和转账功能。\n\n### Trc网页实现\n\n#### 前端HTML+JavaScript页面示例\n\n这个示例与之前的类似，只需修改后端代码以支持TronWeb即可。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>TRC20 USDT 查询与转账</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .container {\n            width: 50%;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .input-group {\n            margin-bottom: 10px;\n        }\n        .input-group label {\n            margin-right: 10px;\n        }\n        button {\n            padding: 10px 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>TRC20 USDT 查询与转账</h2>\n        <div class=\"input-group\">\n            <label for=\"walletAddress\">钱包地址:</label>\n            <input type=\"text\" id=\"walletAddress\" placeholder=\"请输入钱包地址\">\n        </div>\n        <button onclick=\"getBalance()\">查询余额</button>\n        <p id=\"balanceResult\"></p>\n\n        <h3>转账</h3>\n        <div class=\"input-group\">\n            <label for=\"toAddress\">接收地址:</label>\n            <input type=\"text\" id=\"toAddress\" placeholder=\"请输入接收地址\">\n        </div>\n        <div class=\"input-group\">\n            <label for=\"amount\">金额:</label>\n            <input type=\"text\" id=\"amount\" placeholder=\"请输入转账金额\">\n        </div>\n        <button onclick=\"transferUSDT()\">转账</button>\n        <p id=\"transferResult\"></p>\n    </div>\n\n    <script>\n        // 调用后端API的示例\n        async function getBalance() {\n            const walletAddress = document.getElementById('walletAddress').value;\n            const response = await fetch('/api/getBalance', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ walletAddress })\n            });\n            const result = await response.json();\n            document.getElementById('balanceResult').innerText = `余额: ${result.balance} USDT`;\n        }\n\n        async function transferUSDT() {\n            const toAddress = document.getElementById('toAddress').value;\n            const amount = document.getElementById('amount').value;\n            const response = await fetch('/api/transferUSDT', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ toAddress, amount })\n            });\n            const result = await response.json();\n            document.getElementById('transferResult').innerText = `转账结果: ${result.message}`;\n        }\n    </script>\n</body>\n</html>\n```\n\n#### 后端Node.js + TronWeb\n\n```js\nconst express = require('express');\nconst TronWeb = require('tronweb');\nconst app = express();\n\napp.use(express.json());\n\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: '你的私钥'\n});\n\n// TRC20 USDT合约地址\nconst usdtContractAddress = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';\n\n// 查询USDT余额\napp.post('/api/getBalance', async (req, res) => {\n    const walletAddress = req.body.walletAddress;\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const balance = await contract.balanceOf(walletAddress).call();\n        res.json({ balance: tronWeb.fromSun(balance) }); // 转换为USDT单位\n    } catch (error) {\n        res.json({ error: error.message });\n    }\n});\n\n// 转账USDT\napp.post('/api/transferUSDT', async (req, res) => {\n    const { toAddress, amount } = req.body;\n    const fromAddress = tronWeb.defaultAddress.base58; // 使用私钥加载的地址\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const transaction = await contract.transfer(toAddress, tronWeb.toSun(amount)).send({ from: fromAddress });\n        res.json({ message: '转账成功', transaction });\n    } catch (error) {\n        res.json({ message: '转账失败', error: error.message });\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});\n```\n\n### 2. Telegram Bot 实现\n\n#### 使用TronWeb开发Telegram Bot来查询TRC20 USDT余额和转账。\n\n```js\nconst TelegramBot = require('node-telegram-bot-api');\nconst TronWeb = require('tronweb');\n\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: '你的私钥'\n});\n\n// TRC20 USDT合约地址\nconst usdtContractAddress = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';\n\nconst bot = new TelegramBot('你的Telegram Bot Token', { polling: true });\n\nbot.onText(/\\/balance (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const walletAddress = match[1];\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const balance = await contract.balanceOf(walletAddress).call();\n        bot.sendMessage(chatId, `USDT 余额: ${tronWeb.fromSun(balance)}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `查询失败: ${error.message}`);\n    }\n});\n\nbot.onText(/\\/transfer (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const [toAddress, amount] = match[1].split(' '); // 格式：/transfer [接收地址] [金额]\n\n    const fromAddress = tronWeb.defaultAddress.base58; // 使用私钥生成的默认地址\n    try {\n        const contract = await tronWeb.contract().at(usdtContractAddress);\n        const transaction = await contract.transfer(toAddress, tronWeb.toSun(amount)).send({ from: fromAddress });\n        bot.sendMessage(chatId, `转账成功，交易ID: ${transaction}`);\n    } catch (error) {\n        bot.sendMessage(chatId, `转账失败: ${error.message}`);\n    }\n});\n```\n\n这样，用户可以通过Telegram机器人使用命令`/balance [钱包地址]`查询TRC20 USDT的余额，或者通过`/transfer [接收地址] [金额]`进行转账。","slug":"基本步骤","published":1,"updated":"2024-11-25T11:44:04.617Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscs0036mbs67u314zwf","content":"<p>USDT（Tether）的API开发主要是围绕加密货币交易、钱包管理、以及区块链交互等内容进行的。你可以使用不同的区块链平台（如以太坊、Tron）来进行USDT的开发，这涉及到对这些区块链的API或SDK进行操作。</p>\n<p>通常有以下几种场景：</p>\n<ol>\n<li><strong>钱包管理：</strong> 使用API创建、管理USDT钱包，获取余额，或进行转账交易。</li>\n<li><strong>交易：</strong> 与加密货币交易所的API对接，进行买卖USDT的操作。</li>\n<li><strong>区块链交互：</strong> 通过区块链平台（如以太坊、Tron）的API来查询USDT相关的交易信息，或者发送交易。</li>\n</ol>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ol>\n<li><p><strong>选择区块链网络：</strong></p>\n<ul>\n<li><strong>Ethereum</strong>：USDT基于ERC20标准运行。你可以使用Web3.js或Ethers.js与以太坊上的USDT合约进行交互。</li>\n<li><strong>Tron</strong>：USDT基于TRC20标准运行。Tron的API和SDK可以帮助你与USDT合约进行交互。</li>\n</ul>\n</li>\n<li><p><strong>获取API密钥：</strong></p>\n<ul>\n<li>如果你是与加密货币交易所进行交互（如Binance、OKX等），你需要在这些平台注册并获取API密钥。</li>\n</ul>\n</li>\n<li><p><strong>使用区块链库：</strong></p>\n<ul>\n<li>对于以太坊，使用<code>Web3.js</code>库可以与智能合约交互。你可以调用USDT的智能合约来查询余额、转账等。</li>\n<li>对于Tron，可以使用<code>tronWeb</code>库进行交互。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"以太坊（ERC20）上的USDT操作示例\"><a href=\"#以太坊（ERC20）上的USDT操作示例\" class=\"headerlink\" title=\"以太坊（ERC20）上的USDT操作示例\"></a>以太坊（ERC20）上的USDT操作示例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> web3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&#x27;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// USDT ERC20合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;0xdAC17F958D2ee523a2206206994597C13D831ec7&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtAbi = [ <span class=\"comment\">/* ERC20 ABI */</span> ]; <span class=\"comment\">// 你需要导入或定义ERC20合约的ABI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建USDT合约对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContract = <span class=\"keyword\">new</span> web3.<span class=\"property\">eth</span>.<span class=\"title class_\">Contract</span>(usdtAbi, usdtContractAddress);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getBalance</span> = <span class=\"keyword\">async</span> (<span class=\"params\">walletAddress</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;USDT余额:&#x27;</span>, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">fromWei</span>(balance, <span class=\"string\">&#x27;mwei&#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">transferUSDT</span> = <span class=\"keyword\">async</span> (<span class=\"params\">fromAddress, toAddress, amount, privateKey</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nonce = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(fromAddress, <span class=\"string\">&#x27;latest&#x27;</span>); <span class=\"comment\">// 获取最新的nonce</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tx = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;from&#x27;</span>: fromAddress,</span><br><span class=\"line\">        <span class=\"string\">&#x27;to&#x27;</span>: usdtContractAddress,</span><br><span class=\"line\">        <span class=\"string\">&#x27;nonce&#x27;</span>: nonce,</span><br><span class=\"line\">        <span class=\"string\">&#x27;gas&#x27;</span>: <span class=\"number\">2000000</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;data&#x27;</span>: usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">transfer</span>(toAddress, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(amount, <span class=\"string\">&#x27;mwei&#x27;</span>)).<span class=\"title function_\">encodeABI</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">signTransaction</span>(tx, privateKey);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> receipt = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendSignedTransaction</span>(signedTx.<span class=\"property\">rawTransaction</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Transaction receipt:&#x27;</span>, receipt);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tron（TRC20）上的USDT操作示例\"><a href=\"#Tron（TRC20）上的USDT操作示例\" class=\"headerlink\" title=\"Tron（TRC20）上的USDT操作示例\"></a>Tron（TRC20）上的USDT操作示例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;你的私钥&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// USDT TRC20合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getBalance</span> = <span class=\"keyword\">async</span> (<span class=\"params\">walletAddress</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;USDT余额:&#x27;</span>, balance.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">transferUSDT</span> = <span class=\"keyword\">async</span> (<span class=\"params\">fromAddress, toAddress, amount</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> transaction = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(toAddress, amount).<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">from</span>: fromAddress</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Transaction:&#x27;</span>, transaction);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用交易所API-如Binance\"><a href=\"#使用交易所API-如Binance\" class=\"headerlink\" title=\"使用交易所API (如Binance)\"></a>使用交易所API (如Binance)</h3><p>你可以通过交易所的API来进行USDT的交易操作，如买入、卖出、获取市场数据等。下面以Binance API为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> apiKey = <span class=\"string\">&#x27;你的Binance API Key&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> apiSecret = <span class=\"string\">&#x27;你的Binance API Secret&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSignature</span> = (<span class=\"params\">queryString</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crypto.<span class=\"title function_\">createHmac</span>(<span class=\"string\">&#x27;sha256&#x27;</span>, apiSecret).<span class=\"title function_\">update</span>(queryString).<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getAccountInfo</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queryString = <span class=\"string\">`timestamp=<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> signature = <span class=\"title function_\">getSignature</span>(queryString);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`https://api.binance.com/api/v3/account?<span class=\"subst\">$&#123;queryString&#125;</span>&amp;signature=<span class=\"subst\">$&#123;signature&#125;</span>`</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;X-MBX-APIKEY&#x27;</span>: apiKey</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Account Info:&#x27;</span>, response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>安全性</strong>：确保API密钥和私钥的安全性，不要泄露到不受信任的地方。</li>\n<li><strong>费用</strong>：加密货币交易涉及到矿工费用（Gas费），需要考虑在开发中。</li>\n<li><strong>网络</strong>：测试代码时，推荐使用测试网络（如Ropsten, Kovan, Tron Shasta等），而不是主网。</li>\n</ul>\n<p>根据你使用的区块链和交易所平台，具体的API和开发流程可能会有所不同。你可以根据需要进一步定制。</p>\n<p>你可以将USDT查询与转账功能制作成一个简单的网页，或者通过Telegram机器人实现快捷查询功能。</p>\n<h3 id=\"1-网页实现\"><a href=\"#1-网页实现\" class=\"headerlink\" title=\"1. 网页实现\"></a>1. 网页实现</h3><p>可以使用HTML、JavaScript和后端技术（例如Node.js）构建一个支持USDT余额查询和转账的网页。</p>\n<h4 id=\"前端HTML-JavaScript页面示例\"><a href=\"#前端HTML-JavaScript页面示例\" class=\"headerlink\" title=\"前端HTML+JavaScript页面示例\"></a>前端HTML+JavaScript页面示例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;walletAddress&quot;</span>&gt;</span>钱包地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;walletAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入钱包地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getBalance()&quot;</span>&gt;</span>查询余额<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;balanceResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;toAddress&quot;</span>&gt;</span>接收地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;toAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入接收地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;amount&quot;</span>&gt;</span>金额:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入转账金额&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;transferUSDT()&quot;</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transferResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 调用后端API的示例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getBalance</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> walletAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;walletAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; walletAddress &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;balanceResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`余额: <span class=\"subst\">$&#123;result.balance&#125;</span> USDT`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">transferUSDT</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> toAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;toAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> amount = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;amount&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; toAddress, amount &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;transferResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`转账结果: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后端（Node-js示例）\"><a href=\"#后端（Node-js示例）\" class=\"headerlink\" title=\"后端（Node.js示例）\"></a>后端（Node.js示例）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">json</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> web3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&#x27;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ERC20 USDT合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;0xdAC17F958D2ee523a2206206994597C13D831ec7&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtAbi = [ <span class=\"comment\">/* ERC20 ABI */</span> ];</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContract = <span class=\"keyword\">new</span> web3.<span class=\"property\">eth</span>.<span class=\"title class_\">Contract</span>(usdtAbi, usdtContractAddress);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = req.<span class=\"property\">body</span>.<span class=\"property\">walletAddress</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">balance</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">fromWei</span>(balance, <span class=\"string\">&#x27;mwei&#x27;</span>) &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; toAddress, amount &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = <span class=\"string\">&#x27;YOUR_FROM_ADDRESS&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> privateKey = <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nonce = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(fromAddress, <span class=\"string\">&#x27;latest&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tx = &#123;</span><br><span class=\"line\">            <span class=\"attr\">from</span>: fromAddress,</span><br><span class=\"line\">            <span class=\"attr\">to</span>: usdtContractAddress,</span><br><span class=\"line\">            <span class=\"attr\">nonce</span>: nonce,</span><br><span class=\"line\">            <span class=\"attr\">gas</span>: <span class=\"number\">2000000</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">transfer</span>(toAddress, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(amount, <span class=\"string\">&#x27;mwei&#x27;</span>)).<span class=\"title function_\">encodeABI</span>()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">signTransaction</span>(tx, privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> receipt = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendSignedTransaction</span>(signedTx.<span class=\"property\">rawTransaction</span>);</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账成功&#x27;</span>, receipt &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账失败&#x27;</span>, <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样你可以通过一个简单的网页前端，让用户输入钱包地址查询USDT余额，或是输入接收地址和金额进行转账。</p>\n<h3 id=\"2-Telegram-Bot实现\"><a href=\"#2-Telegram-Bot实现\" class=\"headerlink\" title=\"2. Telegram Bot实现\"></a>2. Telegram Bot实现</h3><p>可以通过使用Telegram Bot API和Node.js开发一个简单的Telegram机器人来查询USDT余额或发起转账请求。</p>\n<h4 id=\"创建Telegram-Bot\"><a href=\"#创建Telegram-Bot\" class=\"headerlink\" title=\"创建Telegram Bot\"></a>创建Telegram Bot</h4><ol>\n<li>通过<a href=\"https://t.me/BotFather\">@BotFather</a>创建一个新的Telegram机器人，并获得API密钥。</li>\n</ol>\n<h4 id=\"Node-js-Telegram-Bot-示例\"><a href=\"#Node-js-Telegram-Bot-示例\" class=\"headerlink\" title=\"Node.js Telegram Bot 示例\"></a>Node.js Telegram Bot 示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TelegramBot</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node-telegram-bot-api&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> web3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&#x27;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;0xdAC17F958D2ee523a2206206994597C13D831ec7&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtAbi = [ <span class=\"comment\">/* ERC20 ABI */</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bot = <span class=\"keyword\">new</span> <span class=\"title class_\">TelegramBot</span>(<span class=\"string\">&#x27;YOUR_TELEGRAM_BOT_TOKEN&#x27;</span>, &#123; <span class=\"attr\">polling</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContract = <span class=\"keyword\">new</span> web3.<span class=\"property\">eth</span>.<span class=\"title class_\">Contract</span>(usdtAbi, usdtContractAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/balance (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`USDT 余额: <span class=\"subst\">$&#123;web3.utils.fromWei(balance, <span class=\"string\">&#x27;mwei&#x27;</span>)&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`查询失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/transfer (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [toAddress, amount] = match[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = <span class=\"string\">&#x27;YOUR_FROM_ADDRESS&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> privateKey = <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nonce = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(fromAddress, <span class=\"string\">&#x27;latest&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tx = &#123;</span><br><span class=\"line\">            <span class=\"attr\">from</span>: fromAddress,</span><br><span class=\"line\">            <span class=\"attr\">to</span>: usdtContractAddress,</span><br><span class=\"line\">            <span class=\"attr\">nonce</span>: nonce,</span><br><span class=\"line\">            <span class=\"attr\">gas</span>: <span class=\"number\">2000000</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">transfer</span>(toAddress, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(amount, <span class=\"string\">&#x27;mwei&#x27;</span>)).<span class=\"title function_\">encodeABI</span>()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">signTransaction</span>(tx, privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> receipt = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendSignedTransaction</span>(signedTx.<span class=\"property\">rawTransaction</span>);</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账成功: <span class=\"subst\">$&#123;receipt.transactionHash&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样可以使用命令<code>/balance [钱包地址]</code>查询余额，使用<code>/transfer [接收地址] [金额]</code>发起转账请求。</p>\n<p>关于TRC20（基于Tron链的USDT）的查询和转账，可以通过使用<code>TronWeb</code>库与Tron网络进行交互。接下来将展示如何通过网页或Telegram机器人实现TRC20 USDT的余额查询和转账功能。</p>\n<h3 id=\"Trc网页实现\"><a href=\"#Trc网页实现\" class=\"headerlink\" title=\"Trc网页实现\"></a>Trc网页实现</h3><h4 id=\"前端HTML-JavaScript页面示例-1\"><a href=\"#前端HTML-JavaScript页面示例-1\" class=\"headerlink\" title=\"前端HTML+JavaScript页面示例\"></a>前端HTML+JavaScript页面示例</h4><p>这个示例与之前的类似，只需修改后端代码以支持TronWeb即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>TRC20 USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>TRC20 USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;walletAddress&quot;</span>&gt;</span>钱包地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;walletAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入钱包地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getBalance()&quot;</span>&gt;</span>查询余额<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;balanceResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;toAddress&quot;</span>&gt;</span>接收地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;toAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入接收地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;amount&quot;</span>&gt;</span>金额:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入转账金额&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;transferUSDT()&quot;</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transferResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 调用后端API的示例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getBalance</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> walletAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;walletAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; walletAddress &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;balanceResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`余额: <span class=\"subst\">$&#123;result.balance&#125;</span> USDT`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">transferUSDT</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> toAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;toAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> amount = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;amount&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; toAddress, amount &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;transferResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`转账结果: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后端Node-js-TronWeb\"><a href=\"#后端Node-js-TronWeb\" class=\"headerlink\" title=\"后端Node.js + TronWeb\"></a>后端Node.js + TronWeb</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">json</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;你的私钥&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TRC20 USDT合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = req.<span class=\"property\">body</span>.<span class=\"property\">walletAddress</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">balance</span>: tronWeb.<span class=\"title function_\">fromSun</span>(balance) &#125;); <span class=\"comment\">// 转换为USDT单位</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; toAddress, amount &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = tronWeb.<span class=\"property\">defaultAddress</span>.<span class=\"property\">base58</span>; <span class=\"comment\">// 使用私钥加载的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> transaction = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(toAddress, tronWeb.<span class=\"title function_\">toSun</span>(amount)).<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">from</span>: fromAddress &#125;);</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账成功&#x27;</span>, transaction &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账失败&#x27;</span>, <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Telegram-Bot-实现\"><a href=\"#2-Telegram-Bot-实现\" class=\"headerlink\" title=\"2. Telegram Bot 实现\"></a>2. Telegram Bot 实现</h3><h4 id=\"使用TronWeb开发Telegram-Bot来查询TRC20-USDT余额和转账。\"><a href=\"#使用TronWeb开发Telegram-Bot来查询TRC20-USDT余额和转账。\" class=\"headerlink\" title=\"使用TronWeb开发Telegram Bot来查询TRC20 USDT余额和转账。\"></a>使用TronWeb开发Telegram Bot来查询TRC20 USDT余额和转账。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TelegramBot</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node-telegram-bot-api&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;你的私钥&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TRC20 USDT合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bot = <span class=\"keyword\">new</span> <span class=\"title class_\">TelegramBot</span>(<span class=\"string\">&#x27;你的Telegram Bot Token&#x27;</span>, &#123; <span class=\"attr\">polling</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/balance (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`USDT 余额: <span class=\"subst\">$&#123;tronWeb.fromSun(balance)&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`查询失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/transfer (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [toAddress, amount] = match[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">// 格式：/transfer [接收地址] [金额]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = tronWeb.<span class=\"property\">defaultAddress</span>.<span class=\"property\">base58</span>; <span class=\"comment\">// 使用私钥生成的默认地址</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> transaction = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(toAddress, tronWeb.<span class=\"title function_\">toSun</span>(amount)).<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">from</span>: fromAddress &#125;);</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账成功，交易ID: <span class=\"subst\">$&#123;transaction&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样，用户可以通过Telegram机器人使用命令<code>/balance [钱包地址]</code>查询TRC20 USDT的余额，或者通过<code>/transfer [接收地址] [金额]</code>进行转账。</p>\n","excerpt":"","more":"<p>USDT（Tether）的API开发主要是围绕加密货币交易、钱包管理、以及区块链交互等内容进行的。你可以使用不同的区块链平台（如以太坊、Tron）来进行USDT的开发，这涉及到对这些区块链的API或SDK进行操作。</p>\n<p>通常有以下几种场景：</p>\n<ol>\n<li><strong>钱包管理：</strong> 使用API创建、管理USDT钱包，获取余额，或进行转账交易。</li>\n<li><strong>交易：</strong> 与加密货币交易所的API对接，进行买卖USDT的操作。</li>\n<li><strong>区块链交互：</strong> 通过区块链平台（如以太坊、Tron）的API来查询USDT相关的交易信息，或者发送交易。</li>\n</ol>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ol>\n<li><p><strong>选择区块链网络：</strong></p>\n<ul>\n<li><strong>Ethereum</strong>：USDT基于ERC20标准运行。你可以使用Web3.js或Ethers.js与以太坊上的USDT合约进行交互。</li>\n<li><strong>Tron</strong>：USDT基于TRC20标准运行。Tron的API和SDK可以帮助你与USDT合约进行交互。</li>\n</ul>\n</li>\n<li><p><strong>获取API密钥：</strong></p>\n<ul>\n<li>如果你是与加密货币交易所进行交互（如Binance、OKX等），你需要在这些平台注册并获取API密钥。</li>\n</ul>\n</li>\n<li><p><strong>使用区块链库：</strong></p>\n<ul>\n<li>对于以太坊，使用<code>Web3.js</code>库可以与智能合约交互。你可以调用USDT的智能合约来查询余额、转账等。</li>\n<li>对于Tron，可以使用<code>tronWeb</code>库进行交互。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"以太坊（ERC20）上的USDT操作示例\"><a href=\"#以太坊（ERC20）上的USDT操作示例\" class=\"headerlink\" title=\"以太坊（ERC20）上的USDT操作示例\"></a>以太坊（ERC20）上的USDT操作示例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> web3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&#x27;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// USDT ERC20合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;0xdAC17F958D2ee523a2206206994597C13D831ec7&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtAbi = [ <span class=\"comment\">/* ERC20 ABI */</span> ]; <span class=\"comment\">// 你需要导入或定义ERC20合约的ABI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建USDT合约对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContract = <span class=\"keyword\">new</span> web3.<span class=\"property\">eth</span>.<span class=\"title class_\">Contract</span>(usdtAbi, usdtContractAddress);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getBalance</span> = <span class=\"keyword\">async</span> (<span class=\"params\">walletAddress</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;USDT余额:&#x27;</span>, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">fromWei</span>(balance, <span class=\"string\">&#x27;mwei&#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">transferUSDT</span> = <span class=\"keyword\">async</span> (<span class=\"params\">fromAddress, toAddress, amount, privateKey</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nonce = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(fromAddress, <span class=\"string\">&#x27;latest&#x27;</span>); <span class=\"comment\">// 获取最新的nonce</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tx = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;from&#x27;</span>: fromAddress,</span><br><span class=\"line\">        <span class=\"string\">&#x27;to&#x27;</span>: usdtContractAddress,</span><br><span class=\"line\">        <span class=\"string\">&#x27;nonce&#x27;</span>: nonce,</span><br><span class=\"line\">        <span class=\"string\">&#x27;gas&#x27;</span>: <span class=\"number\">2000000</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;data&#x27;</span>: usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">transfer</span>(toAddress, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(amount, <span class=\"string\">&#x27;mwei&#x27;</span>)).<span class=\"title function_\">encodeABI</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">signTransaction</span>(tx, privateKey);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> receipt = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendSignedTransaction</span>(signedTx.<span class=\"property\">rawTransaction</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Transaction receipt:&#x27;</span>, receipt);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tron（TRC20）上的USDT操作示例\"><a href=\"#Tron（TRC20）上的USDT操作示例\" class=\"headerlink\" title=\"Tron（TRC20）上的USDT操作示例\"></a>Tron（TRC20）上的USDT操作示例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;你的私钥&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// USDT TRC20合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getBalance</span> = <span class=\"keyword\">async</span> (<span class=\"params\">walletAddress</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;USDT余额:&#x27;</span>, balance.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">transferUSDT</span> = <span class=\"keyword\">async</span> (<span class=\"params\">fromAddress, toAddress, amount</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> transaction = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(toAddress, amount).<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">from</span>: fromAddress</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Transaction:&#x27;</span>, transaction);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用交易所API-如Binance\"><a href=\"#使用交易所API-如Binance\" class=\"headerlink\" title=\"使用交易所API (如Binance)\"></a>使用交易所API (如Binance)</h3><p>你可以通过交易所的API来进行USDT的交易操作，如买入、卖出、获取市场数据等。下面以Binance API为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> apiKey = <span class=\"string\">&#x27;你的Binance API Key&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> apiSecret = <span class=\"string\">&#x27;你的Binance API Secret&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSignature</span> = (<span class=\"params\">queryString</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crypto.<span class=\"title function_\">createHmac</span>(<span class=\"string\">&#x27;sha256&#x27;</span>, apiSecret).<span class=\"title function_\">update</span>(queryString).<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getAccountInfo</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queryString = <span class=\"string\">`timestamp=<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> signature = <span class=\"title function_\">getSignature</span>(queryString);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`https://api.binance.com/api/v3/account?<span class=\"subst\">$&#123;queryString&#125;</span>&amp;signature=<span class=\"subst\">$&#123;signature&#125;</span>`</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;X-MBX-APIKEY&#x27;</span>: apiKey</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Account Info:&#x27;</span>, response.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>安全性</strong>：确保API密钥和私钥的安全性，不要泄露到不受信任的地方。</li>\n<li><strong>费用</strong>：加密货币交易涉及到矿工费用（Gas费），需要考虑在开发中。</li>\n<li><strong>网络</strong>：测试代码时，推荐使用测试网络（如Ropsten, Kovan, Tron Shasta等），而不是主网。</li>\n</ul>\n<p>根据你使用的区块链和交易所平台，具体的API和开发流程可能会有所不同。你可以根据需要进一步定制。</p>\n<p>你可以将USDT查询与转账功能制作成一个简单的网页，或者通过Telegram机器人实现快捷查询功能。</p>\n<h3 id=\"1-网页实现\"><a href=\"#1-网页实现\" class=\"headerlink\" title=\"1. 网页实现\"></a>1. 网页实现</h3><p>可以使用HTML、JavaScript和后端技术（例如Node.js）构建一个支持USDT余额查询和转账的网页。</p>\n<h4 id=\"前端HTML-JavaScript页面示例\"><a href=\"#前端HTML-JavaScript页面示例\" class=\"headerlink\" title=\"前端HTML+JavaScript页面示例\"></a>前端HTML+JavaScript页面示例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;walletAddress&quot;</span>&gt;</span>钱包地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;walletAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入钱包地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getBalance()&quot;</span>&gt;</span>查询余额<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;balanceResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;toAddress&quot;</span>&gt;</span>接收地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;toAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入接收地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;amount&quot;</span>&gt;</span>金额:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入转账金额&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;transferUSDT()&quot;</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transferResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 调用后端API的示例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getBalance</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> walletAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;walletAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; walletAddress &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;balanceResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`余额: <span class=\"subst\">$&#123;result.balance&#125;</span> USDT`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">transferUSDT</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> toAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;toAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> amount = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;amount&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; toAddress, amount &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;transferResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`转账结果: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后端（Node-js示例）\"><a href=\"#后端（Node-js示例）\" class=\"headerlink\" title=\"后端（Node.js示例）\"></a>后端（Node.js示例）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">json</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> web3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&#x27;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ERC20 USDT合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;0xdAC17F958D2ee523a2206206994597C13D831ec7&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtAbi = [ <span class=\"comment\">/* ERC20 ABI */</span> ];</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContract = <span class=\"keyword\">new</span> web3.<span class=\"property\">eth</span>.<span class=\"title class_\">Contract</span>(usdtAbi, usdtContractAddress);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = req.<span class=\"property\">body</span>.<span class=\"property\">walletAddress</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">balance</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">fromWei</span>(balance, <span class=\"string\">&#x27;mwei&#x27;</span>) &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; toAddress, amount &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = <span class=\"string\">&#x27;YOUR_FROM_ADDRESS&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> privateKey = <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nonce = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(fromAddress, <span class=\"string\">&#x27;latest&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tx = &#123;</span><br><span class=\"line\">            <span class=\"attr\">from</span>: fromAddress,</span><br><span class=\"line\">            <span class=\"attr\">to</span>: usdtContractAddress,</span><br><span class=\"line\">            <span class=\"attr\">nonce</span>: nonce,</span><br><span class=\"line\">            <span class=\"attr\">gas</span>: <span class=\"number\">2000000</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">transfer</span>(toAddress, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(amount, <span class=\"string\">&#x27;mwei&#x27;</span>)).<span class=\"title function_\">encodeABI</span>()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">signTransaction</span>(tx, privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> receipt = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendSignedTransaction</span>(signedTx.<span class=\"property\">rawTransaction</span>);</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账成功&#x27;</span>, receipt &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账失败&#x27;</span>, <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样你可以通过一个简单的网页前端，让用户输入钱包地址查询USDT余额，或是输入接收地址和金额进行转账。</p>\n<h3 id=\"2-Telegram-Bot实现\"><a href=\"#2-Telegram-Bot实现\" class=\"headerlink\" title=\"2. Telegram Bot实现\"></a>2. Telegram Bot实现</h3><p>可以通过使用Telegram Bot API和Node.js开发一个简单的Telegram机器人来查询USDT余额或发起转账请求。</p>\n<h4 id=\"创建Telegram-Bot\"><a href=\"#创建Telegram-Bot\" class=\"headerlink\" title=\"创建Telegram Bot\"></a>创建Telegram Bot</h4><ol>\n<li>通过<a href=\"https://t.me/BotFather\">@BotFather</a>创建一个新的Telegram机器人，并获得API密钥。</li>\n</ol>\n<h4 id=\"Node-js-Telegram-Bot-示例\"><a href=\"#Node-js-Telegram-Bot-示例\" class=\"headerlink\" title=\"Node.js Telegram Bot 示例\"></a>Node.js Telegram Bot 示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TelegramBot</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node-telegram-bot-api&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> web3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&#x27;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;0xdAC17F958D2ee523a2206206994597C13D831ec7&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtAbi = [ <span class=\"comment\">/* ERC20 ABI */</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bot = <span class=\"keyword\">new</span> <span class=\"title class_\">TelegramBot</span>(<span class=\"string\">&#x27;YOUR_TELEGRAM_BOT_TOKEN&#x27;</span>, &#123; <span class=\"attr\">polling</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContract = <span class=\"keyword\">new</span> web3.<span class=\"property\">eth</span>.<span class=\"title class_\">Contract</span>(usdtAbi, usdtContractAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/balance (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`USDT 余额: <span class=\"subst\">$&#123;web3.utils.fromWei(balance, <span class=\"string\">&#x27;mwei&#x27;</span>)&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`查询失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/transfer (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [toAddress, amount] = match[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = <span class=\"string\">&#x27;YOUR_FROM_ADDRESS&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> privateKey = <span class=\"string\">&#x27;YOUR_PRIVATE_KEY&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nonce = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(fromAddress, <span class=\"string\">&#x27;latest&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tx = &#123;</span><br><span class=\"line\">            <span class=\"attr\">from</span>: fromAddress,</span><br><span class=\"line\">            <span class=\"attr\">to</span>: usdtContractAddress,</span><br><span class=\"line\">            <span class=\"attr\">nonce</span>: nonce,</span><br><span class=\"line\">            <span class=\"attr\">gas</span>: <span class=\"number\">2000000</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: usdtContract.<span class=\"property\">methods</span>.<span class=\"title function_\">transfer</span>(toAddress, web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(amount, <span class=\"string\">&#x27;mwei&#x27;</span>)).<span class=\"title function_\">encodeABI</span>()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">signTransaction</span>(tx, privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> receipt = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendSignedTransaction</span>(signedTx.<span class=\"property\">rawTransaction</span>);</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账成功: <span class=\"subst\">$&#123;receipt.transactionHash&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样可以使用命令<code>/balance [钱包地址]</code>查询余额，使用<code>/transfer [接收地址] [金额]</code>发起转账请求。</p>\n<p>关于TRC20（基于Tron链的USDT）的查询和转账，可以通过使用<code>TronWeb</code>库与Tron网络进行交互。接下来将展示如何通过网页或Telegram机器人实现TRC20 USDT的余额查询和转账功能。</p>\n<h3 id=\"Trc网页实现\"><a href=\"#Trc网页实现\" class=\"headerlink\" title=\"Trc网页实现\"></a>Trc网页实现</h3><h4 id=\"前端HTML-JavaScript页面示例-1\"><a href=\"#前端HTML-JavaScript页面示例-1\" class=\"headerlink\" title=\"前端HTML+JavaScript页面示例\"></a>前端HTML+JavaScript页面示例</h4><p>这个示例与之前的类似，只需修改后端代码以支持TronWeb即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>TRC20 USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.input-group</span> <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>TRC20 USDT 查询与转账<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;walletAddress&quot;</span>&gt;</span>钱包地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;walletAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入钱包地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;getBalance()&quot;</span>&gt;</span>查询余额<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;balanceResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;toAddress&quot;</span>&gt;</span>接收地址:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;toAddress&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入接收地址&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;amount&quot;</span>&gt;</span>金额:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入转账金额&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;transferUSDT()&quot;</span>&gt;</span>转账<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transferResult&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 调用后端API的示例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getBalance</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> walletAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;walletAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; walletAddress &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;balanceResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`余额: <span class=\"subst\">$&#123;result.balance&#125;</span> USDT`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">transferUSDT</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> toAddress = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;toAddress&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> amount = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;amount&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; toAddress, amount &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;transferResult&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"string\">`转账结果: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后端Node-js-TronWeb\"><a href=\"#后端Node-js-TronWeb\" class=\"headerlink\" title=\"后端Node.js + TronWeb\"></a>后端Node.js + TronWeb</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">json</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;你的私钥&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TRC20 USDT合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询USDT余额</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/getBalance&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = req.<span class=\"property\">body</span>.<span class=\"property\">walletAddress</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">balance</span>: tronWeb.<span class=\"title function_\">fromSun</span>(balance) &#125;); <span class=\"comment\">// 转换为USDT单位</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转账USDT</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/transferUSDT&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; toAddress, amount &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = tronWeb.<span class=\"property\">defaultAddress</span>.<span class=\"property\">base58</span>; <span class=\"comment\">// 使用私钥加载的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> transaction = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(toAddress, tronWeb.<span class=\"title function_\">toSun</span>(amount)).<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">from</span>: fromAddress &#125;);</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账成功&#x27;</span>, transaction &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;转账失败&#x27;</span>, <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Telegram-Bot-实现\"><a href=\"#2-Telegram-Bot-实现\" class=\"headerlink\" title=\"2. Telegram Bot 实现\"></a>2. Telegram Bot 实现</h3><h4 id=\"使用TronWeb开发Telegram-Bot来查询TRC20-USDT余额和转账。\"><a href=\"#使用TronWeb开发Telegram-Bot来查询TRC20-USDT余额和转账。\" class=\"headerlink\" title=\"使用TronWeb开发Telegram Bot来查询TRC20 USDT余额和转账。\"></a>使用TronWeb开发Telegram Bot来查询TRC20 USDT余额和转账。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TelegramBot</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node-telegram-bot-api&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TronWeb</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tronweb&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tronWeb = <span class=\"keyword\">new</span> <span class=\"title class_\">TronWeb</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fullHost</span>: <span class=\"string\">&#x27;https://api.trongrid.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">privateKey</span>: <span class=\"string\">&#x27;你的私钥&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TRC20 USDT合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> usdtContractAddress = <span class=\"string\">&#x27;TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bot = <span class=\"keyword\">new</span> <span class=\"title class_\">TelegramBot</span>(<span class=\"string\">&#x27;你的Telegram Bot Token&#x27;</span>, &#123; <span class=\"attr\">polling</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/balance (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> walletAddress = match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> balance = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(walletAddress).<span class=\"title function_\">call</span>();</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`USDT 余额: <span class=\"subst\">$&#123;tronWeb.fromSun(balance)&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`查询失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bot.<span class=\"title function_\">onText</span>(<span class=\"regexp\">/\\/transfer (.+)/</span>, <span class=\"title function_\">async</span> (msg, match) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chatId = msg.<span class=\"property\">chat</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [toAddress, amount] = match[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">// 格式：/transfer [接收地址] [金额]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fromAddress = tronWeb.<span class=\"property\">defaultAddress</span>.<span class=\"property\">base58</span>; <span class=\"comment\">// 使用私钥生成的默认地址</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contract = <span class=\"keyword\">await</span> tronWeb.<span class=\"title function_\">contract</span>().<span class=\"title function_\">at</span>(usdtContractAddress);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> transaction = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(toAddress, tronWeb.<span class=\"title function_\">toSun</span>(amount)).<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">from</span>: fromAddress &#125;);</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账成功，交易ID: <span class=\"subst\">$&#123;transaction&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        bot.<span class=\"title function_\">sendMessage</span>(chatId, <span class=\"string\">`转账失败: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样，用户可以通过Telegram机器人使用命令<code>/balance [钱包地址]</code>查询TRC20 USDT的余额，或者通过<code>/transfer [接收地址] [金额]</code>进行转账。</p>\n"},{"title":"关于 Talkatone 保号和费用","date":"2024-11-24T10:38:53.675Z","_content":"### **关于 Talkatone 保号和费用**\n\n#### **1. 什么是 Talkatone？**\n\nTalkatone 是一款 VOIP（网络电话）应用程序，允许用户通过互联网拨打电话和发送短信。它为用户提供免费美国或加拿大电话号码。\n\n#### **2. Talkatone 保号政策**\n\nTalkatone 的免费号码有 **非活跃回收政策**，如果长时间未使用，你的号码可能会被回收。\n\n- **号码回收规则**：\n  - 如果 **30 天内未使用号码进行活动**（例如拨打电话、发送短信），号码会被标记为不活跃。\n  - 如果继续保持不活跃状态，号码可能会被重新分配给其他用户。\n- **保号方法**：\n  - **定期使用**：每月至少拨打一个电话或发送一条短信。\n  - **订阅付费计划**：Talkatone 提供付费订阅计划（如去广告、增强功能等），订阅后号码会长期保留。\n\n#### **3. Talkatone 费用**\n\n- **免费版**：号码是免费的，只需通过 Wi-Fi 或移动数据拨打电话、发短信。\n\n- 付费选项\n\n  ：\n\n  - 去广告计划：$0.99/月。\n  - 国际通话费用：根据目标国家不同而定，可以在应用内充值查看具体费率。\n\n------\n\n### **关于 Google Voice（Google 手机号）**\n\n#### **1. Google Voice 是什么？**\n\nGoogle Voice 是 Google 提供的一项网络电话服务，允许用户获得一个虚拟的美国电话号码，用于接听电话、语音留言和短信等。\n\n#### **2. Google Voice 手机号是虚拟还是实体？**\n\nGoogle Voice 提供的号码是 **虚拟号码**，不依赖于 SIM 卡或物理电话，但它功能全面，可以与实际手机号结合使用。\n\n- 虚拟号码可以绑定实际的电话号码，用于转接来电。\n- 可以通过浏览器或 Google Voice App 使用，支持发送短信、拨打电话。\n\n#### **3. Google Voice 注册步骤**\n\n1. 访问 Google Voice 官网\n\n   ：\n\n   - 打开 [Google Voice](https://voice.google.com/)。\n\n2. 选择号码\n\n   ：\n\n   - 登录 Google 账号后，选择一个你所在地区的号码（需要 VPN 切换到美国 IP）。\n\n3. 绑定现有电话号码\n\n   ：\n\n   - 提供一个有效的美国电话号码进行验证（可以是朋友的号码或虚拟接码服务）。\n\n4. 完成注册\n\n   ：\n\n   - 验证完成后，你就可以使用分配的 Google Voice 号码。\n\n#### **4. 保号方法**\n\n- Google Voice 有 \n\n  非活跃回收政策\n\n  ：\n\n  - **非活跃 6 个月**：如果 6 个月内没有任何活动（包括发送短信、拨打电话或接听电话），号码可能会被回收。\n  - **确保活跃**：定期使用 Google Voice 打电话或发送短信，即可保持号码活跃。\n\n#### **5. 费用**\n\n- 免费服务\n\n  ：\n\n  - 在美国和加拿大拨打电话、发短信完全免费。\n\n- 付费功能\n\n  ：\n\n  - 国际通话：按照 Google Voice 的费率收费（例如拨打中国大陆手机号码是 $0.01/分钟）。\n  - 保留号码（Port In）：将现有的电话号码迁移到 Google Voice 会收取一次性费用（$20）。\n\n------\n\n### **总结**\n\n| 服务             | 是否免费           | 保号方式                       | 费用                                |\n| ---------------- | ------------------ | ------------------------------ | ----------------------------------- |\n| **Talkatone**    | 免费（有付费选项） | 每 30 天内使用或订阅去广告计划 | 去广告 $0.99/月，国际通话按费率收费 |\n| **Google Voice** | 免费（部分付费）   | 每 6 个月内至少使用一次        | 国际通话 $0.01+/分钟，保号迁移 $20  |\n\n**推荐**：\n\n- 如果需要更稳定的虚拟号码，推荐使用 **Google Voice**，功能多且费用低。\n- 如果只是临时使用，可以选择 **Talkatone**，方便简单，但需注意定期活动保持号码。\n\n如果需要详细的操作指南或者帮助配置，可以继续告诉我！\n\n\n\n### **Talkatone 和 Google Voice 的费用详情**\n\n#### **1. Talkatone**\n\nTalkatone 提供免费美国/加拿大电话号码，但对于国际通话和一些付费功能，它有相应的费用。\n\n- **国内美国/加拿大通话和短信**：\n  - **免费**：在美国和加拿大国内拨打电话和发送短信通常是免费的。\n- **国际通话费用**： Talkatone 的国际通话费用根据目的地不同而有所不同。以下是一些常见的费率（以 2024 年为准，具体费用可在 Talkatone 应用内查看）：\n  - **中国大陆**：约 **$0.02 - $0.04/分钟**（取决于拨打的号码类型，例如手机或座机）。\n  - **其他国家**：费用在 $0.01 - $0.10/分钟之间，具体根据目标国家不同而有所变化。\n- **购买 Credits 充值**： Talkatone 通过应用内购买 Credits 来支付国际通话费用，可以在应用内查看详细的充值选项和费用。\n- **去广告服务**： 如果你希望去除广告，Talkatone 提供 **$0.99/月** 的订阅计划。\n\n------\n\n#### **2. Google Voice**\n\nGoogle Voice 提供美国和加拿大的免费通话和短信服务，对于国际通话，它会按照目标地区的费用收费。\n\n- **国内美国/加拿大通话和短信**：\n\n  - **免费**：在美国和加拿大拨打电话和发送短信是免费的。\n\n- **国际通话费用**： Google Voice 的国际通话费率会根据目标国家和拨打的电话号码（手机或座机）有所不同。以下是一些常见的国际通话费率（以 2024 年为准）：\n\n  - 中国大陆\n\n    ：\n\n    - **手机**：约 **$0.02/分钟**。\n    - **座机**：约 **$0.01/分钟**。\n\n  - 其他常见国家\n\n    ：\n\n    - **加拿大**：免费（与美国相同）。\n    - **英国**：约 **$0.02/分钟**。\n    - **印度**：约 **$0.01/分钟**。\n    - **德国**：约 **$0.02/分钟**。\n\n  具体费率可以在 Google Voice 网站上查看国际通话费率表，费用会随时更新。\n\n- **充值和付款方式**：\n\n  - Google Voice 通过信用卡或者 Google Play 账户进行充值，余额会在账户中显示，用于支付国际通话费用。\n\n------\n\n### **总结**\n\n| 服务             | 国内通话（美国/加拿大） | 国际通话（示例：中国大陆） | 短信费用     |\n| ---------------- | ----------------------- | -------------------------- | ------------ |\n| **Talkatone**    | 免费                    | $0.02 - $0.04/分钟         | 免费（国内） |\n| **Google Voice** | 免费                    | $0.01 - $0.02/分钟         | 免费（国内） |\n\n- **Talkatone** 提供免费的国内通话和短信，但国际通话收费。国际通话费用根据目的地国家不同而有所变化。\n- **Google Voice** 也提供免费的国内通话和短信，国际通话费用较为便宜，具体费用依据目的地国家不同。\n\n如果你有更具体的目的地或者费用问题，可以告诉我，我帮你查看详细信息！","source":"_posts/关于 Talkatone 保号和费用.md","raw":"---\ntitle: 关于 Talkatone 保号和费用\ndate: 2024-11-24T18:38:53.675Z\ntags: []\ncategories: []\n---\n### **关于 Talkatone 保号和费用**\n\n#### **1. 什么是 Talkatone？**\n\nTalkatone 是一款 VOIP（网络电话）应用程序，允许用户通过互联网拨打电话和发送短信。它为用户提供免费美国或加拿大电话号码。\n\n#### **2. Talkatone 保号政策**\n\nTalkatone 的免费号码有 **非活跃回收政策**，如果长时间未使用，你的号码可能会被回收。\n\n- **号码回收规则**：\n  - 如果 **30 天内未使用号码进行活动**（例如拨打电话、发送短信），号码会被标记为不活跃。\n  - 如果继续保持不活跃状态，号码可能会被重新分配给其他用户。\n- **保号方法**：\n  - **定期使用**：每月至少拨打一个电话或发送一条短信。\n  - **订阅付费计划**：Talkatone 提供付费订阅计划（如去广告、增强功能等），订阅后号码会长期保留。\n\n#### **3. Talkatone 费用**\n\n- **免费版**：号码是免费的，只需通过 Wi-Fi 或移动数据拨打电话、发短信。\n\n- 付费选项\n\n  ：\n\n  - 去广告计划：$0.99/月。\n  - 国际通话费用：根据目标国家不同而定，可以在应用内充值查看具体费率。\n\n------\n\n### **关于 Google Voice（Google 手机号）**\n\n#### **1. Google Voice 是什么？**\n\nGoogle Voice 是 Google 提供的一项网络电话服务，允许用户获得一个虚拟的美国电话号码，用于接听电话、语音留言和短信等。\n\n#### **2. Google Voice 手机号是虚拟还是实体？**\n\nGoogle Voice 提供的号码是 **虚拟号码**，不依赖于 SIM 卡或物理电话，但它功能全面，可以与实际手机号结合使用。\n\n- 虚拟号码可以绑定实际的电话号码，用于转接来电。\n- 可以通过浏览器或 Google Voice App 使用，支持发送短信、拨打电话。\n\n#### **3. Google Voice 注册步骤**\n\n1. 访问 Google Voice 官网\n\n   ：\n\n   - 打开 [Google Voice](https://voice.google.com/)。\n\n2. 选择号码\n\n   ：\n\n   - 登录 Google 账号后，选择一个你所在地区的号码（需要 VPN 切换到美国 IP）。\n\n3. 绑定现有电话号码\n\n   ：\n\n   - 提供一个有效的美国电话号码进行验证（可以是朋友的号码或虚拟接码服务）。\n\n4. 完成注册\n\n   ：\n\n   - 验证完成后，你就可以使用分配的 Google Voice 号码。\n\n#### **4. 保号方法**\n\n- Google Voice 有 \n\n  非活跃回收政策\n\n  ：\n\n  - **非活跃 6 个月**：如果 6 个月内没有任何活动（包括发送短信、拨打电话或接听电话），号码可能会被回收。\n  - **确保活跃**：定期使用 Google Voice 打电话或发送短信，即可保持号码活跃。\n\n#### **5. 费用**\n\n- 免费服务\n\n  ：\n\n  - 在美国和加拿大拨打电话、发短信完全免费。\n\n- 付费功能\n\n  ：\n\n  - 国际通话：按照 Google Voice 的费率收费（例如拨打中国大陆手机号码是 $0.01/分钟）。\n  - 保留号码（Port In）：将现有的电话号码迁移到 Google Voice 会收取一次性费用（$20）。\n\n------\n\n### **总结**\n\n| 服务             | 是否免费           | 保号方式                       | 费用                                |\n| ---------------- | ------------------ | ------------------------------ | ----------------------------------- |\n| **Talkatone**    | 免费（有付费选项） | 每 30 天内使用或订阅去广告计划 | 去广告 $0.99/月，国际通话按费率收费 |\n| **Google Voice** | 免费（部分付费）   | 每 6 个月内至少使用一次        | 国际通话 $0.01+/分钟，保号迁移 $20  |\n\n**推荐**：\n\n- 如果需要更稳定的虚拟号码，推荐使用 **Google Voice**，功能多且费用低。\n- 如果只是临时使用，可以选择 **Talkatone**，方便简单，但需注意定期活动保持号码。\n\n如果需要详细的操作指南或者帮助配置，可以继续告诉我！\n\n\n\n### **Talkatone 和 Google Voice 的费用详情**\n\n#### **1. Talkatone**\n\nTalkatone 提供免费美国/加拿大电话号码，但对于国际通话和一些付费功能，它有相应的费用。\n\n- **国内美国/加拿大通话和短信**：\n  - **免费**：在美国和加拿大国内拨打电话和发送短信通常是免费的。\n- **国际通话费用**： Talkatone 的国际通话费用根据目的地不同而有所不同。以下是一些常见的费率（以 2024 年为准，具体费用可在 Talkatone 应用内查看）：\n  - **中国大陆**：约 **$0.02 - $0.04/分钟**（取决于拨打的号码类型，例如手机或座机）。\n  - **其他国家**：费用在 $0.01 - $0.10/分钟之间，具体根据目标国家不同而有所变化。\n- **购买 Credits 充值**： Talkatone 通过应用内购买 Credits 来支付国际通话费用，可以在应用内查看详细的充值选项和费用。\n- **去广告服务**： 如果你希望去除广告，Talkatone 提供 **$0.99/月** 的订阅计划。\n\n------\n\n#### **2. Google Voice**\n\nGoogle Voice 提供美国和加拿大的免费通话和短信服务，对于国际通话，它会按照目标地区的费用收费。\n\n- **国内美国/加拿大通话和短信**：\n\n  - **免费**：在美国和加拿大拨打电话和发送短信是免费的。\n\n- **国际通话费用**： Google Voice 的国际通话费率会根据目标国家和拨打的电话号码（手机或座机）有所不同。以下是一些常见的国际通话费率（以 2024 年为准）：\n\n  - 中国大陆\n\n    ：\n\n    - **手机**：约 **$0.02/分钟**。\n    - **座机**：约 **$0.01/分钟**。\n\n  - 其他常见国家\n\n    ：\n\n    - **加拿大**：免费（与美国相同）。\n    - **英国**：约 **$0.02/分钟**。\n    - **印度**：约 **$0.01/分钟**。\n    - **德国**：约 **$0.02/分钟**。\n\n  具体费率可以在 Google Voice 网站上查看国际通话费率表，费用会随时更新。\n\n- **充值和付款方式**：\n\n  - Google Voice 通过信用卡或者 Google Play 账户进行充值，余额会在账户中显示，用于支付国际通话费用。\n\n------\n\n### **总结**\n\n| 服务             | 国内通话（美国/加拿大） | 国际通话（示例：中国大陆） | 短信费用     |\n| ---------------- | ----------------------- | -------------------------- | ------------ |\n| **Talkatone**    | 免费                    | $0.02 - $0.04/分钟         | 免费（国内） |\n| **Google Voice** | 免费                    | $0.01 - $0.02/分钟         | 免费（国内） |\n\n- **Talkatone** 提供免费的国内通话和短信，但国际通话收费。国际通话费用根据目的地国家不同而有所变化。\n- **Google Voice** 也提供免费的国内通话和短信，国际通话费用较为便宜，具体费用依据目的地国家不同。\n\n如果你有更具体的目的地或者费用问题，可以告诉我，我帮你查看详细信息！","slug":"关于 Talkatone 保号和费用","published":1,"updated":"2024-11-25T11:44:04.623Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscs0037mbs687n09v0n","content":"<h3 id=\"关于-Talkatone-保号和费用\"><a href=\"#关于-Talkatone-保号和费用\" class=\"headerlink\" title=\"关于 Talkatone 保号和费用\"></a><strong>关于 Talkatone 保号和费用</strong></h3><h4 id=\"1-什么是-Talkatone？\"><a href=\"#1-什么是-Talkatone？\" class=\"headerlink\" title=\"1. 什么是 Talkatone？\"></a><strong>1. 什么是 Talkatone？</strong></h4><p>Talkatone 是一款 VOIP（网络电话）应用程序，允许用户通过互联网拨打电话和发送短信。它为用户提供免费美国或加拿大电话号码。</p>\n<h4 id=\"2-Talkatone-保号政策\"><a href=\"#2-Talkatone-保号政策\" class=\"headerlink\" title=\"2. Talkatone 保号政策\"></a><strong>2. Talkatone 保号政策</strong></h4><p>Talkatone 的免费号码有 <strong>非活跃回收政策</strong>，如果长时间未使用，你的号码可能会被回收。</p>\n<ul>\n<li><strong>号码回收规则</strong>：<ul>\n<li>如果 <strong>30 天内未使用号码进行活动</strong>（例如拨打电话、发送短信），号码会被标记为不活跃。</li>\n<li>如果继续保持不活跃状态，号码可能会被重新分配给其他用户。</li>\n</ul>\n</li>\n<li><strong>保号方法</strong>：<ul>\n<li><strong>定期使用</strong>：每月至少拨打一个电话或发送一条短信。</li>\n<li><strong>订阅付费计划</strong>：Talkatone 提供付费订阅计划（如去广告、增强功能等），订阅后号码会长期保留。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-Talkatone-费用\"><a href=\"#3-Talkatone-费用\" class=\"headerlink\" title=\"3. Talkatone 费用\"></a><strong>3. Talkatone 费用</strong></h4><ul>\n<li><p><strong>免费版</strong>：号码是免费的，只需通过 Wi-Fi 或移动数据拨打电话、发短信。</p>\n</li>\n<li><p>付费选项</p>\n<p>：</p>\n<ul>\n<li>去广告计划：$0.99&#x2F;月。</li>\n<li>国际通话费用：根据目标国家不同而定，可以在应用内充值查看具体费率。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"关于-Google-Voice（Google-手机号）\"><a href=\"#关于-Google-Voice（Google-手机号）\" class=\"headerlink\" title=\"关于 Google Voice（Google 手机号）\"></a><strong>关于 Google Voice（Google 手机号）</strong></h3><h4 id=\"1-Google-Voice-是什么？\"><a href=\"#1-Google-Voice-是什么？\" class=\"headerlink\" title=\"1. Google Voice 是什么？\"></a><strong>1. Google Voice 是什么？</strong></h4><p>Google Voice 是 Google 提供的一项网络电话服务，允许用户获得一个虚拟的美国电话号码，用于接听电话、语音留言和短信等。</p>\n<h4 id=\"2-Google-Voice-手机号是虚拟还是实体？\"><a href=\"#2-Google-Voice-手机号是虚拟还是实体？\" class=\"headerlink\" title=\"2. Google Voice 手机号是虚拟还是实体？\"></a><strong>2. Google Voice 手机号是虚拟还是实体？</strong></h4><p>Google Voice 提供的号码是 <strong>虚拟号码</strong>，不依赖于 SIM 卡或物理电话，但它功能全面，可以与实际手机号结合使用。</p>\n<ul>\n<li>虚拟号码可以绑定实际的电话号码，用于转接来电。</li>\n<li>可以通过浏览器或 Google Voice App 使用，支持发送短信、拨打电话。</li>\n</ul>\n<h4 id=\"3-Google-Voice-注册步骤\"><a href=\"#3-Google-Voice-注册步骤\" class=\"headerlink\" title=\"3. Google Voice 注册步骤\"></a><strong>3. Google Voice 注册步骤</strong></h4><ol>\n<li><p>访问 Google Voice 官网</p>\n<p>：</p>\n<ul>\n<li>打开 <a href=\"https://voice.google.com/\">Google Voice</a>。</li>\n</ul>\n</li>\n<li><p>选择号码</p>\n<p>：</p>\n<ul>\n<li>登录 Google 账号后，选择一个你所在地区的号码（需要 VPN 切换到美国 IP）。</li>\n</ul>\n</li>\n<li><p>绑定现有电话号码</p>\n<p>：</p>\n<ul>\n<li>提供一个有效的美国电话号码进行验证（可以是朋友的号码或虚拟接码服务）。</li>\n</ul>\n</li>\n<li><p>完成注册</p>\n<p>：</p>\n<ul>\n<li>验证完成后，你就可以使用分配的 Google Voice 号码。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4-保号方法\"><a href=\"#4-保号方法\" class=\"headerlink\" title=\"4. 保号方法\"></a><strong>4. 保号方法</strong></h4><ul>\n<li><p>Google Voice 有 </p>\n<p>非活跃回收政策</p>\n<p>：</p>\n<ul>\n<li><strong>非活跃 6 个月</strong>：如果 6 个月内没有任何活动（包括发送短信、拨打电话或接听电话），号码可能会被回收。</li>\n<li><strong>确保活跃</strong>：定期使用 Google Voice 打电话或发送短信，即可保持号码活跃。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-费用\"><a href=\"#5-费用\" class=\"headerlink\" title=\"5. 费用\"></a><strong>5. 费用</strong></h4><ul>\n<li><p>免费服务</p>\n<p>：</p>\n<ul>\n<li>在美国和加拿大拨打电话、发短信完全免费。</li>\n</ul>\n</li>\n<li><p>付费功能</p>\n<p>：</p>\n<ul>\n<li>国际通话：按照 Google Voice 的费率收费（例如拨打中国大陆手机号码是 $0.01&#x2F;分钟）。</li>\n<li>保留号码（Port In）：将现有的电话号码迁移到 Google Voice 会收取一次性费用（$20）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><table>\n<thead>\n<tr>\n<th>服务</th>\n<th>是否免费</th>\n<th>保号方式</th>\n<th>费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Talkatone</strong></td>\n<td>免费（有付费选项）</td>\n<td>每 30 天内使用或订阅去广告计划</td>\n<td>去广告 $0.99&#x2F;月，国际通话按费率收费</td>\n</tr>\n<tr>\n<td><strong>Google Voice</strong></td>\n<td>免费（部分付费）</td>\n<td>每 6 个月内至少使用一次</td>\n<td>国际通话 $0.01+&#x2F;分钟，保号迁移 $20</td>\n</tr>\n</tbody></table>\n<p><strong>推荐</strong>：</p>\n<ul>\n<li>如果需要更稳定的虚拟号码，推荐使用 <strong>Google Voice</strong>，功能多且费用低。</li>\n<li>如果只是临时使用，可以选择 <strong>Talkatone</strong>，方便简单，但需注意定期活动保持号码。</li>\n</ul>\n<p>如果需要详细的操作指南或者帮助配置，可以继续告诉我！</p>\n<h3 id=\"Talkatone-和-Google-Voice-的费用详情\"><a href=\"#Talkatone-和-Google-Voice-的费用详情\" class=\"headerlink\" title=\"Talkatone 和 Google Voice 的费用详情\"></a><strong>Talkatone 和 Google Voice 的费用详情</strong></h3><h4 id=\"1-Talkatone\"><a href=\"#1-Talkatone\" class=\"headerlink\" title=\"1. Talkatone\"></a><strong>1. Talkatone</strong></h4><p>Talkatone 提供免费美国&#x2F;加拿大电话号码，但对于国际通话和一些付费功能，它有相应的费用。</p>\n<ul>\n<li><strong>国内美国&#x2F;加拿大通话和短信</strong>：<ul>\n<li><strong>免费</strong>：在美国和加拿大国内拨打电话和发送短信通常是免费的。</li>\n</ul>\n</li>\n<li><strong>国际通话费用</strong>： Talkatone 的国际通话费用根据目的地不同而有所不同。以下是一些常见的费率（以 2024 年为准，具体费用可在 Talkatone 应用内查看）：<ul>\n<li><strong>中国大陆</strong>：约 <strong>$0.02 - $0.04&#x2F;分钟</strong>（取决于拨打的号码类型，例如手机或座机）。</li>\n<li><strong>其他国家</strong>：费用在 $0.01 - $0.10&#x2F;分钟之间，具体根据目标国家不同而有所变化。</li>\n</ul>\n</li>\n<li><strong>购买 Credits 充值</strong>： Talkatone 通过应用内购买 Credits 来支付国际通话费用，可以在应用内查看详细的充值选项和费用。</li>\n<li><strong>去广告服务</strong>： 如果你希望去除广告，Talkatone 提供 <strong>$0.99&#x2F;月</strong> 的订阅计划。</li>\n</ul>\n<hr>\n<h4 id=\"2-Google-Voice\"><a href=\"#2-Google-Voice\" class=\"headerlink\" title=\"2. Google Voice\"></a><strong>2. Google Voice</strong></h4><p>Google Voice 提供美国和加拿大的免费通话和短信服务，对于国际通话，它会按照目标地区的费用收费。</p>\n<ul>\n<li><p><strong>国内美国&#x2F;加拿大通话和短信</strong>：</p>\n<ul>\n<li><strong>免费</strong>：在美国和加拿大拨打电话和发送短信是免费的。</li>\n</ul>\n</li>\n<li><p><strong>国际通话费用</strong>： Google Voice 的国际通话费率会根据目标国家和拨打的电话号码（手机或座机）有所不同。以下是一些常见的国际通话费率（以 2024 年为准）：</p>\n<ul>\n<li><p>中国大陆</p>\n<p>：</p>\n<ul>\n<li><strong>手机</strong>：约 <strong>$0.02&#x2F;分钟</strong>。</li>\n<li><strong>座机</strong>：约 <strong>$0.01&#x2F;分钟</strong>。</li>\n</ul>\n</li>\n<li><p>其他常见国家</p>\n<p>：</p>\n<ul>\n<li><strong>加拿大</strong>：免费（与美国相同）。</li>\n<li><strong>英国</strong>：约 <strong>$0.02&#x2F;分钟</strong>。</li>\n<li><strong>印度</strong>：约 <strong>$0.01&#x2F;分钟</strong>。</li>\n<li><strong>德国</strong>：约 <strong>$0.02&#x2F;分钟</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>具体费率可以在 Google Voice 网站上查看国际通话费率表，费用会随时更新。</p>\n</li>\n<li><p><strong>充值和付款方式</strong>：</p>\n<ul>\n<li>Google Voice 通过信用卡或者 Google Play 账户进行充值，余额会在账户中显示，用于支付国际通话费用。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><table>\n<thead>\n<tr>\n<th>服务</th>\n<th>国内通话（美国&#x2F;加拿大）</th>\n<th>国际通话（示例：中国大陆）</th>\n<th>短信费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Talkatone</strong></td>\n<td>免费</td>\n<td>$0.02 - $0.04&#x2F;分钟</td>\n<td>免费（国内）</td>\n</tr>\n<tr>\n<td><strong>Google Voice</strong></td>\n<td>免费</td>\n<td>$0.01 - $0.02&#x2F;分钟</td>\n<td>免费（国内）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>Talkatone</strong> 提供免费的国内通话和短信，但国际通话收费。国际通话费用根据目的地国家不同而有所变化。</li>\n<li><strong>Google Voice</strong> 也提供免费的国内通话和短信，国际通话费用较为便宜，具体费用依据目的地国家不同。</li>\n</ul>\n<p>如果你有更具体的目的地或者费用问题，可以告诉我，我帮你查看详细信息！</p>\n","excerpt":"","more":"<h3 id=\"关于-Talkatone-保号和费用\"><a href=\"#关于-Talkatone-保号和费用\" class=\"headerlink\" title=\"关于 Talkatone 保号和费用\"></a><strong>关于 Talkatone 保号和费用</strong></h3><h4 id=\"1-什么是-Talkatone？\"><a href=\"#1-什么是-Talkatone？\" class=\"headerlink\" title=\"1. 什么是 Talkatone？\"></a><strong>1. 什么是 Talkatone？</strong></h4><p>Talkatone 是一款 VOIP（网络电话）应用程序，允许用户通过互联网拨打电话和发送短信。它为用户提供免费美国或加拿大电话号码。</p>\n<h4 id=\"2-Talkatone-保号政策\"><a href=\"#2-Talkatone-保号政策\" class=\"headerlink\" title=\"2. Talkatone 保号政策\"></a><strong>2. Talkatone 保号政策</strong></h4><p>Talkatone 的免费号码有 <strong>非活跃回收政策</strong>，如果长时间未使用，你的号码可能会被回收。</p>\n<ul>\n<li><strong>号码回收规则</strong>：<ul>\n<li>如果 <strong>30 天内未使用号码进行活动</strong>（例如拨打电话、发送短信），号码会被标记为不活跃。</li>\n<li>如果继续保持不活跃状态，号码可能会被重新分配给其他用户。</li>\n</ul>\n</li>\n<li><strong>保号方法</strong>：<ul>\n<li><strong>定期使用</strong>：每月至少拨打一个电话或发送一条短信。</li>\n<li><strong>订阅付费计划</strong>：Talkatone 提供付费订阅计划（如去广告、增强功能等），订阅后号码会长期保留。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-Talkatone-费用\"><a href=\"#3-Talkatone-费用\" class=\"headerlink\" title=\"3. Talkatone 费用\"></a><strong>3. Talkatone 费用</strong></h4><ul>\n<li><p><strong>免费版</strong>：号码是免费的，只需通过 Wi-Fi 或移动数据拨打电话、发短信。</p>\n</li>\n<li><p>付费选项</p>\n<p>：</p>\n<ul>\n<li>去广告计划：$0.99&#x2F;月。</li>\n<li>国际通话费用：根据目标国家不同而定，可以在应用内充值查看具体费率。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"关于-Google-Voice（Google-手机号）\"><a href=\"#关于-Google-Voice（Google-手机号）\" class=\"headerlink\" title=\"关于 Google Voice（Google 手机号）\"></a><strong>关于 Google Voice（Google 手机号）</strong></h3><h4 id=\"1-Google-Voice-是什么？\"><a href=\"#1-Google-Voice-是什么？\" class=\"headerlink\" title=\"1. Google Voice 是什么？\"></a><strong>1. Google Voice 是什么？</strong></h4><p>Google Voice 是 Google 提供的一项网络电话服务，允许用户获得一个虚拟的美国电话号码，用于接听电话、语音留言和短信等。</p>\n<h4 id=\"2-Google-Voice-手机号是虚拟还是实体？\"><a href=\"#2-Google-Voice-手机号是虚拟还是实体？\" class=\"headerlink\" title=\"2. Google Voice 手机号是虚拟还是实体？\"></a><strong>2. Google Voice 手机号是虚拟还是实体？</strong></h4><p>Google Voice 提供的号码是 <strong>虚拟号码</strong>，不依赖于 SIM 卡或物理电话，但它功能全面，可以与实际手机号结合使用。</p>\n<ul>\n<li>虚拟号码可以绑定实际的电话号码，用于转接来电。</li>\n<li>可以通过浏览器或 Google Voice App 使用，支持发送短信、拨打电话。</li>\n</ul>\n<h4 id=\"3-Google-Voice-注册步骤\"><a href=\"#3-Google-Voice-注册步骤\" class=\"headerlink\" title=\"3. Google Voice 注册步骤\"></a><strong>3. Google Voice 注册步骤</strong></h4><ol>\n<li><p>访问 Google Voice 官网</p>\n<p>：</p>\n<ul>\n<li>打开 <a href=\"https://voice.google.com/\">Google Voice</a>。</li>\n</ul>\n</li>\n<li><p>选择号码</p>\n<p>：</p>\n<ul>\n<li>登录 Google 账号后，选择一个你所在地区的号码（需要 VPN 切换到美国 IP）。</li>\n</ul>\n</li>\n<li><p>绑定现有电话号码</p>\n<p>：</p>\n<ul>\n<li>提供一个有效的美国电话号码进行验证（可以是朋友的号码或虚拟接码服务）。</li>\n</ul>\n</li>\n<li><p>完成注册</p>\n<p>：</p>\n<ul>\n<li>验证完成后，你就可以使用分配的 Google Voice 号码。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4-保号方法\"><a href=\"#4-保号方法\" class=\"headerlink\" title=\"4. 保号方法\"></a><strong>4. 保号方法</strong></h4><ul>\n<li><p>Google Voice 有 </p>\n<p>非活跃回收政策</p>\n<p>：</p>\n<ul>\n<li><strong>非活跃 6 个月</strong>：如果 6 个月内没有任何活动（包括发送短信、拨打电话或接听电话），号码可能会被回收。</li>\n<li><strong>确保活跃</strong>：定期使用 Google Voice 打电话或发送短信，即可保持号码活跃。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-费用\"><a href=\"#5-费用\" class=\"headerlink\" title=\"5. 费用\"></a><strong>5. 费用</strong></h4><ul>\n<li><p>免费服务</p>\n<p>：</p>\n<ul>\n<li>在美国和加拿大拨打电话、发短信完全免费。</li>\n</ul>\n</li>\n<li><p>付费功能</p>\n<p>：</p>\n<ul>\n<li>国际通话：按照 Google Voice 的费率收费（例如拨打中国大陆手机号码是 $0.01&#x2F;分钟）。</li>\n<li>保留号码（Port In）：将现有的电话号码迁移到 Google Voice 会收取一次性费用（$20）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><table>\n<thead>\n<tr>\n<th>服务</th>\n<th>是否免费</th>\n<th>保号方式</th>\n<th>费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Talkatone</strong></td>\n<td>免费（有付费选项）</td>\n<td>每 30 天内使用或订阅去广告计划</td>\n<td>去广告 $0.99&#x2F;月，国际通话按费率收费</td>\n</tr>\n<tr>\n<td><strong>Google Voice</strong></td>\n<td>免费（部分付费）</td>\n<td>每 6 个月内至少使用一次</td>\n<td>国际通话 $0.01+&#x2F;分钟，保号迁移 $20</td>\n</tr>\n</tbody></table>\n<p><strong>推荐</strong>：</p>\n<ul>\n<li>如果需要更稳定的虚拟号码，推荐使用 <strong>Google Voice</strong>，功能多且费用低。</li>\n<li>如果只是临时使用，可以选择 <strong>Talkatone</strong>，方便简单，但需注意定期活动保持号码。</li>\n</ul>\n<p>如果需要详细的操作指南或者帮助配置，可以继续告诉我！</p>\n<h3 id=\"Talkatone-和-Google-Voice-的费用详情\"><a href=\"#Talkatone-和-Google-Voice-的费用详情\" class=\"headerlink\" title=\"Talkatone 和 Google Voice 的费用详情\"></a><strong>Talkatone 和 Google Voice 的费用详情</strong></h3><h4 id=\"1-Talkatone\"><a href=\"#1-Talkatone\" class=\"headerlink\" title=\"1. Talkatone\"></a><strong>1. Talkatone</strong></h4><p>Talkatone 提供免费美国&#x2F;加拿大电话号码，但对于国际通话和一些付费功能，它有相应的费用。</p>\n<ul>\n<li><strong>国内美国&#x2F;加拿大通话和短信</strong>：<ul>\n<li><strong>免费</strong>：在美国和加拿大国内拨打电话和发送短信通常是免费的。</li>\n</ul>\n</li>\n<li><strong>国际通话费用</strong>： Talkatone 的国际通话费用根据目的地不同而有所不同。以下是一些常见的费率（以 2024 年为准，具体费用可在 Talkatone 应用内查看）：<ul>\n<li><strong>中国大陆</strong>：约 <strong>$0.02 - $0.04&#x2F;分钟</strong>（取决于拨打的号码类型，例如手机或座机）。</li>\n<li><strong>其他国家</strong>：费用在 $0.01 - $0.10&#x2F;分钟之间，具体根据目标国家不同而有所变化。</li>\n</ul>\n</li>\n<li><strong>购买 Credits 充值</strong>： Talkatone 通过应用内购买 Credits 来支付国际通话费用，可以在应用内查看详细的充值选项和费用。</li>\n<li><strong>去广告服务</strong>： 如果你希望去除广告，Talkatone 提供 <strong>$0.99&#x2F;月</strong> 的订阅计划。</li>\n</ul>\n<hr>\n<h4 id=\"2-Google-Voice\"><a href=\"#2-Google-Voice\" class=\"headerlink\" title=\"2. Google Voice\"></a><strong>2. Google Voice</strong></h4><p>Google Voice 提供美国和加拿大的免费通话和短信服务，对于国际通话，它会按照目标地区的费用收费。</p>\n<ul>\n<li><p><strong>国内美国&#x2F;加拿大通话和短信</strong>：</p>\n<ul>\n<li><strong>免费</strong>：在美国和加拿大拨打电话和发送短信是免费的。</li>\n</ul>\n</li>\n<li><p><strong>国际通话费用</strong>： Google Voice 的国际通话费率会根据目标国家和拨打的电话号码（手机或座机）有所不同。以下是一些常见的国际通话费率（以 2024 年为准）：</p>\n<ul>\n<li><p>中国大陆</p>\n<p>：</p>\n<ul>\n<li><strong>手机</strong>：约 <strong>$0.02&#x2F;分钟</strong>。</li>\n<li><strong>座机</strong>：约 <strong>$0.01&#x2F;分钟</strong>。</li>\n</ul>\n</li>\n<li><p>其他常见国家</p>\n<p>：</p>\n<ul>\n<li><strong>加拿大</strong>：免费（与美国相同）。</li>\n<li><strong>英国</strong>：约 <strong>$0.02&#x2F;分钟</strong>。</li>\n<li><strong>印度</strong>：约 <strong>$0.01&#x2F;分钟</strong>。</li>\n<li><strong>德国</strong>：约 <strong>$0.02&#x2F;分钟</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>具体费率可以在 Google Voice 网站上查看国际通话费率表，费用会随时更新。</p>\n</li>\n<li><p><strong>充值和付款方式</strong>：</p>\n<ul>\n<li>Google Voice 通过信用卡或者 Google Play 账户进行充值，余额会在账户中显示，用于支付国际通话费用。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><table>\n<thead>\n<tr>\n<th>服务</th>\n<th>国内通话（美国&#x2F;加拿大）</th>\n<th>国际通话（示例：中国大陆）</th>\n<th>短信费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Talkatone</strong></td>\n<td>免费</td>\n<td>$0.02 - $0.04&#x2F;分钟</td>\n<td>免费（国内）</td>\n</tr>\n<tr>\n<td><strong>Google Voice</strong></td>\n<td>免费</td>\n<td>$0.01 - $0.02&#x2F;分钟</td>\n<td>免费（国内）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>Talkatone</strong> 提供免费的国内通话和短信，但国际通话收费。国际通话费用根据目的地国家不同而有所变化。</li>\n<li><strong>Google Voice</strong> 也提供免费的国内通话和短信，国际通话费用较为便宜，具体费用依据目的地国家不同。</li>\n</ul>\n<p>如果你有更具体的目的地或者费用问题，可以告诉我，我帮你查看详细信息！</p>\n"},{"title":"递归的思想模型","date":"2024-09-10T07:21:16.030Z","_content":"**递归**是一种解决问题的**思维方式**，通过将问题分解为规模更小的**相同类型问题**，然后递归调用自身来求解。递归常用在解决具有**重复结构**的问题中，尤其是在处理树、图等复杂数据结构时非常有效。\n\n简单来说，递归就是一个**函数调用自身**，并且需要具备两个关键部分：\n1. **递归出口（终止条件）**：防止函数无限调用，必须设定一个明确的结束条件。\n2. **递归过程**：将问题分解为子问题，递归解决后，再合并子问题的结果。\n\n### 递归的思想模型\n\n在递归过程中，每一层函数调用都是一个独立的处理单元，类似于栈的结构。每次调用会保存当前状态，等子问题处理完后，返回结果继续执行未完成的任务。因此递归可以理解为一种逐步深入、再逐步返回的过程。\n\n### 递归的基本步骤\n\n1. **定义问题**：确认要解决的问题，以及如何将问题分解为子问题。\n2. **找到终止条件**：确保递归能在某个条件下停止，这通常是最简单、最基础的问题状态。\n3. **递归过程**：将问题逐步分解，每一步调用自身解决更小规模的问题。\n4. **整合结果**：递归调用返回结果后，结合这些结果解决当前层级的问题。\n\n### 递归的经典示例\n\n#### 1. 斐波那契数列\n\n斐波那契数列的定义是：`f(n) = f(n-1) + f(n-2)`，并且`f(0) = 0`，`f(1) = 1`。\n\n递归的思想就是根据这个定义，每次求解当前项时，拆解为两个更小的子问题，即求解 `f(n-1)` 和 `f(n-2)`，直到达到终止条件（`f(0)` 和 `f(1)`）。\n\n```java\npublic class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n == 0) {\n            return 0; // 终止条件之一\n        } else if (n == 1) {\n            return 1; // 终止条件之二\n        } else {\n            return fibonacci(n - 1) + fibonacci(n - 2); // 递归过程\n        }\n    }\n}\n```\n\n#### 2. 阶乘计算\n\n阶乘 `n!` 是指从 `1` 到 `n` 的乘积。它的递归定义为：`n! = n * (n-1)!`，并且 `0! = 1`。\n\n```java\npublic class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1; // 终止条件\n        } else {\n            return n * factorial(n - 1); // 递归过程\n        }\n    }\n}\n```\n\n### 递归的优势与劣势\n\n#### 优势：\n1. **简洁易懂**：递归能很好地匹配许多问题的自然结构，比如树形结构、图形问题等。使用递归代码往往比迭代代码更直观、简洁。\n2. **减少重复代码**：递归通过重复调用同一函数，避免了手动编写循环结构，使代码更简洁。\n\n#### 劣势：\n1. **性能问题**：每次递归调用都会增加内存栈的深度，太多的递归层级可能导致**栈溢出**。\n2. **效率低**：对于某些问题，递归可能会产生大量重复计算（如斐波那契数列）。需要通过**记忆化搜索**或**动态规划**优化。\n\n### 尾递归优化\n\n尾递归是指递归调用是函数中的最后一步，没有额外的操作。尾递归可以通过编译器优化，避免栈溢出问题，将递归转换为迭代形式。以下是一个尾递归求阶乘的例子：\n\n```java\npublic class TailRecursionFactorial {\n    public static int factorial(int n, int result) {\n        if (n == 0) {\n            return result; // 终止条件\n        } else {\n            return factorial(n - 1, n * result); // 尾递归\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5, 1)); // 调用时传入1作为初始结果\n    }\n}\n```\n\n这种尾递归形式可以在编译时被优化成迭代，减少递归调用层数，避免栈溢出。","source":"_posts/递归的思想模型.md","raw":"---\ntitle: 递归的思想模型\ndate: 2024-09-10T15:21:16.030Z\ntags: []\ncategories: []\n---\n**递归**是一种解决问题的**思维方式**，通过将问题分解为规模更小的**相同类型问题**，然后递归调用自身来求解。递归常用在解决具有**重复结构**的问题中，尤其是在处理树、图等复杂数据结构时非常有效。\n\n简单来说，递归就是一个**函数调用自身**，并且需要具备两个关键部分：\n1. **递归出口（终止条件）**：防止函数无限调用，必须设定一个明确的结束条件。\n2. **递归过程**：将问题分解为子问题，递归解决后，再合并子问题的结果。\n\n### 递归的思想模型\n\n在递归过程中，每一层函数调用都是一个独立的处理单元，类似于栈的结构。每次调用会保存当前状态，等子问题处理完后，返回结果继续执行未完成的任务。因此递归可以理解为一种逐步深入、再逐步返回的过程。\n\n### 递归的基本步骤\n\n1. **定义问题**：确认要解决的问题，以及如何将问题分解为子问题。\n2. **找到终止条件**：确保递归能在某个条件下停止，这通常是最简单、最基础的问题状态。\n3. **递归过程**：将问题逐步分解，每一步调用自身解决更小规模的问题。\n4. **整合结果**：递归调用返回结果后，结合这些结果解决当前层级的问题。\n\n### 递归的经典示例\n\n#### 1. 斐波那契数列\n\n斐波那契数列的定义是：`f(n) = f(n-1) + f(n-2)`，并且`f(0) = 0`，`f(1) = 1`。\n\n递归的思想就是根据这个定义，每次求解当前项时，拆解为两个更小的子问题，即求解 `f(n-1)` 和 `f(n-2)`，直到达到终止条件（`f(0)` 和 `f(1)`）。\n\n```java\npublic class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n == 0) {\n            return 0; // 终止条件之一\n        } else if (n == 1) {\n            return 1; // 终止条件之二\n        } else {\n            return fibonacci(n - 1) + fibonacci(n - 2); // 递归过程\n        }\n    }\n}\n```\n\n#### 2. 阶乘计算\n\n阶乘 `n!` 是指从 `1` 到 `n` 的乘积。它的递归定义为：`n! = n * (n-1)!`，并且 `0! = 1`。\n\n```java\npublic class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1; // 终止条件\n        } else {\n            return n * factorial(n - 1); // 递归过程\n        }\n    }\n}\n```\n\n### 递归的优势与劣势\n\n#### 优势：\n1. **简洁易懂**：递归能很好地匹配许多问题的自然结构，比如树形结构、图形问题等。使用递归代码往往比迭代代码更直观、简洁。\n2. **减少重复代码**：递归通过重复调用同一函数，避免了手动编写循环结构，使代码更简洁。\n\n#### 劣势：\n1. **性能问题**：每次递归调用都会增加内存栈的深度，太多的递归层级可能导致**栈溢出**。\n2. **效率低**：对于某些问题，递归可能会产生大量重复计算（如斐波那契数列）。需要通过**记忆化搜索**或**动态规划**优化。\n\n### 尾递归优化\n\n尾递归是指递归调用是函数中的最后一步，没有额外的操作。尾递归可以通过编译器优化，避免栈溢出问题，将递归转换为迭代形式。以下是一个尾递归求阶乘的例子：\n\n```java\npublic class TailRecursionFactorial {\n    public static int factorial(int n, int result) {\n        if (n == 0) {\n            return result; // 终止条件\n        } else {\n            return factorial(n - 1, n * result); // 尾递归\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5, 1)); // 调用时传入1作为初始结果\n    }\n}\n```\n\n这种尾递归形式可以在编译时被优化成迭代，减少递归调用层数，避免栈溢出。","slug":"递归的思想模型","published":1,"updated":"2024-11-25T11:44:04.627Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscs0038mbs61zgo525i","content":"<p><strong>递归</strong>是一种解决问题的<strong>思维方式</strong>，通过将问题分解为规模更小的<strong>相同类型问题</strong>，然后递归调用自身来求解。递归常用在解决具有<strong>重复结构</strong>的问题中，尤其是在处理树、图等复杂数据结构时非常有效。</p>\n<p>简单来说，递归就是一个<strong>函数调用自身</strong>，并且需要具备两个关键部分：</p>\n<ol>\n<li><strong>递归出口（终止条件）</strong>：防止函数无限调用，必须设定一个明确的结束条件。</li>\n<li><strong>递归过程</strong>：将问题分解为子问题，递归解决后，再合并子问题的结果。</li>\n</ol>\n<h3 id=\"递归的思想模型\"><a href=\"#递归的思想模型\" class=\"headerlink\" title=\"递归的思想模型\"></a>递归的思想模型</h3><p>在递归过程中，每一层函数调用都是一个独立的处理单元，类似于栈的结构。每次调用会保存当前状态，等子问题处理完后，返回结果继续执行未完成的任务。因此递归可以理解为一种逐步深入、再逐步返回的过程。</p>\n<h3 id=\"递归的基本步骤\"><a href=\"#递归的基本步骤\" class=\"headerlink\" title=\"递归的基本步骤\"></a>递归的基本步骤</h3><ol>\n<li><strong>定义问题</strong>：确认要解决的问题，以及如何将问题分解为子问题。</li>\n<li><strong>找到终止条件</strong>：确保递归能在某个条件下停止，这通常是最简单、最基础的问题状态。</li>\n<li><strong>递归过程</strong>：将问题逐步分解，每一步调用自身解决更小规模的问题。</li>\n<li><strong>整合结果</strong>：递归调用返回结果后，结合这些结果解决当前层级的问题。</li>\n</ol>\n<h3 id=\"递归的经典示例\"><a href=\"#递归的经典示例\" class=\"headerlink\" title=\"递归的经典示例\"></a>递归的经典示例</h3><h4 id=\"1-斐波那契数列\"><a href=\"#1-斐波那契数列\" class=\"headerlink\" title=\"1. 斐波那契数列\"></a>1. 斐波那契数列</h4><p>斐波那契数列的定义是：<code>f(n) = f(n-1) + f(n-2)</code>，并且<code>f(0) = 0</code>，<code>f(1) = 1</code>。</p>\n<p>递归的思想就是根据这个定义，每次求解当前项时，拆解为两个更小的子问题，即求解 <code>f(n-1)</code> 和 <code>f(n-2)</code>，直到达到终止条件（<code>f(0)</code> 和 <code>f(1)</code>）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fibonacci</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 终止条件之一</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 终止条件之二</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>) + fibonacci(n - <span class=\"number\">2</span>); <span class=\"comment\">// 递归过程</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-阶乘计算\"><a href=\"#2-阶乘计算\" class=\"headerlink\" title=\"2. 阶乘计算\"></a>2. 阶乘计算</h4><p>阶乘 <code>n!</code> 是指从 <code>1</code> 到 <code>n</code> 的乘积。它的递归定义为：<code>n! = n * (n-1)!</code>，并且 <code>0! = 1</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factorial</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 终止条件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>); <span class=\"comment\">// 递归过程</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归的优势与劣势\"><a href=\"#递归的优势与劣势\" class=\"headerlink\" title=\"递归的优势与劣势\"></a>递归的优势与劣势</h3><h4 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h4><ol>\n<li><strong>简洁易懂</strong>：递归能很好地匹配许多问题的自然结构，比如树形结构、图形问题等。使用递归代码往往比迭代代码更直观、简洁。</li>\n<li><strong>减少重复代码</strong>：递归通过重复调用同一函数，避免了手动编写循环结构，使代码更简洁。</li>\n</ol>\n<h4 id=\"劣势：\"><a href=\"#劣势：\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h4><ol>\n<li><strong>性能问题</strong>：每次递归调用都会增加内存栈的深度，太多的递归层级可能导致<strong>栈溢出</strong>。</li>\n<li><strong>效率低</strong>：对于某些问题，递归可能会产生大量重复计算（如斐波那契数列）。需要通过<strong>记忆化搜索</strong>或<strong>动态规划</strong>优化。</li>\n</ol>\n<h3 id=\"尾递归优化\"><a href=\"#尾递归优化\" class=\"headerlink\" title=\"尾递归优化\"></a>尾递归优化</h3><p>尾递归是指递归调用是函数中的最后一步，没有额外的操作。尾递归可以通过编译器优化，避免栈溢出问题，将递归转换为迭代形式。以下是一个尾递归求阶乘的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TailRecursionFactorial</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> result)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">// 终止条件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * result); <span class=\"comment\">// 尾递归</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(factorial(<span class=\"number\">5</span>, <span class=\"number\">1</span>)); <span class=\"comment\">// 调用时传入1作为初始结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种尾递归形式可以在编译时被优化成迭代，减少递归调用层数，避免栈溢出。</p>\n","excerpt":"","more":"<p><strong>递归</strong>是一种解决问题的<strong>思维方式</strong>，通过将问题分解为规模更小的<strong>相同类型问题</strong>，然后递归调用自身来求解。递归常用在解决具有<strong>重复结构</strong>的问题中，尤其是在处理树、图等复杂数据结构时非常有效。</p>\n<p>简单来说，递归就是一个<strong>函数调用自身</strong>，并且需要具备两个关键部分：</p>\n<ol>\n<li><strong>递归出口（终止条件）</strong>：防止函数无限调用，必须设定一个明确的结束条件。</li>\n<li><strong>递归过程</strong>：将问题分解为子问题，递归解决后，再合并子问题的结果。</li>\n</ol>\n<h3 id=\"递归的思想模型\"><a href=\"#递归的思想模型\" class=\"headerlink\" title=\"递归的思想模型\"></a>递归的思想模型</h3><p>在递归过程中，每一层函数调用都是一个独立的处理单元，类似于栈的结构。每次调用会保存当前状态，等子问题处理完后，返回结果继续执行未完成的任务。因此递归可以理解为一种逐步深入、再逐步返回的过程。</p>\n<h3 id=\"递归的基本步骤\"><a href=\"#递归的基本步骤\" class=\"headerlink\" title=\"递归的基本步骤\"></a>递归的基本步骤</h3><ol>\n<li><strong>定义问题</strong>：确认要解决的问题，以及如何将问题分解为子问题。</li>\n<li><strong>找到终止条件</strong>：确保递归能在某个条件下停止，这通常是最简单、最基础的问题状态。</li>\n<li><strong>递归过程</strong>：将问题逐步分解，每一步调用自身解决更小规模的问题。</li>\n<li><strong>整合结果</strong>：递归调用返回结果后，结合这些结果解决当前层级的问题。</li>\n</ol>\n<h3 id=\"递归的经典示例\"><a href=\"#递归的经典示例\" class=\"headerlink\" title=\"递归的经典示例\"></a>递归的经典示例</h3><h4 id=\"1-斐波那契数列\"><a href=\"#1-斐波那契数列\" class=\"headerlink\" title=\"1. 斐波那契数列\"></a>1. 斐波那契数列</h4><p>斐波那契数列的定义是：<code>f(n) = f(n-1) + f(n-2)</code>，并且<code>f(0) = 0</code>，<code>f(1) = 1</code>。</p>\n<p>递归的思想就是根据这个定义，每次求解当前项时，拆解为两个更小的子问题，即求解 <code>f(n-1)</code> 和 <code>f(n-2)</code>，直到达到终止条件（<code>f(0)</code> 和 <code>f(1)</code>）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fibonacci</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 终止条件之一</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 终止条件之二</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>) + fibonacci(n - <span class=\"number\">2</span>); <span class=\"comment\">// 递归过程</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-阶乘计算\"><a href=\"#2-阶乘计算\" class=\"headerlink\" title=\"2. 阶乘计算\"></a>2. 阶乘计算</h4><p>阶乘 <code>n!</code> 是指从 <code>1</code> 到 <code>n</code> 的乘积。它的递归定义为：<code>n! = n * (n-1)!</code>，并且 <code>0! = 1</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factorial</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 终止条件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>); <span class=\"comment\">// 递归过程</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归的优势与劣势\"><a href=\"#递归的优势与劣势\" class=\"headerlink\" title=\"递归的优势与劣势\"></a>递归的优势与劣势</h3><h4 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h4><ol>\n<li><strong>简洁易懂</strong>：递归能很好地匹配许多问题的自然结构，比如树形结构、图形问题等。使用递归代码往往比迭代代码更直观、简洁。</li>\n<li><strong>减少重复代码</strong>：递归通过重复调用同一函数，避免了手动编写循环结构，使代码更简洁。</li>\n</ol>\n<h4 id=\"劣势：\"><a href=\"#劣势：\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h4><ol>\n<li><strong>性能问题</strong>：每次递归调用都会增加内存栈的深度，太多的递归层级可能导致<strong>栈溢出</strong>。</li>\n<li><strong>效率低</strong>：对于某些问题，递归可能会产生大量重复计算（如斐波那契数列）。需要通过<strong>记忆化搜索</strong>或<strong>动态规划</strong>优化。</li>\n</ol>\n<h3 id=\"尾递归优化\"><a href=\"#尾递归优化\" class=\"headerlink\" title=\"尾递归优化\"></a>尾递归优化</h3><p>尾递归是指递归调用是函数中的最后一步，没有额外的操作。尾递归可以通过编译器优化，避免栈溢出问题，将递归转换为迭代形式。以下是一个尾递归求阶乘的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TailRecursionFactorial</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> result)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">// 终止条件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * result); <span class=\"comment\">// 尾递归</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(factorial(<span class=\"number\">5</span>, <span class=\"number\">1</span>)); <span class=\"comment\">// 调用时传入1作为初始结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种尾递归形式可以在编译时被优化成迭代，减少递归调用层数，避免栈溢出。</p>\n"},{"title":"彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析","date":"2024-09-10T06:36:19.802Z","_content":"### **彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析**\n\n排序算法是编程世界的基础，也是面试中的常客。但你真的搞清楚了哪些算法是**稳定**的，哪些是**不稳定**的吗？别担心，这篇文章将带你轻松搞懂常见排序算法，并彻底掌握“稳定”和“不稳定”排序的核心区别。无论你是新手还是想加深理解，本文都将是你不可错过的宝藏。\n\n---\n\n## 1. 排序算法的稳定性是什么？\n\n在排序算法中，稳定性指的是相等元素的相对顺序是否在排序后保持不变。简单来说，如果排序前两个相等的元素在数组中的相对位置是固定的，排序后它们的位置依然不变，那么这种算法就是**稳定排序**；如果排序后位置可能会变化，那就是**不稳定排序**。\n\n### 举个例子：\n假设你要排序一组学生信息，他们的成绩相同，但你希望保持先录入的顺序。这时候你就需要一个稳定的排序算法。如果你用的是不稳定排序算法，虽然成绩排好了，但录入顺序可能会被打乱。\n\n---\n\n## 2. 常见的稳定排序算法\n\n### **1. 冒泡排序（Bubble Sort）**\n- **原理**：每次比较相邻两个元素，发现顺序不对就交换，直到没有需要交换的元素为止。\n- **特点**：因为相等的元素不会互相交换，所以是**稳定排序**。\n- **适用场景**：小数据集或已经基本排好序的数组。\n\n```java\npublic class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n}\n```\n\n### **2. 插入排序（Insertion Sort）**\n- **原理**：将元素插入到已排序部分的正确位置，向左移动比它大的元素。\n- **特点**：不会改变相等元素的顺序，因此是**稳定的**。\n- **适用场景**：小数据集或几乎已排好序的数据。\n\n```java\npublic class InsertionSort {\n    public static void insertionSort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            int key = arr[i];\n            int j = i - 1;\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n}\n```\n\n### **3. 归并排序（Merge Sort）**\n- **原理**：采用分治法，将数组分成两半，分别排序后再合并。\n- **特点**：在合并时，优先合并左边的相等元素，保持相对顺序，**稳定排序**。\n- **适用场景**：大规模数据，追求稳定性的场景。\n\n```java\npublic class MergeSort {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n}\n```\n\n### **4. 计数排序（Counting Sort）**\n- **原理**：通过统计每个值的出现次数，按顺序排列。\n- **特点**：计数过程不会改变相同元素的相对顺序，所以是**稳定的**。\n- **适用场景**：数据范围有限的整数排序。\n\n---\n\n## 3. 常见的不稳定排序算法\n\n### **1. 选择排序（Selection Sort）**\n- **原理**：每次遍历数组，找到未排序部分的最小元素，放到前面。\n- **特点**：在找到最小值后进行交换时，可能会打乱相等元素的顺序，所以是**不稳定的**。\n- **适用场景**：需要减少交换次数的情况，但对稳定性要求不高。\n\n```java\npublic class SelectionSort {\n    public static void selectionSort(int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            int temp = arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp;\n        }\n    }\n}\n```\n\n### **2. 快速排序（Quick Sort）**\n- **原理**：选择一个基准元素，将数组分为两部分，左边比基准小，右边比基准大，递归排序。\n- **特点**：在划分过程中，相等的元素可能被分到不同的部分，导致相对顺序发生变化，**不稳定**。\n- **适用场景**：速度快，适用于大数据集，但对稳定性没有要求的场景。\n\n```java\npublic class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n\n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n}\n```\n\n### **3. 堆排序（Heap Sort）**\n- **原理**：利用堆这种数据结构，首先构建最大堆，然后逐步将堆顶元素与末尾元素交换，并重新调整堆。\n- **特点**：在构建堆和调整堆的过程中，可能会改变相等元素的相对顺序，**不稳定**。\n- **适用场景**：数据量较大，且对稳定性要求不高的场景。\n\n---\n\n## 4. 稳定排序 VS 不稳定排序：如何选择？\n\n- **什么时候选择稳定排序？**\n  - 当排序的元素有多个关键字，且你希望在一个关键字上排序后，再根据另一个关键字进行排序时，稳定性非常重要。\n  - 例如，排序一组学生成绩时，成绩相同的情况下，还希望保持他们的录入顺序。\n\n- **什么时候选择不稳定排序？**\n  - 当你不关心相等元素的相对顺序，或者排序效率更重要时（比如快速排序通常速度很快），可以选择不稳定排序。\n  \n### 稳定排序适合的场景：\n- 数据相对较小或需要多次排序时。\n- 需要保持数据原有顺序时，例如数据库的二次排序。\n\n### 不稳定排序适合的场景：\n- 大数据集，追求更高的性能时。\n- 不关心相等元素的相对顺序时。\n\n---\n\n## 结论\n\n不同排序算法的稳定性特性，使得它们在不同场景下表现各异。对于需要保持数据相对顺序的情况，可以选择稳定排序算法。而在追求速度的场景下，不稳定排序算法可能更具优势。\n\n掌握这些排序算法的稳定性，将帮助你在实际开发中更有针对性地选择合适的算法，写出更高效的代码！","source":"_posts/彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析.md","raw":"---\ntitle: 彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\ndate: 2024-09-10T14:36:19.802Z\ntags: []\ncategories: []\n---\n### **彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析**\n\n排序算法是编程世界的基础，也是面试中的常客。但你真的搞清楚了哪些算法是**稳定**的，哪些是**不稳定**的吗？别担心，这篇文章将带你轻松搞懂常见排序算法，并彻底掌握“稳定”和“不稳定”排序的核心区别。无论你是新手还是想加深理解，本文都将是你不可错过的宝藏。\n\n---\n\n## 1. 排序算法的稳定性是什么？\n\n在排序算法中，稳定性指的是相等元素的相对顺序是否在排序后保持不变。简单来说，如果排序前两个相等的元素在数组中的相对位置是固定的，排序后它们的位置依然不变，那么这种算法就是**稳定排序**；如果排序后位置可能会变化，那就是**不稳定排序**。\n\n### 举个例子：\n假设你要排序一组学生信息，他们的成绩相同，但你希望保持先录入的顺序。这时候你就需要一个稳定的排序算法。如果你用的是不稳定排序算法，虽然成绩排好了，但录入顺序可能会被打乱。\n\n---\n\n## 2. 常见的稳定排序算法\n\n### **1. 冒泡排序（Bubble Sort）**\n- **原理**：每次比较相邻两个元素，发现顺序不对就交换，直到没有需要交换的元素为止。\n- **特点**：因为相等的元素不会互相交换，所以是**稳定排序**。\n- **适用场景**：小数据集或已经基本排好序的数组。\n\n```java\npublic class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n}\n```\n\n### **2. 插入排序（Insertion Sort）**\n- **原理**：将元素插入到已排序部分的正确位置，向左移动比它大的元素。\n- **特点**：不会改变相等元素的顺序，因此是**稳定的**。\n- **适用场景**：小数据集或几乎已排好序的数据。\n\n```java\npublic class InsertionSort {\n    public static void insertionSort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            int key = arr[i];\n            int j = i - 1;\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n}\n```\n\n### **3. 归并排序（Merge Sort）**\n- **原理**：采用分治法，将数组分成两半，分别排序后再合并。\n- **特点**：在合并时，优先合并左边的相等元素，保持相对顺序，**稳定排序**。\n- **适用场景**：大规模数据，追求稳定性的场景。\n\n```java\npublic class MergeSort {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n}\n```\n\n### **4. 计数排序（Counting Sort）**\n- **原理**：通过统计每个值的出现次数，按顺序排列。\n- **特点**：计数过程不会改变相同元素的相对顺序，所以是**稳定的**。\n- **适用场景**：数据范围有限的整数排序。\n\n---\n\n## 3. 常见的不稳定排序算法\n\n### **1. 选择排序（Selection Sort）**\n- **原理**：每次遍历数组，找到未排序部分的最小元素，放到前面。\n- **特点**：在找到最小值后进行交换时，可能会打乱相等元素的顺序，所以是**不稳定的**。\n- **适用场景**：需要减少交换次数的情况，但对稳定性要求不高。\n\n```java\npublic class SelectionSort {\n    public static void selectionSort(int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            int temp = arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp;\n        }\n    }\n}\n```\n\n### **2. 快速排序（Quick Sort）**\n- **原理**：选择一个基准元素，将数组分为两部分，左边比基准小，右边比基准大，递归排序。\n- **特点**：在划分过程中，相等的元素可能被分到不同的部分，导致相对顺序发生变化，**不稳定**。\n- **适用场景**：速度快，适用于大数据集，但对稳定性没有要求的场景。\n\n```java\npublic class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n\n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n}\n```\n\n### **3. 堆排序（Heap Sort）**\n- **原理**：利用堆这种数据结构，首先构建最大堆，然后逐步将堆顶元素与末尾元素交换，并重新调整堆。\n- **特点**：在构建堆和调整堆的过程中，可能会改变相等元素的相对顺序，**不稳定**。\n- **适用场景**：数据量较大，且对稳定性要求不高的场景。\n\n---\n\n## 4. 稳定排序 VS 不稳定排序：如何选择？\n\n- **什么时候选择稳定排序？**\n  - 当排序的元素有多个关键字，且你希望在一个关键字上排序后，再根据另一个关键字进行排序时，稳定性非常重要。\n  - 例如，排序一组学生成绩时，成绩相同的情况下，还希望保持他们的录入顺序。\n\n- **什么时候选择不稳定排序？**\n  - 当你不关心相等元素的相对顺序，或者排序效率更重要时（比如快速排序通常速度很快），可以选择不稳定排序。\n  \n### 稳定排序适合的场景：\n- 数据相对较小或需要多次排序时。\n- 需要保持数据原有顺序时，例如数据库的二次排序。\n\n### 不稳定排序适合的场景：\n- 大数据集，追求更高的性能时。\n- 不关心相等元素的相对顺序时。\n\n---\n\n## 结论\n\n不同排序算法的稳定性特性，使得它们在不同场景下表现各异。对于需要保持数据相对顺序的情况，可以选择稳定排序算法。而在追求速度的场景下，不稳定排序算法可能更具优势。\n\n掌握这些排序算法的稳定性，将帮助你在实际开发中更有针对性地选择合适的算法，写出更高效的代码！","slug":"彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析","published":1,"updated":"2024-11-25T11:44:04.632Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymscs0039mbs66oo1gydx","content":"<h3 id=\"彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\"><a href=\"#彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\" class=\"headerlink\" title=\"彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\"></a><strong>彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析</strong></h3><p>排序算法是编程世界的基础，也是面试中的常客。但你真的搞清楚了哪些算法是<strong>稳定</strong>的，哪些是<strong>不稳定</strong>的吗？别担心，这篇文章将带你轻松搞懂常见排序算法，并彻底掌握“稳定”和“不稳定”排序的核心区别。无论你是新手还是想加深理解，本文都将是你不可错过的宝藏。</p>\n<hr>\n<h2 id=\"1-排序算法的稳定性是什么？\"><a href=\"#1-排序算法的稳定性是什么？\" class=\"headerlink\" title=\"1. 排序算法的稳定性是什么？\"></a>1. 排序算法的稳定性是什么？</h2><p>在排序算法中，稳定性指的是相等元素的相对顺序是否在排序后保持不变。简单来说，如果排序前两个相等的元素在数组中的相对位置是固定的，排序后它们的位置依然不变，那么这种算法就是<strong>稳定排序</strong>；如果排序后位置可能会变化，那就是<strong>不稳定排序</strong>。</p>\n<h3 id=\"举个例子：\"><a href=\"#举个例子：\" class=\"headerlink\" title=\"举个例子：\"></a>举个例子：</h3><p>假设你要排序一组学生信息，他们的成绩相同，但你希望保持先录入的顺序。这时候你就需要一个稳定的排序算法。如果你用的是不稳定排序算法，虽然成绩排好了，但录入顺序可能会被打乱。</p>\n<hr>\n<h2 id=\"2-常见的稳定排序算法\"><a href=\"#2-常见的稳定排序算法\" class=\"headerlink\" title=\"2. 常见的稳定排序算法\"></a>2. 常见的稳定排序算法</h2><h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1. 冒泡排序（Bubble Sort）\"></a><strong>1. 冒泡排序（Bubble Sort）</strong></h3><ul>\n<li><strong>原理</strong>：每次比较相邻两个元素，发现顺序不对就交换，直到没有需要交换的元素为止。</li>\n<li><strong>特点</strong>：因为相等的元素不会互相交换，所以是<strong>稳定排序</strong>。</li>\n<li><strong>适用场景</strong>：小数据集或已经基本排好序的数组。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-插入排序（Insertion-Sort）\"><a href=\"#2-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"2. 插入排序（Insertion Sort）\"></a><strong>2. 插入排序（Insertion Sort）</strong></h3><ul>\n<li><strong>原理</strong>：将元素插入到已排序部分的正确位置，向左移动比它大的元素。</li>\n<li><strong>特点</strong>：不会改变相等元素的顺序，因此是<strong>稳定的</strong>。</li>\n<li><strong>适用场景</strong>：小数据集或几乎已排好序的数据。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-归并排序（Merge-Sort）\"><a href=\"#3-归并排序（Merge-Sort）\" class=\"headerlink\" title=\"3. 归并排序（Merge Sort）\"></a><strong>3. 归并排序（Merge Sort）</strong></h3><ul>\n<li><strong>原理</strong>：采用分治法，将数组分成两半，分别排序后再合并。</li>\n<li><strong>特点</strong>：在合并时，优先合并左边的相等元素，保持相对顺序，<strong>稳定排序</strong>。</li>\n<li><strong>适用场景</strong>：大规模数据，追求稳定性的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            mergeSort(arr, left, mid);</span><br><span class=\"line\">            mergeSort(arr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">            merge(arr, left, mid, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-计数排序（Counting-Sort）\"><a href=\"#4-计数排序（Counting-Sort）\" class=\"headerlink\" title=\"4. 计数排序（Counting Sort）\"></a><strong>4. 计数排序（Counting Sort）</strong></h3><ul>\n<li><strong>原理</strong>：通过统计每个值的出现次数，按顺序排列。</li>\n<li><strong>特点</strong>：计数过程不会改变相同元素的相对顺序，所以是<strong>稳定的</strong>。</li>\n<li><strong>适用场景</strong>：数据范围有限的整数排序。</li>\n</ul>\n<hr>\n<h2 id=\"3-常见的不稳定排序算法\"><a href=\"#3-常见的不稳定排序算法\" class=\"headerlink\" title=\"3. 常见的不稳定排序算法\"></a>3. 常见的不稳定排序算法</h2><h3 id=\"1-选择排序（Selection-Sort）\"><a href=\"#1-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"1. 选择排序（Selection Sort）\"></a><strong>1. 选择排序（Selection Sort）</strong></h3><ul>\n<li><strong>原理</strong>：每次遍历数组，找到未排序部分的最小元素，放到前面。</li>\n<li><strong>特点</strong>：在找到最小值后进行交换时，可能会打乱相等元素的顺序，所以是<strong>不稳定的</strong>。</li>\n<li><strong>适用场景</strong>：需要减少交换次数的情况，但对稳定性要求不高。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">minIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            arr[i] = arr[minIndex];</span><br><span class=\"line\">            arr[minIndex] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-快速排序（Quick-Sort）\"><a href=\"#2-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"2. 快速排序（Quick Sort）\"></a><strong>2. 快速排序（Quick Sort）</strong></h3><ul>\n<li><strong>原理</strong>：选择一个基准元素，将数组分为两部分，左边比基准小，右边比基准大，递归排序。</li>\n<li><strong>特点</strong>：在划分过程中，相等的元素可能被分到不同的部分，导致相对顺序发生变化，<strong>不稳定</strong>。</li>\n<li><strong>适用场景</strong>：速度快，适用于大数据集，但对稳定性没有要求的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> partition(arr, low, high);</span><br><span class=\"line\">            quickSort(arr, low, pi - <span class=\"number\">1</span>);</span><br><span class=\"line\">            quickSort(arr, pi + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[high];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> low - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low; j &lt; high; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">                arr[i] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">        arr[high] = temp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-堆排序（Heap-Sort）\"><a href=\"#3-堆排序（Heap-Sort）\" class=\"headerlink\" title=\"3. 堆排序（Heap Sort）\"></a><strong>3. 堆排序（Heap Sort）</strong></h3><ul>\n<li><strong>原理</strong>：利用堆这种数据结构，首先构建最大堆，然后逐步将堆顶元素与末尾元素交换，并重新调整堆。</li>\n<li><strong>特点</strong>：在构建堆和调整堆的过程中，可能会改变相等元素的相对顺序，<strong>不稳定</strong>。</li>\n<li><strong>适用场景</strong>：数据量较大，且对稳定性要求不高的场景。</li>\n</ul>\n<hr>\n<h2 id=\"4-稳定排序-VS-不稳定排序：如何选择？\"><a href=\"#4-稳定排序-VS-不稳定排序：如何选择？\" class=\"headerlink\" title=\"4. 稳定排序 VS 不稳定排序：如何选择？\"></a>4. 稳定排序 VS 不稳定排序：如何选择？</h2><ul>\n<li><p><strong>什么时候选择稳定排序？</strong></p>\n<ul>\n<li>当排序的元素有多个关键字，且你希望在一个关键字上排序后，再根据另一个关键字进行排序时，稳定性非常重要。</li>\n<li>例如，排序一组学生成绩时，成绩相同的情况下，还希望保持他们的录入顺序。</li>\n</ul>\n</li>\n<li><p><strong>什么时候选择不稳定排序？</strong></p>\n<ul>\n<li>当你不关心相等元素的相对顺序，或者排序效率更重要时（比如快速排序通常速度很快），可以选择不稳定排序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"稳定排序适合的场景：\"><a href=\"#稳定排序适合的场景：\" class=\"headerlink\" title=\"稳定排序适合的场景：\"></a>稳定排序适合的场景：</h3><ul>\n<li>数据相对较小或需要多次排序时。</li>\n<li>需要保持数据原有顺序时，例如数据库的二次排序。</li>\n</ul>\n<h3 id=\"不稳定排序适合的场景：\"><a href=\"#不稳定排序适合的场景：\" class=\"headerlink\" title=\"不稳定排序适合的场景：\"></a>不稳定排序适合的场景：</h3><ul>\n<li>大数据集，追求更高的性能时。</li>\n<li>不关心相等元素的相对顺序时。</li>\n</ul>\n<hr>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>不同排序算法的稳定性特性，使得它们在不同场景下表现各异。对于需要保持数据相对顺序的情况，可以选择稳定排序算法。而在追求速度的场景下，不稳定排序算法可能更具优势。</p>\n<p>掌握这些排序算法的稳定性，将帮助你在实际开发中更有针对性地选择合适的算法，写出更高效的代码！</p>\n","excerpt":"","more":"<h3 id=\"彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\"><a href=\"#彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\" class=\"headerlink\" title=\"彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析\"></a><strong>彻底搞懂排序算法！从稳定排序到不稳定排序的全面解析</strong></h3><p>排序算法是编程世界的基础，也是面试中的常客。但你真的搞清楚了哪些算法是<strong>稳定</strong>的，哪些是<strong>不稳定</strong>的吗？别担心，这篇文章将带你轻松搞懂常见排序算法，并彻底掌握“稳定”和“不稳定”排序的核心区别。无论你是新手还是想加深理解，本文都将是你不可错过的宝藏。</p>\n<hr>\n<h2 id=\"1-排序算法的稳定性是什么？\"><a href=\"#1-排序算法的稳定性是什么？\" class=\"headerlink\" title=\"1. 排序算法的稳定性是什么？\"></a>1. 排序算法的稳定性是什么？</h2><p>在排序算法中，稳定性指的是相等元素的相对顺序是否在排序后保持不变。简单来说，如果排序前两个相等的元素在数组中的相对位置是固定的，排序后它们的位置依然不变，那么这种算法就是<strong>稳定排序</strong>；如果排序后位置可能会变化，那就是<strong>不稳定排序</strong>。</p>\n<h3 id=\"举个例子：\"><a href=\"#举个例子：\" class=\"headerlink\" title=\"举个例子：\"></a>举个例子：</h3><p>假设你要排序一组学生信息，他们的成绩相同，但你希望保持先录入的顺序。这时候你就需要一个稳定的排序算法。如果你用的是不稳定排序算法，虽然成绩排好了，但录入顺序可能会被打乱。</p>\n<hr>\n<h2 id=\"2-常见的稳定排序算法\"><a href=\"#2-常见的稳定排序算法\" class=\"headerlink\" title=\"2. 常见的稳定排序算法\"></a>2. 常见的稳定排序算法</h2><h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1. 冒泡排序（Bubble Sort）\"></a><strong>1. 冒泡排序（Bubble Sort）</strong></h3><ul>\n<li><strong>原理</strong>：每次比较相邻两个元素，发现顺序不对就交换，直到没有需要交换的元素为止。</li>\n<li><strong>特点</strong>：因为相等的元素不会互相交换，所以是<strong>稳定排序</strong>。</li>\n<li><strong>适用场景</strong>：小数据集或已经基本排好序的数组。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-插入排序（Insertion-Sort）\"><a href=\"#2-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"2. 插入排序（Insertion Sort）\"></a><strong>2. 插入排序（Insertion Sort）</strong></h3><ul>\n<li><strong>原理</strong>：将元素插入到已排序部分的正确位置，向左移动比它大的元素。</li>\n<li><strong>特点</strong>：不会改变相等元素的顺序，因此是<strong>稳定的</strong>。</li>\n<li><strong>适用场景</strong>：小数据集或几乎已排好序的数据。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-归并排序（Merge-Sort）\"><a href=\"#3-归并排序（Merge-Sort）\" class=\"headerlink\" title=\"3. 归并排序（Merge Sort）\"></a><strong>3. 归并排序（Merge Sort）</strong></h3><ul>\n<li><strong>原理</strong>：采用分治法，将数组分成两半，分别排序后再合并。</li>\n<li><strong>特点</strong>：在合并时，优先合并左边的相等元素，保持相对顺序，<strong>稳定排序</strong>。</li>\n<li><strong>适用场景</strong>：大规模数据，追求稳定性的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            mergeSort(arr, left, mid);</span><br><span class=\"line\">            mergeSort(arr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">            merge(arr, left, mid, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-计数排序（Counting-Sort）\"><a href=\"#4-计数排序（Counting-Sort）\" class=\"headerlink\" title=\"4. 计数排序（Counting Sort）\"></a><strong>4. 计数排序（Counting Sort）</strong></h3><ul>\n<li><strong>原理</strong>：通过统计每个值的出现次数，按顺序排列。</li>\n<li><strong>特点</strong>：计数过程不会改变相同元素的相对顺序，所以是<strong>稳定的</strong>。</li>\n<li><strong>适用场景</strong>：数据范围有限的整数排序。</li>\n</ul>\n<hr>\n<h2 id=\"3-常见的不稳定排序算法\"><a href=\"#3-常见的不稳定排序算法\" class=\"headerlink\" title=\"3. 常见的不稳定排序算法\"></a>3. 常见的不稳定排序算法</h2><h3 id=\"1-选择排序（Selection-Sort）\"><a href=\"#1-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"1. 选择排序（Selection Sort）\"></a><strong>1. 选择排序（Selection Sort）</strong></h3><ul>\n<li><strong>原理</strong>：每次遍历数组，找到未排序部分的最小元素，放到前面。</li>\n<li><strong>特点</strong>：在找到最小值后进行交换时，可能会打乱相等元素的顺序，所以是<strong>不稳定的</strong>。</li>\n<li><strong>适用场景</strong>：需要减少交换次数的情况，但对稳定性要求不高。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectionSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">minIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            arr[i] = arr[minIndex];</span><br><span class=\"line\">            arr[minIndex] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-快速排序（Quick-Sort）\"><a href=\"#2-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"2. 快速排序（Quick Sort）\"></a><strong>2. 快速排序（Quick Sort）</strong></h3><ul>\n<li><strong>原理</strong>：选择一个基准元素，将数组分为两部分，左边比基准小，右边比基准大，递归排序。</li>\n<li><strong>特点</strong>：在划分过程中，相等的元素可能被分到不同的部分，导致相对顺序发生变化，<strong>不稳定</strong>。</li>\n<li><strong>适用场景</strong>：速度快，适用于大数据集，但对稳定性没有要求的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> partition(arr, low, high);</span><br><span class=\"line\">            quickSort(arr, low, pi - <span class=\"number\">1</span>);</span><br><span class=\"line\">            quickSort(arr, pi + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[high];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> low - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low; j &lt; high; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">                arr[i] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">        arr[high] = temp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-堆排序（Heap-Sort）\"><a href=\"#3-堆排序（Heap-Sort）\" class=\"headerlink\" title=\"3. 堆排序（Heap Sort）\"></a><strong>3. 堆排序（Heap Sort）</strong></h3><ul>\n<li><strong>原理</strong>：利用堆这种数据结构，首先构建最大堆，然后逐步将堆顶元素与末尾元素交换，并重新调整堆。</li>\n<li><strong>特点</strong>：在构建堆和调整堆的过程中，可能会改变相等元素的相对顺序，<strong>不稳定</strong>。</li>\n<li><strong>适用场景</strong>：数据量较大，且对稳定性要求不高的场景。</li>\n</ul>\n<hr>\n<h2 id=\"4-稳定排序-VS-不稳定排序：如何选择？\"><a href=\"#4-稳定排序-VS-不稳定排序：如何选择？\" class=\"headerlink\" title=\"4. 稳定排序 VS 不稳定排序：如何选择？\"></a>4. 稳定排序 VS 不稳定排序：如何选择？</h2><ul>\n<li><p><strong>什么时候选择稳定排序？</strong></p>\n<ul>\n<li>当排序的元素有多个关键字，且你希望在一个关键字上排序后，再根据另一个关键字进行排序时，稳定性非常重要。</li>\n<li>例如，排序一组学生成绩时，成绩相同的情况下，还希望保持他们的录入顺序。</li>\n</ul>\n</li>\n<li><p><strong>什么时候选择不稳定排序？</strong></p>\n<ul>\n<li>当你不关心相等元素的相对顺序，或者排序效率更重要时（比如快速排序通常速度很快），可以选择不稳定排序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"稳定排序适合的场景：\"><a href=\"#稳定排序适合的场景：\" class=\"headerlink\" title=\"稳定排序适合的场景：\"></a>稳定排序适合的场景：</h3><ul>\n<li>数据相对较小或需要多次排序时。</li>\n<li>需要保持数据原有顺序时，例如数据库的二次排序。</li>\n</ul>\n<h3 id=\"不稳定排序适合的场景：\"><a href=\"#不稳定排序适合的场景：\" class=\"headerlink\" title=\"不稳定排序适合的场景：\"></a>不稳定排序适合的场景：</h3><ul>\n<li>大数据集，追求更高的性能时。</li>\n<li>不关心相等元素的相对顺序时。</li>\n</ul>\n<hr>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>不同排序算法的稳定性特性，使得它们在不同场景下表现各异。对于需要保持数据相对顺序的情况，可以选择稳定排序算法。而在追求速度的场景下，不稳定排序算法可能更具优势。</p>\n<p>掌握这些排序算法的稳定性，将帮助你在实际开发中更有针对性地选择合适的算法，写出更高效的代码！</p>\n"},{"title":"免费好用的api hub大全","date":"2024-09-06T18:54:55.874Z","_content":"## 免费好用的api hub大全\n\n确实有一些免费的 API Hub 提供了多个 API 服务，方便开发者进行项目集成和开发。以下是一些受欢迎的 API 平台及其特点：\n\n### 1. **RapidAPI**\n- **特点**：\n  - 是一个大型 API 市场，提供了各种免费和付费的 API，包括天气、金融、社交媒体、机器学习等领域的 API。\n  - 开发者可以通过 RapidAPI 直接调用和测试各种 API。\n  - 提供 API 速率限制和可视化分析功能。\n- **网址**：[https://rapidapi.com](https://rapidapi.com)\n\n### 2. **API Layer**\n- **特点**：\n  - 提供大量常用 API，如汇率、IP 数据、天气等，重点在数据服务。\n  - 免费层提供基本使用，每月有固定的请求数量。\n  - 易于集成，支持多种编程语言。\n- **网址**：[https://apilayer.com](https://apilayer.com)\n\n### 3. **Public APIs**\n- **特点**：\n  - Public APIs 是一个开源项目，汇集了大量的免费 API，按类别整理，可以轻松查找所需的服务。\n  - 提供了非常多的开发者常用的免费 API 资源，涵盖金融、社交媒体、天气、图像处理等领域。\n- **网址**：[https://public-apis.xyz](https://public-apis.xyz)\n\n### 4. **Free Public APIs (GitHub)**\n- **特点**：\n  - 这个项目是一个在 GitHub 上托管的 API 集合，收集了许多免费的公共 API，涵盖了几乎所有你能想到的领域。\n  - 这些 API 包括电影、新闻、数据分析、开发工具等多个类别。\n  - 完全开源，持续更新，社区维护，资源丰富。\n- **网址**：[https://github.com/public-apis/public-apis](https://github.com/public-apis/public-apis)\n\n### 5. **Any API**\n- **特点**：\n  - Any API 是一个专门的 API 搜索平台，帮助开发者找到适合自己项目的 API。\n  - 提供免费的和付费的 API 分类，可以快速筛选和测试不同的 API。\n  - 支持开发者根据需要搜索特定功能的 API。\n- **网址**：[https://any-api.com](https://any-api.com)\n\n\n\n### 总结\n- **RapidAPI** 是一个强大的 API 市场，适合查找和集成多种 API。\n- **Public APIs** 和 **Free Public APIs** 是非常好的开源资源，涵盖大量的免费 API。","source":"_posts/免费好用的api hub大全.md","raw":"---\ntitle: 免费好用的api hub大全\ndate: 2024-09-07T02:54:55.874Z\ntags: []\ncategories: []\n---\n## 免费好用的api hub大全\n\n确实有一些免费的 API Hub 提供了多个 API 服务，方便开发者进行项目集成和开发。以下是一些受欢迎的 API 平台及其特点：\n\n### 1. **RapidAPI**\n- **特点**：\n  - 是一个大型 API 市场，提供了各种免费和付费的 API，包括天气、金融、社交媒体、机器学习等领域的 API。\n  - 开发者可以通过 RapidAPI 直接调用和测试各种 API。\n  - 提供 API 速率限制和可视化分析功能。\n- **网址**：[https://rapidapi.com](https://rapidapi.com)\n\n### 2. **API Layer**\n- **特点**：\n  - 提供大量常用 API，如汇率、IP 数据、天气等，重点在数据服务。\n  - 免费层提供基本使用，每月有固定的请求数量。\n  - 易于集成，支持多种编程语言。\n- **网址**：[https://apilayer.com](https://apilayer.com)\n\n### 3. **Public APIs**\n- **特点**：\n  - Public APIs 是一个开源项目，汇集了大量的免费 API，按类别整理，可以轻松查找所需的服务。\n  - 提供了非常多的开发者常用的免费 API 资源，涵盖金融、社交媒体、天气、图像处理等领域。\n- **网址**：[https://public-apis.xyz](https://public-apis.xyz)\n\n### 4. **Free Public APIs (GitHub)**\n- **特点**：\n  - 这个项目是一个在 GitHub 上托管的 API 集合，收集了许多免费的公共 API，涵盖了几乎所有你能想到的领域。\n  - 这些 API 包括电影、新闻、数据分析、开发工具等多个类别。\n  - 完全开源，持续更新，社区维护，资源丰富。\n- **网址**：[https://github.com/public-apis/public-apis](https://github.com/public-apis/public-apis)\n\n### 5. **Any API**\n- **特点**：\n  - Any API 是一个专门的 API 搜索平台，帮助开发者找到适合自己项目的 API。\n  - 提供免费的和付费的 API 分类，可以快速筛选和测试不同的 API。\n  - 支持开发者根据需要搜索特定功能的 API。\n- **网址**：[https://any-api.com](https://any-api.com)\n\n\n\n### 总结\n- **RapidAPI** 是一个强大的 API 市场，适合查找和集成多种 API。\n- **Public APIs** 和 **Free Public APIs** 是非常好的开源资源，涵盖大量的免费 API。","slug":"免费好用的api hub大全","published":1,"updated":"2024-11-25T11:44:04.612Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsct003ambs6h7zhe76a","content":"<h2 id=\"免费好用的api-hub大全\"><a href=\"#免费好用的api-hub大全\" class=\"headerlink\" title=\"免费好用的api hub大全\"></a>免费好用的api hub大全</h2><p>确实有一些免费的 API Hub 提供了多个 API 服务，方便开发者进行项目集成和开发。以下是一些受欢迎的 API 平台及其特点：</p>\n<h3 id=\"1-RapidAPI\"><a href=\"#1-RapidAPI\" class=\"headerlink\" title=\"1. RapidAPI\"></a>1. <strong>RapidAPI</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>是一个大型 API 市场，提供了各种免费和付费的 API，包括天气、金融、社交媒体、机器学习等领域的 API。</li>\n<li>开发者可以通过 RapidAPI 直接调用和测试各种 API。</li>\n<li>提供 API 速率限制和可视化分析功能。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://rapidapi.com/\">https://rapidapi.com</a></li>\n</ul>\n<h3 id=\"2-API-Layer\"><a href=\"#2-API-Layer\" class=\"headerlink\" title=\"2. API Layer\"></a>2. <strong>API Layer</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>提供大量常用 API，如汇率、IP 数据、天气等，重点在数据服务。</li>\n<li>免费层提供基本使用，每月有固定的请求数量。</li>\n<li>易于集成，支持多种编程语言。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://apilayer.com/\">https://apilayer.com</a></li>\n</ul>\n<h3 id=\"3-Public-APIs\"><a href=\"#3-Public-APIs\" class=\"headerlink\" title=\"3. Public APIs\"></a>3. <strong>Public APIs</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>Public APIs 是一个开源项目，汇集了大量的免费 API，按类别整理，可以轻松查找所需的服务。</li>\n<li>提供了非常多的开发者常用的免费 API 资源，涵盖金融、社交媒体、天气、图像处理等领域。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://public-apis.xyz/\">https://public-apis.xyz</a></li>\n</ul>\n<h3 id=\"4-Free-Public-APIs-GitHub\"><a href=\"#4-Free-Public-APIs-GitHub\" class=\"headerlink\" title=\"4. Free Public APIs (GitHub)\"></a>4. <strong>Free Public APIs (GitHub)</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>这个项目是一个在 GitHub 上托管的 API 集合，收集了许多免费的公共 API，涵盖了几乎所有你能想到的领域。</li>\n<li>这些 API 包括电影、新闻、数据分析、开发工具等多个类别。</li>\n<li>完全开源，持续更新，社区维护，资源丰富。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://github.com/public-apis/public-apis\">https://github.com/public-apis/public-apis</a></li>\n</ul>\n<h3 id=\"5-Any-API\"><a href=\"#5-Any-API\" class=\"headerlink\" title=\"5. Any API\"></a>5. <strong>Any API</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>Any API 是一个专门的 API 搜索平台，帮助开发者找到适合自己项目的 API。</li>\n<li>提供免费的和付费的 API 分类，可以快速筛选和测试不同的 API。</li>\n<li>支持开发者根据需要搜索特定功能的 API。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://any-api.com/\">https://any-api.com</a></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>RapidAPI</strong> 是一个强大的 API 市场，适合查找和集成多种 API。</li>\n<li><strong>Public APIs</strong> 和 <strong>Free Public APIs</strong> 是非常好的开源资源，涵盖大量的免费 API。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"免费好用的api-hub大全\"><a href=\"#免费好用的api-hub大全\" class=\"headerlink\" title=\"免费好用的api hub大全\"></a>免费好用的api hub大全</h2><p>确实有一些免费的 API Hub 提供了多个 API 服务，方便开发者进行项目集成和开发。以下是一些受欢迎的 API 平台及其特点：</p>\n<h3 id=\"1-RapidAPI\"><a href=\"#1-RapidAPI\" class=\"headerlink\" title=\"1. RapidAPI\"></a>1. <strong>RapidAPI</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>是一个大型 API 市场，提供了各种免费和付费的 API，包括天气、金融、社交媒体、机器学习等领域的 API。</li>\n<li>开发者可以通过 RapidAPI 直接调用和测试各种 API。</li>\n<li>提供 API 速率限制和可视化分析功能。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://rapidapi.com/\">https://rapidapi.com</a></li>\n</ul>\n<h3 id=\"2-API-Layer\"><a href=\"#2-API-Layer\" class=\"headerlink\" title=\"2. API Layer\"></a>2. <strong>API Layer</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>提供大量常用 API，如汇率、IP 数据、天气等，重点在数据服务。</li>\n<li>免费层提供基本使用，每月有固定的请求数量。</li>\n<li>易于集成，支持多种编程语言。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://apilayer.com/\">https://apilayer.com</a></li>\n</ul>\n<h3 id=\"3-Public-APIs\"><a href=\"#3-Public-APIs\" class=\"headerlink\" title=\"3. Public APIs\"></a>3. <strong>Public APIs</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>Public APIs 是一个开源项目，汇集了大量的免费 API，按类别整理，可以轻松查找所需的服务。</li>\n<li>提供了非常多的开发者常用的免费 API 资源，涵盖金融、社交媒体、天气、图像处理等领域。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://public-apis.xyz/\">https://public-apis.xyz</a></li>\n</ul>\n<h3 id=\"4-Free-Public-APIs-GitHub\"><a href=\"#4-Free-Public-APIs-GitHub\" class=\"headerlink\" title=\"4. Free Public APIs (GitHub)\"></a>4. <strong>Free Public APIs (GitHub)</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>这个项目是一个在 GitHub 上托管的 API 集合，收集了许多免费的公共 API，涵盖了几乎所有你能想到的领域。</li>\n<li>这些 API 包括电影、新闻、数据分析、开发工具等多个类别。</li>\n<li>完全开源，持续更新，社区维护，资源丰富。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://github.com/public-apis/public-apis\">https://github.com/public-apis/public-apis</a></li>\n</ul>\n<h3 id=\"5-Any-API\"><a href=\"#5-Any-API\" class=\"headerlink\" title=\"5. Any API\"></a>5. <strong>Any API</strong></h3><ul>\n<li><strong>特点</strong>：<ul>\n<li>Any API 是一个专门的 API 搜索平台，帮助开发者找到适合自己项目的 API。</li>\n<li>提供免费的和付费的 API 分类，可以快速筛选和测试不同的 API。</li>\n<li>支持开发者根据需要搜索特定功能的 API。</li>\n</ul>\n</li>\n<li><strong>网址</strong>：<a href=\"https://any-api.com/\">https://any-api.com</a></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>RapidAPI</strong> 是一个强大的 API 市场，适合查找和集成多种 API。</li>\n<li><strong>Public APIs</strong> 和 <strong>Free Public APIs</strong> 是非常好的开源资源，涵盖大量的免费 API。</li>\n</ul>\n"},{"title":"常见协议比较","date":"2024-11-24T10:37:20.640Z","_content":"在搭建代理服务时，选择一个稳定、安全且快速的协议是关键。以下是几种常见的协议的特点和推荐，适用于不同的需求和使用场景：\n\n------\n\n### **1. 常见协议比较**\n\n| 协议                 | **特点**                                                     | **适用场景**                                   | **优缺点**                                   |\n| -------------------- | ------------------------------------------------------------ | ---------------------------------------------- | -------------------------------------------- |\n| **VMess**            | Xray/V2Ray 的核心协议，支持复杂加密和动态伪装。              | 高需求环境，如穿越防火墙，个人使用和小型团队。 | 优点：安全、抗封锁；缺点：依赖服务端支持。   |\n| **VLESS**            | VMess 的升级版，无状态、更灵活，支持 QUIC 等新型传输。       | 中高需求环境，注重性能和低延迟。               | 优点：轻量化、支持更多传输；缺点：复杂配置。 |\n| **Trojan**           | 基于 HTTPS 的代理协议，伪装成正常的 HTTPS 流量，易于伪装和难以识别。 | 企业/个人环境，访问封锁较严重地区。            | 优点：极高伪装性；缺点：依赖有效域名和证书。 |\n| **Shadowsocks (SS)** | 开源轻量级代理协议，基于加密实现快速传输。                   | 轻量用户，如普通网页浏览和视频观看。           | 优点：简单高效；缺点：抗封锁能力较弱。       |\n| **HTTP/2 + TLS**     | 使用 HTTPS 通道进行代理流量伪装，基于 Web 的高兼容性。       | 需要兼顾性能和隐匿性时。                       | 优点：速度快、兼容性好；缺点：配置较复杂。   |\n| **WireGuard**        | 类 VPN 协议，轻量级、现代化，性能极高，延迟低。              | 点对点通信，特别适合需要高性能和低延迟的场景。 | 优点：极快、稳定；缺点：可能容易被识别。     |\n\n------\n\n### **2. 推荐选择**\n\n#### **2.1 最稳定的协议：Trojan**\n\n- 原因\n\n  ：\n\n  - 使用 HTTPS 伪装，流量看起来与正常的 Web 浏览几乎无差别。\n  - 很难被识别为代理流量（封锁难度高）。\n\n- 适用场景\n\n  ：\n\n  - 高度安全性需求。\n  - 能够申请到域名和证书的用户。\n\n- 推荐配置\n\n  ：\n\n  - Nginx 反代 + Trojan，伪装成 HTTPS 网站流量。\n\n------\n\n#### **2.2 最安全的协议：VLESS**\n\n- 原因\n\n  ：\n\n  - 无状态设计，无需服务端存储用户信息，避免敏感信息泄漏。\n  - 动态伪装流量，支持新型传输协议（如 QUIC）。\n\n- 适用场景\n\n  ：\n\n  - 注重隐私的用户。\n  - 高级用户需要定制化的传输方案。\n\n- 推荐配置\n\n  ：\n\n  - VLESS + TLS + WebSocket (WS) 或 QUIC。\n\n------\n\n#### **2.3 最快速的协议：WireGuard**\n\n- 原因\n\n  ：\n\n  - 点对点协议，直接建立连接，减少中间环节导致的延迟。\n  - 加密性能高，适合需要低延迟的应用场景。\n\n- 适用场景\n\n  ：\n\n  - 游戏、视频通话等高性能需求。\n\n- 推荐配置\n\n  ：\n\n  - WireGuard + 仅允许特定 IP 使用。\n\n------\n\n#### **2.4 性能与安全平衡：VMess**\n\n- 原因\n\n  ：\n\n  - 综合性能较好，抗封锁能力也不错。\n\n- 适用场景\n\n  ：\n\n  - 常规需求，如稳定的网页浏览、在线视频。\n\n- 推荐配置\n\n  ：\n\n  - VMess + TLS + WebSocket，伪装成正常的 Web 流量。\n\n------\n\n### **3. 推荐搭建方案**\n\n#### **3.1 Trojan 搭建**\n\n1. 安装 Trojan：\n\n   ```bash\n   bash <(curl -sL https://git.io/trojan-install)\n   ```\n\n2. 配置域名与证书。\n\n3. 使用 Nginx 进行 HTTPS 流量伪装。\n\n#### **3.2 VLESS 搭建（Xray Core）**\n\n1. 安装 Xray：\n\n   ```bash\n   bash <(curl -Ls https://raw.githubusercontent.com/XTLS/Xray-install/main/install-release.sh)\n   ```\n\n2. 配置 JSON 文件，设置 VLESS + TLS + WebSocket。\n\n3. 使用 Nginx 配置反代。\n\n#### **3.3 WireGuard 搭建**\n\n1. 安装 WireGuard：\n\n   ```bash\n   apt install wireguard -y\n   ```\n\n2. 配置服务端和客户端公私钥。\n\n3. 设置点对点连接。\n\n------\n\n### **4. 总结推荐**\n\n- **强伪装**：选择 Trojan。\n- **高性能**：选择 WireGuard。\n- **灵活性**：选择 VLESS 或 VMess。\n\n如需详细的具体安装步骤，欢迎进一步咨询！","source":"_posts/常见协议比较.md","raw":"---\ntitle: 常见协议比较\ndate: 2024-11-24T18:37:20.640Z\ntags: []\ncategories: []\n---\n在搭建代理服务时，选择一个稳定、安全且快速的协议是关键。以下是几种常见的协议的特点和推荐，适用于不同的需求和使用场景：\n\n------\n\n### **1. 常见协议比较**\n\n| 协议                 | **特点**                                                     | **适用场景**                                   | **优缺点**                                   |\n| -------------------- | ------------------------------------------------------------ | ---------------------------------------------- | -------------------------------------------- |\n| **VMess**            | Xray/V2Ray 的核心协议，支持复杂加密和动态伪装。              | 高需求环境，如穿越防火墙，个人使用和小型团队。 | 优点：安全、抗封锁；缺点：依赖服务端支持。   |\n| **VLESS**            | VMess 的升级版，无状态、更灵活，支持 QUIC 等新型传输。       | 中高需求环境，注重性能和低延迟。               | 优点：轻量化、支持更多传输；缺点：复杂配置。 |\n| **Trojan**           | 基于 HTTPS 的代理协议，伪装成正常的 HTTPS 流量，易于伪装和难以识别。 | 企业/个人环境，访问封锁较严重地区。            | 优点：极高伪装性；缺点：依赖有效域名和证书。 |\n| **Shadowsocks (SS)** | 开源轻量级代理协议，基于加密实现快速传输。                   | 轻量用户，如普通网页浏览和视频观看。           | 优点：简单高效；缺点：抗封锁能力较弱。       |\n| **HTTP/2 + TLS**     | 使用 HTTPS 通道进行代理流量伪装，基于 Web 的高兼容性。       | 需要兼顾性能和隐匿性时。                       | 优点：速度快、兼容性好；缺点：配置较复杂。   |\n| **WireGuard**        | 类 VPN 协议，轻量级、现代化，性能极高，延迟低。              | 点对点通信，特别适合需要高性能和低延迟的场景。 | 优点：极快、稳定；缺点：可能容易被识别。     |\n\n------\n\n### **2. 推荐选择**\n\n#### **2.1 最稳定的协议：Trojan**\n\n- 原因\n\n  ：\n\n  - 使用 HTTPS 伪装，流量看起来与正常的 Web 浏览几乎无差别。\n  - 很难被识别为代理流量（封锁难度高）。\n\n- 适用场景\n\n  ：\n\n  - 高度安全性需求。\n  - 能够申请到域名和证书的用户。\n\n- 推荐配置\n\n  ：\n\n  - Nginx 反代 + Trojan，伪装成 HTTPS 网站流量。\n\n------\n\n#### **2.2 最安全的协议：VLESS**\n\n- 原因\n\n  ：\n\n  - 无状态设计，无需服务端存储用户信息，避免敏感信息泄漏。\n  - 动态伪装流量，支持新型传输协议（如 QUIC）。\n\n- 适用场景\n\n  ：\n\n  - 注重隐私的用户。\n  - 高级用户需要定制化的传输方案。\n\n- 推荐配置\n\n  ：\n\n  - VLESS + TLS + WebSocket (WS) 或 QUIC。\n\n------\n\n#### **2.3 最快速的协议：WireGuard**\n\n- 原因\n\n  ：\n\n  - 点对点协议，直接建立连接，减少中间环节导致的延迟。\n  - 加密性能高，适合需要低延迟的应用场景。\n\n- 适用场景\n\n  ：\n\n  - 游戏、视频通话等高性能需求。\n\n- 推荐配置\n\n  ：\n\n  - WireGuard + 仅允许特定 IP 使用。\n\n------\n\n#### **2.4 性能与安全平衡：VMess**\n\n- 原因\n\n  ：\n\n  - 综合性能较好，抗封锁能力也不错。\n\n- 适用场景\n\n  ：\n\n  - 常规需求，如稳定的网页浏览、在线视频。\n\n- 推荐配置\n\n  ：\n\n  - VMess + TLS + WebSocket，伪装成正常的 Web 流量。\n\n------\n\n### **3. 推荐搭建方案**\n\n#### **3.1 Trojan 搭建**\n\n1. 安装 Trojan：\n\n   ```bash\n   bash <(curl -sL https://git.io/trojan-install)\n   ```\n\n2. 配置域名与证书。\n\n3. 使用 Nginx 进行 HTTPS 流量伪装。\n\n#### **3.2 VLESS 搭建（Xray Core）**\n\n1. 安装 Xray：\n\n   ```bash\n   bash <(curl -Ls https://raw.githubusercontent.com/XTLS/Xray-install/main/install-release.sh)\n   ```\n\n2. 配置 JSON 文件，设置 VLESS + TLS + WebSocket。\n\n3. 使用 Nginx 配置反代。\n\n#### **3.3 WireGuard 搭建**\n\n1. 安装 WireGuard：\n\n   ```bash\n   apt install wireguard -y\n   ```\n\n2. 配置服务端和客户端公私钥。\n\n3. 设置点对点连接。\n\n------\n\n### **4. 总结推荐**\n\n- **强伪装**：选择 Trojan。\n- **高性能**：选择 WireGuard。\n- **灵活性**：选择 VLESS 或 VMess。\n\n如需详细的具体安装步骤，欢迎进一步咨询！","slug":"常见协议比较","published":1,"updated":"2024-11-25T11:44:04.638Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsex003bmbs63nd52hxe","content":"<p>在搭建代理服务时，选择一个稳定、安全且快速的协议是关键。以下是几种常见的协议的特点和推荐，适用于不同的需求和使用场景：</p>\n<hr>\n<h3 id=\"1-常见协议比较\"><a href=\"#1-常见协议比较\" class=\"headerlink\" title=\"1. 常见协议比较\"></a><strong>1. 常见协议比较</strong></h3><table>\n<thead>\n<tr>\n<th>协议</th>\n<th><strong>特点</strong></th>\n<th><strong>适用场景</strong></th>\n<th><strong>优缺点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>VMess</strong></td>\n<td>Xray&#x2F;V2Ray 的核心协议，支持复杂加密和动态伪装。</td>\n<td>高需求环境，如穿越防火墙，个人使用和小型团队。</td>\n<td>优点：安全、抗封锁；缺点：依赖服务端支持。</td>\n</tr>\n<tr>\n<td><strong>VLESS</strong></td>\n<td>VMess 的升级版，无状态、更灵活，支持 QUIC 等新型传输。</td>\n<td>中高需求环境，注重性能和低延迟。</td>\n<td>优点：轻量化、支持更多传输；缺点：复杂配置。</td>\n</tr>\n<tr>\n<td><strong>Trojan</strong></td>\n<td>基于 HTTPS 的代理协议，伪装成正常的 HTTPS 流量，易于伪装和难以识别。</td>\n<td>企业&#x2F;个人环境，访问封锁较严重地区。</td>\n<td>优点：极高伪装性；缺点：依赖有效域名和证书。</td>\n</tr>\n<tr>\n<td><strong>Shadowsocks (SS)</strong></td>\n<td>开源轻量级代理协议，基于加密实现快速传输。</td>\n<td>轻量用户，如普通网页浏览和视频观看。</td>\n<td>优点：简单高效；缺点：抗封锁能力较弱。</td>\n</tr>\n<tr>\n<td><strong>HTTP&#x2F;2 + TLS</strong></td>\n<td>使用 HTTPS 通道进行代理流量伪装，基于 Web 的高兼容性。</td>\n<td>需要兼顾性能和隐匿性时。</td>\n<td>优点：速度快、兼容性好；缺点：配置较复杂。</td>\n</tr>\n<tr>\n<td><strong>WireGuard</strong></td>\n<td>类 VPN 协议，轻量级、现代化，性能极高，延迟低。</td>\n<td>点对点通信，特别适合需要高性能和低延迟的场景。</td>\n<td>优点：极快、稳定；缺点：可能容易被识别。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"2-推荐选择\"><a href=\"#2-推荐选择\" class=\"headerlink\" title=\"2. 推荐选择\"></a><strong>2. 推荐选择</strong></h3><h4 id=\"2-1-最稳定的协议：Trojan\"><a href=\"#2-1-最稳定的协议：Trojan\" class=\"headerlink\" title=\"2.1 最稳定的协议：Trojan\"></a><strong>2.1 最稳定的协议：Trojan</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>使用 HTTPS 伪装，流量看起来与正常的 Web 浏览几乎无差别。</li>\n<li>很难被识别为代理流量（封锁难度高）。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>高度安全性需求。</li>\n<li>能够申请到域名和证书的用户。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>Nginx 反代 + Trojan，伪装成 HTTPS 网站流量。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-2-最安全的协议：VLESS\"><a href=\"#2-2-最安全的协议：VLESS\" class=\"headerlink\" title=\"2.2 最安全的协议：VLESS\"></a><strong>2.2 最安全的协议：VLESS</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>无状态设计，无需服务端存储用户信息，避免敏感信息泄漏。</li>\n<li>动态伪装流量，支持新型传输协议（如 QUIC）。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>注重隐私的用户。</li>\n<li>高级用户需要定制化的传输方案。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>VLESS + TLS + WebSocket (WS) 或 QUIC。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-3-最快速的协议：WireGuard\"><a href=\"#2-3-最快速的协议：WireGuard\" class=\"headerlink\" title=\"2.3 最快速的协议：WireGuard\"></a><strong>2.3 最快速的协议：WireGuard</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>点对点协议，直接建立连接，减少中间环节导致的延迟。</li>\n<li>加密性能高，适合需要低延迟的应用场景。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>游戏、视频通话等高性能需求。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>WireGuard + 仅允许特定 IP 使用。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-4-性能与安全平衡：VMess\"><a href=\"#2-4-性能与安全平衡：VMess\" class=\"headerlink\" title=\"2.4 性能与安全平衡：VMess\"></a><strong>2.4 性能与安全平衡：VMess</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>综合性能较好，抗封锁能力也不错。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>常规需求，如稳定的网页浏览、在线视频。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>VMess + TLS + WebSocket，伪装成正常的 Web 流量。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-推荐搭建方案\"><a href=\"#3-推荐搭建方案\" class=\"headerlink\" title=\"3. 推荐搭建方案\"></a><strong>3. 推荐搭建方案</strong></h3><h4 id=\"3-1-Trojan-搭建\"><a href=\"#3-1-Trojan-搭建\" class=\"headerlink\" title=\"3.1 Trojan 搭建\"></a><strong>3.1 Trojan 搭建</strong></h4><ol>\n<li><p>安装 Trojan：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -sL https://git.io/trojan-install)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置域名与证书。</p>\n</li>\n<li><p>使用 Nginx 进行 HTTPS 流量伪装。</p>\n</li>\n</ol>\n<h4 id=\"3-2-VLESS-搭建（Xray-Core）\"><a href=\"#3-2-VLESS-搭建（Xray-Core）\" class=\"headerlink\" title=\"3.2 VLESS 搭建（Xray Core）\"></a><strong>3.2 VLESS 搭建（Xray Core）</strong></h4><ol>\n<li><p>安装 Xray：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Ls https://raw.githubusercontent.com/XTLS/Xray-install/main/install-release.sh)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 JSON 文件，设置 VLESS + TLS + WebSocket。</p>\n</li>\n<li><p>使用 Nginx 配置反代。</p>\n</li>\n</ol>\n<h4 id=\"3-3-WireGuard-搭建\"><a href=\"#3-3-WireGuard-搭建\" class=\"headerlink\" title=\"3.3 WireGuard 搭建\"></a><strong>3.3 WireGuard 搭建</strong></h4><ol>\n<li><p>安装 WireGuard：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install wireguard -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置服务端和客户端公私钥。</p>\n</li>\n<li><p>设置点对点连接。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"4-总结推荐\"><a href=\"#4-总结推荐\" class=\"headerlink\" title=\"4. 总结推荐\"></a><strong>4. 总结推荐</strong></h3><ul>\n<li><strong>强伪装</strong>：选择 Trojan。</li>\n<li><strong>高性能</strong>：选择 WireGuard。</li>\n<li><strong>灵活性</strong>：选择 VLESS 或 VMess。</li>\n</ul>\n<p>如需详细的具体安装步骤，欢迎进一步咨询！</p>\n","excerpt":"","more":"<p>在搭建代理服务时，选择一个稳定、安全且快速的协议是关键。以下是几种常见的协议的特点和推荐，适用于不同的需求和使用场景：</p>\n<hr>\n<h3 id=\"1-常见协议比较\"><a href=\"#1-常见协议比较\" class=\"headerlink\" title=\"1. 常见协议比较\"></a><strong>1. 常见协议比较</strong></h3><table>\n<thead>\n<tr>\n<th>协议</th>\n<th><strong>特点</strong></th>\n<th><strong>适用场景</strong></th>\n<th><strong>优缺点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>VMess</strong></td>\n<td>Xray&#x2F;V2Ray 的核心协议，支持复杂加密和动态伪装。</td>\n<td>高需求环境，如穿越防火墙，个人使用和小型团队。</td>\n<td>优点：安全、抗封锁；缺点：依赖服务端支持。</td>\n</tr>\n<tr>\n<td><strong>VLESS</strong></td>\n<td>VMess 的升级版，无状态、更灵活，支持 QUIC 等新型传输。</td>\n<td>中高需求环境，注重性能和低延迟。</td>\n<td>优点：轻量化、支持更多传输；缺点：复杂配置。</td>\n</tr>\n<tr>\n<td><strong>Trojan</strong></td>\n<td>基于 HTTPS 的代理协议，伪装成正常的 HTTPS 流量，易于伪装和难以识别。</td>\n<td>企业&#x2F;个人环境，访问封锁较严重地区。</td>\n<td>优点：极高伪装性；缺点：依赖有效域名和证书。</td>\n</tr>\n<tr>\n<td><strong>Shadowsocks (SS)</strong></td>\n<td>开源轻量级代理协议，基于加密实现快速传输。</td>\n<td>轻量用户，如普通网页浏览和视频观看。</td>\n<td>优点：简单高效；缺点：抗封锁能力较弱。</td>\n</tr>\n<tr>\n<td><strong>HTTP&#x2F;2 + TLS</strong></td>\n<td>使用 HTTPS 通道进行代理流量伪装，基于 Web 的高兼容性。</td>\n<td>需要兼顾性能和隐匿性时。</td>\n<td>优点：速度快、兼容性好；缺点：配置较复杂。</td>\n</tr>\n<tr>\n<td><strong>WireGuard</strong></td>\n<td>类 VPN 协议，轻量级、现代化，性能极高，延迟低。</td>\n<td>点对点通信，特别适合需要高性能和低延迟的场景。</td>\n<td>优点：极快、稳定；缺点：可能容易被识别。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"2-推荐选择\"><a href=\"#2-推荐选择\" class=\"headerlink\" title=\"2. 推荐选择\"></a><strong>2. 推荐选择</strong></h3><h4 id=\"2-1-最稳定的协议：Trojan\"><a href=\"#2-1-最稳定的协议：Trojan\" class=\"headerlink\" title=\"2.1 最稳定的协议：Trojan\"></a><strong>2.1 最稳定的协议：Trojan</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>使用 HTTPS 伪装，流量看起来与正常的 Web 浏览几乎无差别。</li>\n<li>很难被识别为代理流量（封锁难度高）。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>高度安全性需求。</li>\n<li>能够申请到域名和证书的用户。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>Nginx 反代 + Trojan，伪装成 HTTPS 网站流量。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-2-最安全的协议：VLESS\"><a href=\"#2-2-最安全的协议：VLESS\" class=\"headerlink\" title=\"2.2 最安全的协议：VLESS\"></a><strong>2.2 最安全的协议：VLESS</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>无状态设计，无需服务端存储用户信息，避免敏感信息泄漏。</li>\n<li>动态伪装流量，支持新型传输协议（如 QUIC）。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>注重隐私的用户。</li>\n<li>高级用户需要定制化的传输方案。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>VLESS + TLS + WebSocket (WS) 或 QUIC。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-3-最快速的协议：WireGuard\"><a href=\"#2-3-最快速的协议：WireGuard\" class=\"headerlink\" title=\"2.3 最快速的协议：WireGuard\"></a><strong>2.3 最快速的协议：WireGuard</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>点对点协议，直接建立连接，减少中间环节导致的延迟。</li>\n<li>加密性能高，适合需要低延迟的应用场景。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>游戏、视频通话等高性能需求。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>WireGuard + 仅允许特定 IP 使用。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-4-性能与安全平衡：VMess\"><a href=\"#2-4-性能与安全平衡：VMess\" class=\"headerlink\" title=\"2.4 性能与安全平衡：VMess\"></a><strong>2.4 性能与安全平衡：VMess</strong></h4><ul>\n<li><p>原因</p>\n<p>：</p>\n<ul>\n<li>综合性能较好，抗封锁能力也不错。</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<p>：</p>\n<ul>\n<li>常规需求，如稳定的网页浏览、在线视频。</li>\n</ul>\n</li>\n<li><p>推荐配置</p>\n<p>：</p>\n<ul>\n<li>VMess + TLS + WebSocket，伪装成正常的 Web 流量。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-推荐搭建方案\"><a href=\"#3-推荐搭建方案\" class=\"headerlink\" title=\"3. 推荐搭建方案\"></a><strong>3. 推荐搭建方案</strong></h3><h4 id=\"3-1-Trojan-搭建\"><a href=\"#3-1-Trojan-搭建\" class=\"headerlink\" title=\"3.1 Trojan 搭建\"></a><strong>3.1 Trojan 搭建</strong></h4><ol>\n<li><p>安装 Trojan：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -sL https://git.io/trojan-install)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置域名与证书。</p>\n</li>\n<li><p>使用 Nginx 进行 HTTPS 流量伪装。</p>\n</li>\n</ol>\n<h4 id=\"3-2-VLESS-搭建（Xray-Core）\"><a href=\"#3-2-VLESS-搭建（Xray-Core）\" class=\"headerlink\" title=\"3.2 VLESS 搭建（Xray Core）\"></a><strong>3.2 VLESS 搭建（Xray Core）</strong></h4><ol>\n<li><p>安装 Xray：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Ls https://raw.githubusercontent.com/XTLS/Xray-install/main/install-release.sh)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 JSON 文件，设置 VLESS + TLS + WebSocket。</p>\n</li>\n<li><p>使用 Nginx 配置反代。</p>\n</li>\n</ol>\n<h4 id=\"3-3-WireGuard-搭建\"><a href=\"#3-3-WireGuard-搭建\" class=\"headerlink\" title=\"3.3 WireGuard 搭建\"></a><strong>3.3 WireGuard 搭建</strong></h4><ol>\n<li><p>安装 WireGuard：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install wireguard -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置服务端和客户端公私钥。</p>\n</li>\n<li><p>设置点对点连接。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"4-总结推荐\"><a href=\"#4-总结推荐\" class=\"headerlink\" title=\"4. 总结推荐\"></a><strong>4. 总结推荐</strong></h3><ul>\n<li><strong>强伪装</strong>：选择 Trojan。</li>\n<li><strong>高性能</strong>：选择 WireGuard。</li>\n<li><strong>灵活性</strong>：选择 VLESS 或 VMess。</li>\n</ul>\n<p>如需详细的具体安装步骤，欢迎进一步咨询！</p>\n"},{"title":"常见徽章平台和类型","date":"2024-09-06T06:20:53.306Z","_content":"在文档或项目页面中添加徽章是一种很常见的做法，尤其在 GitHub 仓库或文档站点中，用于展示项目状态、构建状态、版本号、许可证等信息。\n\n### 常见徽章平台和类型\n\n1. **Shields.io**：提供免费的徽章生成服务，支持各种样式的徽章。\n2. **Travis CI、CircleCI、GitHub Actions 等 CI 工具**：提供构建状态徽章。\n3. **npm、PyPI 等包管理器**：提供项目版本、下载量等徽章。\n\n### 使用步骤\n\n#### 1. **使用 Shields.io 创建徽章**\nShields.io 是最常用的徽章生成平台。它支持多种类型的徽章，你可以自定义徽章文本、颜色、样式等。\n\n- 访问 [Shields.io](https://shields.io/)。\n- 选择你需要的徽章类型，比如版本号、构建状态、许可证等。\n- 生成 Markdown 链接代码，并将其放入你的 `README.md` 或文档文件中。\n\n例如，你想要显示项目的许可证类型：\n```markdown\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n```\n\n#### 2. **添加 GitHub Actions 构建状态徽章**\n如果你使用 GitHub Actions 来进行持续集成（CI），可以添加构建状态徽章。\n\n1. 在你的 GitHub 仓库中设置 GitHub Actions。\n2. 在 `README.md` 中添加如下代码，展示构建状态：\n\n```markdown\n![Build Status](https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg)\n```\n\n这个徽章会根据你仓库的 GitHub Actions 工作流文件（如 `ci.yml`）的运行结果自动更新。\n\n#### 3. **npm 版本徽章**\n如果你发布了 npm 包，可以通过以下方式显示当前发布的版本号：\n\n```markdown\n![npm](https://img.shields.io/npm/v/包名.svg)\n```\n\n例如：\n```markdown\n![npm](https://img.shields.io/npm/v/vuepress.svg)\n```\n\n#### 4. **GitHub 仓库信息徽章**\n如果你想显示 GitHub 项目的某些状态，比如 star 数、fork 数等，可以使用以下代码：\n\n- **star 数**：\n```markdown\n![GitHub stars](https://img.shields.io/github/stars/你的用户名/你的项目名.svg?style=social)\n```\n\n- **fork 数**：\n```markdown\n![GitHub forks](https://img.shields.io/github/forks/你的用户名/你的项目名.svg?style=social)\n```\n\n#### 5. **定制徽章样式**\n你可以通过 Shields.io 来自定义徽章的颜色、样式：\n\n- **风格设置**：\n  - `flat`：扁平风格\n  - `plastic`：3D 效果\n  - `for-the-badge`：大号徽章\n  - `social`：社交媒体风格\n\n例如：\n```markdown\n![Custom badge](https://img.shields.io/badge/My_Custom_Badge-brightgreen?style=for-the-badge)\n```\n\n#### 6. **集成到 VuePress**\n如果你在 VuePress 文档站点中想显示徽章，只需将生成的 Markdown 代码添加到你需要的位置（例如 `docs/README.md`）即可。\n\n### 示例\n\n假设你有一个 VuePress 项目，并想在首页显示项目的许可证和构建状态徽章：\n\n在 `docs/README.md` 文件中添加以下内容：\n\n```markdown\n# 我的项目\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Build Status](https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg)\n```\n\n这会在文档首页展示两个徽章，一个是许可证信息，另一个是 GitHub Actions 构建状态。\n\n### 总结\n1. 访问 [Shields.io](https://shields.io) 创建和定制你想要的徽章。\n2. 将生成的 Markdown 代码添加到你的文档或 `README.md` 文件中。\n3. 如果你使用 CI 工具、npm 或其他平台，还可以生成相应的状态徽章。\n4. 通过 VuePress 直接将这些徽章显示在文档中。","source":"_posts/常见徽章平台和类型.md","raw":"---\ntitle: 常见徽章平台和类型\ndate: 2024-09-06T14:20:53.306Z\ntags: []\ncategories: []\n---\n在文档或项目页面中添加徽章是一种很常见的做法，尤其在 GitHub 仓库或文档站点中，用于展示项目状态、构建状态、版本号、许可证等信息。\n\n### 常见徽章平台和类型\n\n1. **Shields.io**：提供免费的徽章生成服务，支持各种样式的徽章。\n2. **Travis CI、CircleCI、GitHub Actions 等 CI 工具**：提供构建状态徽章。\n3. **npm、PyPI 等包管理器**：提供项目版本、下载量等徽章。\n\n### 使用步骤\n\n#### 1. **使用 Shields.io 创建徽章**\nShields.io 是最常用的徽章生成平台。它支持多种类型的徽章，你可以自定义徽章文本、颜色、样式等。\n\n- 访问 [Shields.io](https://shields.io/)。\n- 选择你需要的徽章类型，比如版本号、构建状态、许可证等。\n- 生成 Markdown 链接代码，并将其放入你的 `README.md` 或文档文件中。\n\n例如，你想要显示项目的许可证类型：\n```markdown\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n```\n\n#### 2. **添加 GitHub Actions 构建状态徽章**\n如果你使用 GitHub Actions 来进行持续集成（CI），可以添加构建状态徽章。\n\n1. 在你的 GitHub 仓库中设置 GitHub Actions。\n2. 在 `README.md` 中添加如下代码，展示构建状态：\n\n```markdown\n![Build Status](https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg)\n```\n\n这个徽章会根据你仓库的 GitHub Actions 工作流文件（如 `ci.yml`）的运行结果自动更新。\n\n#### 3. **npm 版本徽章**\n如果你发布了 npm 包，可以通过以下方式显示当前发布的版本号：\n\n```markdown\n![npm](https://img.shields.io/npm/v/包名.svg)\n```\n\n例如：\n```markdown\n![npm](https://img.shields.io/npm/v/vuepress.svg)\n```\n\n#### 4. **GitHub 仓库信息徽章**\n如果你想显示 GitHub 项目的某些状态，比如 star 数、fork 数等，可以使用以下代码：\n\n- **star 数**：\n```markdown\n![GitHub stars](https://img.shields.io/github/stars/你的用户名/你的项目名.svg?style=social)\n```\n\n- **fork 数**：\n```markdown\n![GitHub forks](https://img.shields.io/github/forks/你的用户名/你的项目名.svg?style=social)\n```\n\n#### 5. **定制徽章样式**\n你可以通过 Shields.io 来自定义徽章的颜色、样式：\n\n- **风格设置**：\n  - `flat`：扁平风格\n  - `plastic`：3D 效果\n  - `for-the-badge`：大号徽章\n  - `social`：社交媒体风格\n\n例如：\n```markdown\n![Custom badge](https://img.shields.io/badge/My_Custom_Badge-brightgreen?style=for-the-badge)\n```\n\n#### 6. **集成到 VuePress**\n如果你在 VuePress 文档站点中想显示徽章，只需将生成的 Markdown 代码添加到你需要的位置（例如 `docs/README.md`）即可。\n\n### 示例\n\n假设你有一个 VuePress 项目，并想在首页显示项目的许可证和构建状态徽章：\n\n在 `docs/README.md` 文件中添加以下内容：\n\n```markdown\n# 我的项目\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Build Status](https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg)\n```\n\n这会在文档首页展示两个徽章，一个是许可证信息，另一个是 GitHub Actions 构建状态。\n\n### 总结\n1. 访问 [Shields.io](https://shields.io) 创建和定制你想要的徽章。\n2. 将生成的 Markdown 代码添加到你的文档或 `README.md` 文件中。\n3. 如果你使用 CI 工具、npm 或其他平台，还可以生成相应的状态徽章。\n4. 通过 VuePress 直接将这些徽章显示在文档中。","slug":"常见徽章平台和类型","published":1,"updated":"2024-11-25T11:44:04.642Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsex003cmbs660d4ha3r","content":"<p>在文档或项目页面中添加徽章是一种很常见的做法，尤其在 GitHub 仓库或文档站点中，用于展示项目状态、构建状态、版本号、许可证等信息。</p>\n<h3 id=\"常见徽章平台和类型\"><a href=\"#常见徽章平台和类型\" class=\"headerlink\" title=\"常见徽章平台和类型\"></a>常见徽章平台和类型</h3><ol>\n<li><strong>Shields.io</strong>：提供免费的徽章生成服务，支持各种样式的徽章。</li>\n<li><strong>Travis CI、CircleCI、GitHub Actions 等 CI 工具</strong>：提供构建状态徽章。</li>\n<li><strong>npm、PyPI 等包管理器</strong>：提供项目版本、下载量等徽章。</li>\n</ol>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><h4 id=\"1-使用-Shields-io-创建徽章\"><a href=\"#1-使用-Shields-io-创建徽章\" class=\"headerlink\" title=\"1. 使用 Shields.io 创建徽章\"></a>1. <strong>使用 Shields.io 创建徽章</strong></h4><p>Shields.io 是最常用的徽章生成平台。它支持多种类型的徽章，你可以自定义徽章文本、颜色、样式等。</p>\n<ul>\n<li>访问 <a href=\"https://shields.io/\">Shields.io</a>。</li>\n<li>选择你需要的徽章类型，比如版本号、构建状态、许可证等。</li>\n<li>生成 Markdown 链接代码，并将其放入你的 <code>README.md</code> 或文档文件中。</li>\n</ul>\n<p>例如，你想要显示项目的许可证类型：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">License</span>](<span class=\"link\">https://img.shields.io/badge/license-MIT-blue.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-添加-GitHub-Actions-构建状态徽章\"><a href=\"#2-添加-GitHub-Actions-构建状态徽章\" class=\"headerlink\" title=\"2. 添加 GitHub Actions 构建状态徽章\"></a>2. <strong>添加 GitHub Actions 构建状态徽章</strong></h4><p>如果你使用 GitHub Actions 来进行持续集成（CI），可以添加构建状态徽章。</p>\n<ol>\n<li>在你的 GitHub 仓库中设置 GitHub Actions。</li>\n<li>在 <code>README.md</code> 中添加如下代码，展示构建状态：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Build Status</span>](<span class=\"link\">https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个徽章会根据你仓库的 GitHub Actions 工作流文件（如 <code>ci.yml</code>）的运行结果自动更新。</p>\n<h4 id=\"3-npm-版本徽章\"><a href=\"#3-npm-版本徽章\" class=\"headerlink\" title=\"3. npm 版本徽章\"></a>3. <strong>npm 版本徽章</strong></h4><p>如果你发布了 npm 包，可以通过以下方式显示当前发布的版本号：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">npm</span>](<span class=\"link\">https://img.shields.io/npm/v/包名.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">npm</span>](<span class=\"link\">https://img.shields.io/npm/v/vuepress.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-GitHub-仓库信息徽章\"><a href=\"#4-GitHub-仓库信息徽章\" class=\"headerlink\" title=\"4. GitHub 仓库信息徽章\"></a>4. <strong>GitHub 仓库信息徽章</strong></h4><p>如果你想显示 GitHub 项目的某些状态，比如 star 数、fork 数等，可以使用以下代码：</p>\n<ul>\n<li><p><strong>star 数</strong>：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">GitHub stars</span>](<span class=\"link\">https://img.shields.io/github/stars/你的用户名/你的项目名.svg?style=social</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>fork 数</strong>：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">GitHub forks</span>](<span class=\"link\">https://img.shields.io/github/forks/你的用户名/你的项目名.svg?style=social</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-定制徽章样式\"><a href=\"#5-定制徽章样式\" class=\"headerlink\" title=\"5. 定制徽章样式\"></a>5. <strong>定制徽章样式</strong></h4><p>你可以通过 Shields.io 来自定义徽章的颜色、样式：</p>\n<ul>\n<li><strong>风格设置</strong>：<ul>\n<li><code>flat</code>：扁平风格</li>\n<li><code>plastic</code>：3D 效果</li>\n<li><code>for-the-badge</code>：大号徽章</li>\n<li><code>social</code>：社交媒体风格</li>\n</ul>\n</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Custom badge</span>](<span class=\"link\">https://img.shields.io/badge/My_Custom_Badge-brightgreen?style=for-the-badge</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-集成到-VuePress\"><a href=\"#6-集成到-VuePress\" class=\"headerlink\" title=\"6. 集成到 VuePress\"></a>6. <strong>集成到 VuePress</strong></h4><p>如果你在 VuePress 文档站点中想显示徽章，只需将生成的 Markdown 代码添加到你需要的位置（例如 <code>docs/README.md</code>）即可。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假设你有一个 VuePress 项目，并想在首页显示项目的许可证和构建状态徽章：</p>\n<p>在 <code>docs/README.md</code> 文件中添加以下内容：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 我的项目</span></span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">License</span>](<span class=\"link\">https://img.shields.io/badge/license-MIT-blue.svg</span>)</span><br><span class=\"line\">![<span class=\"string\">Build Status</span>](<span class=\"link\">https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这会在文档首页展示两个徽章，一个是许可证信息，另一个是 GitHub Actions 构建状态。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>访问 <a href=\"https://shields.io/\">Shields.io</a> 创建和定制你想要的徽章。</li>\n<li>将生成的 Markdown 代码添加到你的文档或 <code>README.md</code> 文件中。</li>\n<li>如果你使用 CI 工具、npm 或其他平台，还可以生成相应的状态徽章。</li>\n<li>通过 VuePress 直接将这些徽章显示在文档中。</li>\n</ol>\n","excerpt":"","more":"<p>在文档或项目页面中添加徽章是一种很常见的做法，尤其在 GitHub 仓库或文档站点中，用于展示项目状态、构建状态、版本号、许可证等信息。</p>\n<h3 id=\"常见徽章平台和类型\"><a href=\"#常见徽章平台和类型\" class=\"headerlink\" title=\"常见徽章平台和类型\"></a>常见徽章平台和类型</h3><ol>\n<li><strong>Shields.io</strong>：提供免费的徽章生成服务，支持各种样式的徽章。</li>\n<li><strong>Travis CI、CircleCI、GitHub Actions 等 CI 工具</strong>：提供构建状态徽章。</li>\n<li><strong>npm、PyPI 等包管理器</strong>：提供项目版本、下载量等徽章。</li>\n</ol>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><h4 id=\"1-使用-Shields-io-创建徽章\"><a href=\"#1-使用-Shields-io-创建徽章\" class=\"headerlink\" title=\"1. 使用 Shields.io 创建徽章\"></a>1. <strong>使用 Shields.io 创建徽章</strong></h4><p>Shields.io 是最常用的徽章生成平台。它支持多种类型的徽章，你可以自定义徽章文本、颜色、样式等。</p>\n<ul>\n<li>访问 <a href=\"https://shields.io/\">Shields.io</a>。</li>\n<li>选择你需要的徽章类型，比如版本号、构建状态、许可证等。</li>\n<li>生成 Markdown 链接代码，并将其放入你的 <code>README.md</code> 或文档文件中。</li>\n</ul>\n<p>例如，你想要显示项目的许可证类型：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">License</span>](<span class=\"link\">https://img.shields.io/badge/license-MIT-blue.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-添加-GitHub-Actions-构建状态徽章\"><a href=\"#2-添加-GitHub-Actions-构建状态徽章\" class=\"headerlink\" title=\"2. 添加 GitHub Actions 构建状态徽章\"></a>2. <strong>添加 GitHub Actions 构建状态徽章</strong></h4><p>如果你使用 GitHub Actions 来进行持续集成（CI），可以添加构建状态徽章。</p>\n<ol>\n<li>在你的 GitHub 仓库中设置 GitHub Actions。</li>\n<li>在 <code>README.md</code> 中添加如下代码，展示构建状态：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Build Status</span>](<span class=\"link\">https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个徽章会根据你仓库的 GitHub Actions 工作流文件（如 <code>ci.yml</code>）的运行结果自动更新。</p>\n<h4 id=\"3-npm-版本徽章\"><a href=\"#3-npm-版本徽章\" class=\"headerlink\" title=\"3. npm 版本徽章\"></a>3. <strong>npm 版本徽章</strong></h4><p>如果你发布了 npm 包，可以通过以下方式显示当前发布的版本号：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">npm</span>](<span class=\"link\">https://img.shields.io/npm/v/包名.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">npm</span>](<span class=\"link\">https://img.shields.io/npm/v/vuepress.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-GitHub-仓库信息徽章\"><a href=\"#4-GitHub-仓库信息徽章\" class=\"headerlink\" title=\"4. GitHub 仓库信息徽章\"></a>4. <strong>GitHub 仓库信息徽章</strong></h4><p>如果你想显示 GitHub 项目的某些状态，比如 star 数、fork 数等，可以使用以下代码：</p>\n<ul>\n<li><p><strong>star 数</strong>：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">GitHub stars</span>](<span class=\"link\">https://img.shields.io/github/stars/你的用户名/你的项目名.svg?style=social</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>fork 数</strong>：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">GitHub forks</span>](<span class=\"link\">https://img.shields.io/github/forks/你的用户名/你的项目名.svg?style=social</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-定制徽章样式\"><a href=\"#5-定制徽章样式\" class=\"headerlink\" title=\"5. 定制徽章样式\"></a>5. <strong>定制徽章样式</strong></h4><p>你可以通过 Shields.io 来自定义徽章的颜色、样式：</p>\n<ul>\n<li><strong>风格设置</strong>：<ul>\n<li><code>flat</code>：扁平风格</li>\n<li><code>plastic</code>：3D 效果</li>\n<li><code>for-the-badge</code>：大号徽章</li>\n<li><code>social</code>：社交媒体风格</li>\n</ul>\n</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Custom badge</span>](<span class=\"link\">https://img.shields.io/badge/My_Custom_Badge-brightgreen?style=for-the-badge</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-集成到-VuePress\"><a href=\"#6-集成到-VuePress\" class=\"headerlink\" title=\"6. 集成到 VuePress\"></a>6. <strong>集成到 VuePress</strong></h4><p>如果你在 VuePress 文档站点中想显示徽章，只需将生成的 Markdown 代码添加到你需要的位置（例如 <code>docs/README.md</code>）即可。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假设你有一个 VuePress 项目，并想在首页显示项目的许可证和构建状态徽章：</p>\n<p>在 <code>docs/README.md</code> 文件中添加以下内容：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 我的项目</span></span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">License</span>](<span class=\"link\">https://img.shields.io/badge/license-MIT-blue.svg</span>)</span><br><span class=\"line\">![<span class=\"string\">Build Status</span>](<span class=\"link\">https://github.com/你的用户名/你的项目名/actions/workflows/ci.yml/badge.svg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这会在文档首页展示两个徽章，一个是许可证信息，另一个是 GitHub Actions 构建状态。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>访问 <a href=\"https://shields.io/\">Shields.io</a> 创建和定制你想要的徽章。</li>\n<li>将生成的 Markdown 代码添加到你的文档或 <code>README.md</code> 文件中。</li>\n<li>如果你使用 CI 工具、npm 或其他平台，还可以生成相应的状态徽章。</li>\n<li>通过 VuePress 直接将这些徽章显示在文档中。</li>\n</ol>\n"},{"title":"iOS 代理软件","date":"2024-11-01T09:42:41.186Z","_content":"在 iOS 平台上有一些常用的代理软件，支持不同的代理协议类型，比如 Shadowsocks (SS)、ShadowsocksR (SSR)、VMess、VLESS、Trojan 等。以下是几款常见的 iOS 代理软件以及它们分别支持的协议和适用场景的简单对比：\n\n### 1. **Quantumult X**\n   - **支持协议**：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan、VLESS\n   - **特点**：支持多种协议和规则筛选，适合高级用户。可以灵活地使用脚本来做复杂的路由分流。\n   - **适用场景**：适合对隐私和性能有较高要求的用户，可以实现丰富的定制功能，如广告过滤、分流、地理位置限制绕过等。\n\n### 2. **Shadowrocket**\n   - **支持协议**：Shadowsocks、VMess、Trojan、SOCKS5、HTTP(S)\n   - **特点**：界面简洁，支持多种常见代理协议和分流，应用广泛。\n   - **适用场景**：支持丰富的代理协议选择，可以满足普通用户到专业用户的需求。适合希望简单快捷设置代理的用户。\n\n### 3. **Kitsunebi**\n   - **支持协议**：VMess、Shadowsocks、SOCKS5、HTTP\n   - **特点**：基于 V2Ray Core，支持 VMess 及多种常见协议。\n   - **适用场景**：适合需要 VMess、Shadowsocks 等常用代理协议的用户，适合简单代理需求。\n\n### 4. **Loon**\n   - **支持协议**：HTTP、SOCKS5、Shadowsocks、VMess、Trojan\n   - **特点**：功能全面，支持多种协议，提供分流策略与规则分组功能。\n   - **适用场景**：适合需要自定义规则和高稳定性的用户，可以选择不同节点进行分流设置，适合多场景应用。\n\n### 5. **Surge**\n   - **支持协议**：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan\n   - **特点**：支持多种规则设置，支持分流、流量统计、脚本等高级功能。\n   - **适用场景**：适合需要精确控制代理流量、分流及调试网络流量的用户，常用于企业 VPN、应用开发测试。\n\n---\n\n### 代理协议类型及区别\n\n1. **Shadowsocks (SS)**：\n   - **特点**：轻量级加密代理，基于 SOCKS5，用于翻墙和绕过审查。\n   - **优点**：速度快、资源占用低。\n   - **缺点**：加密强度相对较低。\n\n2. **ShadowsocksR (SSR)**：\n   - **特点**：Shadowsocks 的改进版，添加了协议和混淆特性，提高隐匿性。\n   - **优点**：更隐蔽、绕过特定限制更有效。\n   - **缺点**：复杂度较高。\n\n3. **VMess**：\n   - **特点**：V2Ray 的主要协议，支持 UUID 用户认证和内置加密。\n   - **优点**：隐私性较好，适合严格审查环境。\n   - **缺点**：加密占用资源较多。\n\n4. **VLESS**：\n   - **特点**：VMess 的轻量版，取消了内置加密，支持与 TLS 等组合使用。\n   - **优点**：高性能、低延迟。\n   - **缺点**：需要 TLS 等额外加密。\n\n5. **Trojan**：\n   - **特点**：基于 HTTPS 的代理协议，利用 TLS 来隐藏流量。\n   - **优点**：伪装性强，适合流量检测环境。\n   - **缺点**：依赖 TLS，速度受制于 HTTPS 传输性能。\n\n6. **SOCKS5 / HTTP(S)**：\n   - **特点**：标准的代理协议，通常没有加密，适合局域网或需要简单代理的环境。\n   - **优点**：速度快，兼容性好。\n   - **缺点**：缺少加密，隐私性不佳。\n\n### 总结\n不同的协议适合不同的需求场景，如 Shadowsocks 系列适合简单代理需求，而 Trojan、VMess 则适合有高隐私保护需求的用户。","source":"_posts/ iOS 代理软件.md","raw":"---\ntitle:  iOS 代理软件\ndate: 2024-11-01T17:42:41.186Z\ntags: []\ncategories: []\n---\n在 iOS 平台上有一些常用的代理软件，支持不同的代理协议类型，比如 Shadowsocks (SS)、ShadowsocksR (SSR)、VMess、VLESS、Trojan 等。以下是几款常见的 iOS 代理软件以及它们分别支持的协议和适用场景的简单对比：\n\n### 1. **Quantumult X**\n   - **支持协议**：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan、VLESS\n   - **特点**：支持多种协议和规则筛选，适合高级用户。可以灵活地使用脚本来做复杂的路由分流。\n   - **适用场景**：适合对隐私和性能有较高要求的用户，可以实现丰富的定制功能，如广告过滤、分流、地理位置限制绕过等。\n\n### 2. **Shadowrocket**\n   - **支持协议**：Shadowsocks、VMess、Trojan、SOCKS5、HTTP(S)\n   - **特点**：界面简洁，支持多种常见代理协议和分流，应用广泛。\n   - **适用场景**：支持丰富的代理协议选择，可以满足普通用户到专业用户的需求。适合希望简单快捷设置代理的用户。\n\n### 3. **Kitsunebi**\n   - **支持协议**：VMess、Shadowsocks、SOCKS5、HTTP\n   - **特点**：基于 V2Ray Core，支持 VMess 及多种常见协议。\n   - **适用场景**：适合需要 VMess、Shadowsocks 等常用代理协议的用户，适合简单代理需求。\n\n### 4. **Loon**\n   - **支持协议**：HTTP、SOCKS5、Shadowsocks、VMess、Trojan\n   - **特点**：功能全面，支持多种协议，提供分流策略与规则分组功能。\n   - **适用场景**：适合需要自定义规则和高稳定性的用户，可以选择不同节点进行分流设置，适合多场景应用。\n\n### 5. **Surge**\n   - **支持协议**：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan\n   - **特点**：支持多种规则设置，支持分流、流量统计、脚本等高级功能。\n   - **适用场景**：适合需要精确控制代理流量、分流及调试网络流量的用户，常用于企业 VPN、应用开发测试。\n\n---\n\n### 代理协议类型及区别\n\n1. **Shadowsocks (SS)**：\n   - **特点**：轻量级加密代理，基于 SOCKS5，用于翻墙和绕过审查。\n   - **优点**：速度快、资源占用低。\n   - **缺点**：加密强度相对较低。\n\n2. **ShadowsocksR (SSR)**：\n   - **特点**：Shadowsocks 的改进版，添加了协议和混淆特性，提高隐匿性。\n   - **优点**：更隐蔽、绕过特定限制更有效。\n   - **缺点**：复杂度较高。\n\n3. **VMess**：\n   - **特点**：V2Ray 的主要协议，支持 UUID 用户认证和内置加密。\n   - **优点**：隐私性较好，适合严格审查环境。\n   - **缺点**：加密占用资源较多。\n\n4. **VLESS**：\n   - **特点**：VMess 的轻量版，取消了内置加密，支持与 TLS 等组合使用。\n   - **优点**：高性能、低延迟。\n   - **缺点**：需要 TLS 等额外加密。\n\n5. **Trojan**：\n   - **特点**：基于 HTTPS 的代理协议，利用 TLS 来隐藏流量。\n   - **优点**：伪装性强，适合流量检测环境。\n   - **缺点**：依赖 TLS，速度受制于 HTTPS 传输性能。\n\n6. **SOCKS5 / HTTP(S)**：\n   - **特点**：标准的代理协议，通常没有加密，适合局域网或需要简单代理的环境。\n   - **优点**：速度快，兼容性好。\n   - **缺点**：缺少加密，隐私性不佳。\n\n### 总结\n不同的协议适合不同的需求场景，如 Shadowsocks 系列适合简单代理需求，而 Trojan、VMess 则适合有高隐私保护需求的用户。","slug":" iOS 代理软件","published":1,"updated":"2024-11-25T11:44:04.659Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsey003dmbs685l29x1m","content":"<p>在 iOS 平台上有一些常用的代理软件，支持不同的代理协议类型，比如 Shadowsocks (SS)、ShadowsocksR (SSR)、VMess、VLESS、Trojan 等。以下是几款常见的 iOS 代理软件以及它们分别支持的协议和适用场景的简单对比：</p>\n<h3 id=\"1-Quantumult-X\"><a href=\"#1-Quantumult-X\" class=\"headerlink\" title=\"1. Quantumult X\"></a>1. <strong>Quantumult X</strong></h3><ul>\n<li><strong>支持协议</strong>：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan、VLESS</li>\n<li><strong>特点</strong>：支持多种协议和规则筛选，适合高级用户。可以灵活地使用脚本来做复杂的路由分流。</li>\n<li><strong>适用场景</strong>：适合对隐私和性能有较高要求的用户，可以实现丰富的定制功能，如广告过滤、分流、地理位置限制绕过等。</li>\n</ul>\n<h3 id=\"2-Shadowrocket\"><a href=\"#2-Shadowrocket\" class=\"headerlink\" title=\"2. Shadowrocket\"></a>2. <strong>Shadowrocket</strong></h3><ul>\n<li><strong>支持协议</strong>：Shadowsocks、VMess、Trojan、SOCKS5、HTTP(S)</li>\n<li><strong>特点</strong>：界面简洁，支持多种常见代理协议和分流，应用广泛。</li>\n<li><strong>适用场景</strong>：支持丰富的代理协议选择，可以满足普通用户到专业用户的需求。适合希望简单快捷设置代理的用户。</li>\n</ul>\n<h3 id=\"3-Kitsunebi\"><a href=\"#3-Kitsunebi\" class=\"headerlink\" title=\"3. Kitsunebi\"></a>3. <strong>Kitsunebi</strong></h3><ul>\n<li><strong>支持协议</strong>：VMess、Shadowsocks、SOCKS5、HTTP</li>\n<li><strong>特点</strong>：基于 V2Ray Core，支持 VMess 及多种常见协议。</li>\n<li><strong>适用场景</strong>：适合需要 VMess、Shadowsocks 等常用代理协议的用户，适合简单代理需求。</li>\n</ul>\n<h3 id=\"4-Loon\"><a href=\"#4-Loon\" class=\"headerlink\" title=\"4. Loon\"></a>4. <strong>Loon</strong></h3><ul>\n<li><strong>支持协议</strong>：HTTP、SOCKS5、Shadowsocks、VMess、Trojan</li>\n<li><strong>特点</strong>：功能全面，支持多种协议，提供分流策略与规则分组功能。</li>\n<li><strong>适用场景</strong>：适合需要自定义规则和高稳定性的用户，可以选择不同节点进行分流设置，适合多场景应用。</li>\n</ul>\n<h3 id=\"5-Surge\"><a href=\"#5-Surge\" class=\"headerlink\" title=\"5. Surge\"></a>5. <strong>Surge</strong></h3><ul>\n<li><strong>支持协议</strong>：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan</li>\n<li><strong>特点</strong>：支持多种规则设置，支持分流、流量统计、脚本等高级功能。</li>\n<li><strong>适用场景</strong>：适合需要精确控制代理流量、分流及调试网络流量的用户，常用于企业 VPN、应用开发测试。</li>\n</ul>\n<hr>\n<h3 id=\"代理协议类型及区别\"><a href=\"#代理协议类型及区别\" class=\"headerlink\" title=\"代理协议类型及区别\"></a>代理协议类型及区别</h3><ol>\n<li><p>**Shadowsocks (SS)**：</p>\n<ul>\n<li><strong>特点</strong>：轻量级加密代理，基于 SOCKS5，用于翻墙和绕过审查。</li>\n<li><strong>优点</strong>：速度快、资源占用低。</li>\n<li><strong>缺点</strong>：加密强度相对较低。</li>\n</ul>\n</li>\n<li><p>**ShadowsocksR (SSR)**：</p>\n<ul>\n<li><strong>特点</strong>：Shadowsocks 的改进版，添加了协议和混淆特性，提高隐匿性。</li>\n<li><strong>优点</strong>：更隐蔽、绕过特定限制更有效。</li>\n<li><strong>缺点</strong>：复杂度较高。</li>\n</ul>\n</li>\n<li><p><strong>VMess</strong>：</p>\n<ul>\n<li><strong>特点</strong>：V2Ray 的主要协议，支持 UUID 用户认证和内置加密。</li>\n<li><strong>优点</strong>：隐私性较好，适合严格审查环境。</li>\n<li><strong>缺点</strong>：加密占用资源较多。</li>\n</ul>\n</li>\n<li><p><strong>VLESS</strong>：</p>\n<ul>\n<li><strong>特点</strong>：VMess 的轻量版，取消了内置加密，支持与 TLS 等组合使用。</li>\n<li><strong>优点</strong>：高性能、低延迟。</li>\n<li><strong>缺点</strong>：需要 TLS 等额外加密。</li>\n</ul>\n</li>\n<li><p><strong>Trojan</strong>：</p>\n<ul>\n<li><strong>特点</strong>：基于 HTTPS 的代理协议，利用 TLS 来隐藏流量。</li>\n<li><strong>优点</strong>：伪装性强，适合流量检测环境。</li>\n<li><strong>缺点</strong>：依赖 TLS，速度受制于 HTTPS 传输性能。</li>\n</ul>\n</li>\n<li><p>**SOCKS5 &#x2F; HTTP(S)**：</p>\n<ul>\n<li><strong>特点</strong>：标准的代理协议，通常没有加密，适合局域网或需要简单代理的环境。</li>\n<li><strong>优点</strong>：速度快，兼容性好。</li>\n<li><strong>缺点</strong>：缺少加密，隐私性不佳。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不同的协议适合不同的需求场景，如 Shadowsocks 系列适合简单代理需求，而 Trojan、VMess 则适合有高隐私保护需求的用户。</p>\n","excerpt":"","more":"<p>在 iOS 平台上有一些常用的代理软件，支持不同的代理协议类型，比如 Shadowsocks (SS)、ShadowsocksR (SSR)、VMess、VLESS、Trojan 等。以下是几款常见的 iOS 代理软件以及它们分别支持的协议和适用场景的简单对比：</p>\n<h3 id=\"1-Quantumult-X\"><a href=\"#1-Quantumult-X\" class=\"headerlink\" title=\"1. Quantumult X\"></a>1. <strong>Quantumult X</strong></h3><ul>\n<li><strong>支持协议</strong>：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan、VLESS</li>\n<li><strong>特点</strong>：支持多种协议和规则筛选，适合高级用户。可以灵活地使用脚本来做复杂的路由分流。</li>\n<li><strong>适用场景</strong>：适合对隐私和性能有较高要求的用户，可以实现丰富的定制功能，如广告过滤、分流、地理位置限制绕过等。</li>\n</ul>\n<h3 id=\"2-Shadowrocket\"><a href=\"#2-Shadowrocket\" class=\"headerlink\" title=\"2. Shadowrocket\"></a>2. <strong>Shadowrocket</strong></h3><ul>\n<li><strong>支持协议</strong>：Shadowsocks、VMess、Trojan、SOCKS5、HTTP(S)</li>\n<li><strong>特点</strong>：界面简洁，支持多种常见代理协议和分流，应用广泛。</li>\n<li><strong>适用场景</strong>：支持丰富的代理协议选择，可以满足普通用户到专业用户的需求。适合希望简单快捷设置代理的用户。</li>\n</ul>\n<h3 id=\"3-Kitsunebi\"><a href=\"#3-Kitsunebi\" class=\"headerlink\" title=\"3. Kitsunebi\"></a>3. <strong>Kitsunebi</strong></h3><ul>\n<li><strong>支持协议</strong>：VMess、Shadowsocks、SOCKS5、HTTP</li>\n<li><strong>特点</strong>：基于 V2Ray Core，支持 VMess 及多种常见协议。</li>\n<li><strong>适用场景</strong>：适合需要 VMess、Shadowsocks 等常用代理协议的用户，适合简单代理需求。</li>\n</ul>\n<h3 id=\"4-Loon\"><a href=\"#4-Loon\" class=\"headerlink\" title=\"4. Loon\"></a>4. <strong>Loon</strong></h3><ul>\n<li><strong>支持协议</strong>：HTTP、SOCKS5、Shadowsocks、VMess、Trojan</li>\n<li><strong>特点</strong>：功能全面，支持多种协议，提供分流策略与规则分组功能。</li>\n<li><strong>适用场景</strong>：适合需要自定义规则和高稳定性的用户，可以选择不同节点进行分流设置，适合多场景应用。</li>\n</ul>\n<h3 id=\"5-Surge\"><a href=\"#5-Surge\" class=\"headerlink\" title=\"5. Surge\"></a>5. <strong>Surge</strong></h3><ul>\n<li><strong>支持协议</strong>：HTTP、HTTPS、SOCKS5、Shadowsocks、VMess、Trojan</li>\n<li><strong>特点</strong>：支持多种规则设置，支持分流、流量统计、脚本等高级功能。</li>\n<li><strong>适用场景</strong>：适合需要精确控制代理流量、分流及调试网络流量的用户，常用于企业 VPN、应用开发测试。</li>\n</ul>\n<hr>\n<h3 id=\"代理协议类型及区别\"><a href=\"#代理协议类型及区别\" class=\"headerlink\" title=\"代理协议类型及区别\"></a>代理协议类型及区别</h3><ol>\n<li><p>**Shadowsocks (SS)**：</p>\n<ul>\n<li><strong>特点</strong>：轻量级加密代理，基于 SOCKS5，用于翻墙和绕过审查。</li>\n<li><strong>优点</strong>：速度快、资源占用低。</li>\n<li><strong>缺点</strong>：加密强度相对较低。</li>\n</ul>\n</li>\n<li><p>**ShadowsocksR (SSR)**：</p>\n<ul>\n<li><strong>特点</strong>：Shadowsocks 的改进版，添加了协议和混淆特性，提高隐匿性。</li>\n<li><strong>优点</strong>：更隐蔽、绕过特定限制更有效。</li>\n<li><strong>缺点</strong>：复杂度较高。</li>\n</ul>\n</li>\n<li><p><strong>VMess</strong>：</p>\n<ul>\n<li><strong>特点</strong>：V2Ray 的主要协议，支持 UUID 用户认证和内置加密。</li>\n<li><strong>优点</strong>：隐私性较好，适合严格审查环境。</li>\n<li><strong>缺点</strong>：加密占用资源较多。</li>\n</ul>\n</li>\n<li><p><strong>VLESS</strong>：</p>\n<ul>\n<li><strong>特点</strong>：VMess 的轻量版，取消了内置加密，支持与 TLS 等组合使用。</li>\n<li><strong>优点</strong>：高性能、低延迟。</li>\n<li><strong>缺点</strong>：需要 TLS 等额外加密。</li>\n</ul>\n</li>\n<li><p><strong>Trojan</strong>：</p>\n<ul>\n<li><strong>特点</strong>：基于 HTTPS 的代理协议，利用 TLS 来隐藏流量。</li>\n<li><strong>优点</strong>：伪装性强，适合流量检测环境。</li>\n<li><strong>缺点</strong>：依赖 TLS，速度受制于 HTTPS 传输性能。</li>\n</ul>\n</li>\n<li><p>**SOCKS5 &#x2F; HTTP(S)**：</p>\n<ul>\n<li><strong>特点</strong>：标准的代理协议，通常没有加密，适合局域网或需要简单代理的环境。</li>\n<li><strong>优点</strong>：速度快，兼容性好。</li>\n<li><strong>缺点</strong>：缺少加密，隐私性不佳。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不同的协议适合不同的需求场景，如 Shadowsocks 系列适合简单代理需求，而 Trojan、VMess 则适合有高隐私保护需求的用户。</p>\n"},{"title":"命令行工具 和 远程管理软件","date":"2024-11-24T10:38:18.093Z","_content":"远程控制服务器是管理和操作服务器的重要技能。以下总结了一些常用的 **命令行工具** 和 **远程管理软件**，涵盖 Linux 和 Windows 系统。\n\n------\n\n### **1. 常用远程控制工具**\n\n#### **1.1 SSH（Secure Shell）**\n\n- **适用场景**：远程登录 Linux/Unix 系统。\n- **主要功能**：安全加密的远程登录、文件传输和命令执行。\n\n**常用命令**：\n\n```bash\n# 连接服务器\nssh username@server_ip\n\n# 指定端口连接\nssh -p port_number username@server_ip\n\n# 退出 SSH 会话\nexit\n\n# 复制文件到服务器\nscp local_file username@server_ip:/path/to/remote/\n\n# 从服务器下载文件\nscp username@server_ip:/path/to/remote/file local_file\n```\n\n> **工具推荐**：Linux 和 macOS 系统自带 SSH 客户端；Windows 可以用 **PuTTY** 或 **Windows Terminal**。\n\n------\n\n#### **1.2 RDP（Remote Desktop Protocol）**\n\n- **适用场景**：远程控制 Windows 系统桌面。\n- **主要功能**：图形化远程控制，适合需要操作 GUI 的任务。\n\n**操作步骤**：\n\n1. 确保服务器已启用远程桌面（Windows 系统中设置）。\n2. 使用客户端工具：\n   - Windows：使用自带的 **远程桌面连接**（`mstsc`）。\n   - macOS 和 Linux：安装 **Microsoft Remote Desktop** 或 **Remmina**。\n\n**命令**：\n\n```bash\n# 在 Windows 打开远程桌面连接工具\nmstsc\n```\n\n------\n\n#### **1.3 FTP/SFTP**\n\n- **适用场景**：文件上传/下载。\n- **主要功能**：通过 FTP 或 SFTP 协议快速传输文件。\n\n**常用命令**（基于 `sftp`）：\n\n```bash\n# 连接服务器\nsftp username@server_ip\n\n# 上传文件\nput local_file /path/to/remote/\n\n# 下载文件\nget /path/to/remote/file local_file\n\n# 退出\nexit\n```\n\n> **工具推荐**：FileZilla、WinSCP（支持图形界面）。\n\n------\n\n#### **1.4 VNC（Virtual Network Computing）**\n\n- **适用场景**：远程控制 Linux 或 Windows 图形界面。\n- **主要功能**：提供远程桌面功能。\n\n**操作步骤**：\n\n1. 在服务器安装 VNC 服务（如 **TigerVNC** 或 **x11vnc**）。\n2. 客户端连接工具推荐：\n   - **RealVNC Viewer**。\n   - **TightVNC**。\n\n------\n\n#### **1.5 Web-based 管理工具**\n\n- 推荐工具\n\n  ：\n\n  1. **Cockpit**（适用于 Linux 系统，轻量级 Web 管理工具）。\n  2. **phpMyAdmin**（远程管理数据库）。\n  3. **Portainer**（用于 Docker 的图形化管理工具）。\n\n**安装 Cockpit**：\n\n```bash\nsudo apt install cockpit -y\nsudo systemctl enable --now cockpit\n```\n\n然后通过浏览器访问 `https://server_ip:9090` 登录。\n\n------\n\n### **2. 常用命令**\n\n#### **2.1 文件操作**\n\n```bash\n# 查看文件/目录\nls -l\n\n# 切换目录\ncd /path/to/directory\n\n# 创建文件或目录\ntouch file_name\nmkdir directory_name\n\n# 删除文件或目录\nrm file_name\nrm -r directory_name\n\n# 复制文件或目录\ncp source_file target_file\ncp -r source_directory target_directory\n\n# 移动文件或目录\nmv source_file target_file\n```\n\n------\n\n#### **2.2 用户管理**\n\n```bash\n# 添加用户\nsudo adduser username\n\n# 删除用户\nsudo deluser username\n\n# 切换用户\nsu username\n\n# 查看当前用户\nwhoami\n```\n\n------\n\n#### **2.3 网络管理**\n\n```bash\n# 查看网络状态\nifconfig      # 或 ip addr\n\n# 测试网络连通性\nping server_ip\n\n# 检查开放端口\nnetstat -tuln\n\n# 使用 nc 测试端口\nnc -zv server_ip port\n```\n\n------\n\n#### **2.4 服务管理**\n\n```bash\n# 启动服务\nsudo systemctl start service_name\n\n# 停止服务\nsudo systemctl stop service_name\n\n# 重启服务\nsudo systemctl restart service_name\n\n# 查看服务状态\nsudo systemctl status service_name\n```\n\n------\n\n### **3. 推荐的软件**\n\n| **软件/工具**                | **功能**              | **支持系统** |\n| ---------------------------- | --------------------- | ------------ |\n| **PuTTY**                    | SSH 客户端            | Windows      |\n| **WinSCP**                   | SFTP 文件传输         | Windows      |\n| **FileZilla**                | FTP/SFTP 文件传输     | 多平台       |\n| **RealVNC Viewer**           | 图形界面远程控制      | 多平台       |\n| **Microsoft Remote Desktop** | 远程桌面协议（RDP）   | 多平台       |\n| **Cockpit**                  | Linux 服务器 Web 管理 | Linux        |\n| **Portainer**                | Docker 图形管理       | 多平台       |\n\n------\n\n### **4. 提示与建议**\n\n1. **启用防火墙**：配置 UFW 或 iptables 保护服务器。\n\n   ```bash\n   sudo ufw allow ssh   # 开放 SSH\n   sudo ufw enable      # 启用防火墙\n   ```\n\n2. **使用强密码**：确保所有账户都使用强密码，避免被暴力破解。\n\n3. **定期更新系统**：保持服务器和软件更新以减少漏洞风险。\n\n4. **启用密钥认证**：对于 SSH，推荐使用密钥登录替代密码登录。\n\n如果需要某个软件或命令的具体配置，可以告诉我，我会提供详细的操作步骤！","source":"_posts/ 命令行工具 和 远程管理软件.md","raw":"---\ntitle:  命令行工具 和 远程管理软件\ndate: 2024-11-24T18:38:18.093Z\ntags: []\ncategories: []\n---\n远程控制服务器是管理和操作服务器的重要技能。以下总结了一些常用的 **命令行工具** 和 **远程管理软件**，涵盖 Linux 和 Windows 系统。\n\n------\n\n### **1. 常用远程控制工具**\n\n#### **1.1 SSH（Secure Shell）**\n\n- **适用场景**：远程登录 Linux/Unix 系统。\n- **主要功能**：安全加密的远程登录、文件传输和命令执行。\n\n**常用命令**：\n\n```bash\n# 连接服务器\nssh username@server_ip\n\n# 指定端口连接\nssh -p port_number username@server_ip\n\n# 退出 SSH 会话\nexit\n\n# 复制文件到服务器\nscp local_file username@server_ip:/path/to/remote/\n\n# 从服务器下载文件\nscp username@server_ip:/path/to/remote/file local_file\n```\n\n> **工具推荐**：Linux 和 macOS 系统自带 SSH 客户端；Windows 可以用 **PuTTY** 或 **Windows Terminal**。\n\n------\n\n#### **1.2 RDP（Remote Desktop Protocol）**\n\n- **适用场景**：远程控制 Windows 系统桌面。\n- **主要功能**：图形化远程控制，适合需要操作 GUI 的任务。\n\n**操作步骤**：\n\n1. 确保服务器已启用远程桌面（Windows 系统中设置）。\n2. 使用客户端工具：\n   - Windows：使用自带的 **远程桌面连接**（`mstsc`）。\n   - macOS 和 Linux：安装 **Microsoft Remote Desktop** 或 **Remmina**。\n\n**命令**：\n\n```bash\n# 在 Windows 打开远程桌面连接工具\nmstsc\n```\n\n------\n\n#### **1.3 FTP/SFTP**\n\n- **适用场景**：文件上传/下载。\n- **主要功能**：通过 FTP 或 SFTP 协议快速传输文件。\n\n**常用命令**（基于 `sftp`）：\n\n```bash\n# 连接服务器\nsftp username@server_ip\n\n# 上传文件\nput local_file /path/to/remote/\n\n# 下载文件\nget /path/to/remote/file local_file\n\n# 退出\nexit\n```\n\n> **工具推荐**：FileZilla、WinSCP（支持图形界面）。\n\n------\n\n#### **1.4 VNC（Virtual Network Computing）**\n\n- **适用场景**：远程控制 Linux 或 Windows 图形界面。\n- **主要功能**：提供远程桌面功能。\n\n**操作步骤**：\n\n1. 在服务器安装 VNC 服务（如 **TigerVNC** 或 **x11vnc**）。\n2. 客户端连接工具推荐：\n   - **RealVNC Viewer**。\n   - **TightVNC**。\n\n------\n\n#### **1.5 Web-based 管理工具**\n\n- 推荐工具\n\n  ：\n\n  1. **Cockpit**（适用于 Linux 系统，轻量级 Web 管理工具）。\n  2. **phpMyAdmin**（远程管理数据库）。\n  3. **Portainer**（用于 Docker 的图形化管理工具）。\n\n**安装 Cockpit**：\n\n```bash\nsudo apt install cockpit -y\nsudo systemctl enable --now cockpit\n```\n\n然后通过浏览器访问 `https://server_ip:9090` 登录。\n\n------\n\n### **2. 常用命令**\n\n#### **2.1 文件操作**\n\n```bash\n# 查看文件/目录\nls -l\n\n# 切换目录\ncd /path/to/directory\n\n# 创建文件或目录\ntouch file_name\nmkdir directory_name\n\n# 删除文件或目录\nrm file_name\nrm -r directory_name\n\n# 复制文件或目录\ncp source_file target_file\ncp -r source_directory target_directory\n\n# 移动文件或目录\nmv source_file target_file\n```\n\n------\n\n#### **2.2 用户管理**\n\n```bash\n# 添加用户\nsudo adduser username\n\n# 删除用户\nsudo deluser username\n\n# 切换用户\nsu username\n\n# 查看当前用户\nwhoami\n```\n\n------\n\n#### **2.3 网络管理**\n\n```bash\n# 查看网络状态\nifconfig      # 或 ip addr\n\n# 测试网络连通性\nping server_ip\n\n# 检查开放端口\nnetstat -tuln\n\n# 使用 nc 测试端口\nnc -zv server_ip port\n```\n\n------\n\n#### **2.4 服务管理**\n\n```bash\n# 启动服务\nsudo systemctl start service_name\n\n# 停止服务\nsudo systemctl stop service_name\n\n# 重启服务\nsudo systemctl restart service_name\n\n# 查看服务状态\nsudo systemctl status service_name\n```\n\n------\n\n### **3. 推荐的软件**\n\n| **软件/工具**                | **功能**              | **支持系统** |\n| ---------------------------- | --------------------- | ------------ |\n| **PuTTY**                    | SSH 客户端            | Windows      |\n| **WinSCP**                   | SFTP 文件传输         | Windows      |\n| **FileZilla**                | FTP/SFTP 文件传输     | 多平台       |\n| **RealVNC Viewer**           | 图形界面远程控制      | 多平台       |\n| **Microsoft Remote Desktop** | 远程桌面协议（RDP）   | 多平台       |\n| **Cockpit**                  | Linux 服务器 Web 管理 | Linux        |\n| **Portainer**                | Docker 图形管理       | 多平台       |\n\n------\n\n### **4. 提示与建议**\n\n1. **启用防火墙**：配置 UFW 或 iptables 保护服务器。\n\n   ```bash\n   sudo ufw allow ssh   # 开放 SSH\n   sudo ufw enable      # 启用防火墙\n   ```\n\n2. **使用强密码**：确保所有账户都使用强密码，避免被暴力破解。\n\n3. **定期更新系统**：保持服务器和软件更新以减少漏洞风险。\n\n4. **启用密钥认证**：对于 SSH，推荐使用密钥登录替代密码登录。\n\n如果需要某个软件或命令的具体配置，可以告诉我，我会提供详细的操作步骤！","slug":" 命令行工具 和 远程管理软件","published":1,"updated":"2024-11-25T11:44:04.665Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsey003embs6h7b86xsi","content":"<p>远程控制服务器是管理和操作服务器的重要技能。以下总结了一些常用的 <strong>命令行工具</strong> 和 <strong>远程管理软件</strong>，涵盖 Linux 和 Windows 系统。</p>\n<hr>\n<h3 id=\"1-常用远程控制工具\"><a href=\"#1-常用远程控制工具\" class=\"headerlink\" title=\"1. 常用远程控制工具\"></a><strong>1. 常用远程控制工具</strong></h3><h4 id=\"1-1-SSH（Secure-Shell）\"><a href=\"#1-1-SSH（Secure-Shell）\" class=\"headerlink\" title=\"1.1 SSH（Secure Shell）\"></a><strong>1.1 SSH（Secure Shell）</strong></h4><ul>\n<li><strong>适用场景</strong>：远程登录 Linux&#x2F;Unix 系统。</li>\n<li><strong>主要功能</strong>：安全加密的远程登录、文件传输和命令执行。</li>\n</ul>\n<p><strong>常用命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接服务器</span></span><br><span class=\"line\">ssh username@server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定端口连接</span></span><br><span class=\"line\">ssh -p port_number username@server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出 SSH 会话</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制文件到服务器</span></span><br><span class=\"line\">scp local_file username@server_ip:/path/to/remote/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从服务器下载文件</span></span><br><span class=\"line\">scp username@server_ip:/path/to/remote/file local_file</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>工具推荐</strong>：Linux 和 macOS 系统自带 SSH 客户端；Windows 可以用 <strong>PuTTY</strong> 或 <strong>Windows Terminal</strong>。</p>\n</blockquote>\n<hr>\n<h4 id=\"1-2-RDP（Remote-Desktop-Protocol）\"><a href=\"#1-2-RDP（Remote-Desktop-Protocol）\" class=\"headerlink\" title=\"1.2 RDP（Remote Desktop Protocol）\"></a><strong>1.2 RDP（Remote Desktop Protocol）</strong></h4><ul>\n<li><strong>适用场景</strong>：远程控制 Windows 系统桌面。</li>\n<li><strong>主要功能</strong>：图形化远程控制，适合需要操作 GUI 的任务。</li>\n</ul>\n<p><strong>操作步骤</strong>：</p>\n<ol>\n<li>确保服务器已启用远程桌面（Windows 系统中设置）。</li>\n<li>使用客户端工具：<ul>\n<li>Windows：使用自带的 <strong>远程桌面连接</strong>（<code>mstsc</code>）。</li>\n<li>macOS 和 Linux：安装 <strong>Microsoft Remote Desktop</strong> 或 <strong>Remmina</strong>。</li>\n</ul>\n</li>\n</ol>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 Windows 打开远程桌面连接工具</span></span><br><span class=\"line\">mstsc</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1-3-FTP-SFTP\"><a href=\"#1-3-FTP-SFTP\" class=\"headerlink\" title=\"1.3 FTP&#x2F;SFTP\"></a><strong>1.3 FTP&#x2F;SFTP</strong></h4><ul>\n<li><strong>适用场景</strong>：文件上传&#x2F;下载。</li>\n<li><strong>主要功能</strong>：通过 FTP 或 SFTP 协议快速传输文件。</li>\n</ul>\n<p><strong>常用命令</strong>（基于 <code>sftp</code>）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接服务器</span></span><br><span class=\"line\">sftp username@server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传文件</span></span><br><span class=\"line\">put local_file /path/to/remote/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">get /path/to/remote/file local_file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>工具推荐</strong>：FileZilla、WinSCP（支持图形界面）。</p>\n</blockquote>\n<hr>\n<h4 id=\"1-4-VNC（Virtual-Network-Computing）\"><a href=\"#1-4-VNC（Virtual-Network-Computing）\" class=\"headerlink\" title=\"1.4 VNC（Virtual Network Computing）\"></a><strong>1.4 VNC（Virtual Network Computing）</strong></h4><ul>\n<li><strong>适用场景</strong>：远程控制 Linux 或 Windows 图形界面。</li>\n<li><strong>主要功能</strong>：提供远程桌面功能。</li>\n</ul>\n<p><strong>操作步骤</strong>：</p>\n<ol>\n<li>在服务器安装 VNC 服务（如 <strong>TigerVNC</strong> 或 <strong>x11vnc</strong>）。</li>\n<li>客户端连接工具推荐：<ul>\n<li><strong>RealVNC Viewer</strong>。</li>\n<li><strong>TightVNC</strong>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"1-5-Web-based-管理工具\"><a href=\"#1-5-Web-based-管理工具\" class=\"headerlink\" title=\"1.5 Web-based 管理工具\"></a><strong>1.5 Web-based 管理工具</strong></h4><ul>\n<li><p>推荐工具</p>\n<p>：</p>\n<ol>\n<li><strong>Cockpit</strong>（适用于 Linux 系统，轻量级 Web 管理工具）。</li>\n<li><strong>phpMyAdmin</strong>（远程管理数据库）。</li>\n<li><strong>Portainer</strong>（用于 Docker 的图形化管理工具）。</li>\n</ol>\n</li>\n</ul>\n<p><strong>安装 Cockpit</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install cockpit -y</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> --now cockpit</span><br></pre></td></tr></table></figure>\n\n<p>然后通过浏览器访问 <code>https://server_ip:9090</code> 登录。</p>\n<hr>\n<h3 id=\"2-常用命令\"><a href=\"#2-常用命令\" class=\"headerlink\" title=\"2. 常用命令\"></a><strong>2. 常用命令</strong></h3><h4 id=\"2-1-文件操作\"><a href=\"#2-1-文件操作\" class=\"headerlink\" title=\"2.1 文件操作\"></a><strong>2.1 文件操作</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看文件/目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> file_name</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> directory_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> file_name</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r directory_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> source_file target_file</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r source_directory target_directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> source_file target_file</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-2-用户管理\"><a href=\"#2-2-用户管理\" class=\"headerlink\" title=\"2.2 用户管理\"></a><strong>2.2 用户管理</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> adduser username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> deluser username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换用户</span></span><br><span class=\"line\">su username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户</span></span><br><span class=\"line\"><span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-3-网络管理\"><a href=\"#2-3-网络管理\" class=\"headerlink\" title=\"2.3 网络管理\"></a><strong>2.3 网络管理</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看网络状态</span></span><br><span class=\"line\">ifconfig      <span class=\"comment\"># 或 ip addr</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试网络连通性</span></span><br><span class=\"line\">ping server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查开放端口</span></span><br><span class=\"line\">netstat -tuln</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 nc 测试端口</span></span><br><span class=\"line\">nc -zv server_ip port</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-4-服务管理\"><a href=\"#2-4-服务管理\" class=\"headerlink\" title=\"2.4 服务管理\"></a><strong>2.4 服务管理</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start service_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop service_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart service_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status service_name</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-推荐的软件\"><a href=\"#3-推荐的软件\" class=\"headerlink\" title=\"3. 推荐的软件\"></a><strong>3. 推荐的软件</strong></h3><table>\n<thead>\n<tr>\n<th><strong>软件&#x2F;工具</strong></th>\n<th><strong>功能</strong></th>\n<th><strong>支持系统</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>PuTTY</strong></td>\n<td>SSH 客户端</td>\n<td>Windows</td>\n</tr>\n<tr>\n<td><strong>WinSCP</strong></td>\n<td>SFTP 文件传输</td>\n<td>Windows</td>\n</tr>\n<tr>\n<td><strong>FileZilla</strong></td>\n<td>FTP&#x2F;SFTP 文件传输</td>\n<td>多平台</td>\n</tr>\n<tr>\n<td><strong>RealVNC Viewer</strong></td>\n<td>图形界面远程控制</td>\n<td>多平台</td>\n</tr>\n<tr>\n<td><strong>Microsoft Remote Desktop</strong></td>\n<td>远程桌面协议（RDP）</td>\n<td>多平台</td>\n</tr>\n<tr>\n<td><strong>Cockpit</strong></td>\n<td>Linux 服务器 Web 管理</td>\n<td>Linux</td>\n</tr>\n<tr>\n<td><strong>Portainer</strong></td>\n<td>Docker 图形管理</td>\n<td>多平台</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"4-提示与建议\"><a href=\"#4-提示与建议\" class=\"headerlink\" title=\"4. 提示与建议\"></a><strong>4. 提示与建议</strong></h3><ol>\n<li><p><strong>启用防火墙</strong>：配置 UFW 或 iptables 保护服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ufw allow ssh   <span class=\"comment\"># 开放 SSH</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ufw <span class=\"built_in\">enable</span>      <span class=\"comment\"># 启用防火墙</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用强密码</strong>：确保所有账户都使用强密码，避免被暴力破解。</p>\n</li>\n<li><p><strong>定期更新系统</strong>：保持服务器和软件更新以减少漏洞风险。</p>\n</li>\n<li><p><strong>启用密钥认证</strong>：对于 SSH，推荐使用密钥登录替代密码登录。</p>\n</li>\n</ol>\n<p>如果需要某个软件或命令的具体配置，可以告诉我，我会提供详细的操作步骤！</p>\n","excerpt":"","more":"<p>远程控制服务器是管理和操作服务器的重要技能。以下总结了一些常用的 <strong>命令行工具</strong> 和 <strong>远程管理软件</strong>，涵盖 Linux 和 Windows 系统。</p>\n<hr>\n<h3 id=\"1-常用远程控制工具\"><a href=\"#1-常用远程控制工具\" class=\"headerlink\" title=\"1. 常用远程控制工具\"></a><strong>1. 常用远程控制工具</strong></h3><h4 id=\"1-1-SSH（Secure-Shell）\"><a href=\"#1-1-SSH（Secure-Shell）\" class=\"headerlink\" title=\"1.1 SSH（Secure Shell）\"></a><strong>1.1 SSH（Secure Shell）</strong></h4><ul>\n<li><strong>适用场景</strong>：远程登录 Linux&#x2F;Unix 系统。</li>\n<li><strong>主要功能</strong>：安全加密的远程登录、文件传输和命令执行。</li>\n</ul>\n<p><strong>常用命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接服务器</span></span><br><span class=\"line\">ssh username@server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定端口连接</span></span><br><span class=\"line\">ssh -p port_number username@server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出 SSH 会话</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制文件到服务器</span></span><br><span class=\"line\">scp local_file username@server_ip:/path/to/remote/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从服务器下载文件</span></span><br><span class=\"line\">scp username@server_ip:/path/to/remote/file local_file</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>工具推荐</strong>：Linux 和 macOS 系统自带 SSH 客户端；Windows 可以用 <strong>PuTTY</strong> 或 <strong>Windows Terminal</strong>。</p>\n</blockquote>\n<hr>\n<h4 id=\"1-2-RDP（Remote-Desktop-Protocol）\"><a href=\"#1-2-RDP（Remote-Desktop-Protocol）\" class=\"headerlink\" title=\"1.2 RDP（Remote Desktop Protocol）\"></a><strong>1.2 RDP（Remote Desktop Protocol）</strong></h4><ul>\n<li><strong>适用场景</strong>：远程控制 Windows 系统桌面。</li>\n<li><strong>主要功能</strong>：图形化远程控制，适合需要操作 GUI 的任务。</li>\n</ul>\n<p><strong>操作步骤</strong>：</p>\n<ol>\n<li>确保服务器已启用远程桌面（Windows 系统中设置）。</li>\n<li>使用客户端工具：<ul>\n<li>Windows：使用自带的 <strong>远程桌面连接</strong>（<code>mstsc</code>）。</li>\n<li>macOS 和 Linux：安装 <strong>Microsoft Remote Desktop</strong> 或 <strong>Remmina</strong>。</li>\n</ul>\n</li>\n</ol>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 Windows 打开远程桌面连接工具</span></span><br><span class=\"line\">mstsc</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1-3-FTP-SFTP\"><a href=\"#1-3-FTP-SFTP\" class=\"headerlink\" title=\"1.3 FTP&#x2F;SFTP\"></a><strong>1.3 FTP&#x2F;SFTP</strong></h4><ul>\n<li><strong>适用场景</strong>：文件上传&#x2F;下载。</li>\n<li><strong>主要功能</strong>：通过 FTP 或 SFTP 协议快速传输文件。</li>\n</ul>\n<p><strong>常用命令</strong>（基于 <code>sftp</code>）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接服务器</span></span><br><span class=\"line\">sftp username@server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传文件</span></span><br><span class=\"line\">put local_file /path/to/remote/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">get /path/to/remote/file local_file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>工具推荐</strong>：FileZilla、WinSCP（支持图形界面）。</p>\n</blockquote>\n<hr>\n<h4 id=\"1-4-VNC（Virtual-Network-Computing）\"><a href=\"#1-4-VNC（Virtual-Network-Computing）\" class=\"headerlink\" title=\"1.4 VNC（Virtual Network Computing）\"></a><strong>1.4 VNC（Virtual Network Computing）</strong></h4><ul>\n<li><strong>适用场景</strong>：远程控制 Linux 或 Windows 图形界面。</li>\n<li><strong>主要功能</strong>：提供远程桌面功能。</li>\n</ul>\n<p><strong>操作步骤</strong>：</p>\n<ol>\n<li>在服务器安装 VNC 服务（如 <strong>TigerVNC</strong> 或 <strong>x11vnc</strong>）。</li>\n<li>客户端连接工具推荐：<ul>\n<li><strong>RealVNC Viewer</strong>。</li>\n<li><strong>TightVNC</strong>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"1-5-Web-based-管理工具\"><a href=\"#1-5-Web-based-管理工具\" class=\"headerlink\" title=\"1.5 Web-based 管理工具\"></a><strong>1.5 Web-based 管理工具</strong></h4><ul>\n<li><p>推荐工具</p>\n<p>：</p>\n<ol>\n<li><strong>Cockpit</strong>（适用于 Linux 系统，轻量级 Web 管理工具）。</li>\n<li><strong>phpMyAdmin</strong>（远程管理数据库）。</li>\n<li><strong>Portainer</strong>（用于 Docker 的图形化管理工具）。</li>\n</ol>\n</li>\n</ul>\n<p><strong>安装 Cockpit</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install cockpit -y</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> --now cockpit</span><br></pre></td></tr></table></figure>\n\n<p>然后通过浏览器访问 <code>https://server_ip:9090</code> 登录。</p>\n<hr>\n<h3 id=\"2-常用命令\"><a href=\"#2-常用命令\" class=\"headerlink\" title=\"2. 常用命令\"></a><strong>2. 常用命令</strong></h3><h4 id=\"2-1-文件操作\"><a href=\"#2-1-文件操作\" class=\"headerlink\" title=\"2.1 文件操作\"></a><strong>2.1 文件操作</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看文件/目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> file_name</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> directory_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> file_name</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r directory_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> source_file target_file</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r source_directory target_directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动文件或目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> source_file target_file</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-2-用户管理\"><a href=\"#2-2-用户管理\" class=\"headerlink\" title=\"2.2 用户管理\"></a><strong>2.2 用户管理</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> adduser username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> deluser username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换用户</span></span><br><span class=\"line\">su username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户</span></span><br><span class=\"line\"><span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-3-网络管理\"><a href=\"#2-3-网络管理\" class=\"headerlink\" title=\"2.3 网络管理\"></a><strong>2.3 网络管理</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看网络状态</span></span><br><span class=\"line\">ifconfig      <span class=\"comment\"># 或 ip addr</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试网络连通性</span></span><br><span class=\"line\">ping server_ip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查开放端口</span></span><br><span class=\"line\">netstat -tuln</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 nc 测试端口</span></span><br><span class=\"line\">nc -zv server_ip port</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-4-服务管理\"><a href=\"#2-4-服务管理\" class=\"headerlink\" title=\"2.4 服务管理\"></a><strong>2.4 服务管理</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start service_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop service_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart service_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status service_name</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-推荐的软件\"><a href=\"#3-推荐的软件\" class=\"headerlink\" title=\"3. 推荐的软件\"></a><strong>3. 推荐的软件</strong></h3><table>\n<thead>\n<tr>\n<th><strong>软件&#x2F;工具</strong></th>\n<th><strong>功能</strong></th>\n<th><strong>支持系统</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>PuTTY</strong></td>\n<td>SSH 客户端</td>\n<td>Windows</td>\n</tr>\n<tr>\n<td><strong>WinSCP</strong></td>\n<td>SFTP 文件传输</td>\n<td>Windows</td>\n</tr>\n<tr>\n<td><strong>FileZilla</strong></td>\n<td>FTP&#x2F;SFTP 文件传输</td>\n<td>多平台</td>\n</tr>\n<tr>\n<td><strong>RealVNC Viewer</strong></td>\n<td>图形界面远程控制</td>\n<td>多平台</td>\n</tr>\n<tr>\n<td><strong>Microsoft Remote Desktop</strong></td>\n<td>远程桌面协议（RDP）</td>\n<td>多平台</td>\n</tr>\n<tr>\n<td><strong>Cockpit</strong></td>\n<td>Linux 服务器 Web 管理</td>\n<td>Linux</td>\n</tr>\n<tr>\n<td><strong>Portainer</strong></td>\n<td>Docker 图形管理</td>\n<td>多平台</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"4-提示与建议\"><a href=\"#4-提示与建议\" class=\"headerlink\" title=\"4. 提示与建议\"></a><strong>4. 提示与建议</strong></h3><ol>\n<li><p><strong>启用防火墙</strong>：配置 UFW 或 iptables 保护服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ufw allow ssh   <span class=\"comment\"># 开放 SSH</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ufw <span class=\"built_in\">enable</span>      <span class=\"comment\"># 启用防火墙</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用强密码</strong>：确保所有账户都使用强密码，避免被暴力破解。</p>\n</li>\n<li><p><strong>定期更新系统</strong>：保持服务器和软件更新以减少漏洞风险。</p>\n</li>\n<li><p><strong>启用密钥认证</strong>：对于 SSH，推荐使用密钥登录替代密码登录。</p>\n</li>\n</ol>\n<p>如果需要某个软件或命令的具体配置，可以告诉我，我会提供详细的操作步骤！</p>\n"},{"title":"《黑神话·悟空》导图拆解攻略：","date":"2024-09-04T23:57:17.064Z","_content":"# 《黑神话·悟空》导图拆解攻略：\n\n🎮 超详细《黑神话·悟空》新手向导图拆解攻略来啦！今天帮大家整理了一份超全的导图拆解，希望能助力大家更轻松地开启西游冒险之旅～\n\n![wukong](http://img.lyone.xyz/img/wukong.png)\n\n\n\n📌 **初始地图：**\n\n进入游戏后，首先你会来到一片山谷，这里是新手村的感觉，主要任务是熟悉操作。别急着跑任务，先在周围转一圈，收集一些隐藏的小道具，特别是回血药水，关键时刻能救命哦！\n\n\n\n🗺 **中期地图：**\n\n打到中期，游戏难度会有明显提升。怪物的强度和数量增加，建议多利用环境中的地形来躲避攻击，尤其是在狭窄的走廊里！小贴士：某些关卡的隐藏路线能让你避开一场恶战，省下不少血条呢~\n\n\n\n💥 **终极BOSS地图：**\n\n到了最后BOSS战，你会发现自己来到了一个完全陌生的大场景。这个时候一定要冷静，BOSS攻击频率超高，记得多观察他的攻击前摇！而且在地图的角落还藏有一枚强力道具，千万别错过~\n\n\n\n✨ **最后的温馨提醒：**\n\n《黑神话·悟空》虽然画面惊艳，但难度也不低！不要急着闯关，多观察、多思考，享受游戏的过程，才是最重要的哦～\n\n\n\n快点收藏这个攻略，带上你的小伙伴一起打怪升级吧！🎉\n\n\n\n\\#黑神话悟空 #游戏攻略 #导图拆解 #新手必看","source":"_posts/《黑神话·悟空》导图拆解攻略：.md","raw":"---\ntitle: 《黑神话·悟空》导图拆解攻略：\ndate: 2024-09-05T07:57:17.064Z\ntags: []\ncategories: []\n---\n# 《黑神话·悟空》导图拆解攻略：\n\n🎮 超详细《黑神话·悟空》新手向导图拆解攻略来啦！今天帮大家整理了一份超全的导图拆解，希望能助力大家更轻松地开启西游冒险之旅～\n\n![wukong](http://img.lyone.xyz/img/wukong.png)\n\n\n\n📌 **初始地图：**\n\n进入游戏后，首先你会来到一片山谷，这里是新手村的感觉，主要任务是熟悉操作。别急着跑任务，先在周围转一圈，收集一些隐藏的小道具，特别是回血药水，关键时刻能救命哦！\n\n\n\n🗺 **中期地图：**\n\n打到中期，游戏难度会有明显提升。怪物的强度和数量增加，建议多利用环境中的地形来躲避攻击，尤其是在狭窄的走廊里！小贴士：某些关卡的隐藏路线能让你避开一场恶战，省下不少血条呢~\n\n\n\n💥 **终极BOSS地图：**\n\n到了最后BOSS战，你会发现自己来到了一个完全陌生的大场景。这个时候一定要冷静，BOSS攻击频率超高，记得多观察他的攻击前摇！而且在地图的角落还藏有一枚强力道具，千万别错过~\n\n\n\n✨ **最后的温馨提醒：**\n\n《黑神话·悟空》虽然画面惊艳，但难度也不低！不要急着闯关，多观察、多思考，享受游戏的过程，才是最重要的哦～\n\n\n\n快点收藏这个攻略，带上你的小伙伴一起打怪升级吧！🎉\n\n\n\n\\#黑神话悟空 #游戏攻略 #导图拆解 #新手必看","slug":"《黑神话·悟空》导图拆解攻略：","published":1,"updated":"2024-11-25T11:44:04.654Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsey003fmbs64t8dgeo9","content":"<h1 id=\"《黑神话·悟空》导图拆解攻略：\"><a href=\"#《黑神话·悟空》导图拆解攻略：\" class=\"headerlink\" title=\"《黑神话·悟空》导图拆解攻略：\"></a>《黑神话·悟空》导图拆解攻略：</h1><p>🎮 超详细《黑神话·悟空》新手向导图拆解攻略来啦！今天帮大家整理了一份超全的导图拆解，希望能助力大家更轻松地开启西游冒险之旅～</p>\n<p><img src=\"http://img.lyone.xyz/img/wukong.png\" alt=\"wukong\"></p>\n<p>📌 <strong>初始地图：</strong></p>\n<p>进入游戏后，首先你会来到一片山谷，这里是新手村的感觉，主要任务是熟悉操作。别急着跑任务，先在周围转一圈，收集一些隐藏的小道具，特别是回血药水，关键时刻能救命哦！</p>\n<p>🗺 <strong>中期地图：</strong></p>\n<p>打到中期，游戏难度会有明显提升。怪物的强度和数量增加，建议多利用环境中的地形来躲避攻击，尤其是在狭窄的走廊里！小贴士：某些关卡的隐藏路线能让你避开一场恶战，省下不少血条呢~</p>\n<p>💥 <strong>终极BOSS地图：</strong></p>\n<p>到了最后BOSS战，你会发现自己来到了一个完全陌生的大场景。这个时候一定要冷静，BOSS攻击频率超高，记得多观察他的攻击前摇！而且在地图的角落还藏有一枚强力道具，千万别错过~</p>\n<p>✨ <strong>最后的温馨提醒：</strong></p>\n<p>《黑神话·悟空》虽然画面惊艳，但难度也不低！不要急着闯关，多观察、多思考，享受游戏的过程，才是最重要的哦～</p>\n<p>快点收藏这个攻略，带上你的小伙伴一起打怪升级吧！🎉</p>\n<p>#黑神话悟空 #游戏攻略 #导图拆解 #新手必看</p>\n","excerpt":"","more":"<h1 id=\"《黑神话·悟空》导图拆解攻略：\"><a href=\"#《黑神话·悟空》导图拆解攻略：\" class=\"headerlink\" title=\"《黑神话·悟空》导图拆解攻略：\"></a>《黑神话·悟空》导图拆解攻略：</h1><p>🎮 超详细《黑神话·悟空》新手向导图拆解攻略来啦！今天帮大家整理了一份超全的导图拆解，希望能助力大家更轻松地开启西游冒险之旅～</p>\n<p><img src=\"http://img.lyone.xyz/img/wukong.png\" alt=\"wukong\"></p>\n<p>📌 <strong>初始地图：</strong></p>\n<p>进入游戏后，首先你会来到一片山谷，这里是新手村的感觉，主要任务是熟悉操作。别急着跑任务，先在周围转一圈，收集一些隐藏的小道具，特别是回血药水，关键时刻能救命哦！</p>\n<p>🗺 <strong>中期地图：</strong></p>\n<p>打到中期，游戏难度会有明显提升。怪物的强度和数量增加，建议多利用环境中的地形来躲避攻击，尤其是在狭窄的走廊里！小贴士：某些关卡的隐藏路线能让你避开一场恶战，省下不少血条呢~</p>\n<p>💥 <strong>终极BOSS地图：</strong></p>\n<p>到了最后BOSS战，你会发现自己来到了一个完全陌生的大场景。这个时候一定要冷静，BOSS攻击频率超高，记得多观察他的攻击前摇！而且在地图的角落还藏有一枚强力道具，千万别错过~</p>\n<p>✨ <strong>最后的温馨提醒：</strong></p>\n<p>《黑神话·悟空》虽然画面惊艳，但难度也不低！不要急着闯关，多观察、多思考，享受游戏的过程，才是最重要的哦～</p>\n<p>快点收藏这个攻略，带上你的小伙伴一起打怪升级吧！🎉</p>\n<p>#黑神话悟空 #游戏攻略 #导图拆解 #新手必看</p>\n"},{"title":"【1】VI与VIM区别","date":"2024-10-30T12:22:47.009Z","_content":"### **【1】VI与VIM区别**\n\n它们都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。\n\n**vim的这些优势主要体现在以下几个方面：**\n\n① 多级撤消\n\n我们知道在vi里，按 u只能撤消上次命令，而在vim里可以无限制的撤消。\n\n② 易用性\n\nvi只能运行于unix中，而vim不仅可以运行于unix,windows ,mac等多操作平台。\n\n③ 语法加亮\n\nvim可以用不同的颜色来加亮你的代码。\n\n④ 可视化操作\n\n就是说vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。\n\n⑤ 对vi的完全兼容\n\n某些情况下，你可以把vim当成vi来使用。\n\nvi和vim都是Linux中的编辑器，不同的是vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding。\n\n------\n\n### **【2】VI命令**\n\n#### **vi有3个模式**\n\n- 命令行模式 （command mode/一般模式）\n- 文本输入模式 （input mode/编辑模式）\n- 末行模式 （last line mode/指令列命令模式）。\n\n#### **① 命令行模式 （command mode/一般模式）**\n\n任何时候，不管用户处于何种模式，只要按一下“ESC”键，即可使Vi进入命令行模式。我们在shell环境（提示符为$）下输入启动Vi命令，进入编辑器时，也是处于该模式下。\n　　\n在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。\n\n------\n\n#### **② 文本输入模式 （input mode/编辑模式）**\n\n在命令模式下输入插入命令i(insert)、附加命令a(append)、打开命令o(open)、修改命令c(change)、取代命令r或替换命令s都可以进入文本输入模式。\n\n在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按\"ESC\"键即可。\n\n------\n\n#### **③ 末行模式 （last line mode/指令列命令模式）**\n\n末行模式也称ex转义模式。\n\nVi和Ex编辑器的功能是相同的，二者主要区别是用户界面。\n\n在Vi中，命令通常是单个键，例如i、a、o等；而在Ex中，命令是以按回车键结束的正文行。Vi有一个专门的“转义”命令，可访问很多面向行的Ex命令。\n\n在命令模式下，用户按`“:”`键即可进入末行模式下，此时Vi会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个`“:”`作为末行模式的提示符，等待用户输入命令。\n\n多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。末行命令执行完后，Vi自动回到命令模式。\n\n------\n\n### **【3】VIM命令**\n\n#### **vim一共有4个模式：**\n\n1. 正常模式 (Normal-mode)\n2. 插入模式 (Insert-mode)\n3. 命令模式 (Command-mode)\n4. 可视模式 (Visual-mode)\n\n------\n\n#### **① 正常模式**\n\n启动vim后默认处于正常模式。不论位于什么模式，按下`<Esc>`键(有时需要按两下）都会进入正常模式。\n\n#### **② 插入模式**\n\n在正常模式中按下i, I, a, A等键，会进入插入模式。\n\n现在只用记住按`i`键会进行插入模式。在插入模式中，击键时会写入相应的字符。\n\n#### **③ 命令模式**\n\n在正常模式中，按下`:`（英文冒号）键，会进入命令模式。\n\n在命令模式中可以执行一些输入并执行一些vim或插件提供的指令，就像在shell里一样。这些指令包括设置环境、文件操作、调用某个功能等等。\n\n常用的命令有：q（退出）、q!（强制退出）、w（保存）、wq（保存并退出）。\n\n#### **④ 可视模式**\n\n在正常模式中按下v, V, `<Ctrl>+v`，可以进入可视模式。\n\n可视模式中的操作有点像拿鼠标进行操作，选择文本的时候有一种鼠标选择的即视感，有时候会很方便。\n\n------\n\n#### **打开文件、保存、关闭文件(vim命令模式下使用)**\n\n命令的使用请先按ESC进入命令模式！\n\n```\nvim filename        //打开filename文件 \n\n:w     \t            //保存文件 \n:w vpser.net       //保存至vpser.net文件 \n:q                //退出编辑器，如果文件已修改请使用下面的命令 \n:q!              //退出编辑器，且不保存 \n:wq            //退出编辑器，且保存文件 \n:x\t\t\t  //退出编辑器，且保存文件 \n12345678\n```\n\n修改：Insert键\n\n------\n\n**插入文本或行(vim命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)**\n\n```\na        //在当前光标位置的右边添加文本 \ni       //在当前光标位置的左边添加文本 \nA       //在当前行的末尾位置添加文本 \nI      //在当前行的开始处添加文本(非空字符的行首) \nO      //在当前行的上面新建一行 \no     //在当前行的下面新建一行 \nR     //替换(覆盖)当前光标位置及后面的若干文本 \nJ    //合并光标所在行及下一行为一行(依然在命令模式) \n12345678\n```\n\n------\n\n#### **⑤ VIM下解决文本格式问题**\n\n脚本文件保存时使用了DOS格式，Linux中可能会看到这样的错误：`/bin/sh^M：损坏的解释器: 没有那个文件或目录`\n\n使用[VIM命令](https://so.csdn.net/so/search?q=VIM命令&spm=1001.2101.3001.7020)，进入命令行模式，执行如下操作即可。\n\n```\n:set ff=unix\n:wq\n12\n```\n\n------\n\n### **【4】VIM快捷键使用**\n\n#### **① 删除光标当前行**\n\n正常模式下使用`dd`命令。\n\n**其他快捷键操作参考如下：**\n\n```\nCtrl+u：向文件首翻半屏；\nCtrl+d：向文件尾翻半屏；\nCtrl+f：向文件尾翻一屏；\nCtrl+b：向文件首翻一屏；\nEsc：从编辑模式切换到命令模式；\nZZ：命令模式下保存当前文件所做的修改后退出vi；\n:行号：光标跳转到指定行的行首；\n:$：光标跳转到最后一行的行首；\nx或X：删除一个字符，x删除光标后的，而X删除光标前的；\nD：删除从当前光标到光标所在行尾的全部字符；\ndd：删除光标行正行内容；\nndd：删除当前行及其后n-1行；\nnyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；\np：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；\nP：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；\n/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；\n？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；\na，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；\na：在当前字符后添加文本；\nA：在行末添加文本；\ni：在当前字符前插入文本；\nI：在行首插入文本；\no：在当前行后面插入一空行；\nO：在当前行前面插入一空行；\n:wq：在命令模式下，执行存盘退出操作；\n:w：在命令模式下，执行存盘操作；\n:w！：在命令模式下，执行强制存盘操作；\n:q：在命令模式下，执行退出vi操作；\n:q！：在命令模式下，执行强制退出vi操作；\n:e文件名：在命令模式下，打开并编辑指定名称的文件；\n:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；\n:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；\n:set number：在命令模式下，用于在最左端显示行号；\n:set nonumber：在命令模式下，用于在最左端不显示行号；\n\n12345678910111213141516171819202122232425262728293031323334\n```\n\n------\n\n#### **② vim快速替换文本**\n\n语法如下：\n\n```\n:[addr]s/源字符串/目的字符串/[option]\n1\n```\n\n全局替换命令：\n\n```\n:%s/源字符串/目的字符串/g\n1\n```\n\n`s `表示替换操作,`[addr]` 表示检索范围，省略时表示当前行，如下实例：\n\n```\n\"1,20\" ：表示从第1行到20行；\n\"%\"：表示整个文件，同\"1,$\"；\n\". ,$\" ：从当前行到文件尾；\n123\n```\n\n`[option] :` 表示操作类型:\n\n```\ng 表示全局替换; \nc 表示进行确认\np 表示替代结果逐行显示（Ctrl + L恢复屏幕）;\n123\n```\n\n省略option时仅对每行第一个匹配串进行替换;如果在源字符串和目的字符串中出现特殊字符，需要用”\\”转义 如 \\t。\n\n------\n\n#### **③ 撤销与恢复**\n\n撤销快捷键为u,在窗口模式下按u则会撤销上一步操作。\n\n恢复撤销：Ctrl + r\n\n#### ④ 搜索与取消高亮\n\n正常模式下，使用`/`会对输入的字符进行全局搜索并高亮显示：\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/663719734ceeaf96befe4d25c25315b1.png)\n这时使用n会跳到下一个匹配的字符处。但是关闭文件重新打开仍旧提示高亮，如何取消呢？命令模式下使用`:noh`命令，如下所示：\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/8fa17c55ea723b772408a7205b49752f.png)\n\n#### vim显示行号\n\n命令行模式下（esc进入命令行模式），使用如下命令,然后回车\n\n```sql\n:set number\n1\n```","source":"_posts/【1】VI与VIM区别.md","raw":"---\ntitle: 【1】VI与VIM区别\ndate: 2024-10-30T20:22:47.009Z\ntags: []\ncategories: []\n---\n### **【1】VI与VIM区别**\n\n它们都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。\n\n**vim的这些优势主要体现在以下几个方面：**\n\n① 多级撤消\n\n我们知道在vi里，按 u只能撤消上次命令，而在vim里可以无限制的撤消。\n\n② 易用性\n\nvi只能运行于unix中，而vim不仅可以运行于unix,windows ,mac等多操作平台。\n\n③ 语法加亮\n\nvim可以用不同的颜色来加亮你的代码。\n\n④ 可视化操作\n\n就是说vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。\n\n⑤ 对vi的完全兼容\n\n某些情况下，你可以把vim当成vi来使用。\n\nvi和vim都是Linux中的编辑器，不同的是vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding。\n\n------\n\n### **【2】VI命令**\n\n#### **vi有3个模式**\n\n- 命令行模式 （command mode/一般模式）\n- 文本输入模式 （input mode/编辑模式）\n- 末行模式 （last line mode/指令列命令模式）。\n\n#### **① 命令行模式 （command mode/一般模式）**\n\n任何时候，不管用户处于何种模式，只要按一下“ESC”键，即可使Vi进入命令行模式。我们在shell环境（提示符为$）下输入启动Vi命令，进入编辑器时，也是处于该模式下。\n　　\n在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。\n\n------\n\n#### **② 文本输入模式 （input mode/编辑模式）**\n\n在命令模式下输入插入命令i(insert)、附加命令a(append)、打开命令o(open)、修改命令c(change)、取代命令r或替换命令s都可以进入文本输入模式。\n\n在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按\"ESC\"键即可。\n\n------\n\n#### **③ 末行模式 （last line mode/指令列命令模式）**\n\n末行模式也称ex转义模式。\n\nVi和Ex编辑器的功能是相同的，二者主要区别是用户界面。\n\n在Vi中，命令通常是单个键，例如i、a、o等；而在Ex中，命令是以按回车键结束的正文行。Vi有一个专门的“转义”命令，可访问很多面向行的Ex命令。\n\n在命令模式下，用户按`“:”`键即可进入末行模式下，此时Vi会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个`“:”`作为末行模式的提示符，等待用户输入命令。\n\n多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。末行命令执行完后，Vi自动回到命令模式。\n\n------\n\n### **【3】VIM命令**\n\n#### **vim一共有4个模式：**\n\n1. 正常模式 (Normal-mode)\n2. 插入模式 (Insert-mode)\n3. 命令模式 (Command-mode)\n4. 可视模式 (Visual-mode)\n\n------\n\n#### **① 正常模式**\n\n启动vim后默认处于正常模式。不论位于什么模式，按下`<Esc>`键(有时需要按两下）都会进入正常模式。\n\n#### **② 插入模式**\n\n在正常模式中按下i, I, a, A等键，会进入插入模式。\n\n现在只用记住按`i`键会进行插入模式。在插入模式中，击键时会写入相应的字符。\n\n#### **③ 命令模式**\n\n在正常模式中，按下`:`（英文冒号）键，会进入命令模式。\n\n在命令模式中可以执行一些输入并执行一些vim或插件提供的指令，就像在shell里一样。这些指令包括设置环境、文件操作、调用某个功能等等。\n\n常用的命令有：q（退出）、q!（强制退出）、w（保存）、wq（保存并退出）。\n\n#### **④ 可视模式**\n\n在正常模式中按下v, V, `<Ctrl>+v`，可以进入可视模式。\n\n可视模式中的操作有点像拿鼠标进行操作，选择文本的时候有一种鼠标选择的即视感，有时候会很方便。\n\n------\n\n#### **打开文件、保存、关闭文件(vim命令模式下使用)**\n\n命令的使用请先按ESC进入命令模式！\n\n```\nvim filename        //打开filename文件 \n\n:w     \t            //保存文件 \n:w vpser.net       //保存至vpser.net文件 \n:q                //退出编辑器，如果文件已修改请使用下面的命令 \n:q!              //退出编辑器，且不保存 \n:wq            //退出编辑器，且保存文件 \n:x\t\t\t  //退出编辑器，且保存文件 \n12345678\n```\n\n修改：Insert键\n\n------\n\n**插入文本或行(vim命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)**\n\n```\na        //在当前光标位置的右边添加文本 \ni       //在当前光标位置的左边添加文本 \nA       //在当前行的末尾位置添加文本 \nI      //在当前行的开始处添加文本(非空字符的行首) \nO      //在当前行的上面新建一行 \no     //在当前行的下面新建一行 \nR     //替换(覆盖)当前光标位置及后面的若干文本 \nJ    //合并光标所在行及下一行为一行(依然在命令模式) \n12345678\n```\n\n------\n\n#### **⑤ VIM下解决文本格式问题**\n\n脚本文件保存时使用了DOS格式，Linux中可能会看到这样的错误：`/bin/sh^M：损坏的解释器: 没有那个文件或目录`\n\n使用[VIM命令](https://so.csdn.net/so/search?q=VIM命令&spm=1001.2101.3001.7020)，进入命令行模式，执行如下操作即可。\n\n```\n:set ff=unix\n:wq\n12\n```\n\n------\n\n### **【4】VIM快捷键使用**\n\n#### **① 删除光标当前行**\n\n正常模式下使用`dd`命令。\n\n**其他快捷键操作参考如下：**\n\n```\nCtrl+u：向文件首翻半屏；\nCtrl+d：向文件尾翻半屏；\nCtrl+f：向文件尾翻一屏；\nCtrl+b：向文件首翻一屏；\nEsc：从编辑模式切换到命令模式；\nZZ：命令模式下保存当前文件所做的修改后退出vi；\n:行号：光标跳转到指定行的行首；\n:$：光标跳转到最后一行的行首；\nx或X：删除一个字符，x删除光标后的，而X删除光标前的；\nD：删除从当前光标到光标所在行尾的全部字符；\ndd：删除光标行正行内容；\nndd：删除当前行及其后n-1行；\nnyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；\np：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；\nP：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；\n/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；\n？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；\na，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；\na：在当前字符后添加文本；\nA：在行末添加文本；\ni：在当前字符前插入文本；\nI：在行首插入文本；\no：在当前行后面插入一空行；\nO：在当前行前面插入一空行；\n:wq：在命令模式下，执行存盘退出操作；\n:w：在命令模式下，执行存盘操作；\n:w！：在命令模式下，执行强制存盘操作；\n:q：在命令模式下，执行退出vi操作；\n:q！：在命令模式下，执行强制退出vi操作；\n:e文件名：在命令模式下，打开并编辑指定名称的文件；\n:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；\n:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；\n:set number：在命令模式下，用于在最左端显示行号；\n:set nonumber：在命令模式下，用于在最左端不显示行号；\n\n12345678910111213141516171819202122232425262728293031323334\n```\n\n------\n\n#### **② vim快速替换文本**\n\n语法如下：\n\n```\n:[addr]s/源字符串/目的字符串/[option]\n1\n```\n\n全局替换命令：\n\n```\n:%s/源字符串/目的字符串/g\n1\n```\n\n`s `表示替换操作,`[addr]` 表示检索范围，省略时表示当前行，如下实例：\n\n```\n\"1,20\" ：表示从第1行到20行；\n\"%\"：表示整个文件，同\"1,$\"；\n\". ,$\" ：从当前行到文件尾；\n123\n```\n\n`[option] :` 表示操作类型:\n\n```\ng 表示全局替换; \nc 表示进行确认\np 表示替代结果逐行显示（Ctrl + L恢复屏幕）;\n123\n```\n\n省略option时仅对每行第一个匹配串进行替换;如果在源字符串和目的字符串中出现特殊字符，需要用”\\”转义 如 \\t。\n\n------\n\n#### **③ 撤销与恢复**\n\n撤销快捷键为u,在窗口模式下按u则会撤销上一步操作。\n\n恢复撤销：Ctrl + r\n\n#### ④ 搜索与取消高亮\n\n正常模式下，使用`/`会对输入的字符进行全局搜索并高亮显示：\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/663719734ceeaf96befe4d25c25315b1.png)\n这时使用n会跳到下一个匹配的字符处。但是关闭文件重新打开仍旧提示高亮，如何取消呢？命令模式下使用`:noh`命令，如下所示：\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/8fa17c55ea723b772408a7205b49752f.png)\n\n#### vim显示行号\n\n命令行模式下（esc进入命令行模式），使用如下命令,然后回车\n\n```sql\n:set number\n1\n```","slug":"【1】VI与VIM区别","published":1,"updated":"2024-11-25T11:44:04.648Z","comments":1,"layout":"post","photos":[],"_id":"cm3wymsey003gmbs6c3ugc7qg","content":"<h3 id=\"【1】VI与VIM区别\"><a href=\"#【1】VI与VIM区别\" class=\"headerlink\" title=\"【1】VI与VIM区别\"></a><strong>【1】VI与VIM区别</strong></h3><p>它们都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。</p>\n<p><strong>vim的这些优势主要体现在以下几个方面：</strong></p>\n<p>① 多级撤消</p>\n<p>我们知道在vi里，按 u只能撤消上次命令，而在vim里可以无限制的撤消。</p>\n<p>② 易用性</p>\n<p>vi只能运行于unix中，而vim不仅可以运行于unix,windows ,mac等多操作平台。</p>\n<p>③ 语法加亮</p>\n<p>vim可以用不同的颜色来加亮你的代码。</p>\n<p>④ 可视化操作</p>\n<p>就是说vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。</p>\n<p>⑤ 对vi的完全兼容</p>\n<p>某些情况下，你可以把vim当成vi来使用。</p>\n<p>vi和vim都是Linux中的编辑器，不同的是vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding。</p>\n<hr>\n<h3 id=\"【2】VI命令\"><a href=\"#【2】VI命令\" class=\"headerlink\" title=\"【2】VI命令\"></a><strong>【2】VI命令</strong></h3><h4 id=\"vi有3个模式\"><a href=\"#vi有3个模式\" class=\"headerlink\" title=\"vi有3个模式\"></a><strong>vi有3个模式</strong></h4><ul>\n<li>命令行模式 （command mode&#x2F;一般模式）</li>\n<li>文本输入模式 （input mode&#x2F;编辑模式）</li>\n<li>末行模式 （last line mode&#x2F;指令列命令模式）。</li>\n</ul>\n<h4 id=\"①-命令行模式-（command-mode-一般模式）\"><a href=\"#①-命令行模式-（command-mode-一般模式）\" class=\"headerlink\" title=\"① 命令行模式 （command mode&#x2F;一般模式）\"></a><strong>① 命令行模式 （command mode&#x2F;一般模式）</strong></h4><p>任何时候，不管用户处于何种模式，只要按一下“ESC”键，即可使Vi进入命令行模式。我们在shell环境（提示符为$）下输入启动Vi命令，进入编辑器时，也是处于该模式下。<br>　　<br>在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。</p>\n<hr>\n<h4 id=\"②-文本输入模式-（input-mode-编辑模式）\"><a href=\"#②-文本输入模式-（input-mode-编辑模式）\" class=\"headerlink\" title=\"② 文本输入模式 （input mode&#x2F;编辑模式）\"></a><strong>② 文本输入模式 （input mode&#x2F;编辑模式）</strong></h4><p>在命令模式下输入插入命令i(insert)、附加命令a(append)、打开命令o(open)、修改命令c(change)、取代命令r或替换命令s都可以进入文本输入模式。</p>\n<p>在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按”ESC”键即可。</p>\n<hr>\n<h4 id=\"③-末行模式-（last-line-mode-指令列命令模式）\"><a href=\"#③-末行模式-（last-line-mode-指令列命令模式）\" class=\"headerlink\" title=\"③ 末行模式 （last line mode&#x2F;指令列命令模式）\"></a><strong>③ 末行模式 （last line mode&#x2F;指令列命令模式）</strong></h4><p>末行模式也称ex转义模式。</p>\n<p>Vi和Ex编辑器的功能是相同的，二者主要区别是用户界面。</p>\n<p>在Vi中，命令通常是单个键，例如i、a、o等；而在Ex中，命令是以按回车键结束的正文行。Vi有一个专门的“转义”命令，可访问很多面向行的Ex命令。</p>\n<p>在命令模式下，用户按<code>“:”</code>键即可进入末行模式下，此时Vi会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个<code>“:”</code>作为末行模式的提示符，等待用户输入命令。</p>\n<p>多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。末行命令执行完后，Vi自动回到命令模式。</p>\n<hr>\n<h3 id=\"【3】VIM命令\"><a href=\"#【3】VIM命令\" class=\"headerlink\" title=\"【3】VIM命令\"></a><strong>【3】VIM命令</strong></h3><h4 id=\"vim一共有4个模式：\"><a href=\"#vim一共有4个模式：\" class=\"headerlink\" title=\"vim一共有4个模式：\"></a><strong>vim一共有4个模式：</strong></h4><ol>\n<li>正常模式 (Normal-mode)</li>\n<li>插入模式 (Insert-mode)</li>\n<li>命令模式 (Command-mode)</li>\n<li>可视模式 (Visual-mode)</li>\n</ol>\n<hr>\n<h4 id=\"①-正常模式\"><a href=\"#①-正常模式\" class=\"headerlink\" title=\"① 正常模式\"></a><strong>① 正常模式</strong></h4><p>启动vim后默认处于正常模式。不论位于什么模式，按下<code>&lt;Esc&gt;</code>键(有时需要按两下）都会进入正常模式。</p>\n<h4 id=\"②-插入模式\"><a href=\"#②-插入模式\" class=\"headerlink\" title=\"② 插入模式\"></a><strong>② 插入模式</strong></h4><p>在正常模式中按下i, I, a, A等键，会进入插入模式。</p>\n<p>现在只用记住按<code>i</code>键会进行插入模式。在插入模式中，击键时会写入相应的字符。</p>\n<h4 id=\"③-命令模式\"><a href=\"#③-命令模式\" class=\"headerlink\" title=\"③ 命令模式\"></a><strong>③ 命令模式</strong></h4><p>在正常模式中，按下<code>:</code>（英文冒号）键，会进入命令模式。</p>\n<p>在命令模式中可以执行一些输入并执行一些vim或插件提供的指令，就像在shell里一样。这些指令包括设置环境、文件操作、调用某个功能等等。</p>\n<p>常用的命令有：q（退出）、q!（强制退出）、w（保存）、wq（保存并退出）。</p>\n<h4 id=\"④-可视模式\"><a href=\"#④-可视模式\" class=\"headerlink\" title=\"④ 可视模式\"></a><strong>④ 可视模式</strong></h4><p>在正常模式中按下v, V, <code>&lt;Ctrl&gt;+v</code>，可以进入可视模式。</p>\n<p>可视模式中的操作有点像拿鼠标进行操作，选择文本的时候有一种鼠标选择的即视感，有时候会很方便。</p>\n<hr>\n<h4 id=\"打开文件、保存、关闭文件-vim命令模式下使用\"><a href=\"#打开文件、保存、关闭文件-vim命令模式下使用\" class=\"headerlink\" title=\"打开文件、保存、关闭文件(vim命令模式下使用)\"></a><strong>打开文件、保存、关闭文件(vim命令模式下使用)</strong></h4><p>命令的使用请先按ESC进入命令模式！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim filename        //打开filename文件 </span><br><span class=\"line\"></span><br><span class=\"line\">:w     \t            //保存文件 </span><br><span class=\"line\">:w vpser.net       //保存至vpser.net文件 </span><br><span class=\"line\">:q                //退出编辑器，如果文件已修改请使用下面的命令 </span><br><span class=\"line\">:q!              //退出编辑器，且不保存 </span><br><span class=\"line\">:wq            //退出编辑器，且保存文件 </span><br><span class=\"line\">:x\t\t\t  //退出编辑器，且保存文件 </span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n\n<p>修改：Insert键</p>\n<hr>\n<p><strong>插入文本或行(vim命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a        //在当前光标位置的右边添加文本 </span><br><span class=\"line\">i       //在当前光标位置的左边添加文本 </span><br><span class=\"line\">A       //在当前行的末尾位置添加文本 </span><br><span class=\"line\">I      //在当前行的开始处添加文本(非空字符的行首) </span><br><span class=\"line\">O      //在当前行的上面新建一行 </span><br><span class=\"line\">o     //在当前行的下面新建一行 </span><br><span class=\"line\">R     //替换(覆盖)当前光标位置及后面的若干文本 </span><br><span class=\"line\">J    //合并光标所在行及下一行为一行(依然在命令模式) </span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"⑤-VIM下解决文本格式问题\"><a href=\"#⑤-VIM下解决文本格式问题\" class=\"headerlink\" title=\"⑤ VIM下解决文本格式问题\"></a><strong>⑤ VIM下解决文本格式问题</strong></h4><p>脚本文件保存时使用了DOS格式，Linux中可能会看到这样的错误：<code>/bin/sh^M：损坏的解释器: 没有那个文件或目录</code></p>\n<p>使用<a href=\"https://so.csdn.net/so/search?q=VIM%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020\">VIM命令</a>，进入命令行模式，执行如下操作即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ff=unix</span><br><span class=\"line\">:wq</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"【4】VIM快捷键使用\"><a href=\"#【4】VIM快捷键使用\" class=\"headerlink\" title=\"【4】VIM快捷键使用\"></a><strong>【4】VIM快捷键使用</strong></h3><h4 id=\"①-删除光标当前行\"><a href=\"#①-删除光标当前行\" class=\"headerlink\" title=\"① 删除光标当前行\"></a><strong>① 删除光标当前行</strong></h4><p>正常模式下使用<code>dd</code>命令。</p>\n<p><strong>其他快捷键操作参考如下：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+u：向文件首翻半屏；</span><br><span class=\"line\">Ctrl+d：向文件尾翻半屏；</span><br><span class=\"line\">Ctrl+f：向文件尾翻一屏；</span><br><span class=\"line\">Ctrl+b：向文件首翻一屏；</span><br><span class=\"line\">Esc：从编辑模式切换到命令模式；</span><br><span class=\"line\">ZZ：命令模式下保存当前文件所做的修改后退出vi；</span><br><span class=\"line\">:行号：光标跳转到指定行的行首；</span><br><span class=\"line\">:$：光标跳转到最后一行的行首；</span><br><span class=\"line\">x或X：删除一个字符，x删除光标后的，而X删除光标前的；</span><br><span class=\"line\">D：删除从当前光标到光标所在行尾的全部字符；</span><br><span class=\"line\">dd：删除光标行正行内容；</span><br><span class=\"line\">ndd：删除当前行及其后n-1行；</span><br><span class=\"line\">nyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；</span><br><span class=\"line\">p：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；</span><br><span class=\"line\">P：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；</span><br><span class=\"line\">/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">a，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；</span><br><span class=\"line\">a：在当前字符后添加文本；</span><br><span class=\"line\">A：在行末添加文本；</span><br><span class=\"line\">i：在当前字符前插入文本；</span><br><span class=\"line\">I：在行首插入文本；</span><br><span class=\"line\">o：在当前行后面插入一空行；</span><br><span class=\"line\">O：在当前行前面插入一空行；</span><br><span class=\"line\">:wq：在命令模式下，执行存盘退出操作；</span><br><span class=\"line\">:w：在命令模式下，执行存盘操作；</span><br><span class=\"line\">:w！：在命令模式下，执行强制存盘操作；</span><br><span class=\"line\">:q：在命令模式下，执行退出vi操作；</span><br><span class=\"line\">:q！：在命令模式下，执行强制退出vi操作；</span><br><span class=\"line\">:e文件名：在命令模式下，打开并编辑指定名称的文件；</span><br><span class=\"line\">:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；</span><br><span class=\"line\">:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；</span><br><span class=\"line\">:set number：在命令模式下，用于在最左端显示行号；</span><br><span class=\"line\">:set nonumber：在命令模式下，用于在最左端不显示行号；</span><br><span class=\"line\"></span><br><span class=\"line\">12345678910111213141516171819202122232425262728293031323334</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"②-vim快速替换文本\"><a href=\"#②-vim快速替换文本\" class=\"headerlink\" title=\"② vim快速替换文本\"></a><strong>② vim快速替换文本</strong></h4><p>语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:[addr]s/源字符串/目的字符串/[option]</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>全局替换命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/源字符串/目的字符串/g</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p><code>s </code>表示替换操作,<code>[addr]</code> 表示检索范围，省略时表示当前行，如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;1,20&quot; ：表示从第1行到20行；</span><br><span class=\"line\">&quot;%&quot;：表示整个文件，同&quot;1,$&quot;；</span><br><span class=\"line\">&quot;. ,$&quot; ：从当前行到文件尾；</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p><code>[option] :</code> 表示操作类型:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g 表示全局替换; </span><br><span class=\"line\">c 表示进行确认</span><br><span class=\"line\">p 表示替代结果逐行显示（Ctrl + L恢复屏幕）;</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>省略option时仅对每行第一个匹配串进行替换;如果在源字符串和目的字符串中出现特殊字符，需要用”\\”转义 如 \\t。</p>\n<hr>\n<h4 id=\"③-撤销与恢复\"><a href=\"#③-撤销与恢复\" class=\"headerlink\" title=\"③ 撤销与恢复\"></a><strong>③ 撤销与恢复</strong></h4><p>撤销快捷键为u,在窗口模式下按u则会撤销上一步操作。</p>\n<p>恢复撤销：Ctrl + r</p>\n<h4 id=\"④-搜索与取消高亮\"><a href=\"#④-搜索与取消高亮\" class=\"headerlink\" title=\"④ 搜索与取消高亮\"></a>④ 搜索与取消高亮</h4><p>正常模式下，使用<code>/</code>会对输入的字符进行全局搜索并高亮显示：<br><img src=\"https://i-blog.csdnimg.cn/blog_migrate/663719734ceeaf96befe4d25c25315b1.png\" alt=\"在这里插入图片描述\"><br>这时使用n会跳到下一个匹配的字符处。但是关闭文件重新打开仍旧提示高亮，如何取消呢？命令模式下使用<code>:noh</code>命令，如下所示：<br><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8fa17c55ea723b772408a7205b49752f.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"vim显示行号\"><a href=\"#vim显示行号\" class=\"headerlink\" title=\"vim显示行号\"></a>vim显示行号</h4><p>命令行模式下（esc进入命令行模式），使用如下命令,然后回车</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">set</span> number</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"【1】VI与VIM区别\"><a href=\"#【1】VI与VIM区别\" class=\"headerlink\" title=\"【1】VI与VIM区别\"></a><strong>【1】VI与VIM区别</strong></h3><p>它们都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。</p>\n<p><strong>vim的这些优势主要体现在以下几个方面：</strong></p>\n<p>① 多级撤消</p>\n<p>我们知道在vi里，按 u只能撤消上次命令，而在vim里可以无限制的撤消。</p>\n<p>② 易用性</p>\n<p>vi只能运行于unix中，而vim不仅可以运行于unix,windows ,mac等多操作平台。</p>\n<p>③ 语法加亮</p>\n<p>vim可以用不同的颜色来加亮你的代码。</p>\n<p>④ 可视化操作</p>\n<p>就是说vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。</p>\n<p>⑤ 对vi的完全兼容</p>\n<p>某些情况下，你可以把vim当成vi来使用。</p>\n<p>vi和vim都是Linux中的编辑器，不同的是vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding。</p>\n<hr>\n<h3 id=\"【2】VI命令\"><a href=\"#【2】VI命令\" class=\"headerlink\" title=\"【2】VI命令\"></a><strong>【2】VI命令</strong></h3><h4 id=\"vi有3个模式\"><a href=\"#vi有3个模式\" class=\"headerlink\" title=\"vi有3个模式\"></a><strong>vi有3个模式</strong></h4><ul>\n<li>命令行模式 （command mode&#x2F;一般模式）</li>\n<li>文本输入模式 （input mode&#x2F;编辑模式）</li>\n<li>末行模式 （last line mode&#x2F;指令列命令模式）。</li>\n</ul>\n<h4 id=\"①-命令行模式-（command-mode-一般模式）\"><a href=\"#①-命令行模式-（command-mode-一般模式）\" class=\"headerlink\" title=\"① 命令行模式 （command mode&#x2F;一般模式）\"></a><strong>① 命令行模式 （command mode&#x2F;一般模式）</strong></h4><p>任何时候，不管用户处于何种模式，只要按一下“ESC”键，即可使Vi进入命令行模式。我们在shell环境（提示符为$）下输入启动Vi命令，进入编辑器时，也是处于该模式下。<br>　　<br>在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。</p>\n<hr>\n<h4 id=\"②-文本输入模式-（input-mode-编辑模式）\"><a href=\"#②-文本输入模式-（input-mode-编辑模式）\" class=\"headerlink\" title=\"② 文本输入模式 （input mode&#x2F;编辑模式）\"></a><strong>② 文本输入模式 （input mode&#x2F;编辑模式）</strong></h4><p>在命令模式下输入插入命令i(insert)、附加命令a(append)、打开命令o(open)、修改命令c(change)、取代命令r或替换命令s都可以进入文本输入模式。</p>\n<p>在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按”ESC”键即可。</p>\n<hr>\n<h4 id=\"③-末行模式-（last-line-mode-指令列命令模式）\"><a href=\"#③-末行模式-（last-line-mode-指令列命令模式）\" class=\"headerlink\" title=\"③ 末行模式 （last line mode&#x2F;指令列命令模式）\"></a><strong>③ 末行模式 （last line mode&#x2F;指令列命令模式）</strong></h4><p>末行模式也称ex转义模式。</p>\n<p>Vi和Ex编辑器的功能是相同的，二者主要区别是用户界面。</p>\n<p>在Vi中，命令通常是单个键，例如i、a、o等；而在Ex中，命令是以按回车键结束的正文行。Vi有一个专门的“转义”命令，可访问很多面向行的Ex命令。</p>\n<p>在命令模式下，用户按<code>“:”</code>键即可进入末行模式下，此时Vi会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个<code>“:”</code>作为末行模式的提示符，等待用户输入命令。</p>\n<p>多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。末行命令执行完后，Vi自动回到命令模式。</p>\n<hr>\n<h3 id=\"【3】VIM命令\"><a href=\"#【3】VIM命令\" class=\"headerlink\" title=\"【3】VIM命令\"></a><strong>【3】VIM命令</strong></h3><h4 id=\"vim一共有4个模式：\"><a href=\"#vim一共有4个模式：\" class=\"headerlink\" title=\"vim一共有4个模式：\"></a><strong>vim一共有4个模式：</strong></h4><ol>\n<li>正常模式 (Normal-mode)</li>\n<li>插入模式 (Insert-mode)</li>\n<li>命令模式 (Command-mode)</li>\n<li>可视模式 (Visual-mode)</li>\n</ol>\n<hr>\n<h4 id=\"①-正常模式\"><a href=\"#①-正常模式\" class=\"headerlink\" title=\"① 正常模式\"></a><strong>① 正常模式</strong></h4><p>启动vim后默认处于正常模式。不论位于什么模式，按下<code>&lt;Esc&gt;</code>键(有时需要按两下）都会进入正常模式。</p>\n<h4 id=\"②-插入模式\"><a href=\"#②-插入模式\" class=\"headerlink\" title=\"② 插入模式\"></a><strong>② 插入模式</strong></h4><p>在正常模式中按下i, I, a, A等键，会进入插入模式。</p>\n<p>现在只用记住按<code>i</code>键会进行插入模式。在插入模式中，击键时会写入相应的字符。</p>\n<h4 id=\"③-命令模式\"><a href=\"#③-命令模式\" class=\"headerlink\" title=\"③ 命令模式\"></a><strong>③ 命令模式</strong></h4><p>在正常模式中，按下<code>:</code>（英文冒号）键，会进入命令模式。</p>\n<p>在命令模式中可以执行一些输入并执行一些vim或插件提供的指令，就像在shell里一样。这些指令包括设置环境、文件操作、调用某个功能等等。</p>\n<p>常用的命令有：q（退出）、q!（强制退出）、w（保存）、wq（保存并退出）。</p>\n<h4 id=\"④-可视模式\"><a href=\"#④-可视模式\" class=\"headerlink\" title=\"④ 可视模式\"></a><strong>④ 可视模式</strong></h4><p>在正常模式中按下v, V, <code>&lt;Ctrl&gt;+v</code>，可以进入可视模式。</p>\n<p>可视模式中的操作有点像拿鼠标进行操作，选择文本的时候有一种鼠标选择的即视感，有时候会很方便。</p>\n<hr>\n<h4 id=\"打开文件、保存、关闭文件-vim命令模式下使用\"><a href=\"#打开文件、保存、关闭文件-vim命令模式下使用\" class=\"headerlink\" title=\"打开文件、保存、关闭文件(vim命令模式下使用)\"></a><strong>打开文件、保存、关闭文件(vim命令模式下使用)</strong></h4><p>命令的使用请先按ESC进入命令模式！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim filename        //打开filename文件 </span><br><span class=\"line\"></span><br><span class=\"line\">:w     \t            //保存文件 </span><br><span class=\"line\">:w vpser.net       //保存至vpser.net文件 </span><br><span class=\"line\">:q                //退出编辑器，如果文件已修改请使用下面的命令 </span><br><span class=\"line\">:q!              //退出编辑器，且不保存 </span><br><span class=\"line\">:wq            //退出编辑器，且保存文件 </span><br><span class=\"line\">:x\t\t\t  //退出编辑器，且保存文件 </span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n\n<p>修改：Insert键</p>\n<hr>\n<p><strong>插入文本或行(vim命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a        //在当前光标位置的右边添加文本 </span><br><span class=\"line\">i       //在当前光标位置的左边添加文本 </span><br><span class=\"line\">A       //在当前行的末尾位置添加文本 </span><br><span class=\"line\">I      //在当前行的开始处添加文本(非空字符的行首) </span><br><span class=\"line\">O      //在当前行的上面新建一行 </span><br><span class=\"line\">o     //在当前行的下面新建一行 </span><br><span class=\"line\">R     //替换(覆盖)当前光标位置及后面的若干文本 </span><br><span class=\"line\">J    //合并光标所在行及下一行为一行(依然在命令模式) </span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"⑤-VIM下解决文本格式问题\"><a href=\"#⑤-VIM下解决文本格式问题\" class=\"headerlink\" title=\"⑤ VIM下解决文本格式问题\"></a><strong>⑤ VIM下解决文本格式问题</strong></h4><p>脚本文件保存时使用了DOS格式，Linux中可能会看到这样的错误：<code>/bin/sh^M：损坏的解释器: 没有那个文件或目录</code></p>\n<p>使用<a href=\"https://so.csdn.net/so/search?q=VIM%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020\">VIM命令</a>，进入命令行模式，执行如下操作即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ff=unix</span><br><span class=\"line\">:wq</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"【4】VIM快捷键使用\"><a href=\"#【4】VIM快捷键使用\" class=\"headerlink\" title=\"【4】VIM快捷键使用\"></a><strong>【4】VIM快捷键使用</strong></h3><h4 id=\"①-删除光标当前行\"><a href=\"#①-删除光标当前行\" class=\"headerlink\" title=\"① 删除光标当前行\"></a><strong>① 删除光标当前行</strong></h4><p>正常模式下使用<code>dd</code>命令。</p>\n<p><strong>其他快捷键操作参考如下：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+u：向文件首翻半屏；</span><br><span class=\"line\">Ctrl+d：向文件尾翻半屏；</span><br><span class=\"line\">Ctrl+f：向文件尾翻一屏；</span><br><span class=\"line\">Ctrl+b：向文件首翻一屏；</span><br><span class=\"line\">Esc：从编辑模式切换到命令模式；</span><br><span class=\"line\">ZZ：命令模式下保存当前文件所做的修改后退出vi；</span><br><span class=\"line\">:行号：光标跳转到指定行的行首；</span><br><span class=\"line\">:$：光标跳转到最后一行的行首；</span><br><span class=\"line\">x或X：删除一个字符，x删除光标后的，而X删除光标前的；</span><br><span class=\"line\">D：删除从当前光标到光标所在行尾的全部字符；</span><br><span class=\"line\">dd：删除光标行正行内容；</span><br><span class=\"line\">ndd：删除当前行及其后n-1行；</span><br><span class=\"line\">nyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；</span><br><span class=\"line\">p：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；</span><br><span class=\"line\">P：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；</span><br><span class=\"line\">/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class=\"line\">a，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；</span><br><span class=\"line\">a：在当前字符后添加文本；</span><br><span class=\"line\">A：在行末添加文本；</span><br><span class=\"line\">i：在当前字符前插入文本；</span><br><span class=\"line\">I：在行首插入文本；</span><br><span class=\"line\">o：在当前行后面插入一空行；</span><br><span class=\"line\">O：在当前行前面插入一空行；</span><br><span class=\"line\">:wq：在命令模式下，执行存盘退出操作；</span><br><span class=\"line\">:w：在命令模式下，执行存盘操作；</span><br><span class=\"line\">:w！：在命令模式下，执行强制存盘操作；</span><br><span class=\"line\">:q：在命令模式下，执行退出vi操作；</span><br><span class=\"line\">:q！：在命令模式下，执行强制退出vi操作；</span><br><span class=\"line\">:e文件名：在命令模式下，打开并编辑指定名称的文件；</span><br><span class=\"line\">:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；</span><br><span class=\"line\">:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；</span><br><span class=\"line\">:set number：在命令模式下，用于在最左端显示行号；</span><br><span class=\"line\">:set nonumber：在命令模式下，用于在最左端不显示行号；</span><br><span class=\"line\"></span><br><span class=\"line\">12345678910111213141516171819202122232425262728293031323334</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"②-vim快速替换文本\"><a href=\"#②-vim快速替换文本\" class=\"headerlink\" title=\"② vim快速替换文本\"></a><strong>② vim快速替换文本</strong></h4><p>语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:[addr]s/源字符串/目的字符串/[option]</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>全局替换命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/源字符串/目的字符串/g</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p><code>s </code>表示替换操作,<code>[addr]</code> 表示检索范围，省略时表示当前行，如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;1,20&quot; ：表示从第1行到20行；</span><br><span class=\"line\">&quot;%&quot;：表示整个文件，同&quot;1,$&quot;；</span><br><span class=\"line\">&quot;. ,$&quot; ：从当前行到文件尾；</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p><code>[option] :</code> 表示操作类型:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g 表示全局替换; </span><br><span class=\"line\">c 表示进行确认</span><br><span class=\"line\">p 表示替代结果逐行显示（Ctrl + L恢复屏幕）;</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>省略option时仅对每行第一个匹配串进行替换;如果在源字符串和目的字符串中出现特殊字符，需要用”\\”转义 如 \\t。</p>\n<hr>\n<h4 id=\"③-撤销与恢复\"><a href=\"#③-撤销与恢复\" class=\"headerlink\" title=\"③ 撤销与恢复\"></a><strong>③ 撤销与恢复</strong></h4><p>撤销快捷键为u,在窗口模式下按u则会撤销上一步操作。</p>\n<p>恢复撤销：Ctrl + r</p>\n<h4 id=\"④-搜索与取消高亮\"><a href=\"#④-搜索与取消高亮\" class=\"headerlink\" title=\"④ 搜索与取消高亮\"></a>④ 搜索与取消高亮</h4><p>正常模式下，使用<code>/</code>会对输入的字符进行全局搜索并高亮显示：<br><img src=\"https://i-blog.csdnimg.cn/blog_migrate/663719734ceeaf96befe4d25c25315b1.png\" alt=\"在这里插入图片描述\"><br>这时使用n会跳到下一个匹配的字符处。但是关闭文件重新打开仍旧提示高亮，如何取消呢？命令模式下使用<code>:noh</code>命令，如下所示：<br><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8fa17c55ea723b772408a7205b49752f.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"vim显示行号\"><a href=\"#vim显示行号\" class=\"headerlink\" title=\"vim显示行号\"></a>vim显示行号</h4><p>命令行模式下（esc进入命令行模式），使用如下命令,然后回车</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">set</span> number</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>"},{"title":"测试","date":"2024-11-25T20:15:02.000Z","index_img":"https://static.zkqiang.cn/images/20191231163859.png-cover","_content":"sadmjkaw\n","source":"_posts/测试.md","raw":"---\ntitle: 测试\ndate: 2024-11-26 04:15:02\nindex_img: https://static.zkqiang.cn/images/20191231163859.png-cover\ntags: \n- 123\n- 哈哈\n---\nsadmjkaw\n","slug":"测试","published":1,"updated":"2024-11-25T20:41:50.101Z","_id":"cm3xgvw6t00007qs6dysp5tzf","comments":1,"layout":"post","photos":[],"content":"<p>sadmjkaw</p>\n","excerpt":"","more":"<p>sadmjkaw</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm3xgvw6t00007qs6dysp5tzf","tag_id":"cm3xgy78j00017qs6av8oh5k7","_id":"cm3xgy78l00037qs62ac7clvd"},{"post_id":"cm3xgvw6t00007qs6dysp5tzf","tag_id":"cm3xgy78k00027qs6e75w09cj","_id":"cm3xgy78l00047qs6e65deeeo"}],"Tag":[{"name":"123","_id":"cm3xgy78j00017qs6av8oh5k7"},{"name":"哈哈","_id":"cm3xgy78k00027qs6e75w09cj"}]}}